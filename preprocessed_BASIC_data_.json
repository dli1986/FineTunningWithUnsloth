[
    {
        "name":"D3 Reference Manual overview",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"D3 overview",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"D3 Windows and UNIX differences",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"D3 UNIX unsupported commands",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"D3 Windows unsupported commands",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Commands that function differently in D3 Windows versus UNIX",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"FlashBASIC features that function differently in D3 Windows\nvs. UNIX",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"D3 Windows specific behavior",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Features not supported for D3 Windows",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"VME and FSI differences",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Access Query Language",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Access Query Language overview",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"AQL sentence form",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"AQL command categories",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Default attribute items (Access Query Language)",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Default output specifications",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"File reference (Access Query Language)",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "The left parenthesis is vital\nin this operation. It indicates that the string immediately following\nit (customer, in this case) is to be treated as an alternate file\nname. Without the(character, customer is treated\nas an item-ID and item-ID 100 would subsequently be copied to customer\nin the data section of the entity file.",
            "list entity\nlist dict entity\nlist invoices,archive\nlist dm,,\nlist dm,bp,\nlist dict dm,entity,copy entity \u2019100\u2019to:(customer 120",
            "The(indicates that the copy is to be\ndirected to a different file.",
            "copy entity \u2019100\u2019to:(production.account,entity, \u2019120\u2019"
        ]
    },
    {
        "name":"Item list",
        "Syntax":[
            "Syntax",
            " command file.reference item-ID \n command file.reference item-ID item-ID item-ID...\n command file.reference{*}\n"
        ],
        "description":[
            "The item list specifies one or more item-IDs in the file defined by the associated file reference.",
            "The item list can be:",
            "If a select list is not active, a null item-ID implies a new item for Update processor and all items for the other processors.",
            "Any command requiring a select list can obtain it from a previously selected list. To cause a processor to use the select list, the item list must be null. An item-ID with the same name as a language element in either the master dictionary or the dictionary of the file, must be enclosed in single quotation marks.",
            "When a list is active, item.list is omitted from the (AQL) command:",
            "If a specific list of item-IDs or asterisk is provided while a list is active, the active list is ignored.",
            "If a valid AQL command is provided without a specific list of item-IDs, all items are implied."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "Example 1",
            "This example lists the specific item*a0, from the master dictionary of the\n    current account.",
            "list md '*a0'",
            "Example 2",
            "Since*a0is a valid attribute-defining\nitem (ADI), this sentence produces output showing attribute 0 of every\nitem in the current master dictionary.",
            "list md *a0",
            "Example 3",
            "This sentence requests a specific set of item-IDs from the invoices file and in D3.",
            "list invoices 's1000' 's1010' 's1001'",
            "It is also valid as:",
            "list invoices s1000 s1010 s1001"
        ]
    },
    {
        "name":"Modifiers",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Options (Access Query Language)",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Output specifications",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "This example shows the output.specification is thename,contact, andphone.",
            "list entity name contact phone"
        ]
    },
    {
        "name":"Print limiters",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "In this example, the output.specification is the entire file but displays only those strings that\n                meet the condition.",
            "list entity state = \"ny\" city = \"syracuse\""
        ]
    },
    {
        "name":"Retrieval of items from files",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Selection criteria",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Relational operators and logical clauses",
        "Syntax":"",
        "description":[
            "Description",
            "For example: Relational operators can be used to select a range of zip code values within     specified upper and lower limits. This can be done using gt and      lt, as well as the and relational operator to establish     the selection criteria.",
            "Operators",
            "Clauses"
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "Example 1",
            "sort entity with state eq \"ca\"\n list invoices with amount.due not \"0\"\n list employees with birthday before \"1\/2\/62\"\n list employees with age gt \"21\"\n select entity with no zip\n sort invoices with every amount > \"0\"",
            "Example 2",
            "This example shows two selection clauses connected with anandmodifier,\n    which means that both conditions must be evaluated as true for items to be selected for\n    processing.",
            "list entity with name \"mi]\" and with phone \"804]\"",
            "Example 3",
            "When applying multiple selection criteria clauses against a single attribute value, it is not\n    necessary to build a separate selection criteria phase for each. For example:",
            "list customers with state = \"ca\" or with state = \"az\" or with state = \"va\"",
            "This can also be stated as:",
            "list customers with state \"ca\"\"az\"\"va\""
        ]
    },
    {
        "name":"String searching",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "In this selection criteria, only those items whose name field begins witharare selected.",
            "list entity with name \"ar]\" name",
            "This example shows two selection clauses connected with anand, which means\n    that both conditions must be evaluated as true in order for the items to be selected for\n    processing.",
            "list entity with name \"mi]\" and with phone \"804]\"",
            "This example shows a mutually exclusive set of selection criteria connected with anor. Either condition evaluating to true accepts the item for processing.\n    That is, if the name attribute begins withar, or the city attribute begins\n    withirv, the item is selected for output.",
            "list entity with name \"re]\" or with city \"irv]\" name city",
            "There is virtually no limit to compound selection criteria in an AQL sentence, with the\n    exception of the fact that AQL limits a sentence to a maximum of 9andclauses.",
            "list entity with name \"ar]\" and with city \"irv]\" or with city \"san]\" and with\ncontact \"[joe]\"",
            "Wildcard characters may be used to select item-IDs and attributes based on common characters.\n    Wildcards can be used in selection criteria or complex item-lists as follows:",
            "[Matches characters following the bracket. Ignores\n        characters to the left of the bracket.]Matches characters from the beginning of the string to\n        the bracket. Ignores the characters to the right of the bracket.^Matches any character in the position occupied by the\n        caret.",
            "Retrieves any item containing at least five characters, the first two beginning withsm, followed by any character, and ending withth. This\n    retrieves smith as well as smyth.",
            "select invoices with name = \"[sm^th]\"",
            "Lists entity file items whose name attribute contains a string beginning withi, followed by any character, and ending withm.",
            "list entity with name = \"i^m\"",
            "The example below lists entity items whose name attribute searches for values containing\n    a string beginning withaand followed by two characters. Any two characters\n    following the a meet the selection criteria:",
            "list entity with name = \"a^^\""
        ]
    },
    {
        "name":"Quotation marks",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "The following examples show typical AQL sentences in which\n    quotation marks are not required. Each of these examples uses theyoption,\n    which displays a message defining how the pre-processor interprets the\n     sentence.",
            "Example\n     1",
            "sort sales by date with date >= 1\/1\/04 and <= 12\/31\/04 (y[2393] Assumed '1\/1\/04' is a value used as selection criteria on attribute 'DATE'.\n\n[2393] Assumed '12\/31\/04' is a value used as selection criteria on attribute 'DATE'sort sales by date with date >= \"1\/1\/04\" and <= \"12\/31\/04\"",
            "Example\n     2",
            "This example shows the AQL pre-processor identified one selection clause with two\n    values, and then showed the AQL sentence complete with quotation\n     marks.",
            "list orders 1234 1235 (y[2391] Assumed '1234' is an item-ID, or modifies the item-ID.\n\n[2391] Assumed '1235' is an item-ID, or modifies the item-ID.list orders '1234' '1235'",
            "Example\n     3",
            "This example shows the pre-processor correctly identified two item-IDs, and then\n    showed the AQL sentence including quotation\n    marks.",
            "sort g\/l by-exp balance > 1000.00 (y[2395] '1000.00' is a value used to modify the sort clause on attribute 'BALANCE'.sort g\/l by-exp balance > \"1000.00\"",
            "Example\n    4",
            "This example shows that the pre-processor is able to identify that1000.00is a value used to modify theby-expsort\n    clause.",
            "list g\/l balance > 1000.00 (y[2392] '1000.00' is a print limiter that modifies 'BALANCE'.list g\/l balance > \"1000.00\"",
            "Example\n     5",
            "This example shows the AQL pre-processor identified that the value1000.00is a print limiter modifying the output attributeBALANCE. The sentence lists all items, but only values greater than1000.00are printed for the columnBALANCE.",
            "Note:BALANCEis an output attribute. If the wordwithis included\n    in this sentence, thenBALANCE > 1000.00becomes a selection criterion.",
            "list invoices\nlist dict invoices\nlist only dict invoices\nsort dict invoices by a2 a1 a2\nsort dict invoices with a1 \"a]\" s]\" by ac\nlist-item md = 'list-]'\nsort-item md = 'list-]' heading \"'lc' List items from 'fl'\" (p"
        ]
    },
    {
        "name":"Index utilization in selection criteria",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Sort criteria",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "This example has one sort key.\nIt produces a listing of the entity item-ID andnameattribute sorted by the value of the first name in each entity item.",
            "list entity by name name",
            "This example has three sort keys. First, the data in entity\nis sorted by ascendingstatesequence, then withinstateby ascendingcitysequence, and withincityby ascendingname. The attributes\nlisted in the file's macro or output-macro display.",
            "list entity by state by city by name",
            "This example reverses the normal sort order and sorts\nthe highest values to the top of the list. This is useful for circumstances\nsuch as determining who owes you the most money.",
            "list invoices by-dsnd amount.due"
        ]
    },
    {
        "name":"Temporary attribute items",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "list md with a15 a15"
        ]
    },
    {
        "name":"Throwaway connectives",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "The following example creates new throwaway connectives,displaying,showing, andfield.",
            "copy md a a ato:displaying showing field",
            "After adding the new items, the following sentence is\nnow possible:",
            "sort the customer file showing the name field",
            "where the,file,showing, andfieldare all ignored, but would provide for\na more grammatically correct sentence and is the same as:",
            "sort customer name"
        ]
    },
    {
        "name":"AQL commands",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"check-sum command",
        "Syntax":[
            "Syntax",
            "check-sum file.reference {item.list} {selection.criteria} {modifiers} {(options)}\n"
        ],
        "description":[
            "The check-sum command calculates a hexadecimal checksum for a specified attribute, or the entire item if no attribute is specified, and produces result as a list. The checksum statistics change whenever a file is updated, providing a means to determine if a file has been changed.",
            "When an item list is specified, statistics are calculated only for the selected item-IDs. If not specified, the entire file is used. If an attribute name is specified, statistics are generated only for the attribute name or number specified. If the attribute name is not used, or if the specified attribute number is 9999, the entire item is used. The attribute mark trailing the specified attribute (or item) is included in the statistics.",
            "To use checksum statistics, check-sum all files, or portions of files to be verified and record the output statistics. At a later time, repeat the check-sum process. To\u00a0verify that the files have not changed, manually compare the two checksums."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "check-sum bpByte statistics for : bp\n\u00a0\n\u00a0\n               Total     Average    Maximum     Min\nBytes       =  39546     919.67     8117        13\nValues      =  1614      37.53      320         1\nAttributes  =  1614      37.53      320         1\n#Items      =  43\nChksum      =  EBF3CE55\nBits        =  121447"
        ]
    },
    {
        "name":"count command",
        "Syntax":[
            "Syntax",
            "count file.reference {item.list} {selection.criteria} {modifiers} {(options)}\n"
        ],
        "description":[
            "The count command produces a total of the number of items that meet the selection criteria as determined by the  item.list and  selection.criteria specification."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"hash-test command",
        "Syntax":[
            "Syntax",
            "hash-test file.reference {item.list} {selection.criteria} {(options}\ntest modulo: modulo\n"
        ],
        "description":[
            "The hash-test command produces a histogram, or graphic representation of item-ID distribution within a given file, according to a test modulo provided. The command is useful when performing file reallocation, providing insight into how the item-IDs hash into the file, as well as providing a suggested modulo."
        ],
        "parameter":[
            "Parameter(s)",
            "optionssDisplays the summary statistics only."
        ],
        "example":[
            "Example(s)",
            "hash-test testfiletest modulo: \u00a0 3\nfile= testfile modulo= 3 10:07:24 14 Feb 2003\nframes            bytes    items\n1                 444      1 *>\n1                 772      2 *>>\n1                 1742     2 *>>\n3\nHash-Test\/Istat Statistics\ntotal item count   =    5      byte count =         2958\navg. bytes\/item    =    591.6  avg. items\/group =   1.6\nstd. deviation     =    .5     avg. bytes\/group =   986.0\nsuggested modulo   =    3",
            "This file has three groups, a\ntotal of five items. Each hash mark (>) indicates\nan item."
        ]
    },
    {
        "name":"istat command",
        "Syntax":[
            "Syntax",
            "istat file.reference{item.list} {modifiers} {(options)}\n"
        ],
        "description":[
            "The istat command produces a graphic representation of item-ID distribution within a file and suggests a new modulo. The istat command is equivalent to the hash-test command."
        ],
        "parameter":[
            "Parameter(s)",
            "optionsrProvides additional information about indirect (pointer) items,\nthat are otherwise not accurately reflected by the output.sSuppresses display of histogram; displays summary statistics\nonly."
        ],
        "example":[
            "Example(s)",
            "istat entity (sfile = entity modulo = 11 16:08:40 14 Feb 2004\nframes bytes items\n             11\n             Hash-Test\/Istat Statistics\ntotal item count         =      8      byte count =         2226\navg. bytes\/item          =      270.2  avg. items\/group =   3\nstd. deviation           =      1.0    avg. bytes\/group =   202.3\nsuggested modulo         =      3.0"
        ]
    },
    {
        "name":"list command",
        "Syntax":[
            "Syntax",
            "list file.reference {item.list} {selection.criteria} {modifiers}\n{output.specification} {(options)}\n"
        ],
        "description":[
            "The list command generates formatted output based upon the specified arguments. If an item list is specified, items are listed in order of the item-IDs in the item list. If an item list is not specified, items are listed by the groups into which they hash, and within each group, each item is listed in the order in which it was entered or most recently updated.",
            "The report is either produced in a columnar or a noncolumnar format. This is determined by the total width of all the attribute-defining items requested, plus the width of the item-ID column. If the total of all these ADIs (plus one space between each column) is less than the current device width (defined by the term command), the report is produced in columns. Otherwise, the report goes to the noncolumnar output format."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "This lists the entity file displaying\nthe attributes specified in the file\u2019s macro or output-macro.",
            "list entity",
            "This lists the surname and phone attributes of entity\nitems that contain the textBrownin the surname.\nThe report has headings and footings and is output to the printer\nwithout legends or the number of items message.",
            "list entity with surname \"[Brown]\" name phone heading \"\u2019c\u2019Brown People In Entity\u2019\nlcdxcjpll\u2019\"footing \"\u2019ll\u2019Company Confidential\" ni-supp (pkBrown People In Entity\n                                   Feb 14 2004                    Page 1\nentity....                         name....................       phone.......\n99999                              Browning Joe                   818-555-1212\n                                                                  213-555-1212\n12345                              Brown Sally                    619-555-1212\n                                                                  714-555-1212\n88822                              Albrown Mike                   909-555-1212\n:\nCompany Confidential"
        ]
    },
    {
        "name":"list-item command (Access Query Language)",
        "Syntax":[
            "Syntax",
            "list-item file.reference {item.list} {selection.criteria} {sort.criteria}\n{modifiers} {(options)}\n"
        ],
        "description":[
            "The list-item command displays items in their internally stored format. The list-item command combines the action of the copy command with the selection criteria and format capabilities of the list command. The items are copied to the user\u2019s terminal or to the printer just as the copy command would copy them, with the line numbers on the left margin."
        ],
        "parameter":[
            "Parameter(s)",
            "optionsfStarts display of each item on a new page.sSuppresses listing of attribute (line) numbers.",
            "Note:If by is provided with a command that does not naturally\nsort (such as thelist-itemcommand), the command\nis changed to its sorting counterpart (for example,list-itembecomessort-item,selectbecomessselect, and so on)."
        ],
        "example":[
            "Example(s)",
            "list-item dm,bp, \u2019term-type\u2019 (p"
        ]
    },
    {
        "name":"list-label command",
        "Syntax":[
            "Syntax",
            "list-label file.reference {item.list} {selection.criteria} {output.specification}\n{modifiers} {(options)}\n"
        ],
        "description":[
            "Description",
            "The list-label command produces one or more columns of output.",
            "After pressing ENTER to submit the AQL sentence for processing, a ? prompt displays. This prompt supplies the label output parameters separated by commas:",
            "where",
            "If the  indent parameter is not zero, this command prompts for entry of the header text for each print line requested. If any text is entered at any of these prompts, that text displays before the corresponding print line on the leftmost (1st) column only. Pressing ENTER at any of these prompts indicates a null header.",
            "The labels are printed in the same order as the items display in the file. To change the ordering use the sort-label command.",
            "If problems exist with the formatting of the list-label output, try using the tcl-hdr-off command first and a k option with the list-label command."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "The label parameters shown define\nthe output as having 2 labels across, 4 lines each (contact,company,address, andcsz), skip 1 line, indent 0 (zero - assumes labels are aligned\nat the first print position), 30 print positions each (longer strings\nare truncated to 30, in this case), space over 2 to the right between\neach label, andcfor compress nulls (do not\nallow blank lines within the label).",
            "list-label entity contact company address csz (cip\n? 2,4,1,0,30,2,c"
        ]
    },
    {
        "name":"nselect command",
        "Syntax":[
            "Syntax",
            "nselect file.reference {item.list} {selection.criteria} {output.specification}\n{modifiers}\n"
        ],
        "description":[
            "The nselect command selects items that would fail the selection criteria of a select. When an output list displays in any of the various select sentences, the list is built from the contents of the specified attribute."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "nselect md = \"m]\"",
            "is the same as:",
            "select md # \"m]\"",
            "The next example finds the FlashBASIC programs that did\nnot compile in thebpfile:",
            "select bp[404] 78 items selected out of 78 items.nselect dict bp[404] 3 items selected out of 78 items.",
            "Assume that there are two files with different number\nof items in each. Some item-IDs exist in both files, but not all of\nthem.",
            "First, select the first file, then select the items not\nin the second file:",
            "select file1[404] 767 items selected out of 767 items.nselect file2[404] 323 items selected.",
            "The list contains the items infile1that\nare not infile2."
        ]
    },
    {
        "name":"reformat command",
        "Syntax":[
            "Syntax",
            "reformat file.reference {selection.criteria} {item.list} output.specification\n{modifiers}\nfilename: destination-file|tape\n"
        ],
        "description":[
            "The reformat command takes values from the attributes specified in the command and places them either in another file or to tape in the order in which they are presented.",
            "The specific items to be selected are included in the item list. If no item list is specified, all items in the file are selected in order by the group into which they hash, and within groups, in the order that they were added to the file. The items are written to the new file or tape in the order in which they are selected. The output specification indicate those attributes that are to be selected.",
            "The source item-ID is selected first and becomes the destination item-ID unless id-supp is specified. In that case, the first attribute value becomes the new item-ID. Subsequent attributes are placed in the new item in the order they are specified.",
            "reformat requests the destination  file.reference. To send     the output to a file, enter the file reference. To send the output to magnetic tape, enter the     word tape. To write the output back onto the source file, press Enter.",
            "When a file is reformatted to tape, the values are concatenated and either truncated or padded at the end with nulls (hexadecimal 00) to the record length specified by the most recently executed t-att command. One tape record is written for each item. Item-IDs are printed as items are dumped, unless the id-supp connective or i option is specified.",
            "A tape label, containing the file reference, tape record length in hexadecimal, time, and date, is written on the tape first, unless the hdr-supp or col-hdr-supp connectives (h or c options) are specified. Two end-of-file (eof) marks terminate the tape. Any processing code that refers to a selected attribute is applied before the item is written to the new file or tape."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "This takes all items from the\nentity file and writes them to the entity-new file, using the temporary\nattribute-defining item reference of a0 to use the same item-IDs in\nboth files. The data in entity-new contains the name in attribute\none and the phone number in attribute two.",
            "reformat entity a0 name phoneFile Name:?entity-new"
        ]
    },
    {
        "name":"require.select command",
        "Syntax":[
            "Syntax",
            "list filename require.select"
        ],
        "description":[
            "Description",
            "The require.select command is used with any AQL sentence when you   want to process a select list. ",
            "The require.select AQL connective ensures that a select list is present     before running the TCL command. ",
            "For more information about these commands, refer to the D3 Reference Manual."
        ],
        "parameter":[
            "Parameter(s)",
            "file.nameName of the file containing the select list you are processing."
        ],
        "example":[
            "Example(s)",
            "list payable require.select"
        ]
    },
    {
        "name":"select command",
        "Syntax":[
            "Syntax",
            "select file.reference {item.list} {selection.criteria} {output.specification}\n{modifiers} {(options}\n"
        ],
        "description":[
            "The select command retrieves all items from the specified file reference that meet the optional selection criteria. The items are selected in the order of their appearance in the file reference. The selected item may be saved for future use or acted upon immediately.",
            "When an output list displays in any of the various select sentences, the list is built from the     contents of the specified attribute. If an item list is specified, items are selected in the     order of the item-IDs in the item list. If no item list is specified, all items in the file are     considered. In this case, they display in order by the group into which they hash; and within     groups, in the order they were added to the file.",
            "If output specifications are included, the values of the specified attributes, including empty                 values, are used to form the list. If omitted, the list is formed from the item-IDs.                 The list is a temporary list that is used by the next command as its implicit item                 list. The list can be permanently saved by using the save-list or                     sl command. The list can also be passed to an Output                 processor command or to a FlashBASIC program if the next TCL\u00a0command executes                 that program.",
            "The elements of the list can be used as item-IDs to reference data in any file, not just the file     referenced in the select command. For example, if a select     on one file is followed by a list on a different file, the list of item-IDs generated by the      select are used as an item list in the list command.",
            "output.specification specifies the attribute-defining item from which values                 are to be extracted for creation of the list. (See the example below.) This is                 somewhat similar to using qselect, with the additional provision                 for being able to specify collation order and selection criteria."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "This builds a list of the item-IDs\nthat match the given selection criteria.",
            "select invoices with amount.due > \"0\"",
            "This creates a nonsorted list of the contents of theorder.pointersattribute.\n                For items where theorder.pointersattribute is empty, an empty\n                value will be returned to the select list.",
            "select customers with last.order.amount > \"1000\" order.pointers",
            "This creates a sorted list of all invoices whose item-ID\nbegins with the letter d and with an invoice date on or after January\n1, 2005.",
            "sselect invoices = \u2019d]\u2019 with invoice.date ge \"1\/1\/05\" by date"
        ]
    },
    {
        "name":"sort command",
        "Syntax":[
            "Syntax",
            "sort file.reference {item.list} {selection.criteria} {sort.criteria}\n{modifiers} {output.specification} {print.limiters} {(options)}\n"
        ],
        "description":[
            "The sort command generates sorted and formatted output of selected items and attributes from a specified file. The output produced by sort is identical to the output produced by list when the by modifier is specified. The default sort sequence can be altered by using the ms processing code (see ms (Mask Alter Sort) processing code for more information."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "Prints a list of entity items\nsorted bycompanyandname, whose\nname starts withROCKET. The company and name are\nprinted, and the entity item-ID is not printed.",
            "sort entity by company by name with name \"ROCKET]\" company name id-supp (p"
        ]
    },
    {
        "name":"sort-item command",
        "Syntax":[
            "Syntax",
            "sort-item file.reference {item.list} {selection.criteria} {sort.criteria}\n{modifiers} {(options)}\n"
        ],
        "description":[
            "The sort-item command displays items in their internally stored format, in order of the given sort-key. The sort-item command combines the action of the copy command with the selection criteria and format capabilities of the sort command.",
            "The items are copied to the user\u2019s terminal or to the printer just as the copy command would copy them, with the line numbers on the left margin."
        ],
        "parameter":[
            "Parameter(s)",
            "optionsfStarts display of each item on a new page.sSuppresses listing of attribute (line) numbers."
        ],
        "example":[
            "Example(s)",
            "sort-item dict entity by ac"
        ]
    },
    {
        "name":"sort-label command",
        "Syntax":[
            "Syntax",
            "sort-label file.reference {item.list} {selection.criteria}\n{sort.criteria} {output.specification} {modifiers} {(options)}\n"
        ],
        "description":[
            "Description",
            "The sort-label command produces one or more columns of output in order of the specified sort-key. The sort-label command outputs formatted labels or reports in columnar format from the specified file reference, sequenced by one or more sort-key.",
            "After pressing ENTER to submit the AQL sentence for processing, a ? prompt displays. This prompt supplies the label output parameters:",
            "Each parameter must be separated by a comma. If the indent parameter is not zero, this command prompts for entry of the header text for each print line requested. If any text is entered at any of these prompts, that text displays before the corresponding print line on the leftmost (1st) column only. Pressing ENTER at any of these prompts indicates a null header."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "The label parameters shown define\nthe output as having 2 labels across, 4 lines each (contact,company,address, andcsz), skip 1 line, indent 0 (zero - assumes labels are mounted\nat first print position), 30 print positions each (longer strings\nare truncated to 30, in this case), space over 2 to the right between\neach label, andcforcompressnulls (do not\nallow blank lines within the label).",
            ": sort-label entity by zip contact company address csz (cip\n? 2,4,1,0,30,2,c"
        ]
    },
    {
        "name":"sreformat command",
        "Syntax":[
            "Syntax",
            "sreformat file.reference {item.list} {selection.criteria} {sort.criteria}\n{output.specification} {modifiers} {options}\nfilename: {destination-file|tape}\n"
        ],
        "description":[
            "Description",
            "The sreformat command moves the sorted values from the attributes specified in the AQL sentence and places them either in another file or to tape in the order of the specified sort key (specified in  sort.criteria).",
            "If the targeted attribute is null, the new value is placed there. If the targeted attribute is nonnull, a new value is added to the end of the attribute. To overwrite the attribute in D3, use the o option.",
            "Each entry in the  output.specification becomes an attribute in the destination item, in the same order as in the  output.specification. The source item-ID is selected first and becomes the destination item-ID, unless id-supp (or an i option) is specified. In this case, the first attribute value becomes the new item-ID. Upon execution of this command, the prompt below displays:",
            "Either a file reference that directs the output to the specified file reference, or the literal tape that directs the output to the attached magnetic tape can be entered.",
            "The output specification indicate the attributes that are to be selected. The attributes are written to the new file or tape in the order they are selected.",
            "When a file is reformatted to tape, the values are concatenated and either truncated or padded at the end with nulls (hexadecimal 00) to the record length specified by the most recently executed t-att command. One tape record is written for each item. The item-IDs are printed as items are not printed as the items are transferred.",
            "A tape label containing the file name, tape record length in hexadecimal, time, and date, is written first unless the hdr-supp or col-hdr-supp connectives (h or c\u00a0options) are specified. Two end-of-file (EOF) marks terminate the tape.",
            "Any processing code (or correlative) that refers to a selected attribute is applied before the item is written to the destination file or tape.",
            "sreformat to an existing item produces different results in AP than it does in R83.",
            "If the targeted attribute is null, the new value is placed there. If the targeted attribute is non-null, on R83, the attribute is overwritten. In AP, a new value is added to the end of the attribute. To overwrite the attribute in Advanced PICK, use the o option."
        ],
        "parameter":[
            "Parameter(s)",
            "optionsoOverwrites existing items, when a duplicate item-ID exists."
        ],
        "example":[
            "Example(s)",
            "sreformat sls by region region total amount (dfilename:temp-sales"
        ]
    },
    {
        "name":"sselect command",
        "Syntax":[
            "Syntax",
            "sselect file.reference {item.list} {selection.criteria} {sort.criteria}\n{output.specification} {modifiers}{(option)}\n"
        ],
        "description":[
            "Description",
            "The sselect command creates a sorted list of items from the specified file reference that meet selection criteria.",
            "The list is a temporary list that is used by the next command as its implicit item list. The list can be permanently saved by the save-list command. The list can also be passed to an Output processor command or to a FlashBASIC program if the next TCL command executes that program. When an  output.specification displays in any of the various select sentences, the list is built from the contents of the specified attribute.",
            "The elements of the list may be used as item-IDs to reference data in any file, not just the file referenced in the sselect command. For example, if a sselect on one file is followed by a list on a different file, the list of item-IDs generated by the sselect are used as an item list in the list.",
            "In the special case where the sselect command is used with a by-exp or by-dsnd-exp modifier, the elements of the list are MultiValue, where the first value is the selected data, and the second value is the 3-digit value count. In",
            "FlashBASIC, the two values are retrieved by the use of the readnext ID,vc form of the readnext statement."
        ],
        "parameter":[
            "Parameter(s)",
            "optionsjSuppresses all messages (nitems\nselected, and so on).sActivates a secondary list.qBypasses index selection."
        ],
        "example":[
            "Example(s)",
            "Creates a list of invoice item-IDs\nthat have anamount.due > 0, and which have not made\na payment. The list is sorted by invoice item-ID.",
            "sselect invoices with amount.due > 0 and with no payment",
            "Creates a list of entity names that start with the stringROCKETsorted in name order.",
            "sselect entity by name with name = \"ROCKET]\" name"
        ]
    },
    {
        "name":"stat command",
        "Syntax":[
            "Syntax",
            "stat file.reference {item.list} {selection.criteria} {(options)}\n"
        ],
        "description":[
            "The stat command outputs the total number of items processed and an average value of all items that meet the specified selection criteria."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "stat invoices with date > \"1\/1\/05\" amountTotal = 73970 average = 1946.57 count = 38"
        ]
    },
    {
        "name":"sum command",
        "Syntax":[
            "Syntax",
            "sum file.reference {item.list} attr.name{selection.criteria} {(options)}\n"
        ],
        "description":[
            "The sum command produces a numeric total of a given attribute for all items meeting the optional selection criteria. If an attribute name (attribute name or number) is not specified, the total number of characters in the selected items are calculated. If only the file reference is specified, the total number of characters in the entire file is calculated, including attribute and value marks."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "sum invoices amount (p"
        ]
    },
    {
        "name":"AQL modifiers",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"any modifier",
        "Syntax":[
            "Syntax",
            "with {not} any {operator} {\"value\"}\nif {not} any {operator} {\"value\"}\n"
        ],
        "description":[
            "The any modifier searches an entire item for a match, all attributes and all values. Each value is compared to the selection criteria and if the value passes the criteria, then the item is selected for further processing. This feature is useful for searching nonattribute-oriented files for specific words or phrases, such as word processor documents, source programs, and so on.",
            "The word any may be used to mean any attribute, value, or subvalue in the item. any may be used in selection criteria (with, if), or specified for output. If any is specified for output, it must also be specified in selection criteria. The output of the any attribute definition is any subvalue, value or attribute that passes the selection criteria."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "This selects all entity items\nthat contain the namejohn doe.",
            "select entity with any \"[john doe]\"",
            "This indicates thatanyfound two items\nthat had an attribute, value, or subvalue that exactly matched the\nstringsally. The output of the second any displays\nthe attribute, value, or subvalue number on which the match was found\nas well as the actual data in that field.",
            "list entity with any \"sally\" anyPage 1          entity\n\u00a0\nentity..................................\n332             004         sally\n1234            001         sally"
        ]
    },
    {
        "name":"break-on modifier",
        "Syntax":[
            "Syntax",
            "break-on attr.name{\"{text}{\u2019options\u2019}\"}\n"
        ],
        "description":[
            "The break-on modifier creates a visual break in output data when the value in the current output field is different from the previous value. The break-on modifier groups items in a listing according to the value of the break-on attribute name. The attribute name indicates the attribute on which a break occurs.",
            "During the list or sort operation, a control-break occurs whenever there is a change in the value of the specified attribute. Value comparison is made on a left-to-right, character-by-character basis, with a maximum of the first 24 characters being used in the comparison only.",
            "When a control-break occurs, it prints a line with three asterisks displayed in the break-on attribute column (that is, the attribute whose value has changed, thus causing the break), surrounded by two blank lines. If the optional text string is specified, the processed text string is substituted for the asterisks.",
            "Up to 15 control-breaks may be specified, the hierarchy of the breaks being specified by the sequence of the break-on modifiers in the sentence, the first being the highest level.",
            "For multiple control-breaks, output proceeds from the lowest level break to the highest level. The data associated with the lowest level control-break is printed on the current page (even if the end of the page has been reached). If multiple breaks occur, normal pagination proceeds on the second and subsequent data lines, unless an option prevents this.",
            "Headings and output control options may be specified for control-breaks. A user-generated heading can be specified to be printed in place of the default control break heading (***) by following the break-on attribute name with the desired heading, enclosed in double quotation marks. Within the heading, output control options may be specified, enclosed in single quotation marks. The text, if specified, replaces the default asterisk field (***) in the attribute name column when the control-break printout line occurs.",
            "If the det-supp modifier is specified in the sentence, then the attribute value displays on the break line, unless a text string was specified.",
            "Options are used to modify some of the actions taken at control-break time, and are specified as one or more characters. If options are used without accompanying text, they must be enclosed in single quotation marks within double quotation marks (for example, \"\u2019v\u2019\").",
            "If the total modifier is specified in the sentence, subtotals are also output at each control break, as well as columnar totals. The data associated with the break-on attribute may be suppressed in the detail lines by using a maximum length of zero and the \\ character in the attribute-defining item (line 10 in the attribute-defining item). If suppression of the data associated with the control break is desired at total time, it must be done In generating the value for comparison, correlatives in the attribute-defining item are processed but conversions are not."
        ],
        "parameter":[
            "Parameter(s)",
            "optionsbOutputs the value causing the break in either the heading\nor footing output field where theboption is found\nin the heading or footing option string. It is not necessary to specify\nthis option within more than onebreak-onspecification.dSuppresses the break data line if only one detail line has\nbeen output since the last control break.lSuppresses the blank line preceding the break data line. This\noption is ignored when theuoption is used.nResets the page counter to one on each break.pIssues a form feed (page eject) after the data associated\nwith this break has been output.rInhibits page rollover. Outputs any occurrence of one or more\ncontrol break lines at the end of the page, rather than at the top\nof the next page, thus forcing all the data associated with this break\nto be current on the same page.uUnderlines all total fields.vOutputs the value causing the control break in thebreak-onlabel.\u2019\u2019(Two single quotation marks.) Inserts a single quotation mark\nin text.",
            "CAUTION:",
            "Correlatives containing explicit attribute\nreferences (such asa2(tentity;x;;1)do not work\nas expected at the break line. This is because the entire item is\nnot available at the time the break line is being processed."
        ],
        "example":[
            "Example(s)",
            "list invoices by date break-on date",
            "list sales by salesman break-on salesman \"\u2019bp\u2019\""
        ]
    },
    {
        "name":"by modifier",
        "Syntax":[
            "Syntax",
            "by attr.name{by attr.name...}\n"
        ],
        "description":[
            "The by modifier designates a sort key, in ascending order, and must be followed by an  attr.name. It may be used with any command that lists or selects items, such as list or select."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "list entity by zip",
            "sselect invoices by date by customer",
            "list entity with name = \"[mike]\" by name"
        ]
    },
    {
        "name":"by-dsnd modifier",
        "Syntax":[
            "Syntax",
            "by-dsnd attr.name{by-dsnd attr.name...}\n"
        ],
        "description":[
            "The by-dsnd modifier designates a sort key, in descending order and must be followed by an attribute name. It may be used with any command that lists or selects items, such as list or select."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "list invoices by-dsnd amount.due"
        ]
    },
    {
        "name":"by-exp modifier",
        "Syntax":[
            "Syntax",
            "by-exp attr.name{\"explosion.limiter\"}\n"
        ],
        "description":[
            "The by-exp modifier designates a sort key, in ascending, exploded MultiValue order and must be followed by an attribute name. It may be used with any command that lists or selects items, such as list or select.",
            "The by-exp modifier is used to sort attributes that may contain more than one value. When the by modifier is used on a MultiValue attribute, it only sorts on the first value in the attribute. Further, each item-ID only displays once, assuming that its display is not suppressed.",
            "When the by-exp modifier is used, it explodes each value in the attribute and treats each value as though it were a separate item. Each value sorts into its proper position, and the item-ID displays with each value. In other words, the number of times an item-ID displays on a report coincides to the number of values in the exploded attribute. The explosion limiter specifies that output only occurs on data elements meeting the print limiting criteria."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "list customers by-exp invoice.pointers",
            "list invoices by-exp product = \"widget\"",
            "select fn by-exp pay-date >= \"01\/01\/01\" and <= \"12\/31\/01\""
        ]
    },
    {
        "name":"by-exp-dsnd modifier",
        "Syntax":[
            "Syntax",
            "by-exp-dsnd attr.name{\"explosion limiter\"}\n"
        ],
        "description":[
            "The -by-exp-dsnd modifier is followed by an attribute name that references a MultiValue attribute to be used individually as sort keys in descending order.",
            "The by-exp-dsnd modifier is also used to sort attributes that may contain more than one value. When the by modifier is used on a MultiValue attribute, it only sorts proper position, and the item-ID displays with each value. Further, each item-ID only displays once, assuming that its display is not suppressed.",
            "When the by-exp-dsnd modifier is used, it explodes each value in the attribute and treats each value as though it were a separate item. Each value sorts into its proper position, and the item-ID displays with each value. In other words, the number of times an item-ID displays on a report coincides to the number of values in the exploded attribute.",
            "The explosion limiter specifies that output only occurs on data elements meeting the print limiting criteria. This can be used with any command that lists or selects items, such as list, sort, or select."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "list invoices \u20190001\u2019 quantity.ordered",
            "The above sentence results in the following:",
            "0001   1\n\u00a0\n       6\n\u00a0\n       3",
            "list invoices \u20190001\u2019 by-exp-dsnd quantity.ordered",
            "The above sentence results in the following:",
            "0001   6\n\n0001   3\n\n0001   1"
        ]
    },
    {
        "name":"col-hdr-supp modifier",
        "Syntax":[
            "Syntax",
            "col-hdr-supp\n"
        ],
        "description":[
            "The col-hdr-supp modifier suppresses column heading above output columns and default page heading on AQL reports."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "list entity name address csz col-hdr-supp"
        ]
    },
    {
        "name":"conv modifier",
        "Syntax":[
            "Syntax",
            "ADI conv \"conversion\"\n"
        ],
        "description":[
            "The conv modifier substitutes the conversion codes specified in  conversion for attribute 7 of the specified Attribute-Defining-Item."
        ],
        "parameter":[
            "Parameter(s)",
            "ADISpecifies the Attribute-Defining-Item for which the specifiedconversionwill be substituted for attribute 7.conversionSpecifies the conversion codes to use for performing the conversion.\nThe specifiedconversionmust be enclosed in double-quotes."
        ],
        "example":[
            "Example(s)",
            "The example below illustrates\na typical file, definition, and a couple of sample outputs.",
            ":ct dict subject short.descriptionshort.description\n001 a\n002 1\n003\n004\n005\n006\n007 mct\n008\n009 l\n010 15",
            ":list subject a1Page \u00a0\u00a01 \u00a0\u00a0\u00a0\u00a0subject \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a016:06:27 16 Nov 2009\n\u00a0\n\u00a0\nsubject........ a1................................................\n\u00a0\u00a0\nreadin                   how to read\nwritin                   how to rite\nrithmetic                how to cipher\n\u00a0\n[405] 3 items listed out of 3 items.",
            ":list subject short.descriptionPage \u00a0\u00a01 \u00a0\u00a0\u00a0\u00a0subject \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a016:06:36 16 Nov 2009\n\u00a0\n\u00a0\nsubject........ short.description\n\u00a0\nreadin                   how to read\nwritin                   how to rite\nrithmetic                how to cipher\n\u00a0\n[405] 3 items listed out of 3 items.",
            "Suppose we want the description to be all upper-case,\nbut we don't want to modify the dictionary item. This can be achieved\nusing theconvmodifier to override the normal\nconversion. For example:",
            ":list subject short.description conv \"mcu\"Page \u00a0\u00a01 \u00a0\u00a0\u00a0\u00a0subject \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a016:06:43 16 Nov 2009\n\u00a0\u00a0\nsubject........ short.description\n\u00a0\u00a0\nreadin                   HOW TO READ\nwritin                   HOW TO WRITE\nrithmetic                HOW TO CIPHER\n\u00a0\n[405] 3 items listed out of 3 items."
        ]
    },
    {
        "name":"converting-nulls modifier",
        "Syntax":[
            "Syntax",
            "converting-nulls\n"
        ],
        "description":[
            "The converting-nulls modifier allows all values (including nulls) to be processed by the output-conversion. Normally, null values are not processed by the output-conversion so that they do not unnecessarily take up space on a report. However, some output-conversions, such as those that call FlashBASIC subroutines, may need to see each and every value, even if it is null."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "list"
        ]
    },
    {
        "name":"dbl-spc modifier",
        "Syntax":[
            "Syntax",
            "dbl-spc\n"
        ],
        "description":[
            "The dbl-spc modifier double-spaces output by inserting a blank line between items."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "list entity name dbl-spc"
        ]
    },
    {
        "name":"det-supp modifier",
        "Syntax":[
            "Syntax",
            "det-supp\n"
        ],
        "description":[
            "The det-supp modifier suppresses the detail lines in a report. It provides the ability to easily fold detailed information into summary reports and is typically used in conjunction with the total, break-on, and roll-on AQL modifiers."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "list invoices by customer break-on customer total amount det-supp"
        ]
    },
    {
        "name":"dict modifier",
        "Syntax":[
            "Syntax",
            "command dict file.reference {item.list} {selection.criteria} {sort.criteria}\n{output.specifications} {print.limiters} {modifiers} {(options)}\n"
        ],
        "description":[
            "The dict modifier is used immediately preceding a file name and affects the dictionary level of the specified file rather than the data section."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"eval modifier",
        "Syntax":[
            "Syntax",
            "eval \"expression\"\n"
        ],
        "description":[
            "The eval modifier performs the operation specified in the  expression on the specified Attribute-Defining-Items. The expression performed is limited to A-Correlatives (concatenation, addition, subtraction, multiplication and division (:, +, -, *, \/))."
        ],
        "parameter":[
            "Parameter(s)",
            "expressionSpecifies the arithmetic operation to perform on the specified\nAttribute-Defining-Items.The specifiedexpressionmust be enclosed\nin double-quotes.Theoconvs()andtrans()functions can be\nemployed within the expression. Seeoconvs() and trans() Functionsbelow.Parentheses are allowed in the expression. For example:list inventory eval \"(((PRICE - COST)\/COST) * 100)\"",
            "CAUTION:If theevalmodifier is used with an\n                    Attribute-Defining-Item that contains any of the operators (below) in the name,\n                    the Attribute-Defining-Item will not be processed correctly.*\n                        (multiplication)\/ (division)+ (addition)-\n                        (subtraction): (concatenation)"
        ],
        "example":[
            "Example(s)",
            "The example below illustrated\ngenerating three columns:price,costand\"price * cost\".priceandcostare Attribute-Defining-Items in the dict of the inventory\nfile. The data in the\"price * cost\"column will\nbe the product of the data in the previous two columns.",
            "list inventory price cost eval \"price * cost\"",
            "The example below illustrates generating a column with\nthe\"mr2\"conversion applied to the output of\"price * cost\".",
            "list inventory eval \"oconvs(Price * cost,'mr2')\"",
            "The example below illustrates generating a column containing\nthecourse.id, and a second column containing a translate\nof thecourse.idthrough thecrfile,\nwhereshort.titleis an Attribute-Defining-Item in\nthe dict of thecrfile. It specifies which attribute\nof thecritem contains the output text. The'x'is the standard translate parameter that specifies what\nto return if there is no value.",
            ":list fcorr course.id eval \"trans('cr',course.id,short.title,'x')\"Page \u00a0\u00a01 \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0fcorr \u00a011:28:26 19 Aug 2009\n\u00a0\n\u00a0\nfcorr..... course.id. trans('cr',course.id,short.title,'x')\n\u00a0\n\u00a0\n593910          2          writin\n                1          readin\u00a0\n                3          rithmetic\n[405] 1 items listed out of 1 items.",
            "The example below\nillustrates thecritems anddict cr short.titledefinition referenced in the example above.",
            ":ct cr          :ct dict cr short.title\n\u00a0\u00a0\u00a0\u00a0  3               short.title\n001 rithmetic   001 a\n\u00a0\u00a0\u00a0\u00a0  1           002 1\n001 readin      003\n\u00a0\u00a0\u00a0  \u00a02           004\n001 writin      005\n                006\n                007\u00a0\n                008\n                009 1\n                010 10"
        ]
    },
    {
        "name":"every modifier",
        "Syntax":[
            "Syntax",
            "with {not} every attr.name{operator} {\"value\"}\n"
        ],
        "description":[
            "The every modifier forces comparison on every value, rather than any value."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "list invoices with every quantity.ordered > \"200\""
        ]
    },
    {
        "name":"fill modifier",
        "Syntax":[
            "Syntax",
            "fill\n"
        ],
        "description":[
            "The fill modifier forces listings into an across-the-page format if the listing would otherwise be noncolumnar. The headings and values are printed one after another across the page. This has no effect on columnar listings. The equivalent option is r."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "list entity name contact fill"
        ]
    },
    {
        "name":"fmt modifier",
        "Syntax":[
            "Syntax",
            "ADIfmt \"{'< column-heading>'} {< just>} {< width>}\"\n"
        ],
        "description":[
            "The fmt modifier substitutes the column heading, justification and width settings specified in \"{'<column-heading>'} {<just>} {<width>}\" for attributes 3, 9 and 10 of the specified Attribute-Defining-Item."
        ],
        "parameter":[
            "Parameter(s)",
            "ADISpecifies the Attribute-Defining-Item for which the specifiedcolumn-heading,justandwidthwill be substituted for attributes 3, 9 and 10.{'<column-heading>'}Specifies the column heading to substitute for attribute 3.\nThe single quotes are required.{<just>}Specifies the justification to substitute for attribute 9.{<width>}Specifies the width to substitute for attribute 10.",
            "Double quotes are required around the entire heading, justification\nand width specification."
        ],
        "example":[
            "Example(s)",
            "Consider the followingsortoperation:",
            ":sort demo.test by a1 a1Page \u00a0\u00a01 \u00a0\u00a0\u00a0\u00a0demo.test \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a016:17:03 16 Nov 2009\n\u00a0\ndemo.test...... a1....................................................\n\u00a0\n1                         1\n2                         10\n5                         100\n3                         2\n4                         20\n\u00a0\n[405] 5 items listed out of 5 items.",
            "Let's say we want to sort the a1 column numerically instead\nof alphabetically. Thesortoperation illustrated\nbelow accomplishes this:",
            ":sort demo.test by a1 fmt \"r5\" a1Page \u00a0\u00a01 \u00a0\u00a0\u00a0\u00a0demo.test \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a016:19:47 16 Nov 2009\n\u00a0\ndemo.test...... a1....................................................\n\u00a0\n1                         1\n2                         2\n3                         10\n4                         20\n5                         100\n\u00a0\n[405] 5 items listed out of 5 items.",
            "It sorted correctly, but we feel the column width still\nis too wide and the data in the a1 column is still aligned to the\nleft (despite thefmt \"r5\"specification). This is\nbecause thefmtspecification only applies to how\nthe ADI is used for that reference. In this case, we applied it to\na1 only for the sort order. We still need to apply right-justification\nfor bothsortorder and display format, but width\nfor only the display. For example:",
            ":sort demo.test by a1 fmt \"r\" a1 fmt \"r10\"Page \u00a0\u00a01 \u00a0\u00a0\u00a0\u00a0demo.test \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a016:22:50 16 Nov 2009\n\u00a0\ndemo.test...... a1........\n\u00a0\n1                            1\n2                            2\n3                           10\n4                           20\n5                          100\n\u00a0\n[405] 5 items listed out of 5 items.",
            "The example below illustrates running thesortoperation using only a width parameter for the display. In this\ncase, we adjusted thea1output column width, but\nthe default output left justification is unchanged.",
            ":sort demo.test by a1 fmt \"r\" a1 fmt \"20\"Page \u00a0\u00a01 \u00a0\u00a0\u00a0\u00a0demo.test \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a016:28:18 16 Nov 2009\n\u00a0\ndemo.test...... a1..............\n\u00a0\n1                          1\n3                          2\n2                          10\n4                          20\n5                          100\n\u00a0\n[405] 5 items listed out of 5 items.",
            "The following example illustrates listing the number of\norders for the products referenced in the translate statement. Note\nhow the heading for the 2nd column uses the actual translate statement\nas its heading.",
            ":list orders eval\n\"trans(products,productid,productname,'x')\"Page \u00a0\u00a01 \u00a0\u00a0\u00a0\u00a0orders \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a014:37:45 08 Apr 2010\norders.... trans(products,productid,productname,'x')\n\n11           Ninja Graph\n             Ninja Toolbox\n88           Ninja Assist",
            "Let's say that instead of using\nthe translate statement as its heading, we want to instead specify\na more user-presentable heading. The example below employs thefmtmodifier in the statement to allow specifying an alternate\ncolumn heading and a left-justification of 15.",
            ":list orders eval\n\"trans(products,productid,productname,'x')\"\nfmt \"'Product Name'L15\"Page \u00a0\u00a01 \u00a0\u00a0\u00a0\u00a0orders \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a014:37:45 08 Apr 2010\norders.... \u00a0Product Name...\n11           Ninja Graph\n             Ninja Toolbox\n88           Ninja Assist"
        ]
    },
    {
        "name":"footing modifier",
        "Syntax":[
            "Syntax",
            "footing \"{{text} {\u2019options\u2019}...}\"\n"
        ],
        "description":[
            "The footing modifier designates a text string composed of literals and special options to output at the bottom of each page."
        ],
        "parameter":[
            "Parameter(s)",
            "textText to display in the footing.options''Two single quotation marks print one single quotation mark.'attr.name'Inserts the value of the attribute name. Processes any conversion\ncodes, but not correlatives in the attribute-defining item.bInserts the value of the attribute causing the break if theboption has been specified withroll-onorbreak-on.cCenters the output line.dRetrieves the current date (dd mmm yyyy format).f{n}Inserts the file name in a field ofnspaces.jRight-justifies the rest of the line.lIssues a carriage return\/line feed (CR\/LF).nPrevents the pause at the end of each page (such as thenopagemodifier).pRetrieves the current page number, right-justified in a field\nof four spaces.p{n}Retrieves the page number, right-justified in a field ofnspaces. (Defaultn=4).rRetrieves the Roman numeral page number.sToggles on italics mode.tRetrieves the current time and date (hh:mm:ss dd mmm yyyyformat).uToggles on underline mode.vToggles on boldface mode.xcUsed withcto center a segment. Thexcdelimits the end of the segment.xsToggles off italics mode.xuToggles off underline mode.xvToggles off boldface mode."
        ],
        "example":[
            "Example(s)",
            "list entity name phone footing \"\u2019lc\u2019page \u2019p\u2019 printed at\u2019 tlc\u2019this \nend into shredder first\""
        ]
    },
    {
        "name":"grand-total modifier",
        "Syntax":[
            "Syntax",
            "grand-total \"{{text} {\u2019options\u2019}...}\"\n"
        ],
        "description":[
            "The grand-total modifier substitutes a string of text in place of the standard \"***\" literal string normally output on the grand total line. This produces a grand total only in sentences that include the total modifier. Multiple options may be enclosed in the same set of single quotation marks."
        ],
        "parameter":[
            "Parameter(s)",
            "textText to display on thegrand-totalline.options\u2019l\u2019Suppresses the blank line preceding the grand total.\u2019p\u2019Issues a form feed (page eject) before the grand total.\u2019u\u2019Double-underlines all totaled fields.\u2019\u2019(Two single quotations marks.) Inserts a single quotation\nmark in text."
        ],
        "example":[
            "Example(s)",
            "list journal by company by salesman with age > \"120\" amount.due salesman\ncompany total amount.due grand-total \"Total\""
        ]
    },
    {
        "name":"hdr-supp modifier",
        "Syntax":[
            "Syntax",
            "hdr-supp\n"
        ],
        "description":[
            "The hdr-supp modifier suppresses the default page heading (system time\/date and page number) on output."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "list entity hdr-supp phone",
            "list entity phone (h"
        ]
    },
    {
        "name":"heading modifier",
        "Syntax":[
            "Syntax",
            "heading \"{{text} {\u2019options\u2019}...}\"\n"
        ],
        "description":[
            "The heading modifier designates a text string composed of literals and special options to output at the top of each page."
        ],
        "parameter":[
            "Parameter(s)",
            "textText to display in the footing.options''(Two single quotation marks) Outputs (one) single quotation\nmark.\u2018attr.name\u2019'Inserts the value of the attribute name. Processes any conversion\ncodes, but not correlatives in the attribute-defining item.bInserts the value of the attribute causing the break if theboption has been specified withroll-onorbreak-on.cCenters the output line.dRetrieves the current date (dd mmm yyyy format).f{n}Inserts the file name in a field ofnspaces.jRight-justifies the rest of the line.lIssues a CR\/LF.nPrevents the pause at the end of each page (such asnopagemodifier).pRetrieves the current page number, right-justified in a field\nof four spaces.p{n}Retrieves the page number, right-justified in a field ofnspaces (defaultn=4).rRetrieves the Roman numeral page number.sToggles on italics mode.tRetrieves the current time and date (hh:mm:ss dd mmm yyyy\nformat).uToggles on underline mode on a dumb terminal.vToggles on boldface mode on a dumb terminal.xcUsed with thecoption to center a segment.\nThexcdelimits the end of the segment.xsToggles off italics mode on a dumb terminal.xuToggles off underline mode on a dumb terminal.xvToggles off boldface mode on a dumb terminal."
        ],
        "example":[
            "Example(s)",
            "Thisheadingmodifier first issues a line feed, and then centersdoolittle\nenterpriseson the output device. It then issues another\nline feed and centers customer report on the next line. The lastlforces a blank line between the heading text and the output\non the report.",
            "list customers heading \"\u2019lc\u2019doolittle enterprises\u2019lc\u2019customer report\u2019l\u2019\""
        ]
    },
    {
        "name":"id-supp modifier",
        "Syntax":[
            "Syntax",
            "id-supp\n"
        ],
        "description":[
            "The id-supp modifier suppresses the automatic display of item-IDs in the leftmost column of an AQL report."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "These examples produce the same\noutput.",
            "list entity phone (i",
            "list entity id-supp phone"
        ]
    },
    {
        "name":"ifno modifier",
        "Syntax":[
            "Syntax",
            "ifno attr.name\n"
        ],
        "description":[
            "The ifno modifier is the same as indicating with no or with not in an AQL sentence."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "list entity ifno contact"
        ]
    },
    {
        "name":"legend-supp modifier",
        "Syntax":[
            "Syntax",
            "legend-supp\n"
        ],
        "description":[
            "The legend-supp modifier suppresses the output of the legend on list and sort operations directed to the spooler."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "These examples produce the same\noutput.",
            "list-item dm,bp, \u2019term-type\u2019 (k",
            "list-item dm,bp, leg-supp \u2019term-type\u2019",
            "list-item dm,bp, \u2019term-type\u2019 legend-supp"
        ]
    },
    {
        "name":"locking modifier",
        "Syntax":[
            "Syntax",
            "{command} {modifiers} locking\n"
        ],
        "description":[
            "The locking modifier locks an item for AQL report processing. The purpose of this modifier is to prevent transient GFEs when using the AQL list or select commands on large items that are being simultaneously updated by another user\/process."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"lptr modifier",
        "Syntax":[
            "Syntax",
            "lptr\n"
        ],
        "description":[
            "The lptr modifier directs output of AQL sentences to the system printer, via the spooler. The output is directed according to the options most recently established with the sp-assign command. The AQL sentence that created the output is automatically listed at the top of the first page of output, unless otherwise suppressed with the tcl-supp modifier."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "list-item dm,bp, \u2019term-type\u2019 lptr a10",
            "list entity \"12345\" phone (p)"
        ]
    },
    {
        "name":"ni-supp modifier",
        "Syntax":[
            "Syntax",
            "ni-supp\n"
        ],
        "description":[
            "The ni-supp modifier suppresses the number of items listed message at the end of most AQL reports."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "list entity phone ni-supp name",
            "list entity phone name (j",
            "list entity phone name (b"
        ]
    },
    {
        "name":"nopage modifier",
        "Syntax":[
            "Syntax",
            "nopage\n"
        ],
        "description":[
            "The nopage modifier prevents terminal output from pausing at the end of each page. CTRL+X, which terminates a report when the report is paused at a page break, serves no purpose when a report is being produced in nopage mode. It does not stop the report. The only way to stop it is to press the BREAK key and end the process. The equivalent option is n."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "list md nopage",
            "list md a1 (n"
        ]
    },
    {
        "name":"only modifier",
        "Syntax":[
            "Syntax",
            "command only file.reference {item.list} {selection.criteria} {sort.criteria}\n{modifiers} {(options)}\n"
        ],
        "description":[
            "The only modifier ignores default attribute-defining items and displays only the item-IDs from the given file reference. The only modifier must precede the file reference."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "list only entity"
        ]
    },
    {
        "name":"roll-on modifier",
        "Syntax":[
            "Syntax",
            " \n roll-on attr.name{\"{text} {\u2019options\u2019 } {text}\"}\n\n"
        ],
        "description":[
            "Description",
            "The roll-on modifier creates a visual break in output data when the   value of a specified attribute changes; an improvement over the break-on   command. The roll-on connective is similar to the break-on   connective, but has several enhanced features.",
            "The attribute values specified by the roll-on connective are rolled into     the left adjacent column if data in that column has not been modified by a connective (excluding      break-on), or is not a total column. This provides the ability to generate a      roll-on connective value without occupying a column of output.",
            "Accomplishing the same results using the break-on connective requires     building a hidden attribute-defining item (one that allows 0 column positions on output). Even     then, a break-on connective using the hidden field still occupies one column     position on the report.",
            "If the left adjacent column is a total column or has been modified, the right adjacent column     is used if it satisfies the same criteria. If both the left and right adjacent columns have been     modified or are total columns, a new column is created. The new column heading is that of the     lowest level roll-on connective and all attribute values specified in     sequential roll-on connectives are rolled into this column. ",
            "If not specified, the number of asterisks corresponding to the roll-on     level, concatenated to the value rolled on is printed. A line is skipped only with the highest     level roll-on.",
            "Unlike the break-on connective, the roll-on connective     value automatically displays at the detail break lines. By contrast, the      break-on connective requires the use of the v option to     accomplish the same result."
        ],
        "parameter":[
            "Parameter(s)",
            "attr.nameName of the attribute on which to break.The attribute name\n         designated byroll-onshould also be specified as a sort key with by orby-dsnd.textText to be printed on theroll-online.optionsbOutputs the value causing the break in either the heading or footing output field where theboption is placed in the heading or footing option string.It is not\n         meaningful to specify this option within more than oneroll-onspecification.dSuppresses the break data line if only one detail line has\nbeen output since the last control break.nResets the page counter to one on each break.pIssues a form feed (page eject) after the data associated\nwith this break has been output.rInhibits page rollover. Outputs any occurrence of one or more\ncontrol break lines at the end of the page, rather than at the top\nof the next page, thus forcing all the data associated with this break\nto be current on the same page.uUnderlines all total fields.vOutputs the value causing the control break in theroll-onlabel.See\n         theboption for thebreak-onmodifier for more\n         information.\"Inserts a single quotation mark in text."
        ],
        "example":[
            "Example(s)",
            "Example 1",
            "list orders.hist roll-on so# \" \u2019p\u2019\" inv.line id-supp hdr-supp ni-supp col-hdr-supp\n tcl-supp (kp",
            "Example 2",
            "list cust by territory by state by city entity.num ename roll-on territory \"\u2019bp\u2019\"\n entity.address entity.zip phone# cgroup s.pcontact id-supp heading \"* * * \u2019b\u2019\n Territory Dealer List * * *\u2019cldcll\u2019\" tcl-supp (p",
            "Example 3",
            "This example shows how to extend text across columns by specifying theroll-onclause immediately after an ADI that takes no space on the output.\n    That is, a 0 column width\n    ADI.DICT fdate  'null' size = 43\n dictionary-code    a\n attribute-count    0\n substitute-header  \\\n structure\n output-conversion\n correlative\n attribute-type\n column-width       0\n input-conversion\n macro\n output-macro\n description",
            "Then\n    type::sort fdate by d4 null roll-on d4 \"This is a test 'v'\" a0 fmt \"l#10\" d4 (i",
            "Results:a0........ d4........\n\n 40         01\/17\/2020\n 80         01\/17\/2020\n\n This is a test 01\/17\/2020\n\n 1          01\/18\/2020\n 41         01\/18\/2020\n 81         01\/18\/2020\n\n This is a test 01\/18\/2020",
            "For a video example, go toUnwrapping optional text."
        ]
    },
    {
        "name":"sampling modifier",
        "Syntax":[
            "Syntax",
            "sampling sample.number\n"
        ],
        "description":[
            "The sampling modifier limits the number of items processed by the AQL sentence to a specific number. If selection criteria are included within the sentence, processing continues until the specified number of items are found that match the selection criteria."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "select entity sampling 10[4042] 10 items selected out of 10 sampling items.",
            "In this example, 1513 items had to be sampled to return\nthe 10 items requested.",
            "select entity with name \"[mary]\" sampling 10[4042] 10 items selected out of 1513 sampling items."
        ]
    },
    {
        "name":"show-nulls modifier",
        "Syntax":[
            "Syntax",
            "show-nulls\n"
        ],
        "description":[
            "The show-nulls modifier allows the display of empty multivalues."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "list entity name contact show-nulls"
        ]
    },
    {
        "name":"ss modifier",
        "Syntax":[
            "Syntax",
            "ss attr.name1{{beg.date} {end.date}} attr.name2{(g}\n"
        ],
        "description":[
            "Description",
            "The ss (spreadsheet) connective allows printing out AQL reports in spreadsheet format. This is achieved by adding the ss connective to a sort sentence and defining the desired range parameters.",
            "The ss modifier produces columnar and cross totals on rows of designated attributes within a given range of dates. If the width of the report exceeds the width of the output device, the extra columns are truncated. If two or more ss connectives are used in the same AQL sentence, a single report is generated, with columns for each subsequent ss connective following the totals column for the previous connective.",
            "Column headings are created for each possible value produced by  attr.name1 within the beginning date and ending date range. Output-conversions are processed before producing the heading. Correlatives are not processed. The format of the column is determined by  attr.name2. Each cell in the listing contains the total value of  attr.name2 for the date specified in that column heading.",
            "The roll-on command can be used in conjunction with ss to produce subtotals by specified categories. Each rolled attribute value produces a row in the output. If no roll-on is specified, only a total line is produced.",
            "The granularity of the date display is determined by the output-conversion of the  attr.name1. The date granularity is the value of the last multiply in the output-conversion. If the following output-conversion is used to provide week ending dates, the report has a granularity of 7 days and the dates are the Saturday after the date in the item. In both of the following examples, the date is stored in attribute 4.",
            "whereas the following output-correlative makes a granularity of 3 days:",
            "The number of dates to display is based upon the display width of the  attr.name2 attribute, but the width of the columns on the report is based upon the greater of the  attr.name1 display width and the  attr.name2 display width."
        ],
        "parameter":[
            "Parameter(s)",
            "attr.name1Attribute-defining item containing a date that limits the\ntabulation. The output form of this attribute determines the column\nheadings. The output form ofattr.name1does not\nhave to be the same as the values included inbeg.dateandend.date. For example, attr.name1 may display\nthe month, whilebeg.dateandend.datemust be in the form \"mm\/dd\/yy\" enclosed in double quotation marks (\" \").beg.dateBeginning date range to be included. If not specified,beg.dateis determined by the number of columns that physically\nfit on the display or printout.end.dateEnding date range to be included. If not specified, the current\nsystem date is used as the default.attr.name2Attribute that contains the values to be columnar and cross\n(row) totaled.gSuppresses the row and column totals."
        ],
        "example":[
            "Example(s)",
            "The example below produces a\nreport with subtotals for each code and totals to each category within\nthe code for the quarters 1-04, 2-04, 3-04, and 4-04.",
            "list invoices with code \"c\" \"d\" and with amount ne \"\" by code by category ss quarter\n\"01\/01\/04\" \"12\/31\/04\" amount roll-on code roll-on category \"\u2019d\u2019\" det-supp id-supp",
            "The beginning date range is calculated based on the attribute\u2019s\nwidth, the output device\u2019s width, and the ending date of 06\/30\/04.",
            "list invoices by customer ss quarter \"06\/30\/04\" amount roll-on customer\ndet-supp id-supp"
        ]
    },
    {
        "name":"tape modifier",
        "Syntax":[
            "Syntax",
            "tape\n"
        ],
        "description":[
            "The tape modifier retrieves data from the currently attached tape, rather than the actual data level of the file. The tape must have been created in a t-dump format and must be positioned to the beginning of the appropriate tape file. The attribute-defining items specified in the AQL sentence are retrieved from the dictionary level of the specified file name."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "This example assumes that the\nappropriatet-dumpmedia has been attached and\npreviously positioned at the proper tape file.",
            "list invoices with date >= \"1\/1\/04\" and <= \"12\/31\/04\" tape"
        ]
    },
    {
        "name":"tcl-supp modifier",
        "Syntax":[
            "Syntax",
            "tcl-supp\n"
        ],
        "description":[
            "The tcl-supp modifier suppresses the display of the AQL (TCL) sentence used to generate the report on printed output only."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "list entity with phone \"949]\" tcl-supp lptr"
        ]
    },
    {
        "name":"total modifier",
        "Syntax":[
            "Syntax",
            "total attr.name{\"total-limiter\"}\ntotal attr.name{operator} \"value.list\"\n"
        ],
        "description":[
            "The total modifier accumulates a columnar total for a specified attribute-defining item.",
            "If the total modifier is used in the same sentence as a roll-on, subtotal values are generated whenever a break occurs. The subtotal displays in the appropriate column for each attribute specified in a total modifier. At the end of the listing, a total is generated for each column. In computing the value for accumulation, correlatives (attribute 8) are processed, but conversions (attribute 7) are applied to the totaled value."
        ],
        "parameter":[
            "Parameter(s)",
            "total-limiterFunctions like the value string portion of the selection criteria\nprocess, limiting totals to values that pass the specified selection\ncriteria.attr.nameName of the attribute whose values are to be totaled.operatorAny legal relational operator, such as=.\nIf no operator is specified,=is assumed.value.listList of values to match, enclosed in double quotation marks\nor backslashes."
        ],
        "example":[
            "Example(s)",
            "list invoices total amount total amount (p",
            "list invoices total status \"overdue\"",
            "list invoices total amount le \"300\" total amount gt \"1000\""
        ]
    },
    {
        "name":"using modifier",
        "Syntax":[
            "Syntax",
            "command using dict file.reference {item.list} {selection.criteria} {sort.criteria}\n{modifiers} {(options)}\n"
        ],
        "description":[
            "The using modifier allows AQL to report on the data in a given file using attribute-defining items from a different file. Only one using connective is allowed in a TCL sentence."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "In this example, the attribute-defining\nitems name and phone are extracted from the dictionary of the suppliers\nfile, and applied to items in the customers file.",
            "list customers using dict suppliers name phone"
        ]
    },
    {
        "name":"with modifier",
        "Syntax":[
            "Syntax",
            "with {not} {each} attr.name{operator} {\"value\"}\n"
        ],
        "description":[
            "The with modifier marks the beginning of a selection processor conditional, which is processed against the associated file to select items to pass on to the List processor."
        ],
        "parameter":[
            "Parameter(s)",
            "not(orno)Negates the normal effect of selection. Only those items that\ndo not meet the criteria are selected.every(oreach)Specifies that in a MultiValue attribute, every value for\nthe attribute must meet the specified condition.attr.nameName of an attribute as specified by the attribute-defining\nitem in the dictionary.operatorAny legal relational operator, such as=.valueSpecific value to match, enclosed in double quotation marks\nor backslashes. If a selection criterion does not include a value,\nall items that have at least one value for the specified attribute\nname are selected.",
            "Note:When using thewithclause, the\nfunctionality for mask and date conversions is a bit obscure. If a\nmask or date conversion exists in the output-conversion, that conversion\nis applied to the selection criteria in the AQL sentence. For example,\nin the sentence:select filename with attr \"90]\"Where the data contains such values as 9000, 9010, 9020,\nand so on, the\"90]\"gets converted by anMR2to\"9000]\". The logic is to convert\nthe selection criteria once, rather than to convert each value that\nis processed by theselect. Moving theMR2to the correlative attribute bypasses the conversion\nto the selection criteria."
        ],
        "example":[
            "Example(s)",
            "list entity with contact",
            "list entity with no contact and with phone",
            "list invoices if amount.due > \"100\"",
            "list entity if no phone.number",
            "list entity with no contact and with no phone.number",
            "list orders if every quantity.ordered > \"10\""
        ]
    },
    {
        "name":"within modifier",
        "Syntax":[
            "Syntax",
            "list within file.reference\u2019 item-ID\u2019 {(options)}\ncount within file.reference\u2019 item-ID\u2019 {(options)}\n"
        ],
        "description":[
            "The within modifier retrieves a list of all the items that are subitems of a specified item. This is used to explode one attribute containing one or more MultiValues that are item-IDs within the same file, like in bill-of-material explosions. The file-defining item (D-pointer) must contain a v code in attribute 8 in the form: v;;n where n indicates the attribute count to explode. The explosion may proceed up to 20 sublevels."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "Suppose that in the dictionary\nof the hypothetical file, parts, that the correlative attribute of\nthe D-pointer to parts contains the processing code,v;;1, which means to explode on attribute 1.",
            "The sentence:",
            "list within parts \u2019car\u2019",
            "produces the output:",
            "level Parts...\n1 car\n2 engine\n2 wheel\n3 tire\n3 rim\n2 hood\n[405] 6 items listed out of 1 items.",
            "list partsparts...\nwheel\ntire\nrim\nengine\nhood\ncar\n[405] 6 items listed out of 6 items.",
            "The hypothetical data could be examined with the command:",
            "ct parts car",
            "This produces the output:",
            "car\n001 engine]wheel]hood\nct parts engine\nengine\n001 flywheel]piston",
            "Sinceflywheelandpistonitems do not exist inparts, so they do not get\nexploded.",
            "ct parts wheelwheel\n001 tire]rim\nct parts tire rim hood\ntire         rim          hood\n001          001          001\n002 $35.00   002 $60.00   002 $70.00"
        ]
    },
    {
        "name":"without modifier",
        "Syntax":[
            "Syntax",
            "without attr.name\n"
        ],
        "description":[
            "The without modifier negates the normal rules for selection criteria. if no, with no, and with not are identical to without."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "This is essentially the same\naswith no phone.",
            "list entity without phone",
            "It could also be stated as:",
            "list entity with phone = \"\""
        ]
    },
    {
        "name":"oconvs() function",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"trans() function",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"AQL relational operators and logical clauses",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"after operator",
        "Syntax":[
            "Syntax",
            "with {not} attr.name after \"valuestring\"\n"
        ],
        "description":[
            "The after relational operator represents a greater than condition used in constructing selection clauses. The gt and > operators perform the same function."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "list customers with name after \"c\"",
            "list customers with amount.due > \"900\"",
            "sort customers with last.purchase gt \"1\/1\/93\""
        ]
    },
    {
        "name":"and clause",
        "Syntax":[
            "Syntax",
            "with clause and with clause\n"
        ],
        "description":[
            "The and clause is used between selection criteria clauses to indicate that both condition being evaluated as true selects the item for processing."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "This example lists those items\nthat meet one of two criteria: a name starting witharand with a city starting withirv, or, a city starting\nwithsanand a contact containing the stringjoe.",
            "list entity with name \"ar]\" and with city \"irv]\" or with city \"san]\"\nand with contact \"[joe]\""
        ]
    },
    {
        "name":"before operator",
        "Syntax":[
            "Syntax",
            "with {not} attr.name before \"valuestring\"\n"
        ],
        "description":[
            "The before relational operator represents a less than condition used in constructing selection clauses. The < and lt operators perform the same function as before."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "list employees with birthday before \"1\/1\/72\"",
            "list journal with amount.owed and with last.payment < \"1\/1\/05\"",
            "list journal with no amount.owed lt \"900\""
        ]
    },
    {
        "name":"equal operator",
        "Syntax":[
            "Syntax",
            "with {not} attr.name equal \"valuestring\"\n"
        ],
        "description":[
            "The equal operator represents an equal to condition used in constructing selection clauses. When a  valuestring is included, the data found in each item must match it exactly in order for the data to be selected for processing."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "list jobs with user equal \"dm\"",
            "list jobs with user = \"dm\"",
            "Note:When using an ADI with anmtprocessing code, a null value is converted\n    to zero before testing for equality or inequality. Therefore, ADI = \u201c\u201d will find nothing and ADI\n    # \u201c\u201d will return everything. This only affects \u201cequal\u201d or \u201cnot equal\u201d. \u201cLess than or equal\u201d,\n    \u201cGreater than or equal\u201d and others are not affected."
        ]
    },
    {
        "name":"ge operator",
        "Syntax":[
            "Syntax",
            "with {not} attr.name ge \"valuestring\"\n"
        ],
        "description":[
            "The ge relational operator represents a greater than or equal to condition used in constructing selection clauses."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "list jobs with user = \"dm\"list invoices with amount ge \"0\"",
            "list invoices with amount >= \"0\"\n\"\u2019u\u2019Total Due\" roll-on company roll-on salesman det-supp"
        ]
    },
    {
        "name":"gt operator",
        "Syntax":[
            "Syntax",
            "with attr.name gt \"valuestring\"\n"
        ],
        "description":[
            "The gt operator is a greater than relational operator."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "list invoices with amount gt \"500\"",
            "list invoices with amount > \"500\""
        ]
    },
    {
        "name":"le operator",
        "Syntax":[
            "Syntax",
            "with {not} attr.name le \"valuestring\"\n"
        ],
        "description":[
            "The le operator selects items whose specified attribute name contains a value less than or equal to the specified value string."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "select invoices with amount.due le \"0\"",
            "select invoices with amount.due <= \"0\""
        ]
    },
    {
        "name":"lt operator",
        "Syntax":[
            "Syntax",
            "with {not} attr.name lt \"valuestring\"\n"
        ],
        "description":[
            "The lt operator selects items whose specified attribute name contains a value less than the specified value string."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "select invoices with amount.due lt \"0\"",
            "select invoices with amount.due < \"0\""
        ]
    },
    {
        "name":"ne operator",
        "Syntax":[
            "Syntax",
            "with attr.name ne \"valuestring\"\n"
        ],
        "description":[
            "The ne operator selects items whose specified attribute name contains a value not equal to the specified value string."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "select invoices with amount.due ne \"0\"",
            "select invoices with amount.due # \"0\"",
            "Note:When using an ADI with anmtprocessing code, a null value is converted\n    to zero before testing for equality or inequality. Therefore, ADI = \u201c\u201d will find nothing and ADI\n    # \u201c\u201d will return everything. This only affects \u201cequal\u201d or \u201cnot equal\u201d. \u201cLess than or equal\u201d,\n    \u201cGreater than or equal\u201d and others are not affected."
        ]
    },
    {
        "name":"no operator",
        "Syntax":[
            "Syntax",
            "no\n"
        ],
        "description":[
            "The no operator reverses selection condition."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"not operator",
        "Syntax":[
            "Syntax",
            "if not {each} attr.name{operator} {\"value\"}\n"
        ],
        "description":[
            "The not operator represents a not equal to condition. This reverses the true sense of the condition in a selection criteria. The #, no, and ne operators perform the same function as not."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "list jobs if not stat = \"c\"",
            "list jobs if stat not \"c\""
        ]
    },
    {
        "name":"or clause",
        "Syntax":[
            "Syntax",
            "with clause or with clause\n"
        ],
        "description":[
            "The or clause is used between selection criteria clauses to indicate that either condition being evaluated as true selects the item for processing."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "This example lists those items\nthat meet one of two criteria: a name starting witharand with a city starting withirv, or, a city starting\nwithsanand a contact containing the stringjoe.",
            "list entity with name \"ar]\" and with city \"irv]\" or with city \"san]\" \nand with contact \"[joe]\""
        ]
    },
    {
        "name":"Phrases",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "By definition a phrase may be\nany syntactically complete portion of an AQL sentence except commands\nand file names. For example, a phrase namedaddress.listin the file client could be used to display the name and the address:",
            "address.list\n001 h\n002 name street city state zip",
            "When defined in the dictionary of the file client, this phrase may be used in an AQL query such\n    as:",
            "sort client with status = active by zip address.list lptr",
            "This sentence would produce a report of clients defined as active in the data file and using the\n    phrase definitionaddress.listas the output specification. Note that the\n    selection value active is not enclosed in quotation marks; another feature of the AQL\n    pre-processor. Aheadingsentence could have been included in the phraseaddress.list, however, a more effective method may be the use of a remote\n    phrase. For example a remote phrase file calledstaffcould be created\n    containing heading phrases for each staff member. To use remote phrases anRtype phrase is required in the dictionary of the file client, as well as, a phrase in the data\n    file staff.",
            "dict of client\nJim\n001 R\n002 staff\n003 jim.jones\ndata of staff\njim.jones\n001 H\n002 heading \"Page 'P' prepared for Jim Jones 'CTLL'\"",
            "The following AQL sentence produces the same report as in the previous example. However, theRtype phraseJimin the dictionary of client captures the\n    heading from the staff file:",
            "sort client with status = active by zip jim address.list lptr",
            "Multiple remote phrase files may be used (that is,FROMcould be a file of desired footings).",
            "Note:If\na code ofais stored in the data file of client\nas the method of indicating a client as active, the above example\nrequires that the sentence be entered\u00a0as:sort client with status =\"a\" by zip jim address.list lptr",
            "This is because\"a\"is defined\nin the master dictionary as a throwaway connective and the quotation\nmarks are needed to resolve any ambiguity. This also applies to other\nwords that are defined in the master dictionary.",
            "Another type\nof phrase that may be used is the@file.namephrase.\nThe@file.namephrase is used to define the default\noutput attributes when no output specification are included in the\nAQL sentence. For example, the@file.namephrase\nfor the file client, would be created in the dictionary of client\nunder the name@client:",
            "@client\n001 H\n002 name city phone contact",
            "If thelistorsortcommands are used to query the file client, the attributesname,city,phone, andcontactare the output for sentences such as:",
            "list client heading \"page 'p' client default list 'ctl'\"",
            "or",
            "sort client by name with type = var",
            "The above sentences contain no output specification, therefore,\nthe@clientphrase is used to determine the output.\nIf the sentence was entered as below, then the default output attributes\ndefined in@clientare ignored and the output list\nrequested is used:",
            "sort client by name name street city state zip",
            "Note:If line 001 is defined asHZorRZ(remote) then attribute numbers (for example, 1, 2, 5,\n7, 8) may be used on line 002 to extract the data in those attribute-count\nIDs, provided that those AMC numbers are defined in the file dictionary.",
            "The@file.namephrase may also be just the@sign and thefile.nameis assumed. Also,\nif a Q-pointer exists for the file, the@file.namefor the actual file is used to determine the output attributes.\nFor example, ifcustis a Q-pointer to the file client,\nand the AQL sentence below is entered, then the@clientdefault attribute phrase is used. In other words,@custis not required and is not valid:",
            "list cust",
            "A special use of the@file.namephrase\noccurs in the case when multiple data sections are defined in a dictionary.\nFor example, if in the dictionary of our client file, a data section\nfor active and another for inactive are defined, then a separate@file.namephrase may also be defined for each data section.",
            "dict of client\n@active\n001 H\n002 name city phone\ndict of client\n@inactive\n001 H\n002 name city state zip",
            "If the client file was queried in the example below, the\npre-processor uses the@activefile name phrase to\ndetermine the default output attributes:",
            "list client,active",
            "If the file was queried in the example below, the pre-processor\nuses the@inactivefile name phrase to determine\nthe default output attributes:",
            "list client,inactive",
            "This example shows a mutually exclusive set of selection\ncriteria connected with an or. Either condition evaluating to true\naccepts the item for processing. That is, if the name attribute begins\nwithar, or the city attribute begins withirv, the item is selected for output.",
            "list entity with name \"ar]\" and with city \"irv]\" or with city \"san]\"\nand with contact \"[joe]\"",
            "This example lists those items that meet one of two criteria:\na name starting witharand with a city starting\nwithirv, or, a city starting withsanand a contact containing the stringjoe."
        ]
    },
    {
        "name":"AQL user exits",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"u1070 user exit",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"u201e user exit",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"u2070 user exit",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"u3070 user exit",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"u5070 user exit",
        "Syntax":[
            "Syntax",
            "u5070, string\n"
        ],
        "description":[
            "The u5070 user exit converts a string to the form: string[1,3]: \"-000\"",
            "It strips all but the first three characters, and then appends the literal -000 to the end.",
            "If the string is less than three characters long, then it is returned untouched."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "Returns\"abc-00\".",
            "string = \"abcdef\"\nu5070,string"
        ]
    },
    {
        "name":"u508e user exit",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"u6070 user exit",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"u7070 user exit",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"u9070 user exit",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"ua070 user exit",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "listfile.nameattribute.definition.item\"value.count\""
        ]
    },
    {
        "name":"uc070 user exit",
        "Syntax":[
            "Syntax",
            "uc070; n\n"
        ],
        "description":[
            "The uc070 user exit returns the specified value from a MultiValue set."
        ],
        "parameter":[
            "Parameter(s)",
            "nValue count to return."
        ],
        "example":[
            "Example(s)",
            "uc070;3"
        ]
    },
    {
        "name":"Attribute-Defining items",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Defining attributes",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "The processing codes in the two\nattribute-defining items below have a controlling dependent relationship.",
            "dictionary-codeaattribute-count2substitute-headerstructurec;3output-conversioncorrelativeattribute-typelcolumn-width10input-conversionmacrooutput-macrodescriptionThis attribute controls attribute 3.",
            "dictionary-codeaattribute-count3substitute-headerstructured;2output-conversioncorrelativeattribute-typelwcolumn-width10input-conversionmacrooutput-macrodescriptionDependent upon attribute 2.",
            "The following attribute-defining item can be placed in\na master dictionary and used for general purpose counting when you\nwant to know the number of items matching a specific criteria.",
            "item-ID:tallydictionary-codeaattribute-count999substitute-headerstructureoutput-conversionmrzcorrelativea\"1\"attribute-typer{x}column-width4input-conversionmacrooutput-macrodescriptionProvides a constant value of 1 for commands. For example,\"total tally det-supp,\"shows the number of items from\neachbreak-on.hotkey.all"
        ]
    },
    {
        "name":"Default attribute items (Attribute-Defining Items)",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"*a0-a13",
        "Syntax":[
            "Syntax",
            "*a n{*a n...}\n"
        ],
        "description":[
            "The number in the item-ID corresponds to the attribute mark that it describes."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "list md with *a1 = \"d]\"",
            "list mds,, with a1 = \"d]\" and with *a8 = \"sys]\""
        ]
    },
    {
        "name":"*a9998",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "list entity *a9998 name (i"
        ]
    },
    {
        "name":"*a9999",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "list entity total *a9999"
        ]
    },
    {
        "name":"a\/amc",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "list md with a\/amc \"d]\""
        ]
    },
    {
        "name":"a0-a99",
        "Syntax":[
            "Syntax",
            "an {an...}\n"
        ],
        "description":[
            "The number in the item-ID corresponds to the attribute mark that it describes."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "list md with a1 = \"d]\"",
            "list mds,, with a1 = \"d]\" and with a8 = \"sys]\""
        ]
    },
    {
        "name":"account (Attribute-Defining Items)",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "list mds account"
        ]
    },
    {
        "name":"an",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"attr.code",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"attribute-count",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "list md attr.count"
        ]
    },
    {
        "name":"attribute-name",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "list entity company.name contact"
        ]
    },
    {
        "name":"attribute-type",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"base",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"c\/acct",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "list dict bp c\/acct"
        ]
    },
    {
        "name":"c\/bytes",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "list dict bp c\/bytes"
        ]
    },
    {
        "name":"c\/code",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "list dict bp c\/code",
            "list dict bp with c\/code = \"cc\" c\/code"
        ]
    },
    {
        "name":"c\/date",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "list dict bp c\/date"
        ]
    },
    {
        "name":"c\/fid",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "list dict bp c\/fid"
        ]
    },
    {
        "name":"c\/flash",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "list dict bp c\/flash"
        ]
    },
    {
        "name":"c\/options",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "list dict bp c\/options"
        ]
    },
    {
        "name":"c\/port",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "list dict bp c\/port"
        ]
    },
    {
        "name":"c\/release",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "list dict bp c\/release",
            "where",
            "MnMonitor version.AnABS version.DnDatafiles version.FnFlashBASIC version."
        ]
    },
    {
        "name":"c\/size",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "list dict bp c\/size"
        ]
    },
    {
        "name":"c\/time",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "list dict bp c\/time"
        ]
    },
    {
        "name":"c\/total",
        "Syntax":[
            "Syntax",
            "command dict file.reference {item.list} c\/total {(options)}\n"
        ],
        "description":[
            "Displays the total number of frames that make up a binary item. The frame count is divided into two parts, the number frames of:",
            "D3 object code",
            "FlashBASIC object code",
            "It is used by AQL and list-obj to add together attributes 3 and 12 of compiled date-time stamps."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "list dict bp c\/totalPage 1\ndict bp\ndict bp........frames\ntest\n1\ntest2\n4*",
            "Note:The asterisk indicates that this program has been\ncompiled with FlashBASIC."
        ]
    },
    {
        "name":"c\/user",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "list dict bp c\/user"
        ]
    },
    {
        "name":"column-width",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"cor",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"d\/code",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"d\/code1",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"d\/size",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Description",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"dictionary-code",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"f\/base",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"f\/mod",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"f\/realloc",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"f\/sep",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"f\/syn",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"file.code",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"fileflgs",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"filename",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"hotkey.all",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"hotkey1",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"hotkey2",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"hotkey3",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"hotkey4",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"hotkey5",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"hotkey6",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"hotkey7",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"hotkey8",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"hotkey9",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"hotkey0",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"icv",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"input-conversion",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"item-ID (attribute-defining items)",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"itmflgs",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"justification",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"l\/ret",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"l\/upd",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"m\/dict",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"macro",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "A file-defining item with the\ndefault attributes to be used by the Update processor:",
            "ud filename filenamedictionary-code         a\nmodulo                  67\nstructure\u00a0\nretrieval-lock\u00a0\nupdate-lock\u00a0\noutput-conversion\u00a0\ncorrelative             id100\nattribute-type          l\ninput-conversion\nmacro                   name address zip phone (i\noutput-macro\u00a0\noutput-conversion\u00a0\ndescription",
            "In the example above, since there are no attribute-defining\nitems specified on the output-conversion field, the default attributes\nused by the List processor are determined by themacroattribute. Theioption displays the item-ID of\nthe file along with the specified attributes.",
            "It is possible\nto have multiple views of the data when the Update processor is invoked.\nThis is accomplished by having a MultiValue list of attribute-defining\nitems defined on the macro dictionary. To select whichviewof the data to use, a FlashBASIC subroutine must be called from\ninput-conversion of the file-defining item. In this subroutine, the\nAQL function is used to pass the position value to the Update processor.",
            "The example below shows a file-defining item with a MultiValue\nlist of attribute-defining items. A sample FlashBASIC subroutine is\nincluded, showing exactly how to select the properviewfor\nthe Update processor.",
            "ud file.name file.namedictionary-code         a\nmodulo                  67\nstructure\u00a0\nretrieval-lock\u00a0\nupdate-lock\u00a0\noutput-conversion\u00a0\ncorrelative             id100\nattribute-type          l\ninput-conversion        call select.view\nmacro                   name address zip phone (i\n                        name phone comments\n                        name phone fax address zip (i\noutput-macro\u00a0\noutput-conversion\u00a0\ndescription",
            "In the example below, if the user isjoe, the view displayed is:",
            "name phone comments",
            "u bp select.view01 subroutine select.view(item)\n02 item = access(3)\n03 execute \u2019who\u2019 capturing who\n04 user = field(who,\u2019 \u2019,2)\n05 if user = \u2019joe\u2019 then\n06 access(18) = 2\n07 end else\n08 access(18) = 1\n09 end"
        ]
    },
    {
        "name":"md.name",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"modulo",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"out.conv",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"output-conversion",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"output-macro",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"r0",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "list md r0 (i"
        ]
    },
    {
        "name":"reallocation",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "Notice that the file has a modulo\nof 31 frames and during the nextaccount-restorethe modulo is reallocated to 97 frames.",
            "ct dict employees employees employees001 d\n002 6165\n003 31\n004\n005\n006\n007\n008\n009 l\n010\n011\n012\n013 (97)"
        ]
    },
    {
        "name":"retrieval-lock",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"s\/amc",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"s\/name",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"size",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"structure",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"substitute-header",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"summary",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "list md summary"
        ]
    },
    {
        "name":"synonym",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"ulk",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "Lists all items in the current\naccount that haveMISas a value in attribute 6.",
            "list md with ulk = \"MIS\""
        ]
    },
    {
        "name":"update-lock",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"v\/cat",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "list md with v\/cat v\/cat"
        ]
    },
    {
        "name":"v\/conv",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"v\/corr",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"v\/desc",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "list md v\/desc"
        ]
    },
    {
        "name":"v\/flags",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "list md with v\/flags v\/flags"
        ]
    },
    {
        "name":"v\/max",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"v\/mode",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"v\/name",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"v\/struc",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"v\/tag",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"v\/typ",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"v\/type",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"User-defined default dictionary items",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Background\/Phantom process",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Background\/Phantom process overview",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Background\/Phantom process commands",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":":background-start command",
        "Syntax":[
            "Syntax",
            ":background-start (d\n"
        ],
        "description":[
            "The :background-start command starts the background processor. The background command will not run unless the background processor has been started with this command. This command is automatically run by the coldstart procedure."
        ],
        "parameter":[
            "Parameter(s)",
            "(dThe(doption disables running any scheduled background processor\n        jobs that were missed due to the background processor being stopped (either manually or\n        because of a service disruption)."
        ],
        "example":[

        ]
    },
    {
        "name":":background-stop command",
        "Syntax":[
            "Syntax",
            ":background-stop\n"
        ],
        "description":[
            "The :background-stop command stops the background processor. The background scheduler will no longer be able to run. Jobs can still be queued for execution when the scheduler is not running, but they will not start. This command has no effect on backgrounds that are already running. To stop those jobs, they must be logged off."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"background command",
        "Syntax":[
            "Syntax",
            " background {? or tcl.command{|tcl.command or data{|...}}}\n"
        ],
        "description":[
            "Description",
            "The background command starts a phantom job with rerun and delay   facilities. ",
            "If the background command is executed with a TCL command attached, it         behaves just like the zs command, except the output is captured in the           backgrounds.output file. If the command is typed alone at TCL, then         the user is prompted for questions pertaining to the job. If the first parameter after the         command is a question mark, a list of already-created background jobs is presented for the         user to modify.",
            "Background jobs differ from regular phantom jobs in their ability to be scheduled for a         later time and date, and their ability to rerun based on certain rules. For example, a job         can be configured to run once per minute, every Thursday at 10:00 PM, or Monday through         Friday between the hours of 8:00 AM and 5:00 PM.",
            "All output from background jobs is captured in a D3 file called           backgrounds.output. Information on the status of a job after each run         is captured in a file called backgrounds.report. To stop background         processing (but not phantom processing) at any time, use the           :background-stop command. To restart them, use the           :background-start command."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"backgrounds-disable-missed command",
        "Syntax":[
            "Syntax",
            "backgrounds-disable-missed"
        ],
        "description":[
            "The backgrounds-disable-missed command disables running any scheduled     background processor jobs that were missed due to the background processor being stopped (either     manually or because of a service disruption)."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"end command (Background\/Phantom process commands)",
        "Syntax":[
            "Syntax",
            "end {port.number user-ID}\n"
        ],
        "description":[
            "Description",
            "The end command terminates a process on another port, or the current port if a port number is not specified.",
            "The end command stops processing at the previous level and returns to the preceding level TCL prompt. However, if there is an active list at the current level, then list is cleared, and control is not returned to the previous level. The end command can also be used to stop a TCL command that was sent to another line by the tcl command, or to terminate a phantom job.",
            "The end command clears an active list and requires a sys2 privilege level."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "Ends the process at the current\nlevel.",
            "end",
            "Stops the process executing on line 16, under the user-ID,\ndm.",
            "end 16 dm",
            "This kills an active list.",
            "select dict entity[404] 276 items selected out of 276 items.end"
        ]
    },
    {
        "name":"list-backgrounds-missed command",
        "Syntax":[
            "Syntax",
            " list-backgrounds-missed "
        ],
        "description":[
            "The list-backgrounds-missed command lists any scheduled background     processor jobs that were missed due to the background processor being stopped (either manually     or because of a service disruption)."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"startsched command",
        "Syntax":[
            "Syntax",
            "startsched {(options}\n"
        ],
        "description":[
            "The startsched command starts the phantom scheduler, which itself is a phantom process. The scheduler is normally started on the last phantom port of the system."
        ],
        "parameter":[
            "Parameter(s)",
            "optionsport.numberDesignates the port number on which to start the phantom scheduler.\nIf not specified, the scheduler is run from the last phantom port.IInitializes the %R item in the dictionary of the jobs file.\nThis has the effect of not releasing any phantom processes that need\nwrapping up.rKills and restarts the underlying thread for a job when a\nthe job completes.zRemoves any phantom jobs in the queue by clearing the %Q item\nin the dictionary of the jobs file."
        ],
        "example":[

        ]
    },
    {
        "name":"stopsched command",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"z command (Background\/Phantom process commands)",
        "Syntax":[
            "Syntax",
            " z {h}{s}{d} {tcl.command}\n"
        ],
        "description":[
            "Description",
            "The z command starts a phantom job. Phantom jobs run in the background, meaning that they do not necessarily need a terminal present.",
            "After a phantom process is initiated, the user can use the terminal originating the phantom process for other jobs. The dm,jobs, file tracks phantom processes. Phantom processes can be monitored with the list-jobs command.",
            "For example, you can run the commands         zhsd, zhd, or zd, but running         zshd or zdh is not allowed."
        ],
        "parameter":[
            "Parameter(s)",
            "hThezhform of the command holds all\n        terminal output in a D3 spooler file hold entry and suppresses output to the terminal.SeeSpooler overviewfor\n         more information.sThezsform\nof the command suppresses error messages. Otherwise, error messages\ndisplay on the terminal that initiated the phantom process.dThezdform\nof the command deletes the phantom job item from the jobs file after\ncompletion, unless the phantom process prematurely aborts or gets\nlogged off.tcl.commandSpecifies the TCL statement to\nbe executed as the phantom process. If a TCL command is specified,\nno further prompting occurs, and the job is submitted using all the\ndefault values from the following prompts. If a TCL command is not\nspecified, it prompts for the following:user-id:If a user ID is specified and you are logged on as a user\nother than the DM user, a user password is requested. The default\nis the current user-ID. Passwords are case-sensitive.md id:If the md ID specified, an account password is requested.\nThe default is the current master dictionary.tcl command:Specifies the (initial) TCL statement to execute by the phantom\nprocess.line:Specifies the port number on which the process is to run.\nIf not specified, a phantom line is used.input data:Designates input data to be stacked for use by the phantom process.Each separate string\n         must be terminated by pressingEnter. A null response can be stacked\n         by pressingCTRL+N,Enter.Pressing\n         Enter at theinput data:prompt indicates that all commands have been\n         entered and the process is then released to the phantom scheduler."
        ],
        "example":[
            "Example(s)",
            "Press CTRL+N, Enter, to enter null data.",
            "zuser-id (<cr>=kim):\n md id (<cr>=ref):\n command: compile bp process.see.also",
            "Message \u2013 Example 1",
            "The following example illustrates the prompted sequence. After the job completes, a message is\n    transmitted to the sender, indicating that the job has completed:",
            "input data:\n [438] Job #882632715 Submitted.",
            "Message \u2013 Example 2",
            "The following example illustrates the unprompted form.",
            "09:05:18 29 Mar 2003 from user kim line 129\n [241] Successful compile! 1 frame(s) used.z count entity[438] Job #892243266 submitted."
        ]
    },
    {
        "name":"BASIC",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"BASIC overview",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Attribute count expression",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "In the following example, 1 is the attribute count expression.",
            "readv company.name from customer.file,cust-ID,1 else...",
            "The variableaposmust be numeric; in\nthis case it is a 2.",
            "apos = 2\nreadv company.address from customer.file,cust-ID,apos else...",
            "The numeric constant 1 indicates attribute 1 of the string\nin thecustomer.itemvariable.",
            "customer.item<1> = \"test string\"",
            "The arithmetic expression,bpos+i, calculates\nthe attribute position inaudit.item.",
            "audit.item<bpos+i> = amount.list<bpos>"
        ]
    },
    {
        "name":"Arithmetic expressions",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Arithmetic operators",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "total = (invoice.amount - discount) + tax"
        ]
    },
    {
        "name":"Arrays",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "This loads all the item-IDs from\nthe current master dictionary into the dimensioned array,a.",
            "max = 100\nn = 1\ndim a(max)\nexecute \"select md\"\nloop\nreadnext ID else exit\na(n) = ID\nif (n >= max) then\nmax += 100\ndim a(max)\nend\nn += 1\nrepeat"
        ]
    },
    {
        "name":"Array references",
        "Syntax":[
            "Syntax",
            "dim.array.var(element.exp)\ndim.array.var(row.num,col.num)\ndim.array.var(element.exp)<ac.exp, vc.exp, sc.exp>\n\u00a0\ndyn.array.var<ac.exp>\ndyn.array.var<ac.exp, vc.exp>\ndyn.array.var<ac.exp, vc.exp, sc.exp>\n"
        ],
        "description":[
            "Dimensioned and Dynamic arrays can be referenced in BASIC programs.",
            "Dynamic (or string) array references have the forms:",
            "Dimensioned arrays have a maximum of two dimensions and must first be defined with a dim or dimension statement. The first form is a one-dimensioned array or vector:",
            "The second form is a two-dimensioned array or matrix:",
            "Dimensioned array references have the forms:",
            "When used in conjunction with the file statement, dimensioned array elements can be referenced by the actual item-ID of the attribute-defining item in the associated dictionary:",
            "A specific value or subvalue of a dimensioned array can be specified using these forms:",
            "This references the element of the dimensioned array derived from the current value of ac.exp. Within this array element, the value count derived from  vc.exp is referenced.",
            "As in the previous case, with the additional reference to a subvalue location derived from sc.exp."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "Assigns the value ofnameto the first element of the dimensioned arraycustomer.item.",
            "customer.item(1) = name",
            "Assigns the value ofaddress2to the\nsecond value in the second attribute of dynamic arraycustomer.item.",
            "customer.item<2,2> = address2",
            "Searches for any element in the dimensioned arrayarrayequal to the letterx.",
            "if dim.array.var(element.exp) = \"x\" then...",
            "Tests for valuevc.expof attribute2in the dynamic arraycustomer.itemequal\nto a null string(\"\").",
            "if customer.item<2,vc.exp> = \"\" then...",
            "Tests for any value of attribute2in\nthe dynamic arraycustomer.itemequal to a null string(\"\").",
            "if customer.item<2,*> = \"\" then...",
            "Tests for subvaluesc.expin valuevc.expin attributeac.expin the dynamic\narraycustomer.itemequal to a null string(\"\").",
            "if customer.item<ac.exp,vc.exp,sc.exp> = \"\" then...",
            "Tests for any subvalue in any value in any attribute in\nthe dynamic arraycustomer.itemequal to a null string(\"\").",
            "if customer.item<*,*,*> = \"\" then..."
        ]
    },
    {
        "name":"Array variable",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "When an array variable is used\nto describe a dimensioned array, it must be used with a subscript\nto indicate the specific variable descriptor in the array:",
            "a(10) or a(n)",
            "Otherwise it must be used in amatstatement\nto indicate all elements in the array:",
            "mat a = ''",
            "This sets every variable in the arrayato null.",
            "matread afrom...",
            "This reads an item and parses the attributes to the dimensioned\narraya."
        ]
    },
    {
        "name":"Arrays and relational expressions",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "Compares an element in the dimensioned\narrayato the valuex. If any element\nequalsx, thethencommand is performed.",
            "dim a(10)\nif a(element.exp) = \"x\" then...",
            "Checks that an attribute position in the dynamic arraysis greater-than or equal to10.",
            "if s<attr.exp> >= \"10\" then...",
            "Checks an element of a dimensioned arrayafor a string in the attribute, value, and subvalue.",
            "dim a(10,10)\nif a(row.num,col.num)<ac.exp,vc.exp,sc.exp> = \"x\" then..."
        ]
    },
    {
        "name":"Assignment",
        "Syntax":[
            "Syntax",
            "variable = expression\n"
        ],
        "description":[
            "Assignment is the process of assigning the value of an expression to a variable.",
            "The variable can be a simple variable, an array element, a dynamic array element, a substring, or all of the above."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "Variablenameis assigned the string\u201cgeorge\u201d.",
            "name = \"george\"",
            "Variableresultis assigned to the result\nof the arithmetic expression.",
            "result = (unit.price * qty)",
            "Variablelineis assigned the result\nof the string expression.",
            "line = result: \" is the answer\"",
            "Adds the value ofcodeas the last attribute\nof the dynamic array item.",
            "item<-1> = code",
            "Adds the value ofcodeas the last value\nin an attribute of codes.",
            "item<codes,-1> = code",
            "Valuefred, is assigned to the fifth\nelement of the dimensioned arraycustomer.array.",
            "customer.array(5) = \"fred\"",
            "Second subvalue in the second value in the first attribute\nof the string in item is replaced with the string\u201c100\u201d.",
            "item<1,2,2> = \"100\"",
            "Character positions 3 and 4 of string are replaced with\nthe string\u201cca\u201d.",
            "string[3,2] = \"ca\"",
            "Third and fourth character positions of the string found\nin the first subvalue in the second value in the first attribute of\nitem is replaced with the string\u201cca\u201d.",
            "item<1,2,1>[3,2] = \"ca\""
        ]
    },
    {
        "name":"Boolean evaluation",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "equaldisplays,\nas bothxandyevaluate to a numeric\n1.",
            "x = \"1\"\ny = \"001\"\nif x=y then crt 'equal' else crt 'not equal'"
        ]
    },
    {
        "name":"Compile stamps",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "This program was compiled January\n28, 2003 at 10:29:03 AM, and takes up 43 bytes of 1 frame. It was\ncompiled on port 12 by user dm in the account qa with no options and\nwas not Flash compiled.",
            "ct dict bp prog001 CC\n002 740380\n003 1\n004 12812\n005 37743\n006 12\n007 dm\n008 qa\n009 6.1.0.A5\n010\n011 43\n012 0\n013 13742\n014 52761\n015 00000002"
        ]
    },
    {
        "name":"Conversion expression",
        "Syntax":[
            "Syntax",
            "iconv(str.exp, conv.exp)\noconv(str.exp, conv.exp)\n"
        ],
        "description":[
            "A conversion expression is any function that evaluates to a valid processing code (conversion)."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "The statement below prints the\nsystem time using themthAQL processing code\nas a literal string.",
            "print oconv(time(),'mth')",
            "The conversion expression is the AQLd(date) processing code stored as a string in the variable,conv.exp.",
            "conv.exp = 'd2-'\nd = oconv(date(),conv.exp)",
            "preci= '2'\nscale = '4'\nmoney = oconv(income,'mr':preci:scale)",
            "The conversion expression is the compound string expression:",
            "'mr':preci:scale",
            "that results in the string,\"mr24\"."
        ]
    },
    {
        "name":"Data representation",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Default File Variables",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Error condition",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"File variable",
        "Syntax":[
            "Syntax",
            "open filename to file.var...\nread var from file.var...\nwrite var on file.var...\n"
        ],
        "description":[
            "Description",
            "A file variable is the symbolic way to access a file after being previously opened in a BASIC program. File variables are assigned with the open statement.",
            "A file variable contains the assigned file pointers and are used by subsequent BASIC file input and output statements.",
            "After explicitly assigned, using these statements references the given file by its file     variable:",
            "clearfile",
            "delete",
            "matread",
            "matreadu",
            "matwrite",
            "matwriteu",
            "open",
            "read",
            "readu",
            "readv",
            "readvu",
            "release",
            "select",
            "write",
            "writev",
            "writevu",
            "Unlike numeric and string variables, a file variable cannot be output with a print or crt statement, used in a string or arithmetic expression, or displayed in the FlashBASIC or BASIC debugger. A file variable can be assigned to other variables in a standard assignment statement or copied to other variables, in the form:"
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "This opens the invoices file\nto a file variable calledinv.f. Throughout the rest\nof the program,inv.fis used for any reference to\nthe invoices file.",
            "open \"invoices\" to inv.f else...",
            "An item is read from theinv.f(the file\nvariable opened in the first example).",
            "readu item from inv.f,\"cust.345\" else..."
        ]
    },
    {
        "name":"Format strings",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Functions",
        "Syntax":[
            "Syntax",
            "function({argument{,argument{,..}}})\n"
        ],
        "description":[
            "Functions are elements in BASIC language expressions, returning a single value in place, as a function of the arguments. A function can be used anywhere a variable or expression is used."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "int.date=iconv(ext.date,\"d\")\nif data='' then kc=1 else kc=dcount(data,am)"
        ]
    },
    {
        "name":"Global Common",
        "Syntax":[
            "Syntax",
            "common \/ID\/variable|array{,variable|array...}"
        ],
        "description":[
            "Global common is a named BASIC variable space used to store variables and arrays in the identified area that is only initialized at logon.",
            "Global common space is common for all levels of the same process (that is, level pushes, executes, file-time bridges & indexes, and so on).",
            "Variables and\/or arrays can be used for communication between programs and subroutines providing interprogram communication."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "common \/person\/ name, company"
        ]
    },
    {
        "name":"ID expression",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "In this example, theIDexpression is\"12345\".",
            "read invoice.item from invoice.file,\"12345\" else...",
            "In this example, the value entered into the variableIDis used as theIDexpression:",
            "input ID\nread record from file,ID else...",
            "Both the literal string'last-ID'and\nthe arithmetic expressionlast-ID+1are ID\u00a0expressions.",
            "read last-ID from ctlfile,'last-ID' then\nwrite item on datafile,last-ID+1\nwrite last-ID+1 on ctlfile,'last-ID'\nend"
        ]
    },
    {
        "name":"Logical expressions",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "Thethenclause\nis taken whenxis a nonzero numeric. Whetherxis a numeric constant, or an ASCII string, any nonzero\nnumeric value ofxis true.",
            "if x then...",
            "This printsAn apple, becausechr = \"a\".",
            "word = \"apple\"\nchr = word[1,1]\nprint \"A\":\nprint str(\"n\",chr=\"a\" or chr = \"e\" or chr = \"i\" or chr = \"o\" or chr = \"u\") :\nprint \" \":word",
            "In this example, thethenclause is\nexecuted ifvisit.dateevaluates to a nonzero numeric.",
            "visit.date = customer.item<5>\nif visit.datethen...",
            "Thethenclause is taken ifxis between 1 and 10, exclusive.",
            "if x > 1 and x < 10 then...",
            "Thethenclause is taken ifxis between either 1 and 10, exclusive, or between100and 200, inclusive.",
            "if (x > 1 and x < 10) or (x >= 100 and x <= 200) then...",
            "Theprinter onstatement is executed\nif the value ofprint.flagis notn.",
            "if not(print.flag = \"n\") then printer on"
        ]
    },
    {
        "name":"Masking",
        "Syntax":[
            "Syntax",
            "str.exp mask.exp\n"
        ],
        "description":[
            "Masking is the process of formatting expressions using numeric masks and format masks."
        ],
        "parameter":[
            "Parameter(s)",
            "{r|l|d{n}{s}{z}{,}{c}{$}({{{f},l}...})",
            "r|l|dSpecifies right-(r) or left-(l) aligned. The default is left. Thedspecifier functions identically to therand is provided for compatibility reasons only.nNumber of digits after a decimal\npoint\u2014this is a single numeric digit that specifies the number of\ndigits to print following the decimal point. Ifn=0, the decimal point is not output. If the\nnumber of digits following the decimal point is greater than the number\nspecified byn, the output is rounded.sScaling factor\u2014this is a single\nnumeric digit that specifies to descale the value by the precision\npower of 10. For example, ansvalue of 2 changes\n1000 to 10.zSuppresses leading zeros.,Inserts commas between every\nthousands position of the value.cSigncode:cOutputsCRafter negative values. Two spaces\nfollow positive or zero values.dOutputsDBafter positive values. Two spaces\nfollow negative or zero values.eEncloses negative values within angle brackets (<>). A space follows positive or zero values.mPlaces a-to the right of negative values.\nA space follows positive or zero values. Ordinarily, the minus sign\ndisplays to the left of negative numbers.nSuppresses the-on negative values.=$Appends a dollar sign to beginning\nof value.fFill character. The fill characters\nbelow are available, wherenspecifies the length\nup to 32,767 characters:%nFills withnzeros.#nFills withnspaces.*nFills withnasterisks.lLength.",
            "Any other character, including parentheses, can be included\nin the fill mask. The characters are output exactly as they appear\nin the mask. If a dollar sign is placed outside of the format mask,\nit is output just prior to the value, regardless of the filled field.\nIf a dollar sign is used within the format mask, it is output in the\nfurthest position to the left regardless of the filled field. Parentheses\nare ignored if they are the first character of a mask.",
            "The numeric\nmask code controls justification, precision, scaling, and credit indication.",
            "The format mask code controls field length and fill characters.\nThe entire format string is enclosed in quotation marks. If a format\nmask is used, it should be enclosed in parentheses within the quotation\nmarks.",
            "The entire format string can be used as a literal, or\nit can be assigned to a variable. A format string literal can immediately\nfollow the string it is to format. A format string variable must be\nseparated by at least one space from the string it is to format. The\nformat string can also be used directly in conjunction with theprintstatement.",
            "These mask codes must be entered\nin the order they are listed:",
            "d{ }If specified before any other mask, this specifies standard\ndate conversions, and any other mask code is ignored. SeeProcessing codesfor more information,cIf specified before any other mask, the various character\nmasks can be specified (for example,cuorcl), just like theoconv(string,\"mcu\")."
        ],
        "example":[
            "Example(s)",
            "This value inxis left-aligned, in a field of 12 characters. If the value ofxis the wordtest, the output prints as\nfollows (spaces are represented by lowercaseb):",
            "x = test\nprint x \"l(#12)\"\ntestbbbbbbbb",
            "yis printed right-aligned, fill space,\nin a field of 15 characters. \u00a0If the value ofyis the word hello, the output is as follows (spaces are represented\nby lowercaseb):",
            "y = hello\nprint y \"r(#15)\"\nbbbbbbbbbbhello",
            "Unlike themr2conversion used in anoconv()oriconv()function, this masks\nthe value ofzbased on the current value of precision\nin BASIC run time. If the value ofzis 78657767\nand the current precision is 4, then the amount of scaling is the\nrequested scaling factor minus the precision. Because the scaling\nfactor is equal to the precision, no scaling takes place. After evaluating\nthe scaling, the mask adds two zeros after the decimal point, and\njustifies the result in a field of asterisks. Because the mask is\nnot specified with a sufficient amount of asterisks to contain the\nresult, only the 12 characters that are furthest to the right are\ndisplayed.",
            "z = 78657767\nprint z \"r24z,e$(*12)\"\n,657,767.00",
            "This example outputs the external format of the current\nsystem date, right-aligned, fill space, in a field of 10 characters.",
            "print oconv(date(),\"d2\/\") \"r(#10)\"\nbbmm\/dd\/yy"
        ]
    },
    {
        "name":"Named common",
        "Syntax":[
            "Syntax",
            "common \/ID\/ variable|array{,variable|array...}\n"
        ],
        "description":[
            "A named common is a global, common, BASIC variable space used to store variables and arrays in the area identified by ID. Named common space is initialized only at logon and released at logoff.",
            "Named common space is common for all levels of the same process (that is, level pushes, executes, file-time bridges and indexes, and so on).",
            "Variables and\/or arrays can be used for communication between programs and subroutines providing interprogram communication."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "common \/expenses\/ emp,date,category"
        ]
    },
    {
        "name":"Nonfatal error condition",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "dim array(15)\nfor i = 1 to 15\narray(i) = x\nnext",
            "In BASIC this results in 15 nonfatal error messages:",
            "[B10] in program \"name\", Line 3:\nVariable has not been assigned a value; zero used.",
            "In FlashBASIC it does not result in any nonfatal errors.\n If the array were to be used as a parameter to a BASIC statement\nor function at that time, the nonfatal error would occur.",
            "dim array(15)\nfor i = 1 to 15\narray(i) = x\nnext\n*\n*\ncrt array(7)",
            "In FlashBASIC this results in one nonfatal\nerror message:",
            "[B10] in program \"name\", Line 7:\nVariable has not been assigned a value; zero used."
        ]
    },
    {
        "name":"Nuclear tokens",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "crt oconv(array(1)-array(2),\"mr2\")\nname = field(trim(sentence),' ',2)"
        ]
    },
    {
        "name":"Null evaluation",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Numeric expressions",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "Ifxcontains\na numeric expression,yis also a valid numeric expression.",
            "x = 1\nx = '1'\ny = x:'0'"
        ]
    },
    {
        "name":"Operators",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Precedence",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Relational expressions",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Relational operators",
        "Syntax":[
            "Syntax",
            "exp relational.operator exp\n"
        ],
        "description":[
            "Description",
            "Relational operators are used to compare both strings and\/or numerics.",
            "Relational operators are:",
            "=",
            "#",
            ">=",
            "<=",
            ">",
            "<",
            "These operators first attempt to convert both operands into numerics. If successful, a numeric comparison is performed at the current precision. If unable to convert both operands into numerics, the operators convert both operands to strings and perform a left-to-right comparison.",
            "The value returned is nonzero (true) or 0 (true)."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "The result is0.",
            "print 3 = 2",
            "The result is nonzero because 2 was converted into a string\nthat comes before the string\"dog\"in alphabetical\norder.",
            "print 2 < \"dog\"",
            "The result is nonzero (true). Although the first 3 characters\nofxare actually a string of characters, the=operator was able to successfully convert this into a\nnumber and do a numeric test for equality.",
            "equ am to char(254)\nx = \"623abc\"\nprint 623 = x[1,3]"
        ]
    },
    {
        "name":"Reserved characters",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Reserved words",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Retrieval locks",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Subvalue count expressions",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "In this statement, 3 is used\nas the subvalue count expression.",
            "customer.item<2,1,3> = \"test string\""
        ]
    },
    {
        "name":"statement blocks",
        "Syntax":[
            "Syntax",
            "[am|;] statement{[am|;] statement...} end\nstatement{; statement...}\n"
        ],
        "description":[
            "Description",
            "A statement block is one or more statements that follow a BASIC decision-path related token such as, but not limited to, then, else, locked, and onerr.",
            "am represents an attribute mark and is interchangeable with the ; (semicolon)."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "readt tape.rec then\ncrt \"grabbed record\"\n.\n.\nend",
            "This is the same as:",
            "readt tape.rec then ; crt \"grabbed record\" ; . ; .",
            "In the single-line form,endis not\nallowed.",
            "readt tape.rec onerr crt \"error code: \" : system(0) ; stop"
        ]
    },
    {
        "name":"statement labels",
        "Syntax":[
            "Syntax",
            "statement.label{:} {BASIC statement{s}}\n"
        ],
        "description":[
            "statement labels are used as the destination of a goto or gosub statement.",
            "A statement label consists of a numeric or alphanumeric string of characters placed at the beginning of any BASIC statement or by itself on a line in the program.",
            "BASIC requires labels only on those statements used as destinations for goto or gosub statements.",
            "Numeric statement labels can be any of these formats:",
            "10",
            "1",
            "100.5",
            "01",
            "001",
            "10.02",
            "Each of the above labels is unique.",
            "Alphanumeric statement labels must begin with an alpha character. Any subsequent character in the label can be alphabetical or numeric. An alphanumeric statement label must be followed by a : . If a statement is placed on the same line, it must be separated from the statement label by one or more spaces.",
            "Because D3 allows null statement lines, a statement label can stand by itself on a line."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "LabelDescription1000 * start main loopNumeric statement label.mainline:Alphabetical statement label."
        ]
    },
    {
        "name":"Statements and functions",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"String expressions",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "The string expression consists\nof the literal string,\"the total amount is \", followed\nby the contents of the variable amount.",
            "print \"the total amount is \" : amount",
            "The results of the arithmetic expressionunit.price\n* quantityis converted to ASCII and concatenated to the\nliteral string.",
            "line = \"the total amount is \" : unit.price * quantity",
            "In this example,nameis a string expression.",
            "name = \"Rocket\""
        ]
    },
    {
        "name":"Substrings",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Substring expressions",
        "Syntax":[
            "Syntax",
            "variable[beg.pos.exp, len.exp] = exp\n",
            "variable[len.exp] = exp\n"
        ],
        "description":[
            "A substring expression extracts or assigns substrings by using the [\u00a0and\u00a0]\u00a0characters.",
            "Substring assignment allows assigning a substring to a variable."
        ],
        "parameter":[
            "Parameter(s)",
            "beg.pos.expIndicates the starting position in the expression.If 0 is specified, the expression is inserted at the beginning of the\n                              target string.If the number specified is greater than the length of the string,\n                              spaces are appended to the end of the string to account for the value\n                              ofbeg.pos.expprior to the expression being added\n                              to the result.If the number specified is less than0, spaces are\n                              inserted between the expression and the string for a length equal to\n                              the absolute value ofbeg.pos.exp.len.expNumber of characters to overlay within the string\n                              expression.Syntax Example 1If 0 is specified, the expression is inserted prior to the starting\n                              character position within the string.If the number specified is greater than0, the\n                              corresponding number of characters in the string are overlaid.If the number specified is less than0, thenlen.expdefaults to0.If the number specified is greater than the number of characters in\n                              the string, starting from the starting position count, thenlen.expdefaults to the number of characters\n                              within the string, minus the starting position count.If the length of thesubstr.expto overlay is\n                              greater than thelen.exp, the additional characters\n                              are included in the resulting expression.Only the number of\n                                 characters specified inlen.expare overlaid.\n                                 The additional characters are inserted prior to the next position\n                                 in the original expression.Syntax Example 2When thebeg.pos.expposition is omitted, then the\n                           right-most length expression characters are replaced in the\n                        string."
        ],
        "example":[
            "Example(s)",
            "This example assigns the letter\"a\"to the first character of the\n            string variable. After assigning the letter \"a\", the string contains\"abcd\".",
            "string = \"abcd\"\nstring[1,1] = \"a\"",
            "This example results in the string,'axxxd'. Notice that the additional\n            characters beyond the length of the overlay are inserted.",
            "string = 'abcd'\nstring[2,2] = 'xxx'",
            "The following program example tests various combinations of substring replace.",
            "string = \"abcdef\"\ns = string ; s[ 0 , 0]= \"xx\"; crt s\ns = string ; s[ 0 , 1]= \"xx\"; crt s\ns = string ; s[ 1 , 1]= \"xx\"; crt s\ns = string ; s[-1 , 0]= \"xx\"; crt s\ns = string ; s[-1 , 1]= \"xx\"; crt s\ns = string ; s[-1 ,-1]= \"xx\"; crt s\ns = string ; s[ 7 , 0]= \"xx\"; crt s\ns = string ; s[ 7 , 1]= \"xx\"; crt s\ns = string ; s[ 7 ,-1]= \"xx\"; crt s\ns = string ; s[ 8 , 1]= \"xx\"; crt s",
            "The output of the previous program example is:",
            "xxabcdef\nxxbcdef\nxxbcdef\nxx abcdef\nxx bcdef\nxx abcdef\nabcdefxx\nabcdefxx\nabcdefxx\nabcdef xx",
            "The following program example outputs as:",
            "string=\"#####\"; s=string\nfor x=3 to 7\n   for j=3 to 7\n      s[x,j]='..'\n      crt s\n   next j\nnext x\nend"
        ]
    },
    {
        "name":"Symbol table (BASIC)",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"then\/else statement blocks",
        "Syntax":[
            "Syntax",
            "then statement.block\nelse statement.block\nthen statement.block else statement.block\n"
        ],
        "description":[
            "Description",
            "then\/else statement blocks are found in conjunction with conditional statements.",
            "The most notable case is the if statement, which requires either a then or an else clause.",
            "The statements that allow or require then and\/or else     clauses are called initiators. In all statements that allow or require      then and\/or else:",
            "The possible syntactic structures are:",
            "When both then and else clauses are present, the then clause can be considered to be the initiator of the else clause. All other characteristics are identical, except that an else clause can succeed a then clause.",
            "Within the then clause, the then token is the initiator, which requires a terminator. The clause can exist on one or more than one line. The nature of the terminator varies between these cases.",
            "NULL statements are often included in then or           else clauses as placeholders. A NULL statement performs no action.         However, you can use NULL statements to make the logic of a conditional more clear and         easier to read.",
            "If the then clause is           omitted, the statement would make sense to the compiler, but it might not be clear to the           user. The NULL statement is used to make clear to the user that if the match returns a           value of true, no action is taken."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "Example 1",
            "The forms for the single-line clause are shown as follows:thenstatement;statement;...;\nthenstatement;statement;...;else",
            "Example 2",
            "The following is an example of the form of the multi-line clause:then ;statement;statement; end\nthen ;statement;statement; end else ;statement;statement; end",
            "Example 3",
            "In this case, eacheolcharacter can be either a Enter or a semicolon.\n        This means that a multi-line clause can be contained in either one or more than one physical\n        line. This case typically displays as:then\nstatement\nstatement\nend",
            "For program clarity, the statements are indented from the beginning of the initiator, and\n        thethenorend elseare aligned with the beginning of\n        the initiator.",
            "Example 4",
            "The following is an example testing if a value is\n        numeric:IF NUM(PRICE) THEN\n           NULL\nEND ELSE\n     PRINT \"ERROR: NON-NUMERIC PRICE. STOP\"\nSTOP\nEND"
        ]
    },
    {
        "name":"Value count expression",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "In this statement,1is used as the value count expression.",
            "crt customer.item<2,1> = \"test string\""
        ]
    },
    {
        "name":"Variables",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"BASIC clauses",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"do clause",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"else clause",
        "Syntax":[
            "Syntax",
            "logical.exp else statement.block\n"
        ],
        "description":[
            "The else clause is the inline clause for the if statement to execute when it evaluates to false."
        ],
        "parameter":[
            "Parameter(s)",
            "logical.expExpression to be tested. If it evaluates to nonzero, it is\nconsidered true. If it evaluates to 0, it is false.elsestatement.blockExecutes the specified statements if the logical expression\nevaluates to 0."
        ],
        "example":[

        ]
    },
    {
        "name":"locked clause",
        "Syntax":[
            "Syntax",
            "locked statement.block\n"
        ],
        "description":[
            "Description",
            "The locked clause is used when the requested item is locked and waiting is not desired."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "readu cust.item from fv.cust,ID locked print ID:\" is locked by port \":system(0)"
        ]
    },
    {
        "name":"onerr clause",
        "Syntax":[
            "Syntax",
            "onerr statement.block\n"
        ],
        "description":[
            "Description",
            "The onerr clause identifies the statements to execute when an error occurs during statements that perform operations on peripheral storage devices.",
            "The system(0) function contains the error message associated with the  onerr condition.",
            "The onerr clause is used in the same construct as the then\/else construct.",
            "Either an onerr clause or an else clause is allowed in a statement, but not both. They are similar, in that they are taken when the peripheral operation takes a decision-point or failure path. The onerr form provides a great deal more functionality, but at a higher cost. When the onerr clause exists, all media handling must be handled by the program. This means, for example, that the program is responsible for handling an end of reel condition. Thus the program would have to prompt the operator for the next reel. By contrast, the  else clause would handle the same situation by passing through the standard system routine to:"
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "In this example, theonerrpath is taken in the event of any abnormal condition,\nand it displays the value ofsystem(0).",
            "readt tape.rec onerr\n   crt \"oops. we've got a system(0) error of \" : system(0)\nend",
            "This example illustrates how processing for an error could\nbe divided out based upon the error that occurred.",
            "readt tape.rec onerr\n   condition = system(0)\n   begin case\n   case condition = 1\n      print \"tape is NOT attached...\"\n   case condition = 5\n      print \"process end of reel\"\n   case condition = 6\n      print \"tape is write-protected\"\n   end case\nend"
        ]
    },
    {
        "name":"on error clause",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"setting clause",
        "Syntax":[
            "Syntax",
            "setting var\n"
        ],
        "description":[
            "The setting clause defines the variable to receive the index results of a get or locate statement."
        ],
        "parameter":[
            "Parameter(s)",
            "varVariable to receive the index results of agetorlocatestatement."
        ],
        "example":[

        ]
    },
    {
        "name":"then clause",
        "Syntax":[
            "Syntax",
            "logical.exp then statement.block\n"
        ],
        "description":[
            "The then clause specifies which statements to execute when the conditional statement evaluates to true."
        ],
        "parameter":[
            "Parameter(s)",
            "logical.expExpression to be tested. If it evaluates to nonzero, it is\nconsidered true. If it evaluates to 0, it is false.thenstatement.blockExecutes the specified statements if the logical expression\nevaluates to nonzero."
        ],
        "example":[

        ]
    },
    {
        "name":"until clause",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"while clause",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"BASIC functions",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"@() function",
        "Syntax":[
            "Syntax",
            "@(num.exp{,num.exp})\n"
        ],
        "description":[
            "Description",
            "The @() function provides a standard means of performing control functions on a wide array of terminals.",
            "Special cursor-control characters for the current terminal type (as defined by the term settings in effect at the time) can be generated by using negative values with the @() function. The values generated by the @() function are specified in the TCL define-terminal command.",
            "Many of the functions below do not behave properly unless the term type setting of the TCL term command corresponds to the emulation type currently defined in the terminal.",
            "If additional, customized @() functions are added, it is recommended that they start at @(-1001) or so. This ensures that they do not conflict with existing or future functions.",
            "Use of any of the @() functions invalidates the system(4), system(5), and system(6) function results.",
            "Embedded visual attributes. Some terminals, when they change visual display modes such as blink, underline, and protected-field, take up a position on the visual display to activate the mode change. Such a terminal is said to have the visual attribute embedded in the display, rather than having hidden visual attributes. This is not a terminal function, but a way to notify the program that the terminal does or does not use a space in visual attributes, allowing it to keep track of the current cursor position.",
            "0 = Visual attributes are hidden.",
            "1 = Visual attributes are embedded.",
            "For UNIX: Inter-job sequence for shared printers on UNIX systems. Sends a string of trailing characters at the end of a print job to indicate to the UNIX spooler services that this print job has terminated (closed). The character sequence cannot with two or more of the same characters.",
            "For Windows: Not supported.",
            "@() function codes 301 - 399 below support calling Windows Printer API methods. Two types of Windows Printer @() function codes are provided: ",
            "For UNIX: Not supported. Set the page orientation.",
            "For portrait orientation: @(-357,1)",
            "For landscape orientation: @(-357,2)",
            "Since the orientation affects the entire printed page, this function must be included at the beginning of your document."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "The program below tests most\nof the commonly used@()functions:",
            "print @(-1)\nprint @(-2)\nprint @(1,2):\u2019clear from cursor position to end of the screen\u2019\nprint str(\u2019*\u2019,250)\nprint @(12,2):\nprint @(-3)\nprint @(1,2):\u2019clear from cursor position to end of the line\u2019\nprint str(\u2019*\u2019,250)\nprint @(12,2):\nprint @(-4)\nprint @(1,6):\nprint @(-5):\u2019blink on\u2019:@(-6):\u2019blink off\u2019\nprint @(-13):\u2019reverse video on\u2019:@(-14):\u2019 reverse video off\u2019\nprint @(-15):\u2019underline on\u2019:@(-16):\u2019 underline off\u2019\nprint @(-100):\u2019half intensity\u2019:@(-101):\u2019 full intensity\u2019\nprint \u2019backspace 10 times\u2019:\nfor i=1 to 10\n   print @(-9):\n   sleep(1)\nnext i\nprint\nprint \u2019forward 10 times\u2019:\nfor i=1 to 10\n   print @(-19):\nnext i\nprint\nprint \u2019move cursor down 5 lines\u2019:\nfor i=1 to 5\n   print @(-20):i:@(-9):\n   sleep(1)\nnext i\nprint\nprint \u2019move cursor up 5 lines\u2019:\nfor i=1 to 5\n   print @(-10):i:@(-9):\nnext i\n   print @(2,22):\"we\u2019re done!\"",
            "The example below uses two@()functions.\nThe first,@(-1), clears the screen and positions\nthe cursor to the home position. The second,@(20,0), positions the cursor at column position 20, row position 0, and\nleaves the cursor positioned there to output the literal main menu.\nThe:character at the end of\nthe statement leaves the cursor positioned immediately to the right\nof the literal, suppressing the automatic CR\/LF combination ordinarily\nsent out after a print string.",
            "print @(-1): @(20,0): \"main menu\" :"
        ]
    },
    {
        "name":"abs() function",
        "Syntax":[
            "Syntax",
            "abs(num.exp)\n"
        ],
        "description":[
            "The abs() function returns the absolute (positive) portion of the integer number derived from the given numeric expression."
        ],
        "parameter":[
            "Parameter(s)",
            "num.expExpression resulting in an integer number.",
            "Note:If the expression is nonnumeric, 0 is assumed."
        ],
        "example":[
            "Example(s)",
            "x = -1\ny = abs(x)\nprint y\n1"
        ]
    },
    {
        "name":"access() function",
        "Syntax":[
            "Syntax",
            "access(num.exp)\n"
        ],
        "description":[
            "Description",
            "The access() function provides data about the AQL or Update processor environments when the program is called from a dictionary.",
            "This complete set of num.exp can only be used  in subroutines that are called from a dictionary item when in AQL or the Update processor and allows information about the controlling environment to be read and altered by the subroutine. Limited access() functionality is provided for  callc, calld, calle, callo, callr, and callx triggers."
        ],
        "parameter":[
            "Parameter(s)",
            "num.exp1File variable for data portion of file.2File variable for dictionary portion of file.3When used from a file-time subroutine, this is the working\nversion of the item. When used from an attribute definition call,\nthis is the item from the associated file. In either case, the item\nis in dynamic array format. Note that when used from a file-time subroutine,\nthis dynamic array has the same contents as the argument that is passed\nto the subroutine.4Item counter (the number of items processed to the current\npoint).5Attribute counter (the number of attributes processed).6Value counter (the number of values processed).7Subvalue counter (the number of subvalues processed).8Detail line counter (the number of lines processed). Valid\nonly when aroll-onclause has been specified.9Break-on level counter in AQL reports.10Item-ID.11Dictionary and data file names.Note:If the dict and\ndata file names are identical, only the data filename is returned.12Item delete bit. Returns 1 if the item is being deleted.13Root variable.14Returns current cursor column position (in the Update processor).15Returns current cursor row position (in the Update processor).16New item bit. Returns 1 if item is new.17Returns 1 if performing input-conversion.18Used in the input-conversion attribute of the file D-pointer\nto specify which value of attribute 15 (macro attribute) to use.19Returns the character that ended the last input, usually an\nEnter, CTRL+U, and so on.20Item changed bit.0=item not changed1=item changedThis is valid only when called from the Update processor using a\ncall correlative.21Used from a FlashBASIC subroutine called by the Update processor\nto place characters in the Update processor command string. For example,access(21) = \"xe\"in a subroutine called from the input-conversion\ncauses the Update processor to exit after the attribute calling the\nsubroutine is re-entered.22Returns a nonzero (usually 1) if the spelling checker is enabled,\nor 0 if it is not.access(22)can be assigned a 1\nin a subroutine called by the input conversion of a file-defining\nitem. Even if the spelling checker is disabled for the user session,\nthis invokes the speller for the editing of this item or list of items.\nThe speller only works on attributes with an attribute type ofw.23Returns the calling environment.0 if the function was called from BASIC.1 if the function was called from acallxor from an index.2 if the function was called from the Update processor (except\nfor acallxor index).3 if the function was called from AQL.24Returns the actual attribute number of the attribute definition.\nAvailable only within the Update processor.25Returns the left margin from the Update processor.26Returns 1 if acallxwas initiated from\naclear-fileoperation. If the program setsaccess(26)to zero during aclear-file, then thecallxis not called for any of the\nother items during thatclear-fileoperation. This\ncan lead to significant performance gains in certain situations.27Returns the name of the account containing the D-pointer for\nthe file from which the BASIC program was called via a trigger or\na call from a correlative.50Returns 1 if the item was in UNICODE.NOTE\u2014FlashBASIC does not currently support UNICODE, therefore the item\nis converted to ANSI and back to UNICODE after the trigger completes.",
            "Theaccess(3)andaccess(10)functions can be used to pass data both ways between a FlashBASIC\nor BASIC program and a data file.",
            "When either of these two statements\ndisplay on the right of the=assignment operator,\ndata is passed to the program. When they are used to the left of the\n=\u00a0assignment operator, data is passed from the program to the\nfile.",
            "access(3)can be updated only from an\ninput-conversion of a dictionary item. It cannot be updated as a conversion,\ncorrelative, or in a D-pointer input-conversion.",
            "The item-IDs\nas well as the remainder of the attribute values within those items\ncan be modified directly through the Update processor using input-conversion\nor correlative attributes in dictionary items.",
            "All of theaccess()functions share a common buffer. It is not currently\npossible to combine references to AQL elements on the same line. For\nexample:",
            "cmd = \"list \":access(11):\" \":access(10)",
            "does not work, but",
            "file = access(11); item = access(10)\ncmd = \"list \":file:\" \":item",
            "does work.",
            "There can be considerably more overhead\nwhen calling a BASIC program from a dictionary over using an intrinsic\nprocessing code, depending on how complex the processing code has\nto be.",
            "A simple code:",
            "a3+5",
            "or",
            "an(amount)*n(quantity)",
            "is much faster than performing the operation by calling\na BASIC program. However, performing any complex logical processing\nor out-of-context work is best done in a subroutine."
        ],
        "example":[
            "Example(s)",
            "The program below is called from\na hot key in the Update processor. It gets the current file name fromaccess(11)and executes a special help processor. Theaccess(21)macro return function is set to CTRL+ZP, which\nredisplays the current screen.",
            "subroutine do.help(item)\nfile.name = access(11)\ntcl \"help \":file.name\naccess(21)= \"z\u2019p\u2019\"\nreturn",
            "This example works as well for the Update processor as\nit does for AQL to extract the last element of a value (or subvalue)\nlist. The date stamp is attribute 11 of the item.maxis the total number of MultiValue elements on the stamp. Ifmaxis 0, there is no stamp. Ifmaxis\nnonzero, the last value is extracted and placed into the active data\nvalue,fld.",
            "subroutine get.last.date.stamp(fld)\ndate.stamp = access(3)<11>\nmax = dcount(date.stamp,char(253))\nif max = 0 then return\nfld = access(3)<11,max>\nreturn"
        ]
    },
    {
        "name":"alpha() function",
        "Syntax":[
            "Syntax",
            "alpha(exp)\n"
        ],
        "description":[
            "The alpha() function evaluates the expression and returns 1 (true) if every character in the string is alphabetical (that is, a\u2014z upper and lowercase), or 0 (false) if any character is nonalphabetical.",
            "The empty (null) string (\"\") is considered nonalphabetical."
        ],
        "parameter":[
            "Parameter(s)",
            "expString to be tested for the existence of alphabetical characters."
        ],
        "example":[
            "Example(s)",
            "If the value of the variable,response, is made up of only alpha characters, it is assigned\nto the first element ofarray.",
            "if alpha(response) then array(1) = response"
        ]
    },
    {
        "name":"ascii() function",
        "Syntax":[
            "Syntax",
            "ascii(exp)\n"
        ],
        "description":[
            "Description",
            "The ascii() function converts a string of EBCDIC-encoded characters into their equivalent ASCII values.",
            "The ascii() function is the inverse of the ebcdic() function."
        ],
        "parameter":[
            "Parameter(s)",
            "expString of EBCDIC-encoded characters to convert."
        ],
        "example":[

        ]
    },
    {
        "name":"assigned() function",
        "Syntax":[
            "Syntax",
            "assigned(var)\n"
        ],
        "description":[
            "Description",
            "The assigned() function determines if the variable has been assigned a value.",
            "If  var has an assigned value, a nonzero value (true) is returned. If no value is assigned, 0 (false) is returned.",
            "The assigned() function determines if common variables have been previously     assigned.",
            "The assigned() function works well in BASIC subroutines called from the      call AQL processing code. It prevents files from being repeatedly opened and     variables from continually being re-initialized."
        ],
        "parameter":[
            "Parameter(s)",
            "varVariable to check for assignment."
        ],
        "example":[
            "Example(s)",
            "The following example determines if the file variablefv.entityhas been\n    assigned previously with thefilestatement. If it has not been assigned, thefilestatement is executed.",
            "if not(assigned(fv.entity)) then file entity"
        ]
    },
    {
        "name":"change() function",
        "Syntax":[
            "Syntax",
            " change(str.exp, search.str, replacement.str{,occurrences{,start}})\n"
        ],
        "description":[
            "             The change() function searches a str.exp for the                   search.str. If the                         search.str is at the start occurrence,                   then replacement.str replaces search.str for                   the amount specified in             occurrences."
        ],
        "parameter":[
            "Parameter(s)",
            "str.expString in which the specifiedsearch.stris searched.search.strString to search for instr.exp.replacement.strString to replace the specifiedsearch.str.occurrencesSpecifies the number of occurrences ofsearch.strto be replaced byreplacement.str. If not\n                                                specified, the default is\n                                                0,\n                                                which replaces all found occurrences.startSpecifies on which occurrence of search string the\n                                                replacement begins.If not specified, the\n                                                  default is 1."
        ],
        "example":[
            "Example(s)",
            "Example 1",
            "This code assigns the value\"The old time\"tonstring.",
            "nstring = change(\"The new time\",\"new\",\"old\")",
            "Example 2",
            "This code outputs\"++-\". Thechange()function replaces two\n                        occurrences of\"-\"starting at the first occurrence.",
            "print change(\"---\",\"-\",\"+\",2,1)"
        ]
    },
    {
        "name":"char() function",
        "Syntax":[
            "Syntax",
            "char(num.exp)\n"
        ],
        "description":[
            "Description",
            "The char() function converts a number between 0 and 255 to its corresponding ASCII character equivalent."
        ],
        "parameter":[
            "Parameter(s)",
            "num.expNumber between 0 and 255 to be converted to the corresponding\nASCII character equivalent. Numbers over 255 are adjusted into the\nrange 0 to 255 by taking the number modulo 256."
        ],
        "example":[
            "Example(s)",
            "This causes the terminal to beep\nonce.",
            "crt char(7)",
            "This concatenates anescapewith akand assigns it to string.",
            "string = char(27):\"k\"",
            "This creates a constant at compile time to reference attribute\nmarks.",
            "equ am to char(254)"
        ]
    },
    {
        "name":"col1() function",
        "Syntax":[
            "Syntax",
            "col1()\n"
        ],
        "description":[
            "Description",
            "The col1() function returns the numeric column position of the character immediately preceding the substring retrieved in the most recently executed field() function.",
            "The parentheses following the function are required, and contain no arguments.",
            "col1() allows nonsystem delimited strings to be handled like dynamic arrays.",
            "If the search value does not exist in the string being searched by the field() function, 0 is returned for the col1() function."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "This example removesredfromcolors.",
            "colors = \"blue*green*red*yellow*orange\"\nname = field(colors,\"*\",3)\nstart.pos = col1() ;* start.pos is 11\nend.pos = col2() ;* end.pos is 15\ncolors = colors[1,start.pos]:colors[end.pos+1,100]"
        ]
    },
    {
        "name":"col2() function",
        "Syntax":[
            "Syntax",
            "col2()\n"
        ],
        "description":[
            "Description",
            "The col2() function returns the numeric column position of the character following the substring retrieved in the most recently executed field() function.",
            "The parentheses following the function are required, and contain no arguments.",
            "col2() allows nonsystem delimited strings to be handled like dynamic arrays.",
            "If the (search) value does not exist in the string being searched by the field() function, and the field requested is 1, then col2() returns the length of the string. If the same situation occurs, but the field requested is 2 or higher, then the col2() returns 0."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "This example removesgreenfrom thecolors.",
            "colors = \"blue*green*red*yellow\"\nname = field(colors,\"*\",2)\nstartpos = col1() ;* start.pos is 5\nendpos = col2() ;* end.pos is 11\ncolors = colors[1,startpos]:colors[endpos+1,100]"
        ]
    },
    {
        "name":"convert() function",
        "Syntax":[
            "Syntax",
            " result = convert(var, str.exp1, str.exp2)\n"
        ],
        "description":[
            "Description",
            "The convert() function searches a given variable and replaces each occurrence of a character by another.",
            "The original string is not modified unless it is also specified as the result string. ",
            "Any character designated in str.exp1 is replaced with the                 corresponding replacement character from str.exp2. The                 correspondence is by column position in str.exp1 and                     str.exp2."
        ],
        "parameter":[
            "Parameter(s)",
            "varVariable in which the specified string will be searched and\nreplaced.str.exp1Specifies the characters to be replaced with the corresponding\nreplacement characters fromstr.exp2.str.exp2Specifies the characters to replace the characters specified\ninstr.exp1."
        ],
        "example":[
            "Example(s)",
            "Example\n                1* convert commas to attribute marks\n var = \"a,b,c\"\n str.exp1 = \",\"\n str.exp2 = @AM\n result = convert( var, str.exp1, str.exp2 )\n crt \"var = \" : var\n crt \"result = \" : result",
            "Example\n                2* convert commas to dots, and dots to commas\n var = \"12,345,678.90\"\n str.exp1 = \",.\"\n str.exp2 = \".,\"\n result = convert( var, str.exp1, str.exp2 )\n crt \"var = \" : var\n crt \"result = \" : result"
        ]
    },
    {
        "name":"cos() function",
        "Syntax":[
            "Syntax",
            "cos(num.exp)\n"
        ],
        "description":[
            "Description",
            "The cos() function calculates the trigonometric cosine of an angle of a specified numeric expression in the range 0 to 360 degrees.",
            "Values that are less than 0 or greater than 360 are adjusted using the integer division function: mod(angle, 360)."
        ],
        "parameter":[
            "Parameter(s)",
            "num.expAngle from 0 through 360 from which the trigonometric cosine\nis to be calculated."
        ],
        "example":[

        ]
    },
    {
        "name":"count() function",
        "Syntax":[
            "Syntax",
            "count(str.exp1, str.exp2)\n"
        ],
        "description":[
            "The count() function returns the number of occurrences of  str.exp2 within  str.exp1."
        ],
        "parameter":[
            "Parameter(s)",
            "str.exp1Specifies the string expression in which to search for occurrences\nofstr.exp2.str.exp2Specifies the string expression to locate withinstr.exp1."
        ],
        "example":[
            "Example(s)",
            "This displays the number of spaces\nin the string held in the variablesentence, which is equal to 3.",
            "sentence = \"sam is home alone\"\nprint count(sentence,\u2019 \u2019)"
        ]
    },
    {
        "name":"date() function",
        "Syntax":[
            "Syntax",
            "date()\n"
        ],
        "description":[
            "Description",
            "The date() function returns the current system date in internal format as an integer number representing the number of days that have elapsed since December 31, 1967 (day 0 on the D3 calendar).",
            "The parentheses following the function are required, and must not contain arguments. Without the parentheses, date is assumed to be a variable."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "This calculates the number of\ndays elapsed between the value ofinvoice.dateand\nthe current system date.",
            "number.days = date() - invoice.date",
            "This calculates the number of weeks elapsed between the\nvalue ofinvoice.dateand the current system date.",
            "weeks.old = (date() - invoice.date) \/ 7"
        ]
    },
    {
        "name":"dcount() function",
        "Syntax":[
            "Syntax",
            "dcount(str.exp1, str.exp2)\n"
        ],
        "description":[
            "Description",
            "The dcount() function returns the number of occurrences of the delimiter specified in  str.exp2 within  str.exp1, plus one.",
            "The difference between this function and the count() function is that 1 is added to the result unless the string referenced in  str.exp1 is null."
        ],
        "parameter":[
            "Parameter(s)",
            "str.exp1Specifies the string expression, plus one, in which to search\nfor the delimiter specified instr.exp2.str.exp2Specifies the delimiter to locate withinstr.exp1."
        ],
        "example":[
            "Example(s)",
            "how.manycontains\nthe number of attributes instring. In this example,\nthere are 3 and each attribute displays on the terminal in a separate\nline.",
            "string = \"a\" : char(254) : \"b\" : char(254) : \"c\"\nhow.many = dcount(string,char(254))\nfor amc = 1 to how.many\ncrt string<amc>\nnext amc",
            "In this example,sentenceis entered\nfrom the keyboard. The string insentenceis trimmed\nof excess spaces, and the number of words delimited by spaces is counted\nusingdcount(). The words are then printed on separate\nlines.",
            "input sentence\nsentence = trim(sentence)\nmaxwords = dcount(sentence,\u2019 \u2019)\nfor wordcnt = 1 to maxwords\nprint field(sentence,\u2019 \u2019,wordcnt)\nnext wordcnt"
        ]
    },
    {
        "name":"delete() function",
        "Syntax":[
            "Syntax",
            "delete(dyn.array.exp, ac.exp)\ndelete(dyn.array.exp, ac.exp, vc.exp)\ndelete(dyn.array.exp, ac.exp, vc.exp, sc.exp)\n"
        ],
        "description":[
            "Description",
            "The delete() function removes a specific attribute, value, or subvalue from a dimensioned or dynamic array.",
            "The delete() function returns a copy of the dynamic array without the deleted element. It does not change the original string unless specifically designated in an assignment statement."
        ],
        "parameter":[
            "Parameter(s)",
            "dyn.array.expDynamic array from which the specified attribute, value, or\nsubvalue will be deleted.ac.expAttribute to delete.vc.expValue to delete.sc.expSubvalue to delete."
        ],
        "example":[
            "Example(s)",
            "This example deletes the valueredfrom the dynamic array names. The reference to attribute\n1 is required. The absence of attribute marks incolorsrequires it be treated as a single attribute.",
            "equ vm to char(253)\ncolors = \"blue\":vm:\"green\":vm:\"red\":vm:\"yellow\"\nnames = delete(colors,1,3)",
            "read cust.item from cust.file,item-ID else cust.item = \"\"\nlocate(date(),cust.item,date.flds;vx) then\nwrite delete(cust.item,date.flds,vx) on cust.file,item-ID\nend"
        ]
    },
    {
        "name":"dquote() function",
        "Syntax":[
            "Syntax",
            "dquote(str.exp)\n"
        ],
        "description":[
            "Description",
            "The dquote() function extracts a double-quoted string from  str.exp.",
            "The dquote() function returns the first substring found that is surrounded by double quotation marks. If no substring is found matching this criteria, then a null string is returned."
        ],
        "parameter":[
            "Parameter(s)",
            "str.expString from which to extract the double-quoted string."
        ],
        "example":[

        ]
    },
    {
        "name":"dtx() function",
        "Syntax":[
            "Syntax",
            "dtx(num.exp)\n"
        ],
        "description":[
            "The dtx() function converts a given decimal number to its corresponding hexadecimal equivalent. The number is first converted to an integer by truncating the fractional part."
        ],
        "parameter":[
            "Parameter(s)",
            "num.expSpecifies the decimal number to be converted to its corresponding\nhexadecimal equivalent. In the range {+\/-}140737488355327*(10(-p)), whereprepresents the precision\nnumber."
        ],
        "example":[
            "Example(s)",
            "The variablefidis a decimal D3 frame number (frame-ID). This program shows the\nframe-ID in hexadecimal.",
            "input fid\ncrt \"hex of \" : fid : \" is \" : dtx(fid)"
        ]
    },
    {
        "name":"ebcdic() function",
        "Syntax":[
            "Syntax",
            "ebcdic(str.exp)\n"
        ],
        "description":[
            "The ebcdic() function converts a string of ASCII-encoded characters into their equivalent EBCDIC values."
        ],
        "parameter":[
            "Parameter(s)",
            "str.expString of ASCII-encoded characters to convert into their equivalent\nEBCDIC values."
        ],
        "example":[
            "Example(s)",
            "The ASCII string rec is written\nto tape in EBCDIC.",
            "writet ebcdic(rec) else..."
        ]
    },
    {
        "name":"ereplace() function",
        "Syntax":[
            "Syntax",
            " ereplace(str.exp, search.str, replacement.str{,occurrences{,start}})\n"
        ],
        "description":[
            "The                   ereplace() function searches a str.exp for             the search.str. If the                         search.str is at the start occurrence,                   then replacement.str replaces search.str for                   the amount specified in             occurrences."
        ],
        "parameter":[
            "Parameter(s)",
            "str.expString in which the specifiedsearch.stris searched.search.strString to search for instr.exp.replacement.strString to replace the specifiedsearch.str.occurrencesSpecifies the number of occurrences ofsearch.strto be replaced byreplacement.str. If not\n                                                specified, the default is\n                                                0,\n                                                which replaces all found occurrences.startSpecifies on which occurrence of search string the\n                                                replacement begins.If not specified, the\n                                                  default is 1."
        ],
        "example":[
            "Example(s)",
            "Example 1",
            "This code assigns the value\"The old time\"tonstring:",
            "nstring = ereplace(\"The new time\",\"new\",\"old\")",
            "Example 2",
            "This code outputs\"++-\". Theereplace()function replaces two occurrences of\"-\"starting at the\n                        first occurrence.",
            "print ereplace(\"---\",\"-\",\"+\",2,1)"
        ]
    },
    {
        "name":"error() function",
        "Syntax":[
            "Syntax",
            "error()\n"
        ],
        "description":[
            "The error() function retrieves the TCL command used to activate the program and loads it into a specified variable."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "If the one-line, cataloged program\ncalled test is executed as shown, it displays the command line.",
            "test\n001 crt error()"
        ]
    },
    {
        "name":"exchange() function",
        "Syntax":[
            "Syntax",
            " exchange(var, str.exp1, str.exp2)\n"
        ],
        "description":[
            "Description",
            "The exchange() function replaces the character specified as a   hexadecimal string in str.exp1 with the character specified as a hexadecimal   string in str.exp2.",
            "This function works like the convert() function, except that the second two     arguments are specified as hexadecimal strings and only a single character can be exchanged."
        ],
        "parameter":[
            "Parameter(s)",
            "varSpecifies the variable in which the specified string will be searched and replaced.str.exp1Specifies the character in hexadecimal string format to be replaced with the corresponding\n        replacement character in hexadecimal string format fromstr.exp2.str.exp2Specifies the character in hexadecimal string format to replace the character specified in\n        hexadecimal string format instr.exp1."
        ],
        "example":[
            "Example(s)",
            "Example 1",
            "In this example, the result isbbc:crt exchange(\"abc\",dtx(seq(\"a\")),dtx(seq(\"b\")))",
            "Example 2",
            "* exchange commas to attribute marks\n var = \"a,b,c\"\n str.exp1 = \"2c\"\n str.exp2 = \"fe\"\n result = exchange( var, str.exp1, str.exp2 )\n crt \"var = \" : var\n crt \"result = \" : result"
        ]
    },
    {
        "name":"exp() function",
        "Syntax":[
            "Syntax",
            "exp(num.exp)\n"
        ],
        "description":[
            "Description",
            "The exp() function returns the exponential of a numeric expression, that is, base\u00a0e, which is 2.718281828 rounded to precision to the power of the numeric expression.",
            "This function is the inverse of the ln() (natural logarithm) function."
        ],
        "parameter":[
            "Parameter(s)",
            "num.expValue of the expression in the range {+\/-}140737488355327*(10(-p)), wherepis the precision."
        ],
        "example":[
            "Example(s)",
            "print exp(5)148.4132"
        ]
    },
    {
        "name":"extract() function",
        "Syntax":[
            "Syntax",
            "extract(dyn.array.exp, ac.exp)\nextract(dyn.array.exp, ac.exp, vc.exp)\nextract(dyn.array.exp, ac.exp, vc.exp, sc.exp)\n"
        ],
        "description":[
            "Description",
            "The extract() function retrieves a specific attribute, value, or subvalue from a dimensioned or dynamic array.",
            "extract() makes a copy of an element in a dynamic array rather than physically removing the element. The original syntax of the extract() function is equally as valid as the dynamic array reference method.",
            "Alternate method, using dynamic array reference symbols:"
        ],
        "parameter":[
            "Parameter(s)",
            "dyn.array.expArray from which the specified attribute, value, or subvalue\nis extracted.ac.expAttribute to extract.vc.expValue to extract.sc.expSubvalue to extract."
        ],
        "example":[
            "Example(s)",
            "All of these examples retrieve\nthe entire first attribute from the dynamic array,customer.item.",
            "print extract(customer.item,1,0,0)\nprint extract(customer.item,1)\nprint customer.item<1>",
            "Both of these examples retrieve the second value from\nthe first attribute of the dynamic array,customer.item.",
            "print extract(customer.item(1),1,2)\nprint customer.item(1)<1,2>",
            "Both of these examples assign the variablenameto the first value from the first attribute of the arraycustomer.item.",
            "name = extract(customer.item(1),1,1)\nname = customer.item(1)<1,1>"
        ]
    },
    {
        "name":"field() function",
        "Syntax":[
            "Syntax",
            "field(str.exp, search.delimiter, num.delimiters, num.substr)\u00a0\n"
        ],
        "description":[
            "Description",
            "The field() function returns a substring from a string expression, by specifying a delimiter and the desired occurrence.",
            "After executing the field() function, the col1() and col2() functions return the beginning and ending positions within the string at which the delimiters were found."
        ],
        "parameter":[
            "Parameter(s)",
            "str.expString from which the substring will be returned.search.delimiterDelimiter to search for. The delimiter is limited to a single\ncharacter. Any additional characters are ignored.num.delimitersNumber of delimiters to skip, plus one, prior to substring\nextraction.num.substrNumber of substrings separated by the specified delimiter\nto be returned."
        ],
        "example":[
            "Example(s)",
            "This causes all characters up\nto the first asterisk ingl.accountto be assigned\nto the variablecompany.code. As a result, afterward,company.codecontains the value, 02.col1()has a value of 0, andcol2()has a value of 3.",
            "gl.account = \"02*4000*11\"\ncompany.code = field(gl.account,\"*\",1)",
            "This causes all characters from the first to the second\nasterisk to be stored in the variable,acct.number, which contains the value, 4000.",
            "acct.number = field(gl.account,\"*\",2)"
        ]
    },
    {
        "name":"fmt() function",
        "Syntax":[
            "Syntax",
            "fmt(str.exp, mask.exp)\n"
        ],
        "description":[
            "The fmt() function is identical to performing a FlashBASIC or BASIC mask."
        ],
        "parameter":[
            "Parameter(s)",
            "str.expExpression to be formatted.mask.expFormatting (mask) to apply to thestr.exp.",
            "Note:This function requires a nondefault$optionssetting on the compiler."
        ],
        "example":[

        ]
    },
    {
        "name":"fold() function",
        "Syntax":[
            "Syntax",
            "fold(str.exp, fold.length.exp{, delimiter})\n"
        ],
        "description":[
            "Description",
            "The fold() function folds a string expression into a string of a given length.",
            "The text is folded (or wrapped) so the length of the first line is less than or equal to the value of the first numeric value in the  fold.length.exp, the length of the second line is less than or equal to the value of the second numeric value in the  fold.length.exp, and so on. If more strings exist than the corresponding number of fold length expressions, the last fold length expression is applied to the remaining strings. If possible, the text is folded on a space.",
            "The delimiter parameter is optional and defaults to char (253) if it is not                 specified. Only the first character of a provided delimiter is used."
        ],
        "parameter":[
            "Parameter(s)",
            "str.expString to be folded.fold.length.expLength to which the string expression is folded. If omitted,\nit defaults to 25. Multiple numeric expressions, separated by value\nmarks, can be specified in this parameter.delimiterDelimiter used in the folded text."
        ],
        "example":[
            "Example(s)",
            "equ svm to char(252)\ninput string\nstring=fold(string,10,svm)\nprint string",
            "When the string:",
            "this is a test string to demonstrate \"fold\"",
            "is entered, the string is embedded with the requested\nsubvalue marks as follows:",
            "this is a\\test\\string to\\demonstrat\\e \"fold\"\na = fold(a,25,\"\")",
            "or",
            "delimiter = \"\"\na = fold(a,25,delimiter)",
            "In the first example a sub-value was specified and used,\nbut in the second example a value mark is used by default as the fold\ndelimiter."
        ]
    },
    {
        "name":"iconv() function",
        "Syntax":[
            "Syntax",
            "iconv(str.exp, conv.exp)\n"
        ],
        "description":[
            "The iconv() function converts a value from its external format to its internal equivalent, according to the processing code being applied."
        ],
        "parameter":[
            "Parameter(s)",
            "str.expSpecifies the external value to convert to its equivalent\ninternal value.conv.expSpecifies the processing code to use for the conversion."
        ],
        "example":[
            "Example(s)",
            "This example convertscheck.amountto internal format, using the\"mr2\"conversion. Run time multiplies by 100 and truncates the decimal\nportion.",
            "check.amount = 12.5\nprint iconv(check.amount,\"mr2\")\n1250",
            "This example convertscheck.dateto internal\nformat, using thedconversion.",
            "check.date = \"02\/27\/02\"\nprint iconv(check.date,\"d\")\n12477",
            "This example performs an AQL group extract of two groups.",
            "string = red*blue*green*yellow*orange\nprint iconv(string,\u2019g0*2\u2019)\nred*blue",
            "Ifanscontainsyorn, the statements following thethenclause\nare executed.",
            "input ans,1\nif iconv(ans,\"p(\u2019y\u2019);(\u2019n\u2019)\")#\"\" then..."
        ]
    },
    {
        "name":"index() function",
        "Syntax":[
            "Syntax",
            "index(str.exp, substr.exp, num.exp)\n"
        ],
        "description":[
            "Description",
            "The index() function searches through a given  str.exp for the occurrence of the character or substring specified by  substr.exp and if found, returns the numeric position where the nth occurrence of the substring begins. Null strings are skipped."
        ],
        "parameter":[
            "Parameter(s)",
            "str.expString to search.substr.expCharacter or substring to search for instr.exp.num.expSpecifies the particular occurrence of the character or substring\nto find (nth occurrence). If not found, 0 is returned."
        ],
        "example":[
            "Example(s)",
            "This returns the value 4 to the\nvariable test, because the first occurrence ofdis\nfound in the fourth position of the string.",
            "d.position = index(\"abcdefg\",\"d\",1)",
            "This example exploits the fact thatindex()returns a number indicating the position of the search character.\nFor instance, if response is the letterd, then it\ngoes to statement label 40.",
            "on index(\"abcdefg\",response,1) goto 10,20,30,40,50,60,70",
            "Ifansis not null and is either ana,b,c,ab, orbc, the loop is terminated. Notice that the\nnull condition must be tested separately because a null value foransresults in a 1 from theindex()function.",
            "loop\ninput ans,1\nuntil ans#\u2019\u2019 and index(\u2019abc\u2019,ans,1) do repeat"
        ]
    },
    {
        "name":"inmat() function",
        "Syntax":[
            "Syntax",
            "inmat()\ninmat(array.var)\n"
        ],
        "description":[
            "Description",
            "The inmat() function returns information about arrays.",
            "When used without any arguments, the inmat() function returns the number elements filled in the last  matparse, matread, or dynamic to static array conversion. Note that inmat() is only valid immediately after these operations. If the number of elements overflowed, then inmat() returns -1.",
            "When used with an array variable, the inmat() function returns the dimensions of that array. If the array has one dimension, then the result is returned as a numeric value. If the array has two dimensions, then the result is returned as a dynamic array of the format \"{maximum rows}]{maximum columns}\"."
        ],
        "parameter":[
            "Parameter(s)",
            "array.varSpecifying an array variable returns the dimensions of that\narray."
        ],
        "example":[
            "Example(s)",
            "dimension x(10)\nprint inmat(x)\nx = \"a\"\nprint inmat()",
            "When run, the program prints:",
            "10\n1"
        ]
    },
    {
        "name":"insert() function",
        "Syntax":[
            "Syntax",
            "insert(dyn.array.exp, ac.exp; str.exp)\ninsert(dyn.array.exp, ac.exp, vc.exp; str.exp)\ninsert(dyn.array.exp, ac.exp, vc.exp, sc.exp; str.exp)\n"
        ],
        "description":[
            "Description",
            "The insert() function inserts the element referenced by  str.exp into a specific attribute, value, or subvalue location in  dyn.array.exp.",
            "-1 can be specified as the attribute count expression, value count expression, or subvalue count expression. Position -1 inserts the expression as the last element in the respective location.",
            "0 can be specified as the attribute count expression. Position 0 inserts the expression as the first attribute. A 0 as the value count expression, or the subvalue count expression is ignored.",
            "Unlike the replace() function, which changes the contents of a dynamic array element without changing its logical position or any other element, the insert() function inserts the results of  str.exp at the specified location and all following information at that dynamic array level (attribute, value, or subvalue) is shifted one position higher in the array. If an attribute count expression of 1 is specified, the expression is inserted before attribute 1, shifting attribute 1 to attribute 2.",
            "The insert(), replace(), and delete() functions force the entire dynamic array (string) to be rebuilt."
        ],
        "parameter":[
            "Parameter(s)",
            "dyn.array.expDynamic array in which the element will be inserted.ac.expAttribute in which the element will be inserted.vc.expValue in which the element will be inserted.sc.expSubvalue in which the element will be inserted.str.expElement to insert in the dynamic array."
        ],
        "example":[
            "Example(s)",
            "These examples are exactly the\nsame. They insert the current value ofnamein attribute\n1 of the array,customer.item. Every other value\nin attribute 1 shifts right by one position. (Value1becomes value2, and so on.) The values of attribute\n1 are shifted, but the other attributes in the item maintain their\nrelative position.",
            "customer.item = insert(customer.item,1,1,0,name)\ncustomer.item = insert(customer.item,1,1;name)"
        ]
    },
    {
        "name":"int() function",
        "Syntax":[
            "Syntax",
            "int(num.exp)\n"
        ],
        "description":[
            "The int() function returns the numeric integer equivalent from a given expression."
        ],
        "parameter":[
            "Parameter(s)",
            "num.expExpression whose numeric integer equivalent is returned."
        ],
        "example":[
            "Example(s)",
            "This example truncates the decimal\nand returns the integer portion of the number.",
            "print int(5.1)\n5",
            "This example illustrates using theint()function to keep one decimal place and truncate the rest.",
            "x = 10.25\ny = int(x*10)\/10\nprint y\n10.2"
        ]
    },
    {
        "name":"len() function",
        "Syntax":[
            "Syntax",
            "len(str.exp)\n"
        ],
        "description":[
            "The len() function returns the length of a string expression."
        ],
        "parameter":[
            "Parameter(s)",
            "str.expExpression whose length is returned."
        ],
        "example":[
            "Example(s)",
            "This assignment statement uses\nthelen()function to delete the last character\nof string.",
            "customer = \"john\"\nname.length = len(customer)\nprint name.length\n4\nstring = \"test\"\nstring = string[1,len(string)-1]\nprint string\ntes",
            "This outputs a5.",
            "string = \u2019abcde\u2019\nprint len(string)",
            "This code gets the length of the result of an arithmetic\nexpression. The result of the arithmetic expression is converted to\nan ASCII string when thelen()function is invoked.\nThe output is 2, because 5 times 10 is 50, and the length of 50 is\n2 characters.",
            "a = 5\nx = len(a * 10)\nprint x\n2"
        ]
    },
    {
        "name":"ln() function",
        "Syntax":[
            "Syntax",
            "ln(num.exp)\n"
        ],
        "description":[
            "Description",
            "The ln() function returns the natural logarithm (base e, which is 2.718281828 rounded to precision) of a given numeric expression.",
            "If the expression is less than or equal to 0, ln returns a 0 and prints a run-time error message.",
            "This function is the inverse of the exp() function."
        ],
        "parameter":[
            "Parameter(s)",
            "num.expNumber to be converted to its natural logarithm form."
        ],
        "example":[

        ]
    },
    {
        "name":"locate() function",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"maximum() function",
        "Syntax":[
            "Syntax",
            "maximum(str.exp)\n"
        ],
        "description":[
            "The maximum() function returns the maximum of a list of numbers delimited by attribute, value, or subvalue marks. If different orders of marks are present, the maximum() function returns the maximum of all fields, regardless of delimiter."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "The result,3.2, displays on the terminal.",
            "equ am to char(254)\ncrt maximum(3:am:3.2)"
        ]
    },
    {
        "name":"minimum() function",
        "Syntax":[
            "Syntax",
            "minimum(str.exp)\n"
        ],
        "description":[
            "The minimum() function returns the minimum of a list of numbers delimited by attribute, value, or subvalue marks. If different orders of marks are present, the minimum() function returns the minimum of all fields, regardless of delimiter."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "The result,3, displays on the terminal.",
            "equ am to char(254)\ncrt minimum(3:am:3.2)"
        ]
    },
    {
        "name":"mod() function",
        "Syntax":[
            "Syntax",
            "mod(dividend, divisor)\n"
        ],
        "description":[
            "Description",
            "The mod() function returns the remainder portion of the result of dividing one number by another.",
            "There is no limitation on the numeric value of dividend or divisor. The rem() and mod() functions are identical."
        ],
        "parameter":[
            "Parameter(s)",
            "dividendNumber to be divided by the number specified indivisor.divisorNumber used to divide the number specified individend."
        ],
        "example":[
            "Example(s)",
            "In this example,mod()is used to find the end of a page. Every 60 lines, a form feed (char(12)) is printed.",
            "for i = 1 to lines\nprint rec<i>\nif not(mod(i,60)) then print char(12):\nnext i"
        ]
    },
    {
        "name":"not() function",
        "Syntax":[
            "Syntax",
            "not(logical.exp)\n"
        ],
        "description":[
            "Description",
            "The not() function returns the logical inverse of the normal outcome of true and false generated by a logical expression.",
            "If the expression evaluates to 0, then 1 is returned. If the expression evaluates to any nonzero value, 0 is returned."
        ],
        "parameter":[
            "Parameter(s)",
            "logical.expExpression to test."
        ],
        "example":[
            "Example(s)",
            "Ifresponseis\nnot numeric, this prints\"not numeric\".",
            "if not(num(response)) then print \"not numeric\""
        ]
    },
    {
        "name":"num() function",
        "Syntax":[
            "Syntax",
            "num(exp)\n"
        ],
        "description":[
            "Description",
            "The num() function evaluates an expression and returns 1 (true) if it is a decimal numeric. Otherwise, it returns 0, if the expression contains any nonnumeric characters.",
            "The empty, or null string (\"\") is considered to be a numeric string.",
            "The strings below are considered to be numeric, and return a 1:",
            ". (period)",
            "- (minus)",
            "+ (plus)",
            "-. (minus\/period)",
            "+. (plus\/period)"
        ],
        "parameter":[
            "Parameter(s)",
            "expExpression to test. If it is a decimal numeric, 1 (true) is\nreturned. If it contains any nonnumeric characters, 0 is returned."
        ],
        "example":[
            "Example(s)",
            "This loop terminates when a numeric\nresponse is entered for the variablenumber.",
            "loop\ninput number\nuntil num(number) do repeat"
        ]
    },
    {
        "name":"occurs() function",
        "Syntax":[
            "Syntax",
            "occurs(str.exp, num.exp)\n"
        ],
        "description":[
            "Description",
            "The occurs() function searches a string for attributes or values that occur consecutively.",
            "This function returns all substrings that occur at least the number of times specified by  num.exp, delimited by the same mark as in the string."
        ],
        "parameter":[
            "Parameter(s)",
            "str.expString to search.num.expNumeric expression that specifies the number of occurrences."
        ],
        "example":[
            "Example(s)",
            "The]represents\na value mark.",
            "string = \u201922]11]11]11]22]11]11]22]11]11\u2019",
            "for n = 1 to 5\nsubstr=occurs(string,n)\nprint n \u2019r%2\u2019 : \u2019 \u2019: substr\nprint dcount(substr,@vm):\u2019 string(s) occurring \u2019:n:\u2019 time(s)\u2019\nnext n",
            "This code outputs:",
            "01 22]11]22]11]22]116 strings occurring 1 time.02 11]11]113 strings occurring 2 times.03 111 string occurring 3 times.040 strings occurring 4 times.050 strings occurring 5 times.",
            "The output for line 01 is each time string is found at\nleast once in a series. On line 02, the substring 11 is found to occur\nin a series of 2 at least twice in the major string. The string 11\nis also found in a series of 3 one time. No 4 or 5 repetitive series\nare found."
        ]
    },
    {
        "name":"oconv() function",
        "Syntax":[
            "Syntax",
            "oconv(str.exp, conv.exp)\n"
        ],
        "description":[
            "The oconv() function converts a value from its internal format to its external equivalent, according to the processing code being applied."
        ],
        "parameter":[
            "Parameter(s)",
            "str.expString to convert from its internal format to its external\nequivalent.conv.expProcessing code used in the conversion."
        ],
        "example":[
            "Example(s)",
            "This example convertscheck.amountto external format, using the\"mr2\"conversion.",
            "print oconv(check.amount,\"mr2\")",
            "This example convertscheck.dateto external\nformat, using the\"d\"conversion.",
            "print oconv(check.date,\"d\")"
        ]
    },
    {
        "name":"pwr() function",
        "Syntax":[
            "Syntax",
            "pwr(num.exp, power.exp)\n"
        ],
        "description":[
            "Description",
            "The pwr() function raises a value contained in an expression to the power of the value of a second expression.",
            "A  power.exp of 0 always returns a 1. A  num.exp of 0 returns a 0.",
            "As with all functions that require numeric expressions, if any of the arguments evaluate to a nonnumeric value, this run-time warning message displays:"
        ],
        "parameter":[
            "Parameter(s)",
            "num.expValue to raise to the power of the value ofpower.exp.power.expValue whose power is applied to the value ofnum.exp."
        ],
        "example":[
            "Example(s)",
            "This statement prints a 9, the\nresult of 3 taken to the power of 2.",
            "print pwr(3,2)",
            "In this statement,3^2is identical topwr(3,2).",
            "print 3^2",
            "This statement prints the square root of the value stored\nin the variablexyz. This is equivalent to:print sqrt(xyz)",
            "print pwr(xyz,.5)"
        ]
    },
    {
        "name":"rem() function",
        "Syntax":[
            "Syntax",
            "rem(dividend, divisor)\n"
        ],
        "description":[
            "Description",
            "The rem() function returns the remainder portion of the result of dividing one number by another.",
            "There is no limitation on the numeric value of the dividend or divisor. The rem() and mod() functions are identical."
        ],
        "parameter":[
            "Parameter(s)",
            "dividendNumber to be divided by the number specified indivisor.divisorNumber used to divide the number specified individend."
        ],
        "example":[
            "Example(s)",
            "rem()is used\nto find the end of a page. Every 60 lines, a form feed (char(12)) is printed.",
            "for i = 1 to lines\n   print rec<i>\n   if not(rem(i,60)) then print char(12):\nnext i"
        ]
    },
    {
        "name":"replace() function",
        "Syntax":[
            "Syntax",
            "replace(dyn.array.exp, ac.exp; str.exp)\nreplace(dyn.array.exp, ac.exp, vc.exp; str.exp)\nreplace(dyn.array.exp, ac.exp, vc.exp, sc.exp, str.exp)\n"
        ],
        "description":[
            "Description",
            "The replace() function inserts or replaces a specific attribute, value, or subvalue in the string referenced by  dyn.array.exp with the value referenced in  str.exp.",
            "-1 can be specified as the  ac.exp,  vc.exp, or  sc.exp. This appends  str.exp as the last element in the respective location. If the last character of  str.exp is not the correct separator, the appropriate mark character (attribute, value, or subvalue) is inserted before the expression is added.",
            "Alternate method, using dynamic array reference symbols:"
        ],
        "parameter":[
            "Parameter(s)",
            "dyn.array.expAttribute, value, or subvalue to replace with the value instr.exp.ac.expAttribute (or, the attribute that contains the value or subvalue)\nthat contains the specifieddyn.array.expto replace.vc.expValue (or, the value that contains the subvalue) that contains\nthe specifieddyn.array.expto replace.sc.expSubvalue that contains the specifieddyn.array.expto replace.str.expValue to replace the value specified indyn.array.exp."
        ],
        "example":[
            "Example(s)",
            "In these examples, value 1 of\nattribute 1 in the first element of the dimensioned array,customer.item, is replaced with the data value in the variablename.",
            "customer.item(1) = replace(customer.item(1),1,1,0,name)\ncustomer.item(1) = replace(customer.item(1),1,1;name)",
            "This can alternately be coded as:",
            "customer.item(1)<1,1> = name",
            "The statements below add a new value at the end of attribute\n1 ofstring.",
            "string<1,-1> = value\nstring = replace(string,1,-1,0,value)\nstring = replace(string,1,-1;value)"
        ]
    },
    {
        "name":"rnd() function",
        "Syntax":[
            "Syntax",
            "rnd(num.exp)\n"
        ],
        "description":[
            "The rnd() function generates a random number."
        ],
        "parameter":[
            "Parameter(s)",
            "num.expSpecifies the maximum number minus one from which thernd()function creates a random number. The minimum number\nis always 0. the maximum value allowed is 32,000."
        ],
        "example":[
            "Example(s)",
            "Thernd()function\nin this example generates a random number between 1 and 8. 1\u00a0is\nadded to the result to ensure that the increment is never zero.",
            "increment = rnd(8) + 1"
        ]
    },
    {
        "name":"scan() function",
        "Syntax":[
            "Syntax",
            " scan(str.exp, search.delimiters)\n"
        ],
        "description":[
            "Description",
            "The scan() function searches through a specified          str.exp for the first occurrence of up to three user-definable       characters specified by search.delimiters, in addition to the system       delimiters value, subvalue, and attribute.",
            "The following information applies to the scan() function:"
        ],
        "parameter":[
            "Parameter(s)",
            "str.expSpecifies the string to search.search.delimitersSpecifies up to three user-definable characters to be searched for in addition to the system\n                        delimiters value, subvalue, and attribute. The user-defined characters must\n                        be separated by a system delimiter."
        ],
        "example":[
            "Example(s)",
            "Example 1",
            "The following example returns the value 5 to the variabled.position. This is\n            because the first occurrence of either\\\u2019\\or\\\"\\is\n            found in the fifth position of the string.String = \\The \"first\" or \u2019second\u2019 name.\\\n d.position = scan(string,\\\u2019\\:@am:\\\"\\)",
            "Example 2",
            "Ifansis either ana,b, orc, the loop is terminated. Notice that a null value foransresults in a 0 from thescan()function.loop\n input ans,1\n until scan(\u2019abc\u2019,ans) do repeat"
        ]
    },
    {
        "name":"sentence() function",
        "Syntax":[
            "Syntax",
            "sentence()\n"
        ],
        "description":[
            "The sentence() function is identical to performing a tclread statement. It returns the TCL command used to activate the program into a variable."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"seq() function",
        "Syntax":[
            "Syntax",
            "seq(ascii.character.exp)\n"
        ],
        "description":[
            "Description",
            "The seq() function converts any ASCII character to its corresponding numeric equivalent in the range 0 through 255.",
            "This seq() function is the opposite of the char() function.",
            "Any expression can be used as an argument, but all characters are ignored beyond position 1.",
            "The seq of a null string ends up using the segment mark (x\u2019ff\u2019) end-of-string delimiter as the argument resulting in a value of 255."
        ],
        "parameter":[
            "Parameter(s)",
            "ascii.character.expSpecifies the ASCII character to convert to its corresponding\nnumeric equivalent in the range 0\u00a0through 255."
        ],
        "example":[
            "Example(s)",
            "This example stops when any control\ncharacter is input.",
            "input c,1\nif seq(c)<32 then stop"
        ]
    },
    {
        "name":"sin() function",
        "Syntax":[
            "Syntax",
            "sin(num.exp)\n"
        ],
        "description":[
            "Description",
            "The sin() function calculates the sine of an angle specified in degrees.",
            "The result of this function is a fraction in the range -1 to 1.",
            "This function is only accurate to 3 digits.",
            "Trigonometric function results can vary slightly between FlashBASIC or BASIC compilers."
        ],
        "parameter":[
            "Parameter(s)",
            "num.expSpecifies the angle used to calculate the sine. If the expression\nis less than 0 or greater than 360 degrees,mod(exp,360)is used to adjust it to this range before the sine is calculated."
        ],
        "example":[

        ]
    },
    {
        "name":"sort() function",
        "Syntax":[
            "Syntax",
            "sort(str.exp{{,ac.exp{,vc.exp}}; 'sequence.exp'})\n"
        ],
        "description":[
            "Description",
            "The sort() function sorts an attribute or value mark delimited  str.exp in ascending order.",
            "If the expression contains both attribute and value marks, this function replaces all marks with the type first encountered.",
            "A second sort() function is available that works in a manner similar to the locate statement. In this expanded version, the user can specify in which attribute, and\/or value the list resides as well as the sort sequence to use.",
            "The sort() function performs a left-aligned string sort only. For example:",
            "displays:",
            " ",
            "displays:"
        ],
        "parameter":[
            "Parameter(s)",
            "str.expString, attribute or value mark\nto sort in sequence order.ac.expAttribute (or, the attribute\nthat contains the value or subvalue) that contains the specifiedstr.expto sort. Ifac.expis used,\nthesequence.expis required.vc.expValue (or, the value that contains\nthe subvalue) that contains the specifiedstr.expto sort.'sequence.exp'Sequence expression. This expression must be surrounded by quotes.Note:Non-integer numbers as\n                              well as mixing numeric and non-numeric data types may return\n                              unexpected results.alPseudoleft-justified ascending sort.arPseudoright-justified ascending sort.dlPseudoleft-justified descending sort.drPseudoright-justified descending sort."
        ],
        "example":[
            "Example(s)",
            "list=\u2019zebra\u2019:@vm:\u2019albatross\u2019:@vm:\u2019gooney bird\u2019:@vm:\u2019elephant\u2019\nnewlist=sort(list)",
            "The variablenewlistcontains the string:",
            "albatross]elephant]gooney bird]zebra",
            "The]represents a value mark.",
            "The following example illustrates the use of the'sequence.exp'.",
            "nums = 1:@vm:10:@vm:11:@vm:12:@vm:2:@vm:13:@vm:3\nsortednums = sort(nums, 1; 'ar')\ncrt sortednums",
            "displays:",
            "1]2]3]10]11]12]13"
        ]
    },
    {
        "name":"soundex() function",
        "Syntax":[
            "Syntax",
            "soundex(str.exp{,code})\n"
        ],
        "description":[
            "Description",
            "The soundex() function returns the 4-digit soundex   code for a phonetic string expression.",
            "The code consists of the first letter of the word, plus values for the next three additional     consonants. If there are less than three consonants, 0s are placed in the code. ",
            "The codes are values given to consonants. Words with a similar arrangement of consonants have     similar codes, regardless of the actual spelling. Also, similar sounding consonants can have the     same code."
        ],
        "parameter":[
            "Parameter(s)",
            "str.expSpecifies the phonetic string\nexpression from which the 4-digit soundex code is returned.codeProvides backward compatibility.\nOptions are:0Original census soundex (default).1English-language soundex."
        ],
        "example":[
            "Example(s)",
            "This outputs\"P220\".",
            "crt soundex(\"PICK\")"
        ]
    },
    {
        "name":"space() function",
        "Syntax":[
            "Syntax",
            "space(num.exp)\u00a0\n"
        ],
        "description":[
            "The space() function generates a string of spaces of a length equal to the value of the numeric expression."
        ],
        "parameter":[
            "Parameter(s)",
            "num.expSpecifies the number of spaces in the generated string."
        ],
        "example":[
            "Example(s)",
            "crt \"name\" : space(22) : \"phone number\""
        ]
    },
    {
        "name":"sqrt() function",
        "Syntax":[
            "Syntax",
            "sqrt(num.exp)\n"
        ],
        "description":[
            "Description",
            "The sqrt() function calculates the square root of a given numeric expression.",
            "Precision is kept for up to 9 digits."
        ],
        "parameter":[
            "Parameter(s)",
            "num.expNumeric expression from which the square root is calculated.\nIfnum.expis negative, the function returns 0\nand prints an error message."
        ],
        "example":[
            "Example(s)",
            "print sqrt(25)"
        ]
    },
    {
        "name":"squote() function",
        "Syntax":[
            "Syntax",
            "squote(str.exp)\n"
        ],
        "description":[
            "Description",
            "The squote() function extracts a single-quoted string from  str.exp.",
            "The squote() function returns the first substring found that is surrounded by single quotation marks. If no substring is found matching this criteria, then a null string is returned."
        ],
        "parameter":[
            "Parameter(s)",
            "str.expString to be searched for in single quotation marks."
        ],
        "example":[

        ]
    },
    {
        "name":"status() function",
        "Syntax":[
            "Syntax",
            " status()\n"
        ],
        "description":[
            "The status() function returns the value of system(0)."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"str() function",
        "Syntax":[
            "Syntax",
            "str(str.exp, num.exp)\n"
        ],
        "description":[
            "The str() function repeats a  str.exp the number of times specified in  num.exp."
        ],
        "parameter":[
            "Parameter(s)",
            "str.expString to repeat.num.expNumber of times to repeat the string."
        ],
        "example":[
            "Example(s)",
            "Prints 79asterisks\nat the current cursor (or print head) position.",
            "print str(\"*\",79)",
            "Prints a string of=. The number of=that print is determined bysystem(2), which contains the current device output width most recently designated\nwith a TCLtermcommand.",
            "print str(\"=\",system(2))"
        ]
    },
    {
        "name":"sum() function",
        "Syntax":[
            "Syntax",
            "sum(str.exp)\n"
        ],
        "description":[
            "Description",
            "The sum() function returns the sum of a list of numbers delimited by attribute, value, or subvalue marks. If different orders of marks are present, the sum() function computes the sum of each sublist.",
            "The sum() function supports string math."
        ],
        "parameter":[
            "Parameter(s)",
            "str.expList of numbers, delimited by attribute, value, or subvalue\nmarks, from which the sum is calculated."
        ],
        "example":[
            "Example(s)",
            "The result,6.2, displays on the terminal.",
            "crt sum(3:@am:3.2)",
            "The result,6.2^8, prints becausesumrecognizes that there were two lists present, separated\nby an attribute mark.",
            "print sum(3:@vm:3.2:@am:6:@vm:2)"
        ]
    },
    {
        "name":"summation() function",
        "Syntax":[
            "Syntax",
            " summation(str.exp)\n"
        ],
        "description":[
            "Description",
            "The summation() function returns the sum of a list of numbers delimited by attribute, value, or subvalue marks.",
            "If different orders of marks are present, the summation() function adds the contents of all fields regardless of the delimiter."
        ],
        "parameter":[
            "Parameter(s)",
            "str.expList of numbers, delimited by attribute, value, or subvalue\nmarks, from which the sum is calculated."
        ],
        "example":[
            "Example(s)",
            "In this example the result is6.2.",
            "crt summation(3:@am:3.2)"
        ]
    },
    {
        "name":"swap() function",
        "Syntax":[
            "Syntax",
            " swap(str.exp, search.str, replacement.str {,occurrences{,start}})\n"
        ],
        "description":[
            "The       swap() function searches a str.exp for the       search.str. If the                         search.str is at the start occurrence,                   then replacement.str replaces search.str for                   the amount specified in             occurrences."
        ],
        "parameter":[
            "Parameter(s)",
            "str.expString in which the specifiedsearch.stris searched.search.strString to search for instr.exp.replacement.strString to replace the specifiedsearch.str.occurrencesSpecifies the number of occurrences ofsearch.strto be replaced byreplacement.str. If not\n                                                specified, the default is\n                                                0,\n                                                which replaces all found occurrences.startSpecifies on which occurrence of search string the\n                                                replacement begins.If not specified, the\n                                                  default is 1."
        ],
        "example":[
            "Example(s)",
            "Example 1",
            "This code assigns the value\"The old time\"tonstring.",
            "nstring = swap(\"The new time\",\"new\",\"old\")",
            "Example 2",
            "This code outputs\"++-\". Theswap()function replaces\n        two occurrences of\"-\"starting at the first occurrence.",
            "print swap(\"---\",\"-\",\"+\",2,1)"
        ]
    },
    {
        "name":"system() function",
        "Syntax":[
            "Syntax",
            " system(num.exp,{pib})\n"
        ],
        "description":[
            "The system() function provides an interface to a number of system       variables, depending on the requested numeric argument."
        ],
        "parameter":[
            "Parameter(s)",
            "num.expAn expression evaluating to a system function code, as listed in the\n                        following table of system function codes."
        ],
        "example":[
            "Example(s)",
            "Usingsystem(37)",
            "Example 1",
            "When performing anexecutecommand of a UNIX shell command, the UNIX\n            command aborts if it gets a break signal (the normal action in UNIX). The following code\n            determines that a break has occurred and re-executes the UNIX instruction, giving the\n            appearance of a standard D3 break-and-continue capability:",
            "do.unix:\n * Clear the interrupt value\n x = system(37)\n execute \"!exec find \/ -name ap - print\"\n * Break - return, reexecute\n if system(37) = 10 then goto do.unix",
            "Example 2",
            "Another useful application is for a FlashBASIC or BASIC program to mimic the behavior of\n            the Update Processor\u2019s interrupt handling and redraw the screen background if it senses\n            an interrupt. For example:",
            "gosub refresh\n open \"data\"\n select\n loop\n    readnext ID else exit\n    read rec from ID\n    name = rec<1>\n    balance = rec<2>\n    balance = balance + 50\n    print @(20,2):name\n    print @(20,3):balance\n    if system(37) then gosub refresh; * Screen display might be changed\n repeat\n stop\n refresh:\n * Draw the background\n print @(-1)\n print @(10,1):\"Processing Accounts\"\n print @(10,2):\"Name:\"\n print @(10,3):\"Balance:\"\n return",
            "By usingsystem(37)in conjunction with thebreak\n               offstatement, a FlashBASIC or BASIC program can implement its own signal\n            handler.",
            "For example, assume a user wants to update many items in a file, but wants this done\n            atomically. Either all the items in the file must be updated or none of the items must\n            be updated. This is a form of transaction bracketing and can be implemented on previous\n            releases by turning off the BREAK key.",
            "However, this method has the disadvantage of not being able to interrupt the process.\n            Thesystem(37)capability provides the ability to offer a controlled\n            interrupt allowing the user to continue, or back out of all changes that have been made.",
            "Example 3",
            "This routine could be expanded to allow other operations provided it did not turn the\n            BREAK key on (which causes the system to catch the break and push a level, allowing the\n            user to typeend). For example:",
            "break off\n * clear previous signals\n x = system(37)\n max = 2000\n dim xx(max)\n for i = 1 to max\n    readu xx(i) from i\n    writeu \"abc\" on i\n    * break key hit\n    if system(37) = 10 then gosub interrupt\n next i\n * Release the locks\n for i = 1 to max\n    release i\n next i\n stop\n interrupt:\n print \"Interrupted\"\n print \"Processed \":i:\" items\"\n print \"C)ontinue or Q)uit without modifying file:\":\n in x\n print\n x = char(x)\n if x = \"q\" then\n    * Change the items back to the way they were\n    max = i\n    for i = 1 to max\n       * note that write releases the locks along the way\n       write xx(i) on i\n    next i\n    stop\n end\n return",
            "Example 4",
            "Thesystem(37)function also increases the capabilities of D3 in the\n            area of inter-process communications. For example, a batch job can pollsystem(37)repeatedly. When it senses an interrupt, it can either\n            send a message indicating its progress or perform some other, more complex action by\n            reading a command item from a file. Note that usingsystem(37)is\n            much more efficient than reading statements and writing status output for every item.\n            For example:",
            "* clear status\n xx = system(37)\n open \"data\"\n for i = 1 to 100000\n    * In a real program, there should be more work done in the main loop. \n    * Otherwise, the system(37) becomes comparatively more expensive.\n    write \"abc\" on i\n    if system(37) then execute \"msg !0 Processed \":i:\" items.\"\n next i\n stop\n * \"z\" the preceding program and then type the following\n * tcl (line#) (user) who\n *\n * The actual command executed is unimportant. The who command is a good candidate\n * because it's cheap and has no side effects.\n *\n * Note that the msg does not work with phantoms, but the \"tcl\" command does.",
            "Example 5: Usingsystem(38)",
            "include dm,bp,includes sysID.inc\n imp=system(38)\n if imp<sys$host>=sys$unix then\n    * Running on UNIX implementation\n    n=%open(\"myfile, O$RDONLY)\n    ...\n end",
            "Example 6: Usingsystem(100)",
            "crt system(100)\n D3UNIX:RS6000;AIX;pick0:prod0;2;3;000047311000;6.0.0.m0;27 May 2001"
        ]
    },
    {
        "name":"ta() function",
        "Syntax":[
            "Syntax",
            "ta(expr)"
        ],
        "description":[
            "Description",
            "The ta() function returns the number of characters in the type-ahead   buffer for the current process or for any other process.",
            "When the type-ahead feature is on for a process, the ta() function returns     the number of characters in the type-ahead buffer. The type-ahead buffer holds a maximum of 127     characters at a time. If the type-ahead feature is off, the ta() function     returns 0.",
            "To toggle the type-ahead feature on and off for the current process, the ta      on and ta off statements may be used. To clear the type-ahead     buffer for the current process, the ta clear or inputclear     statement can be used. ",
            "See ta statement for more information on controlling the     type-ahead feature for the current process or for any other process."
        ],
        "parameter":[
            "Parameter(s)",
            "exprAn expression evaluating to the line number of the process to be checked.Ifexprevaluates to any negative number, the number of characters in the\n         type-ahead buffer for the current process is returned.Ifexprevaluates to a number greater than the allowable maximum number of users, -1 is returned to\n         indicate an error."
        ],
        "example":[
            "Example(s)",
            "crt \"Target process\": ; input process\nif process = \"\" then stop\ncrt \"Chars in ta buff for process \":process:\" is \":ta(process)"
        ]
    },
    {
        "name":"tan() function",
        "Syntax":[
            "Syntax",
            "tan(num.exp)\n"
        ],
        "description":[
            "Description",
            "The tan() function calculates the trigonometric tangent of the angle specified in degrees.",
            "The numeric expression is normalized to the range of 0\u2013360 degrees."
        ],
        "parameter":[
            "Parameter(s)",
            "num.expAngle, specified in degrees from 0\u2013360, to calculate its trigonometric\ntangent."
        ],
        "example":[
            "Example(s)",
            "tan.10 = tan(10)"
        ]
    },
    {
        "name":"time() function",
        "Syntax":[
            "Syntax",
            "var = time()\n"
        ],
        "description":[
            "Description",
            "The time() function returns the current system time in its internal format, representing the number of seconds past midnight.",
            "The parentheses following the function are required, and never contain any arguments."
        ],
        "parameter":[
            "Parameter(s)",
            "varVariable to which the internal system time is returned."
        ],
        "example":[
            "Example(s)",
            "This example outputs the current\nsystem time in external format.",
            "print \u2019the time is \u2019:oconv(time(),\u2019mth\u2019)",
            "This is an example of a loop that terminates under two\nconditions. Either a key is pressed on the keyboard (system(14)) or 30 seconds has passed without any keystrokes. If no keys are\nwaiting and the time-out is not over, sleep for a second and check\nagain.",
            "start.time=time()\nloop until (time()-start.time)>30 or system(14) do\nrqm\nrepeat"
        ]
    },
    {
        "name":"timedate() function",
        "Syntax":[
            "Syntax",
            "var = timedate()\n"
        ],
        "description":[
            "Description",
            "The timedate() function returns the current system time and date in external format (hh:mm:ss dd mmm yyyy).",
            "The parentheses following the function are required, and never contain any arguments."
        ],
        "parameter":[
            "Parameter(s)",
            "varVariable to which the external time and date is returned."
        ],
        "example":[
            "Example(s)",
            "This example showstimedate()used for a menu heading.",
            "print @(0,0):\u2019main menu\u2019:@(0,50):timedate():"
        ]
    },
    {
        "name":"trim() function",
        "Syntax":[
            "Syntax",
            "trim(str.exp, {trimchar{,type}})\n"
        ],
        "description":[
            "Description",
            "The trim() function removes leading, trailing, and\/or redundant characters from a string.",
            "If only one parameter is specified, trim() removes all leading and trailing spaces from a string expression, and compresses multiple embedded spaces to one embedded space."
        ],
        "parameter":[
            "Parameter(s)",
            "str.expString from which the specified\ncharacters are removed.trimcharSpecifies the specific leading,\ntrailing, or redundant character to trim. If specified, then that\ncharacter substitutes for the space.typeIf specified, then thetrim()behavior can be controlled more specifically. If\nnot specified, then typeRis assumed. Available\nvalues are:ATrim all.BTrim leading and trailing.LTrim leading.TTrim trailing.RTrim redundant."
        ],
        "example":[
            "Example(s)",
            "After trimming, string contains:\"cat dog bird\".",
            "string = trim(\" cat dog bird \")",
            "In this case, thetrim()function is\nused to convert fixed length fields to variable length fields by removing\ntrailing and leading spaces.",
            "readt record else stop\nname = trim(record[1,25])\naddress = trim(record[26,40])",
            "The program:",
            "line = \u2019--a--b--c--\u2019\nprint trim(line,\u2019-\u2019)\nprint trim(line,\u2019-\u2019,\u2019L\u2019)\nprint trim(line,\u2019-\u2019,\u2019T\u2019)\nprint trim(line,\u2019-\u2019,\u2019B\u2019)\nprint trim(line,\u2019-\u2019,\u2019A\u2019)\nprint trim(line,\u2019-\u2019,\u2019R\u2019)",
            "produces the output:",
            "-a-b-c\na--b--c--\n--a--b--c\na--b--c\nabc\n-a-b-c-"
        ]
    },
    {
        "name":"trimb() function",
        "Syntax":[
            "Syntax",
            "trimb(str.exp)\n"
        ],
        "description":[
            "Description",
            "The trimb() function removes trailing spaces from a string."
        ],
        "parameter":[
            "Parameter(s)",
            "str.expSpecifies the string from which trailing spaces are removed."
        ],
        "example":[

        ]
    },
    {
        "name":"trimf() function",
        "Syntax":[
            "Syntax",
            "trimf(str.exp)\n"
        ],
        "description":[
            "Description",
            "The trimf() function removes leading spaces from a string."
        ],
        "parameter":[
            "Parameter(s)",
            "str.expSpecifies the string from which leading spaces are removed."
        ],
        "example":[

        ]
    },
    {
        "name":"unassigned() function",
        "Syntax":[
            "Syntax",
            "unassigned(var)\n"
        ],
        "description":[
            "Description",
            "The unassigned() function indicates whether a variable has an   assigned value.",
            "The unassigned() function returns a non-zero value (true) if the variable      (var) is currently unassigned. If the variable has an assigned value, a 0     (false) is returned. ",
            "The unassigned() function determines if common variables have been     previously assigned.",
            "The unassigned() function works well in BASIC subroutines called from the      call AQL processing code. It prevents files from being repeatedly opened and     variables from continually being re-initialized."
        ],
        "parameter":[
            "Parameter(s)",
            "varVariable to check for assignment."
        ],
        "example":[
            "Example(s)",
            "Use theunassigned()function when an application attempts to open files\n    only once and keeps the file variables in a COMMON block.",
            "It is more effective to modify theopenstatements in existing programs,\n    for example:",
            "if unassigned(var) then open ... tovar...",
            "This can be done rather than change the application to open all files as soon as the user logs\n    on and remove all subsequentopenstatements from all other existing\n    programs."
        ]
    },
    {
        "name":"xtd() function",
        "Syntax":[
            "Syntax",
            "xtd(str.exp)\n"
        ],
        "description":[
            "Description",
            "The xtd() function converts an expression from its hexadecimal format into its equivalent decimal format.",
            "When a nonhexadecimal string is passed to the xtd() function, 0 is returned."
        ],
        "parameter":[
            "Parameter(s)",
            "str.expHexadecimal expression to convert to decimal format."
        ],
        "example":[
            "Example(s)",
            "This assigns10tonumber.",
            "number = xtd(\"a\")"
        ]
    },
    {
        "name":"BASIC operators",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"! logical operator",
        "Syntax":[
            "Syntax",
            "logical.exp ! logical.exp\n"
        ],
        "description":[
            "The ! logical operator indicates an or operation in a logical expression."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "This illustrates the!as anoroperator.",
            "if x < 0 ! x > 10 then..."
        ]
    },
    {
        "name":"# relational operator",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"& logical operator",
        "Syntax":[
            "Syntax",
            "exp & exp\n"
        ],
        "description":[
            "The and boolean operator indicates that both components of a logical expression must be true."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"* arithmetic operator",
        "Syntax":[
            "Syntax",
            "num.exp * num.exp\n"
        ],
        "description":[
            "The * (asterisk) arithmetic operator is a mathematical operator indicating a multiply operation."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "Illustrates using the asterisk\narithmetic operator to indicate multiplication.",
            "gross.wages = hours.worked * hourly.rate"
        ]
    },
    {
        "name":"*= assignment operator",
        "Syntax":[
            "Syntax",
            "variable *= num.exp\n"
        ],
        "description":[
            "The *= assignment operator multiplies a numeric expression and assigns it to the variable."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "Multiplies the current value\nofxby2and assigns the result\ntox. This is equivalent to:x = x * 2",
            "x *= 2"
        ]
    },
    {
        "name":"+ arithmetic operator",
        "Syntax":[
            "Syntax",
            "num.exp + num.exp\n"
        ],
        "description":[
            "The + arithmetic operator performs addition or indicates a positive numeric value."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "Adds1to the\nvariable,x.",
            "x = x + 1",
            "Adds the values in the variablespriceandtaxand assigns the result tosubtotal.",
            "subtotal = price + tax",
            "This is a complex arithmetic statement that first multiplies\ntheunit.costbyqtyand then adds\nthe results to the variable calledtax. The left\nand right parentheses are used to explicitly group precedence.",
            "subtotal = tax + (unit.cost * qty)"
        ]
    },
    {
        "name":"+= assignment operator",
        "Syntax":[
            "Syntax",
            "variable += num.exp\n"
        ],
        "description":[
            "The += assignment operator adds a given numeric expression and assigns it to the given variable."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "Adds1to the\nvariable,x.",
            "x += 1",
            "The statement below:",
            "total += tax",
            "is equivalent of the statement:",
            "total = total + tax"
        ]
    },
    {
        "name":"- arithmetic operator",
        "Syntax":[
            "Syntax",
            "num.exp - num.exp\n"
        ],
        "description":[
            "The - arithmetic operator designates a subtraction operation, or to indicate a negative numeric value."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "Subtracts1from the contents of variablex.",
            "x = x - 1",
            "Negates the contents ofzand adds\nto the contents ofx. The result is placed inx.",
            "x = x + (-z)",
            "Subtracts the contents of the variablediscount.amountfrom the variableprice. Places the result in\nthe variableamount.",
            "amount = price - discount.amount",
            "Subtracts the contents of variablediscount.amountfrom the product ofunit.costandqty. The()are used to group precedence are unnecessary\ndue to default precedence. They are added for program clarity.",
            "amount = (unit.cost * qty) - discount.amount",
            "This assigns the value,-1, to the\nvariablecounter.",
            "counter = -1"
        ]
    },
    {
        "name":"\\ arithmetic operator",
        "Syntax":[
            "Syntax",
            "dividend \\ divisor\n"
        ],
        "description":[
            "Description",
            "The \\ operator (also called the remainder operator) calculates the remainder of dividing the dividend by the divisor (otherwise known as the modulo).",
            "There is no limitation on the numeric value of the dividend or divisor."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "In this example, 5 (the remainder\nof 21\/8) is printed.",
            "x = 21\ny = 8\nz = x \\ y\nprint z"
        ]
    },
    {
        "name":"\\= assignment operator",
        "Syntax":[
            "Syntax",
            "var \\= num.exp\n"
        ],
        "description":[
            "The \\= assignment operator divides a variable by a given numeric expression and assigns the remainder (modulo) to the variable."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "This divides the current value\nofxby2and assigns the remainder\ntox.",
            "x \\= 2",
            "This is equivalent to:",
            "x = x \\ 2"
        ]
    },
    {
        "name":"^ arithmetic operator",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "This example calculates the value\nofaas the cube of the value ofx.",
            "a = x ^ 3",
            "This example is identical in output to the previous example.",
            "a = pwr(x,3)"
        ]
    },
    {
        "name":"-= assignment operator",
        "Syntax":[
            "Syntax",
            "var -= num.exp\n"
        ],
        "description":[
            "The -= assignment operator decrements a variable by a numeric expression."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "Subtracts1from\nthe variable,xand assigns the result tox.",
            "x -= 1",
            "This statement:",
            "total -= tax",
            "is equivalent to the statement:",
            "total = total - tax"
        ]
    },
    {
        "name":"\/ arithmetic operator",
        "Syntax":[
            "Syntax",
            "num.exp \/ num.exp\n"
        ],
        "description":[
            "Description",
            "The \/ arithmetic operator performs division.",
            "Should the denominator expression evaluate to a zero, this run-time warning message displays:"
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "Divides the contents of thetotal.pricevariable by the contents of thetotal.hoursvariable and places the results in thehourly.costvariable.",
            "hourly.cost = total.price \/ total.hours"
        ]
    },
    {
        "name":"\/= assignment operator",
        "Syntax":[
            "Syntax",
            "var \/= num.exp\n"
        ],
        "description":[
            "The \/= assignment operator divides a variable by a numeric expression and assigns it to the given variable."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "This divides the current value\nofxby2and assigns the result\ntox. It is equivalent to:x = x \/ 2",
            "x \/= 2"
        ]
    },
    {
        "name":": relational operator",
        "Syntax":[
            "Syntax",
            "exp : exp\nprint exp{:}\ninput @(x,y): var...\ncrt exp{:}\n"
        ],
        "description":[
            "The : (colon) relational operator concatenates strings in an assignment statement or, when the : displays at the end of a print or crt expression, suppresses the automatic CR\/LF combination, thus holding the current print\/display position. It is also used as a token within the input @ statement."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "Variablezis\nassigned the result of the string expression,\"Amount due\n= \"concatenated to the value of the variableamount.",
            "z = \"Amount due = \":amount\nprint z",
            "The string\"Enter command \"is printed\nand the cursor is left at the end of the string.",
            "print \"Enter command \":"
        ]
    },
    {
        "name":":= assignment operator",
        "Syntax":[
            "Syntax",
            "var := str.exp\n"
        ],
        "description":[
            "The := assignment operator concatenates a string to a variable and assigns it back to the given variable."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "Concatenatesytox. This is equivalent to:x = x : y",
            "x := y"
        ]
    },
    {
        "name":"<= relational operator",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"<> relational operator",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"= assignment operator",
        "Syntax":[
            "Syntax",
            "var = exp\nexp = exp\n"
        ],
        "description":[
            "Description",
            "The = assignment operator represents either the assignment operator in an assignment statement or a relational operator in a conditional expression.",
            "The = operator does not require surrounding spaces, although they are commonly added for clarity.",
            "In logical (conditional) expressions, the eq symbol is an alternative to the = sign."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "This use of the=sign illustrates assignment. The array element on the left side\nof the=sign is assigned the current value of\nthe variable,name.",
            "customer.item<1> = name",
            "This example illustrates a conditional expression. If\nthe value of the variableanswerisquit, the expression evaluates to true and the statement following thethencondition is executed.",
            "if answer = \"quit\" then stop"
        ]
    },
    {
        "name":"> relational operator",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "Tests if any attribute in dynamic\narrayxis greater than3.",
            "if x<*> > 3 then..."
        ]
    },
    {
        "name":">< relational operator",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":">= relational operator",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"and logical operator",
        "Syntax":[
            "Syntax",
            "exp and exp\n"
        ],
        "description":[
            "The and logical operator indicates that both components of a logical expression must be true."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "The expressiontax =\n0 and value > 0is true whentaxequals0andvalueis greater than0.",
            "if tax = 0 and value > 0 then...",
            "The expressioncounter > max and value > 10 and\ny < 100requires that all three logical expressions to\nbe true for the complete expression to be true.",
            "if counter > max and value > 10 and y < 100 then...",
            "You can use the single attribute specification form of\ntheandlogical operator to optimize your queries.\nFor example, when a numeric index ondateis present,\nthe expression:",
            "select invoice with date > \"feb 1 2013\" and <= \"feb 28 2013\"[4041] 183914 items selected.",
            "should run significantly faster than the multiple attribute\nspecification form of the expression:",
            "select invoice with date > \"feb 1 2013\" and with date <= \"feb 28 2013\"[404] 183914 items selected out of 2206402 items.",
            "Note that in the above two examples, the message[4041]indicates that the search used an index and the message[404]indicates that no index was used."
        ]
    },
    {
        "name":"cat relational operator",
        "Syntax":[
            "Syntax",
            "exp cat exp\n"
        ],
        "description":[
            "The cat relational operator concatenates strings in an expression."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "This statement:",
            "z = x cat y",
            "is equivalent to:",
            "z = x : y"
        ]
    },
    {
        "name":"eq assignment operator",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"ge relational operator",
        "Syntax":[
            "Syntax",
            "exp ge exp\n"
        ],
        "description":[
            "The ge relational operator denotes a greater than or equal condition between two elements."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "if date ge \"6\/1\" then print \"yes\""
        ]
    },
    {
        "name":"gt relational operator",
        "Syntax":[
            "Syntax",
            "exp gt exp\n"
        ],
        "description":[
            "The gt relational operator denotes a greater than condition between two elements."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "if x gt 10 then stop"
        ]
    },
    {
        "name":"le relational operator",
        "Syntax":[
            "Syntax",
            "exp le exp\n"
        ],
        "description":[
            "The le relational operator represents the less than or equal to (<=) condition."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "if x le 10 then print \"Less than 10 is the result\""
        ]
    },
    {
        "name":"lt relational operator",
        "Syntax":[
            "Syntax",
            "exp lt exp\n"
        ],
        "description":[
            "The lt relational operator is used in conditional expressions as an alternate form of the less than (<) condition."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "if x lt 0 then print \"less than zero\""
        ]
    },
    {
        "name":"match relational operator",
        "Syntax":[
            "Syntax",
            "str.exp1 match str.exp2\n"
        ],
        "description":[
            "Description",
            "The match relational operator tests a string and determines if it matches a predefined pattern of alphabetical, numeric, wildcard, or literal characters.",
            "The match operator compares a string value to a predefined pattern and evaluates to 1 (true) or 0 (false).",
            "The iconv() function, using the p (pattern match) processing code, provides similar functionality to the match operator. The difference is that iconv() can perform multiple pattern matches at once, where the  match requires multiple statements."
        ],
        "parameter":[
            "Parameter(s)",
            "str.exp1String to test.str.exp2A composite of literals and\/or\nmatch operators, appended to length specifications. String operators\nare:maAccepts onlymalphabetical characters.\nNo spaces allowedmnAccepts onlymnumeric characters. (+,-\nand . are not considered numeric.)mxAcceptsmwildcards (any character).literalAccepts any literal string enclosed in single quotation marks.",
            "When combinations of match strings and literals are present,\nthe entire match string must be enclosed in double quotation marks.\n\u00a0Themparameter, which specifies the length\nof the match operator string, if 0 (zero) will match 0 or more of\nthe specified match operator. This means that the null string will\nmatch any 0 length pattern match."
        ],
        "example":[
            "Example(s)",
            "This statement takes thethenpath if theansweris3numerics.",
            "if answer matches \"3n\" then print \"ok\"",
            "This checks that the value of the variablesoc.sec.numhas the pattern of3numerics,-,2numerics,-, and4numerics.",
            "if soc.sec.num matches \"3n\u2019-\u20192n\u2019-\u20194n\" then...",
            "Thethenclause is taken ifresponseis not any number of numerics.",
            "if not(response matches \"0n\") then...",
            "This accepts any length of numerics, a comma, any length\nof numerics, a comma, and any length of numerics.",
            "if response = \"0n\u2019,\u20190n\u2019,\u20190n\" then..."
        ]
    },
    {
        "name":"ne relational operator",
        "Syntax":[
            "Syntax",
            "exp ne exp\n"
        ],
        "description":[
            "The ne relational operator represents a not equal to condition within relational expressions."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "if ans ne \"y\" then print \"Not equal to Yes\" else print \"Yes\""
        ]
    },
    {
        "name":"or logical operator",
        "Syntax":[
            "Syntax",
            "exp or exp\n"
        ],
        "description":[
            "The or logical operator indicates that only one of the components of a logical expression need be true for the expression to evaluate as true."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "The expressiontax =\n0 or value > 0is true when eithertaxequals0and\/orvalueis greater than0.",
            "if tax = 0 or value > 0 then...",
            "The expressioncounter > max or value > 10 or\ny < 100requires that only one or more logical expressions\nneed be true for the complete expression to be true.",
            "if counter > max or value > 10 or y < 100 then...",
            "You can use the single attribute specification form of\ntheorlogical operator to optimize your queries.\nFor example, when a numeric index ondateis present,\nthe expression:",
            "select invoice with date = \"jan 01 2013\" or = \"jan 02 2013\"[4041] 16461 items selected.",
            "should run significantly faster than the multiple attribute\nspecification form of the expression:",
            "select invoice with date = \"jan 01 2013\" or with date = \"jan 02 2013\"[404] 16461 items selected out of 2206402 items.",
            "Note that in the above two examples, the message[4041]indicates that the search used an index and the message[404]indicates that no index was used."
        ]
    },
    {
        "name":"BASIC reserved characters",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"() reserved characters",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "()as a function\ndelimiter:",
            "if not(num(response)) then crt \"must be numeric!\"",
            "As a dimensioned array reference:",
            "if cust.array(22) = \"\" then cust.array(22) = \"hold\"",
            "Changing precedence in an arithmetic expression:",
            "age = (today - birthday) \/ \"365\"",
            "Without grouping precedence, the above calculation produces\nan inaccurate result due to the fact that division occurs at a higher\nlevel of precedence than subtraction."
        ]
    },
    {
        "name":"; reserved character",
        "Syntax":[
            "Syntax",
            "statement {; statement...}\n"
        ],
        "description":[
            "Description",
            "The ; (semicolon) reserved character separates multiple FlashBASIC or BASIC statements on a single line.",
            "A FlashBASIC or BASIC statement can end with a semicolon because it allows null or blank lines in a program."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "This shows multiple statements\non a single line.",
            "x = 10 ; y = 15 ; z = x * y ; crt z",
            "This shows afor...nextloop on the same\nline.",
            "for i=1 to 9; crt field(s,\u2019 \u2019,i); next i"
        ]
    },
    {
        "name":", reserved character",
        "Syntax":[
            "Syntax",
            "dim.array.var(col.exp, row.exp)\ndyn.array.var< ac.exp, vc.exp, sc.exp>\nfunction(arg1, arg2,...)\ncall subroutine.name(arg1, arg2,...)\nprint str.exp, str.exp,...\n"
        ],
        "description":[
            "The , (comma) reserved character several purposes:",
            "Separates subscript references within multidimensional arrays.",
            "Separates  ac.exp,  vc.exp, and  sc.exp in dynamic array references.",
            "Delimits arguments within functions.",
            "Separates passed arguments in a call statement.",
            "When used with the crt or print statement, tabs to the next tab stop. Tab stops are established every 18 columnar positions.",
            "Line continuation for subroutine, call, common, dimension, equate and data statements."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "The comma delimits the row and\ncolumn arguments in a two-dimensional array reference.",
            "if screen.array(13,12)...",
            "The comma delimits theac.exp (17)and\nthevc.exp (-1)in a dynamic array reference.",
            "customer.item<17,-1> = invoice.pointer",
            "The comma delimits the arguments in thedcount()function.",
            "cnt = dcount(string,char(253))",
            "The comma separates the arguments in the list being passed\nto the subroutine.",
            "call display.lines(cust.item,balance,inv.list)",
            "This printshello, followed by 13 spaces\nandthere. This functions similar to a tab stop,\nmoving to the next multiple of 18 on the print or display line.",
            "crt \"hello\" , \"there\""
        ]
    },
    {
        "name":"<> reserved characters",
        "Syntax":[
            "Syntax",
            "dyn.array.var< ac.exp{,vc.exp{,sc.exp}}> exp < exp\n"
        ],
        "description":[
            "Description",
            "The <> reserved characters surround subscripts within dynamic arrays."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "Assigns the value of variablenameto attribute 1 in the dynamic arraycustomer.item.",
            "customer.item<1> = name",
            "Inserts the literal10into a new value\nappended to the end of attribute 2 in the dynamic arrayitem.",
            "item<2,-1> = 10"
        ]
    },
    {
        "name":"\" Reserved Character",
        "Syntax":[
            "Syntax",
            "[\\|\u2019|\"]string[\\|\u2019|\"]\n"
        ],
        "description":[
            "Description",
            "The \" reserved character marks the beginning or ending of a literal string in FlashBASIC or BASIC.",
            "Generally, it does not matter which types of quotation marks are used on literals (strings). But some statements, such as heading and footing, impose certain restrictions on their use.",
            "If a literal string is to contain a single quotation marks, it must be enclosed within\u00a0\"\u00a0or \\."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "In this example, single quotation\nmarks are used to determine if the contents ofanswercontains the literal string,quit.",
            "if answer = \u2019quit\u2019 then stop",
            "This example illustrates the use of two types of quotation\nmarks, which are enforced by theheadingstatement.",
            "heading \"\u2019lc\u2019Rocket\u2019l\u2019\"",
            "AQL sentences enforce the rule that theheadingstring must be enclosed in double quotation marks.headingoptions must be enclosed in single quotation marks. The whole string\nis passed as a literal by enclosing it in\\.",
            "execute \\list entity heading \"\u2019lc\u2019entity\u2019l\u2019\"\\"
        ]
    },
    {
        "name":"[] reserved characters",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "if response[1,1] = \"y\" then printer on"
        ]
    },
    {
        "name":"\\ reserved character",
        "Syntax":[
            "Syntax",
            "\\literal.str\\\n"
        ],
        "description":[
            "Description",
            "The \\ reserved character marks the beginning or ending of a literal string in FlashBASIC or BASIC.",
            "Generally, it does not matter which types of quotation marks are used on literals (strings). Some statements, such as heading and footing impose certain restrictions on their use."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "The\\can\nbe used anywhere single or double quotation marks are used.",
            "if answer = \\quit\\ then stop",
            "Typically, the\\is used when executing\na TCL string expression in FlashBASIC or BASIC. The AQLheadingcommand requires the use of both single quotation marks, as options,\nand double quotation marks.",
            "execute \\list md heading \"\u2019lc\u2019md listing\u2019l\u2019\\"
        ]
    },
    {
        "name":"BASIC statements",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"! statement",
        "Syntax":[
            "Syntax",
            "! comments\n"
        ],
        "description":[
            "The ! statement indicates that the text following the ! is a comment. This works the same as the remark statement."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "The!indicates\nthat the text following it is a remark.",
            "! mainline..."
        ]
    },
    {
        "name":"* statement",
        "Syntax":[
            "Syntax",
            "* comments\n"
        ],
        "description":[
            "The * (asterisk) statement is used as a remark. Text after this statement is ignored."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "This example illustrates using\nthe*statement to add remarks or comments.",
            "*\n* Init Customer Counter\n*\n\u00a0\u00a0customer.count = 0\n*\n* Open Customer File\n*\n\u00a0\u00a0open..."
        ]
    },
    {
        "name":"abort statement",
        "Syntax":[
            "Syntax",
            "abort {message#}{,\"parameter\"{,\"parameter\"...}}\nabort {error.message.str}\n"
        ],
        "description":[
            "Description",
            "The abort statement immediately stops program execution and unconditionally returns to the TCL command prompt.",
            "The abort statement specifies an abnormal end and can appear anywhere in the program.",
            "The abort statement is similar to the stop statement, except the abort statement also terminates execution of any macro or Proc that might have called the program containing the abort statement and aborts the FlashBASIC or BASIC program.",
            "The abort statement automatically generates the error message:"
        ],
        "parameter":[
            "Parameter(s)",
            "message#Item-ID of the message to output, located in thedm,messages,file.parameterValues required by the message. If the string form is used,\nthe message string displays on the screen and placed in thedm,messages, file."
        ],
        "example":[
            "Example(s)",
            "If\"invoices\"cannot be opened, the program aborts with error message201and passes in the string\"invoices\".",
            "open \"invoices\" to invoice.file else abort 201,\"invoices\"",
            "This causes the program to stop with the message:",
            "\"invoices\" is not a file name",
            "In this case, both[b201]and[b1]error messages display."
        ]
    },
    {
        "name":"aux statement",
        "Syntax":[
            "Syntax",
            "aux [off|on|exp]\n"
        ],
        "description":[
            "Description",
            "The aux statement enables or disables spooling to the auxiliary port."
        ],
        "parameter":[
            "Parameter(s)",
            "onEnables spooling to the auxiliary port and saves thepandhflags of the current TCLsp-assignstatus.offReverses the effect of the last executedaux onstatement. It turns off auxiliary port printing, and restores the\nprevious status of thepandhflags\nof the current TCLsp-assignstatus.expIn the expression form, auxiliary printing is disabled when\nthe expression evaluates to false. It is enabled when the expression\nevaluates to true. In an expression, 0 =aux offand nonzero =aux on."
        ],
        "example":[

        ]
    },
    {
        "name":"begin case statement",
        "Syntax":[
            "Syntax",
            "begin case\n   case logical.exp\n   {statement{s}}\n\u00a0.\n   case logical.exp\n   {statement{s}}\n\u00a0.\n\u00a0.\nend case\n"
        ],
        "description":[
            "Description",
            "The begin case statement starts a case construct.",
            "Use the case statement to alter the sequence of instruction execution based on the value of one or more expressions. If expression in the first case statement is true, the following statements up to the next case statement are executed. Execution continues with the statement following the end case statement.",
            "If the expression in a case statement is false, execution continues by testing the expression in the next case statement. If it is true, the statements following the case statement up to the next case or end case statement are executed. Execution continues with the statement following the end case statement.",
            "If more than one case statement contains a true expression, only the statements following the first such case statement are executed. If no case statements are true, none of the statements between the  begin case and end case statements are executed.",
            "If an expression evaluates to the null value, the case statement is considered false."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"begin work statement",
        "Syntax":[
            "Syntax",
            " begin {work|transaction} {name} {then|else statement.block}\n"
        ],
        "description":[
            "Description",
            "The begin work statement starts a transaction.",
            "A transaction is used to perform a series of updates to the database in an atomic manner. To begin the sequence, use the begin work statement followed by the desired updates. To commit the updates to the database, use the commit work statement. If a problem develops during the series of writes that prevent the correct completion of the transaction, use the rollback work statement to undo the changes.",
            "Once a transaction is active, the variables below contain:",
            "These operations perform differently in a transaction:",
            " No special checking is done on executed system-level                   commands, and no atomicity is asserted by the system. The programmer is                   responsible for assuring that all executed retrievals are atomic by performing the                   necessary filelock and readu statements                   before invoking execute.",
            " Updates performed by an                   executed system command do not participate in the transaction. These                     execute operations generate a run-time abort if attempted                   within a transaction: create-file,                     clear-file, delete-file,                     create-index, delete-index, and                     resize-file.",
            " Sets an exclusive lock on a file disallowing                   other users from updating or locking that file. It is necessary to execute this                   statement before an operation that can reference the file sequentially during a                   transaction.",
            " Releases a file lock. This statement is                   ignored during a transaction because all locks are held until the transaction                   completes.",
            " This operation never participates in a transaction. Index                   entries are never updated until commit time, and no user-specific cache is                   provided. This means that it is invalid to access index entries for records that                   have been updated within a transaction before that transaction has been committed.                   Also, if strict transaction ordering is required, it is necessary to set a file                   lock prior to using the index.",
            " By default, this operation sees updates already made by the process, but                   not yet committed (unless transaction cache off has previously                   been run in the program). The readu command should always be                   used within a transaction to guarantee serialized schedules.",
            " Reads in a                   transaction operate at the read-committed isolation level. If another process                   updates an item that has been read within a transaction and the item is re-read                   within the transaction, then it will see the updated image. For repeatable read                   isolation, the readu command, or some other means, can lock the                   item so that subsequent reads in the transaction will see the same image.",
            "                   Using a readu command instead of a read                   command gives repeatable reads to the user.",
            " To use this validly within a transaction, each                     readnext must be followed by a read of the                   associated item-ID. This allows verification that the item has not been deleted                   within the transaction. Items that have been inserted within the transaction are                   returned by the readnext after all of the pre-transaction IDs                   are exhausted.",
            " To enforce transactions that are serialized, the user must lock                   the specified file before performing the select. If the select                   list is based on a prior execute, then the                     filelock must be performed prior to that                     execute.",
            " This operation always participates in the transaction (that is, the                   effects of the write, including the release of any associated                   locks, are not committed to the database until the commit). The                   same rule applies to all variants of the write                     (writeu, writev,                     writevu, matwrite, and                     matwriteu).",
            " If a transaction is active, then the stop statement                   or any other condition that terminates the program causes the equivalent of a                   rollback to occur.",
            "The system-coldstart procedure automatically rolls backward any pre-commit transactions and rolls-forward (if possible) any post-commit transactions if the system halts unexpectedly.",
            "These features are not currently supported within a transaction:"
        ],
        "parameter":[
            "Parameter(s)",
            "workOptional and is provided only for SQL compatibility.transactionOptional and is provided only for SQL compatibility.nameName of the transaction. This name displays when using the\nTCLtransactionutility status option to monitor\ntransaction processing, or when the system is recovering after a halt.\nThe name makes it easier to identify work-in-progress in these situations."
        ],
        "example":[

        ]
    },
    {
        "name":"block\/unblock statements",
        "Syntax":"",
        "description":[

        ],
        "parameter":[
            "Parameter(s)",
            "fixedFixed length structure that is being created.dynamicContains the data being used to create it.structureContains the template controlling where the data from dynamic are placed within fixed\n        and what conversions (if any) are performed on it during this process.",
            "If the command works correctly,system(0)is set to 0. If the command works\n    incorrectly during this process (almost always because of a bad structure),system(0)specifies the type of error."
        ],
        "example":[

        ]
    },
    {
        "name":"break statement",
        "Syntax":[
            "Syntax",
            "break [off|on|exp]\n"
        ],
        "description":[
            "Description",
            "The break statement enables or disables the BREAK key.",
            "The BREAK key, if enabled, interrupts the current process and either invokes the FlashBASIC or BASIC debugger or pushes a level.",
            "The expression following break must evaluate as numeric or this run-time warning message displays:"
        ],
        "parameter":[
            "Parameter(s)",
            "offDisables the BREAK key.onReverses the effect of the last executedbreak offstatement. If multiplebreak offstatements are\nexecuted, an equal number ofbreak onstatements\nmust be executed to return to a breakable state.expIn the expression form, the BREAK key is disabled whenexpevaluates to 0\u00a0(false), and enabled whenexpevaluates to nonzero (true)."
        ],
        "example":[
            "Example(s)",
            "If the value ofuserisfred, this has the same effect as issuing the\nTCLbreak-oncommand.",
            "break user = \"fred\""
        ]
    },
    {
        "name":"call statement",
        "Syntax":[
            "Syntax",
            "call cataloged.program.name{(arg{,arg...})}\ncall @ program.name.var{(arg{,arg...})}\ncall \"file.ref program.name\"{(arg{,arg...})}\n"
        ],
        "description":[
            "Description",
            "The call statement transfers control to an external FlashBASIC or BASIC subroutine and optionally passes a list of arguments to it.",
            "Arguments must be separated with a comma. When passing arguments, the same number must occur in the call statement as are declared in the subroutine statement, which must occur as the first executable line of the external subroutine. There is a maximum of approximately 200 arguments. The subroutine can return values to the calling program in variable arguments.",
            "The external subroutine must ultimately execute a return statement to continue program execution at the statement immediately following the call statement. Subroutines that do not return terminate execution.",
            "Locally defined variables in external subroutines (and files opened to local file variables) are automatically abandoned or closed upon return.",
            "Use caution when making recursive calls. If the depth of the call is too deep, the thread will be terminated.",
            "The call @, or indirect call form allows the statement to use the subroutine name assigned to a specific variable.",
            "Called subroutines must be compiled and cataloged separately from the calling program. The arguments passed between (to and from) the program and subroutine are not label-sensitive, but are order-sensitive. The arguments listed in the subroutine statement and the arguments listed in the call statement can be different. The subroutine receives the results of arguments in the order in which they are specified in the argument list.",
            "Variable arguments are passed to the subroutine at call time and from the subroutine at return time.",
            "Arrays can be passed between programs and subroutines. The array in the program and called subroutine must contain the same number of elements. If dimensioned arrays are used, the arrays should be dimensioned exactly the same in both the program and subroutine. Alternately, a dim statement can be specified without the actual number of elements. The array is properly initialized at run time.",
            "Arguments listed in both the call and subroutine statements should not be duplicated in the argument lists. Arguments that are also defined as common variables in both calling programs and subroutine programs should not be used in argument lists because the data is already accessible through the common allocations. Violation of these rules can result in unpredictable values being passed between the programs.",
            "It is possible to specify the file path name followed by a space followed by the actual subroutine name. To do this, the file path and program name can be passed via a variable to an indirect call, or the string can be enclosed in quotation marks and embedded directly into the program text. Specifying a direct file reference and program name eliminates the need for cataloging subroutines when an application is used from other accounts.",
            "On D3 9.0, if the subroutine is not cataloged, FlashBASIC or BASIC attempts to locate the subroutine object code in the same dictionary in which the program's object code resides. This eliminates the need to catalog most subroutines.",
            "Dynamic array elements passed to subroutines are treated as function results and are therefore not updated after the call returns."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "Direct call:",
            "call process.lines(ID,order.item(1))",
            "or",
            "call \"process.lines\"(ID,order.item(1))",
            "With or without quotation marks, this example still calls\ntheprocess.linessubroutine.",
            "Indirect call:",
            "program.var = \"process.lines\"\ncall @program.var(ID,order.item(1))",
            "This example calls the subroutine name held as a string\nin the variableprogram.var.",
            "Indirect call\nwith full path name:",
            "program.var = \"dm,bp, process.lines\"\ncall @program.var(ID,order.item(1))"
        ]
    },
    {
        "name":"capturing statement",
        "Syntax":[
            "Syntax",
            "capturing [off|on|var]\n"
        ],
        "description":[
            "The capturing statement resumes the capturing effect from the previous   execute...capturing statements in a FlashBASIC or BASIC program."
        ],
        "parameter":[
            "Parameter(s)",
            "offTurns off the capturing effect from the previousexecute...capturingstatements in a FlashBASIC or BASIC program.onResumes the capturing effect.varCapturing is turned on if the variable evaluates to non-zero (true) and turned off if it\n                evaluates to 0 (false)."
        ],
        "example":[
            "Example(s)",
            "system(26)checks to see if capturing is turned on. If capturing is on, this\nstatement turns it off.",
            "if system(26) then capturing off",
            "Capturing is enabled if the value ofcapstatis not zero.",
            "read capstat from statfile,'capstat' else \ncapstat = 0\ncapturing capstat"
        ]
    },
    {
        "name":"case statement",
        "Syntax":[
            "Syntax",
            "begin case\n   case logical.exp\u00a0\n   {statement{s}}\n\u00a0.\n   case logical.exp\u00a0\n   {statement{s}}\n\u00a0.\n\u00a0.\nend case\n"
        ],
        "description":[
            "Description",
            "The case statement delineates a conditional case construct.",
            "Only the statements following the first true case statement are executed. Upon completion of these statements, program execution continues immediately following the end case statement.",
            "If all case statements evaluate false, program execution is continued at the first statement after the end case.",
            "A case 1 statement always evaluates true and is used as the last case statement to be processed only when all previous case statements evaluate to false.",
            "The case statement is equivalent to nested if expressions as follows:",
            "The statements between case statements are executed if the expression associated with the case statement evaluates to true. If the expression evaluates to false, the statements are not executed."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "begin case\n* check for operators response\ncase response = \"p\"\n   printer on\ncase response = \"s\"\n   echo off\ncase 1\n   crt \"response must be \u2019p\u2019 or \u2019s\u2019\"\nend case",
            "In this example, if the response isp, theprinter onstatement is issued. The program\nwould then branch to the next statement afterend case. Thecase 1is executed only if response is neitherpnors."
        ]
    },
    {
        "name":"casing statement",
        "Syntax":[
            "Syntax",
            "casing [on|off|exp]\n"
        ],
        "description":[
            "Description",
            "The casing statement toggles case sensitivity relative to input data and string comparisons in the current program and any called subroutines.",
            "The FlashBASIC or BASIC casing flag is automatically initialized to the case setting at TCL (which can be set using the TCL case command).",
            "With casing on, the strings \"quit\", \"Quit\", and \"QUIT\" are treated as three different strings of characters. With casing off they are all treated as the same string.",
            "See system(27) and system(28) in system() function for the ability to interrogate the current status of case sensitivity.",
            "This is not to be confused with the functionality of the TCL basic command, which is case sensitive, or the TCL compile command, which is not case sensitive with respect to statement keywords and variable names."
        ],
        "parameter":[
            "Parameter(s)",
            "onEnables case sensitivity.offDisables case sensitivity.expCasing is turned on if the expression evaluates to nonzero\n(true) and turned off if it evaluates to 0 (false)."
        ],
        "example":[
            "Example(s)",
            "Entering\"quit\"causes the program to display lowercase. Any uppercase character\nin input, such as\"Quit\", causes the program to display\"upper case\".",
            "casing on\ncrt \"enter quit \" :\ninput quit\nif quit = \"quit\" then crt \"lower case\" end else crt \"upper case\""
        ]
    },
    {
        "name":"cfunction statement",
        "Syntax":[
            "Syntax",
            "cfunction name{,name...}\n"
        ],
        "description":[
            "The cfunction statement provides access to C libraries from BASIC."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "cfunction unix.builtin\ncfunction user.builtin, gm.builtin"
        ]
    },
    {
        "name":"chain statement",
        "Syntax":[
            "Syntax",
            "chain tcl.exp\n"
        ],
        "description":[
            "Description",
            "The chain statement transfers processing control to TCL, which interprets and executes the statement defined in the expression.",
            "When the TCL expression finishes, control does not return to the program. The chain statement transfers control one way only."
        ],
        "parameter":[
            "Parameter(s)",
            "tcl.expstatement to be executed once control is transferred to TCL."
        ],
        "example":[
            "Example(s)",
            "chain \"file-save\"\nchain \\off\\"
        ]
    },
    {
        "name":"clear statement",
        "Syntax":[
            "Syntax",
            "clear\n"
        ],
        "description":[
            "Description",
            "The clear statement sets all local and common variables to 0 in a main program.",
            "In a subroutine, only the local variables are affected. Named common variables are not affected by the clear statement."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"cleardata statement",
        "Syntax":[
            "Syntax",
            "cleardata\n"
        ],
        "description":[
            "The cleardata statement clears the data stack."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "The following program is invoked\nfrom a macro. A list of filenames and record IDs is passed to it from\nthe macro with DATA statements.",
            "5 *\ninput filename\nif filename = \"end\" then stop\nopen filename to file else\n   print \"can\u2019t open file \":filename\n   print \"please enter new filename \"\n   cleardata\n   goto 5\nend"
        ]
    },
    {
        "name":"clearfile statement",
        "Syntax":[
            "Syntax",
            "clearfile {file.var}\n"
        ],
        "description":[
            "Description",
            "The clearfile statement deletes all items in the specified file variable previously opened with an open statement.",
            "The default  file.var is cleared if no  file.var is specified. This statement works like the TCL clear-file command.",
            "The file is not deleted, but all nonfile type items within the data file or dictionary are deleted. The file retains the same base and modulo. If the dictionary is specified in the associated open statement that defines the file variable, the dictionary of the file is cleared. If data is specified in the associated open statement, the data section of the file is cleared. If neither is specified in the associated open statement, the data section of the file is cleared."
        ],
        "parameter":[
            "Parameter(s)",
            "file.varSpecifies the file in which all items are to be deleted."
        ],
        "example":[

        ]
    },
    {
        "name":"clearselect statement",
        "Syntax":[
            "Syntax",
            " clearselect {list.var}\n"
        ],
        "description":[
            "The clearselect statement clears the active select-list specified by the  list.var and releases all overflow associated with that list. Any external select-list is also cleared if the list variable is not specified."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "Example 1",
            "5 *\n readnext key else\n    print \u2019Frist Week \u2019,hours\n    stop\n end\n read member from file,key else goto 5\n hours += member<4>\n print member<1>,member<4>\n if hours > 40 then\n    clearselect\n    goto 5\n end",
            "Example 2",
            "This example shows how to un-assign a variable to clear memory so that the memory can be\n            used for something else:",
            "Type:",
            "a = 5\n print a \n clearselect a\n print a",
            "Output after compiling:",
            "5\n [B10] in program \u201cp21\u201d, Line 4:\n Variable has not been assigned a value; zero used.\n 0",
            "The variable is now available for you to use."
        ]
    },
    {
        "name":"close statement",
        "Syntax":[
            "Syntax",
            "close {file.var}\n"
        ],
        "description":[
            "Description",
            "The close statement closes the file identified by  file.var. If  file.var is not specified, the file referenced by the default  file.var is closed.",
            "If used when the TCL set-remote-close command is set to on, the close statement also closes any associated remote files and releases any resources allocated to open files (such as memory and handles).",
            "This statement must be used if a file is opened and then a delete-file is executed with an execute statement.",
            "Files close by default when a program ends.",
            "A file should be closed before it is deleted.",
            "The close statement is not supported for files within transactions.",
            "If set-remote-close is set to on, item locks and file locks associated with that file handle are released."
        ],
        "parameter":[
            "Parameter(s)",
            "file.varSpecifies the file to be closed.Warning:For Windows:Copying file variables can be\ndangerous since a subsequentcloseon any of the\nfile variables will close the file. Thus, any remaining file variables\n(containing a copy of the now invalid file handle) may be incorrectly\nallocated to the wrong file.root.varSpecifies to close the parent file of an index that was opened\nusing therootstatement."
        ],
        "example":[
            "Example(s)",
            "open \u2019testfile\u2019 to testfile then\nclose testfile\nexecute \u2019delete-file testfile\u2019\nend\nexecute \u2019create-file testfile \u2019:newdictmod:\u2019 \u2019:newdatamod"
        ]
    },
    {
        "name":"commit work statement",
        "Syntax":[
            "Syntax",
            "commit {work|transaction} {then|else statement.block}\n"
        ],
        "description":[
            "Description",
            "The commit work operation commits a transaction.",
            "This operation reliably logs all updates made since the last begin work statement to the database in atomic fashion. If the system halts during this process, the coldstart procedure automatically rolls forward the commit process when the machine recovers. If the commit process cannot be rolled-forward at that time (because of a missing file, trigger, and so on), then that transaction is rolled back. If the roll back fails, then the transaction is aborted and an error message displays on the screen and is printed to the errors file.",
            "If the commit process fails under normal operations, then the entire transaction is undone and the else  statement.block is taken, if present. Note that in this case, it is necessary to completely redo all updates performed by the transaction (after correcting the problem that led to the failure).",
            "It is invalid to have a bridge or callx on a file that is updated within a transaction. The inclusion of these items can cause unpredictable results."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "open \"myfile\" to f1\nopen \"mylog\" to f2\nbegin work\n   readu total from f1,\"total\"\n   total = total + 1\n   write total on f1,\"total\"\n   write total on f2,timedate();* create synchronized log\ncommit work else print \"Could not update\""
        ]
    },
    {
        "name":"common statement",
        "Syntax":[
            "Syntax",
            "common {\/ID\/} var{,var...} {,array(dimension1{,dimension2})...}\n"
        ],
        "description":[
            "Description",
            "The common statement declares data elements to share among different FlashBASIC or BASIC modules.",
            "The common statement must appear before any variable. It is used to allocate variables to a common location, so that more than one program can have specified variables in a predetermined sequence.",
            "common variables (including dimensioned arrays) are allocated in the order they are declared.",
            "Dimensioned arrays can be declared in a common statement by specifying the dimensions enclosed in parentheses. For example, common a(10) declares an array with 10 elements. Arrays that are declared in a common statement must be declared with a constant number of elements, and cannot be redimensioned with a dim statement.",
            "The common statement can be used to share variables between programs and other programs or subroutines. It can also be used in FlashBASIC or BASIC subroutines that are called from attribute-defining items. In this case, the values in the common variables are preserved between calls to the subroutine.",
            "All standard variable types are allowed for common variables as well. The most frequent use of common is to store string or numeric values, but other types, such as file variables or select variables are equally valid.",
            "The order of variables in common statements is critical. The names of the variables are ignored but the order of appearance determines the association. The subroutine being called must have the same number (or less) values in its common statement than the main program.",
            "The ID option is used to specify a unique common area called a named common area. The  ID parameter must be unique within the program module where it appears. During execution, all program modules that declare named common areas using the same ID reference the same variable space regardless of the location of the declaration within the program.",
            "Multiple unique named common areas can be declared within the same program module. Named common space is preserved during an entire logon session.",
            "All declarations of a named common in multiple modules must occupy the same amount of space (that is, have the same number of variables and arrays, each array having the same number of elements). Multiple levels of a process share a given named common space that can be initialized at any level.",
            "Arguments listed in both the call and subroutine statements should not be duplicated in the argument lists. Arguments that are also defined as common variables in both calling programs and subroutine programs should not be used in argument lists, because the data is already accessible through the common allocations. Violation of these rules can result in unpredictable values being passed between the programs.",
            "On D3, it is necessary to follow the com abbreviation with a space."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "The main program:",
            "common x,y,z(10)\n...\ncall process.it\nfor i = 1 to 10\nprint z(i)\nnext i\n...\nend",
            "Theprocess.itsubroutine:",
            "subroutine process.it\ncommon x,y,z(10)\n...\nfor y = 1 to 10\ncall get.input\nnext y\n...\nreturn",
            "Theget.inputsubroutine:",
            "subroutine get.input\ncommon x,y,z(10)\n...\ninput x\nz(y)=x\n...\nreturn",
            "The variables,x,y,z(10)are global within\na given main program and all of its subroutines. Passing variables\nin common tends to be more efficient than passing them as subroutine\narguments.",
            "Example of named common usage:",
            "program get.data\ncommon \/mydata\/ name,zip\ninput name\ninput zip\nexecute \"display.data\"\nend\n\u00a0\nprogram display.data\ncommon \/mydata\/ name,zip\nprint name\nprint zip\nend",
            "Both modules in this example are main programs. All programs\ncan share information declared in a named common block. The information\nstored in\/mydata\/is valid until the user\nlogs off, making it available to any other applications declaring\na named common block of the same ID."
        ]
    },
    {
        "name":"compare statement",
        "Syntax":[
            "Syntax",
            "compare str.exp1 to str.exp2{present var1} {missing var2}\n"
        ],
        "description":[
            "Description",
            "The compare statement compares two dynamic arrays.",
            "The compare statement scans through each element in  str.exp1 to verify if that element also exists in  str.exp2. At completion,  var1 contains a list of elements that exist in  str.exp1 and in  str.exp2. At completion,  var2 contains a list of elements that exist in  str.exp1 but do not exist in  str.exp2."
        ],
        "parameter":[
            "Parameter(s)",
            "str.exp1String whose elements are to be compared withstr.exp2.str.exp2String whose elements are to be compared withstr.exp1.presentvar1At completion, contains a list of elements that exist instr.exp1and instr.exp2.missingvar2At completion, contains a list of elements that exist instr.exp1but do not exist instr.exp2."
        ],
        "example":[
            "Example(s)",
            "str1 = \"a\":@vm:\"b\":@vm:\"c\"\nstr2 = \"a\":@vm:\"d\":@vm:\"e\"\n*\ncompare str1 to str2 present x missing y\nprint \"Result of x = \":x\nprint \"Result of y = \":y",
            "This outputs the following:",
            "Result of x = a\nResult of y = b]c"
        ]
    },
    {
        "name":"continue statement",
        "Syntax":[
            "Syntax",
            "continue\n"
        ],
        "description":[
            "Description",
            "The continue statement restarts a loop that is under for...next or loop...repeat control.",
            "The program continues with the first executable statement after the for or loop statement."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "loop\n   input guess\n   if guess=\u2019restart\u2019 then continue\nwhile guess > 1 and guess < 100 do repeat"
        ]
    },
    {
        "name":"convert statement",
        "Syntax":[
            "Syntax",
            "convert str.exp1 to str.exp2 in var\n"
        ],
        "description":[
            "Description",
            "The convert statement searches a given variable and replaces each occurrence of a character by another.",
            "Any character designated in  str.exp1 is replaced with the corresponding replacement character from  str.exp2. The correspondence is by column position in  str.exp1 and  str.exp2.",
            "If the length of  str.exp1 is shorter than  str.exp2, all characters in  str.exp2 beyond the length of  str.exp1 are ignored.",
            "If the length of  str.exp1 is longer than  str.exp2, all characters in  str.exp1 beyond the length of  str.exp2 are deleted from  var."
        ],
        "parameter":[
            "Parameter(s)",
            "varVariable in which the specified string will be searched and\nreplaced.str.exp1Specifies the characters to be replaced with the corresponding\nreplacement characters fromstr.exp2.str.exp2Specifies the characters to replace the characters specified\ninstr.exp1."
        ],
        "example":[
            "Example(s)",
            "All attribute marks are replaced\nwith spaces in the variabletext.str.",
            "convert char(254) to \" \" in text.str",
            "This converts the attribute marks intext.itemto linefeed characters.",
            "equ am to char(254)\nconvert am to char(10) in text.item",
            "This outputs\"d\".",
            "x = \"abc\"\nconvert \"abc\" to \"d\" in x ; crt x",
            "This outputs\"a\".",
            "x = \"d\"\nconvert \"d\" to \"abc\" in x ; crt x",
            "This outputszmmz.",
            "x = \"abba\"\nconvert \"ab\" to \"zm\" in x ; crt x"
        ]
    },
    {
        "name":"crt statement",
        "Syntax":[
            "Syntax",
            "crt {exp{,exp..}{:}\n"
        ],
        "description":[
            "Description",
            "The crt statement outputs unconditionally to the terminal display, regardless of whether or not the printer on condition is in effect.",
            "This functions like the print statement, but is not affected by:",
            "All of the @() functions provided with the print statement are allowed.",
            "When expressions are separated by commas, the next expression is output starting at the column position defined by the next output tab.",
            "A colon at the end inhibits the output of a CR\/LF following the output of the last printed line."
        ],
        "parameter":[
            "Parameter(s)",
            "expExpression to be output unconditionally to the terminal display."
        ],
        "example":[
            "Example(s)",
            "crtmakes\nit easy to display status messages during printing.",
            "printer on\nfor l = 1 to maxlines\n   print line<l> ;* to printer\n   if rem(l,50) else crt l ;* to screen\nnext l\nprinter close\nprinter off",
            "The line counterldisplays on the screen\nevery 50 lines."
        ]
    },
    {
        "name":"data statement",
        "Syntax":[
            "Syntax",
            "data exp{,exp,...}\n"
        ],
        "description":[
            "Description",
            "The data statement queues responses for use by subsequent input requests initiated from chain, enter, execute, or input statements. The data is taken from the queue in the order in which it was added.",
            "Multiple data statements are permitted. This is preferable to queueing all the data in one long statement.",
            "Each expression becomes the response to one input request from succeeding processes. The data statement must be processed prior to an input request."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "This prints the number 9.",
            "data 1,2,3\ninput a\ninput b\ninput c\nprint (a + b) * c",
            "This copies all the items from the customer file into\nthecustomer,historyfile.",
            "data \u2019(customer,history\u2019\nexecute \u2019copy customer *\u2019",
            "Thedatastatement can also be used\nto queue a command that uses an active list:",
            "data \u2019save-list archive\u2019\nexecute \u2019select customer with last.puchase.date < \"03\/01\/02\"\u2019\ndata \u2019copy customer\u2019\ndata \u2019(customer,history\u2019\nexecute \u2019get-list archive\u2019\ndata \"a\u2019H2O\u2019r\u2019Water\u2019nxf\"\nexecute \"update doc example1\"\ncrt \"we\u2019re back...\"",
            "This example illustrates passing data (and commands) to\nthe Update processor. Theainvokes the Update processor\nsearch function, which is passed in the string,H20, therinvokes thereplace withprompt, which is passed the string,Water. Thenis the final part of the search\/replace, and indicates\nto replace all occurrences. After the search completes, the Updatexfcommand files the item and control returns to the program."
        ]
    },
    {
        "name":"debug statement",
        "Syntax":[
            "Syntax",
            "debug\n"
        ],
        "description":[
            "Description",
            "The debug statement temporarily suspends execution of a FlashBASIC or BASIC program and invokes the FlashBASIC or BASIC debugger.",
            "The program can also be run with the d option, or, if cataloged, activated with a d\u00a0option.",
            "The g command in the FlashBASIC or BASIC debugger returns control to the FlashBASIC or BASIC program and continues execution at the next executable statement in the program."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "crt \u2019command \u2019:\ninput response\nif response = \"d\" then debug"
        ]
    },
    {
        "name":"deffun statement",
        "Syntax":[
            "Syntax",
            " deffun function {(argument{,argument...})}\n"
        ],
        "description":[
            "Use the deffun statement to define a user-written external function   (for example, an external sub-routine invoked using CALL). ",
            "The deffun statement provides the compiler with information such as the     function name, the function number, and the type of arguments. In a program, each user-written     function must have a unique definition. "
        ],
        "parameter":[
            "Parameter(s)",
            "functionThe name of the user-written function.argumentThe list of arguments passed to the external function."
        ],
        "example":[
            "Example(s)",
            "Example 1",
            "This block declares the function MYFUNC in the calling program. It uses the function with the\n    statementPRINT MYFUNC(A,B,C):",
            "deffun myfunc(a,b,c)\n print myfunc(a,b,c)",
            "Example 2",
            "This block defines the previously referenced user-written external function, called MYFUNC,\n    with the arguments A, B, and C:",
            "function myfunc(a,b,c)\n return a*b*c"
        ]
    },
    {
        "name":"del statement",
        "Syntax":[
            "Syntax",
            "del dyn.array< ac.exp{,vc.exp...{,sc.exp}}>\n"
        ],
        "description":[
            "The del statement provides an alternate to the delete() function for deleting a location from a dynamic array."
        ],
        "parameter":[
            "Parameter(s)",
            "dyn.arrayDynamic array from which the specified attribute, value, or\nsubvalue will be deleted.ac.expAttribute to delete.vc.expValue to delete.sc.expSubvalue to delete."
        ],
        "example":[
            "Example(s)",
            "This example deletes the valueredfrom the dynamic arraycolors. The\nreference to attribute 1 is required. The absence of attribute marks\nincolorsrequires that it be treated as a single\nattribute.",
            "equ vm to char(253)\ncolors = \"blue\":vm:\"green\":vm:\"red\":vm:\"yellow\"\ndel colors<1,3>"
        ]
    },
    {
        "name":"delete statement",
        "Syntax":[
            "Syntax",
            "delete {file.var}, ID.exp{on.error.clause}\n"
        ],
        "description":[
            "Description",
            "The delete statement removes a specific item from a file.",
            "The  on.error.clause is taken if the update fails due to a lost network connection or a callx that executes an inputerr statement."
        ],
        "parameter":[
            "Parameter(s)",
            "file.varFile from which the specified item will be deleted.ID.expItem to delete.on.error.clauseConsists of texton errorfollowed by a statement\nlist."
        ],
        "example":[
            "Example(s)",
            "This program deletes a specific\nitem from thecustomer.file.yesis the only valid answer to perform the delete.",
            "open \u2019customer\u2019 to customer.file else stop 201,\u2019customer\u2019\ninput customer-ID\ncrt \u2019are you sure? \u2019:\ninput ans\nif ans = \u2019yes\u2019 then delete customer.file,customer-ID"
        ]
    },
    {
        "name":"dimension statement",
        "Syntax":[
            "Syntax",
            " dimension array.var({rows{,cols}})\n"
        ],
        "description":[
            "Description",
            "The dimension statement establishes a specific number of storage locations for a matrix of variables.",
            "A dimension statement without the number of elements specified (such as in the case dim a()) can only be used in a subroutine. FlashBASIC or BASIC run time determines the number of elements after a matread.",
            "An array must be dimensioned prior to being referenced within a program. After an array has been     dimensioned, it can be re-dimensioned later within a program. When the dimensioning parameters     are changed, the new array:",
            "If an array is passed to a subroutine in an argument list, it cannot be re-dimensioned within the     subroutine. A passed array can only be dimensioned once within a subroutine. Local arrays can be     re-dimensioned as necessary. When arrays are dimensioned both in a subroutine and within the     calling program, the dimensions specified in the calling program supersede those specified     within the subroutine if the subroutine\u2019s array was dimensioned as an empty dimension. The     number of dimensions must be the same in both the calling program and called subroutine."
        ],
        "parameter":[
            "Parameter(s)",
            "array.varCan be of one or two dimensions only. Individual elements\nwithin an array are accessed by appending the element number, enclosed\nin parentheses, to the array variable.rowsNumber of rows in the array. Can be any valid numeric expression.colsNumber of columns in the array. Can be any valid numeric expression."
        ],
        "example":[
            "Example(s)",
            "Example 1",
            "recis a single dimensional array (vector) with 20 sub-scripted\n      variables.tableis a two-dimensional array (matrix) with 9 subscripted\n      variables.",
            "dim rec(20),table(3,3)",
            "Example 2",
            "Thedimstatement can be handled by FlashBASIC or BASIC runtime.",
            "x = 20\n dim a(x)\n input y\n dim b(y)\n dim c(x,y)",
            "Example 3",
            "This example illustrates adimstatement\nwithout arguments. It resolves the size of the array after thematread.",
            "subroutine process.receipt(work.list)\n dim work.list()\n ...\n matread work.list..."
        ]
    },
    {
        "name":"echo statement",
        "Syntax":[
            "Syntax",
            "echo {off|on|num.exp}\n"
        ],
        "description":[
            "Description",
            "The echo statement toggles terminal echo on or off.",
            "Typically, terminals attached to the system operate in echoplex or full duplex mode. Characters typed at a terminal are sent directly to the computer and must be echoed back to the terminal before they are displayed on the screen.",
            "The echo off statement also turns off echo in the FlashBASIC or BASIC debugger.",
            "The echo statement is not reset when returning to TCL."
        ],
        "parameter":[
            "Parameter(s)",
            "offTurns terminal echoing off. Characters entered at the terminal\nare not seen on the screen. However, the characters are sent to the\ncomputer and processed as usual. Furthermore, any output that originates\nwithin the computer displays on the screen.onTurns the normal mode of full duplex echoing on.num.expAn expression that returns zero is equivalent toecho off. Any other value returned is equivalent toecho on."
        ],
        "example":[
            "Example(s)",
            "The password does not display\nas it is being typed in. Once the password is accepted,echois enabled.",
            "crt \"enter password \" :\necho off\ninput password\necho on",
            "Theechostatement is disabled if thesecurevariable is 5 or less.echois\nenabled for 6 or more.",
            "secure = userrec<5>\necho secure >= 6",
            "On systems running in half duplex, there is no need to\necho the character to the terminal display. The terminal has already\ntaken care of the display. This proves invaluable when terminals are\nconnected through networks or complicated multiplexing.",
            "echo off\n...\ninput string"
        ]
    },
    {
        "name":"end statement",
        "Syntax":[
            "Syntax",
            "end\n"
        ],
        "description":[
            "Description",
            "The end statement indicates both the end of a series of statements executed conditionally from a then or else condition or the physical end of the program.",
            "The end statement is used in two ways:",
            "Physical program end (optional):",
            "The trailing end statement is not required on source code, but is helpful for program readability. Any statements after the end statement (in this case) are not compiled.",
            "Multiline then\/else statements must have terminating end statements:"
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "This example reprompts foransif the previousansisn.",
            "10 *\ninput ans\nif ans=\u2019n\u2019 then\n   print \u2019Please retype \u2019:\n   goto 10\nend",
            "If the md file does not exist, a warning message is printed\nand program execution stops. Notice thatstopis\nthe FlashBASIC or BASIC run-time directive that indicates the termination\nof run time. Theendstatement indicates the end\nof the multiple linethenstatement. Without thestop, program execution continues with the next statement\nafter theendstatement.",
            "open \u2019md\u2019 to md else\n   print \u2019Cannot open file\u2019\n   stop\nend\ncrt \u2019File opened\u2019"
        ]
    },
    {
        "name":"end case statement",
        "Syntax":[
            "Syntax",
            "end case\n"
        ],
        "description":[
            "The end case statement terminates case construct."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"enter statement",
        "Syntax":[
            "Syntax",
            "enter cataloged.program.name\nenter @var\n"
        ],
        "description":[
            "Description",
            "The enter statement transfers control to another cataloged FlashBASIC or BASIC program.",
            "The program that is executed using the enter statement must be a cataloged program in the current master dictionary, and cannot be a subroutine. The program executing the enter statement need not be cataloged.",
            "All variables passed between programs must be declared by the common statement in all program segments that are to be entered. All other variables are initialized upon entering the program. The common area grows or shrinks if the size is different between programs.",
            "Control does not return to the original program. In this way, enter is similar to chain except that enter must be used to activate another FlashBASIC or BASIC program and nothing else.",
            "The @ indicates that the program name is stored in the specified program variable. Without the @, the variable name is taken literally."
        ],
        "parameter":[
            "Parameter(s)",
            "cataloged.program.nameSpecifies the cataloged command to execute.@varThe@varform specifies the program variable\nwhere the command exists."
        ],
        "example":[
            "Example(s)",
            "In the below example, a 5 is\noutput.",
            "program first.prog\ncommon x,y,z\nx = 5\nenter second.prog\n\u00a0\nprogram second.prog\ncommon x,y,z\nprint x\nstop",
            "In the example below, the program name is stored in a\nvariable.",
            "program first.prog\ncommon x,y,z\nx = 5\npgmname = \"second.prog\"\nenter @pgmname"
        ]
    },
    {
        "name":"equate statement",
        "Syntax":[
            "Syntax",
            "equate symbol to char(constant) {,var to exp...}\nequate symbol to var\n"
        ],
        "description":[
            "Description",
            "The equate statement is a compiler directive that declares a constant at compile time or a synonym of another variable or array element.",
            "The equate statement can also be used to assign meaningful variable names to array elements. Once equate has been used to assign a value to a symbol, the variable cannot be used as a variable and cannot be reassigned a value. equate definitions must be placed before any usage of the equated symbols. Failure to do so can generate compile-time errors."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "equ form.feed to char(12)\nequ ring.bell to char(7)\nequ attribute.mark to char(254)\n...\nread array from file,ID...\namcmax = dcount(array,attribute.mark)\n...\nif ctr=pagemax then\nprint form.feed\ncrt ring.bell:\nend\n..."
        ]
    },
    {
        "name":"error statement",
        "Syntax":[
            "Syntax",
            "error message.num,\"parameter\"{,\"parameter\"...}\n"
        ],
        "description":[
            "Description",
            "The error statement displays the error message from the messages file and continues execution of the program.",
            "The parameters are passed to the error message handler and displayed according to the requirements of the item in the messages file."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "read item from cust.file,\"test\" else\n   error 202,\"test\"\nend",
            "Theerrorstatement in this example\ndisplays:",
            "[202] \u2019test\u2019 is not on file."
        ]
    },
    {
        "name":"execute statement",
        "Syntax":[
            "Syntax",
            " execute tcl.exp{returning var} {capturing var}\n execute tcl.exp{[stacking|,\/\/in.<] exp} {[passlist|,\/\/select.<] list.var}\n {[rtnlist|,\/\/select.>] list.var} {[returning|setting] var}\n {[capturing|,,\/\/out.>] var}\n",
            " execute tcl.exp{returning var} {capturing var}\n execute tcl.exp{[stacking|,\/\/in.<] exp} {[passlist|,\/\/ select.<] list.var}\n {[rtnlist|,\/\/ select.>] list.var} {[returning|setting] var}\n {[capturing|,,\/\/out.>] var}\n"
        ],
        "description":[
            "Description",
            "The execute statement temporarily pushes a level and performs any         valid TCL expression, and then continues execution of the FlashBASIC or BASIC         program.",
            "The tcl.exp can be any valid TCL command, including AQL sentences,                 commands, macros, menus, Procs, or other cataloged FlashBASIC or BASIC programs.",
            "The results of the TCL command can be assigned to a variable for later processing by                 using the optional capturing clause.",
            "Input can be passed to the TCL statements using the data statement prior to the                 execute statement. After the execute statement completes, the data queue and any                 external active lists are reset. Multiple data statements can be passed when they                 are separated by attribute marks.",
            "An alternate method of stacking data is using execute in the following form:",
            "If exec-stacking-on is enabled, and you use attributes to stack                 multiple commands with the execute statement, then you must use value marks to                 separate the data. For example, note the use of char(253):",
            "The optional returning clause directs any error message item IDs generated as a                 result of the execute statement into the specified variable. Each error message item                 ID is separated by a space.",
            "In the capturing clause, CR\/LF combinations are converted to attribute marks, which                 allow the variable to be treated like a dynamic array. Clear screens and form-feeds                 are converted to nulls.",
            "Certain FlashBASIC or BASIC statements, such as input @ , do not                 put anything into the capturing stream.",
            "The capturing on and capturing off statements                 are provided to enable or disable the output from the capturing clause of the                 execute statement.",
            "An active list that is created by the executed statement is passed back to the                 program. The list can be used by the readnext statement or it can                 be assigned to a specific variable using the select to statement                 for later use with a readnext from statement.",
            "An active list generated by a TCL statement can be passed to another TCL statement                 executed from a FlashBASIC or BASIC program.",
            "Control does not return from an execute that issues a TCL off                 command.",
            "Output printed from indexes, and FlashBASIC or BASIC calls that are active during a                 file update, are captured.",
            "Each level of execute builds a new process workspace area. As the number of levels                 increase, disk space requirements increase. The maximum number of levels is 16.",
            "The second version of the execute statement provides more control                 over data and select list handling. The additional syntax in this version requires                 that the extended options be set.",
            "The stacking clause allows the user to stack data for the TCL statement. This clause                 is identical to using a data statement before the execute.",
            "The passlist clause creates a copy of the select list and passes                 it to the TCL command. Note that select lists that are internally linked to a file                 are expanded to a standard list of item-IDs to allow the upper-level access to the                 list.",
            "The rtnlist clause provides essentially the same functionality as                 a select to list.var done after the execute. The only difference                 is that rtnlist clause does not drop into the FlashBASIC or BASIC                 debugger if an external list is not available. Instead, it returns a null                 string."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "execute \"sort staff by name name total salary (p)\"\n data \"(qfile\"\n execute \"copy newac *\"\n execute \"listu\" capturing output\n execute \"sselect invoices\" returning errnum\n execute \\sort orders with date > \"1\/1\/02\"\\\n execute \"sselect staff by hire.date by name\"\n execute \"save-list staff.list\"\n execute \"get-list staff.list\"\n execute \"list staff name hire.date\""
        ]
    },
    {
        "name":"execute statement (UNIX)",
        "Syntax":[
            "Syntax",
            "execute \"!unix.command\" {capturing var} {returning var}\n"
        ],
        "description":[
            "Description",
            "The execute statement executes a UNIX command from within a FlashBASIC or BASIC program.",
            "For Windows: Not supported.",
            "There is no limitation on the size of the captured data. UNIX tabulations characters are not     replaced. To replace tabulations, use pr(1), for instance, as a filter (see the     example). stderr remains associated to the user\u2019s terminal.",
            "To capture the output normally directed to the stderr file, the standard UNIX shell syntax can be     used to redirect stderr to stdout as in the following example:",
            "See the UNIX documentation for information about sh(1).",
            "Currently, D3 implementations do not allow reading data that has been stacked by a previous BASIC data statement."
        ],
        "parameter":[
            "Parameter(s)",
            "!unix.commandUNIX command to execute. By using the format!unix.command, it is not necessary to create UNIX\ncommands in a D3 master dictionary. Any valid UNIX command can be\nused.capturingvarVariable specified by capturing receives the information normally\ndirected to stdout. Each line is separated by an attribute mark.returningvarVariable specified by returning receives the exit code of\nthe!unix.command. If the\ncommand cannot be executed, the first value returned is -1, followed\nby a space and the decimal value of the error code, errno, in the\nrange of 0\u00a0through 255."
        ],
        "example":[
            "Example(s)",
            "This is an example of a simple\nfile transfer:",
            "import\n001 *\n002 ! Copy a file from UNIX\n003 tclread line\n004 line=trim(line)\n005 if line=\u2019\u2019 then goto usage\n006 *\n007 uname=field(line,\u2019 \u2019,2)\n008 pfile=field(line,\u2019 \u2019,3)\n009 pname=field(line,\u2019 \u2019,4)\n010 if uname=\u2019\u2019 or pfile=\u2019\u2019 or pname=\u2019\u2019 then goto usage\n011 open pfile\n012 *\n013 execute \u2019!exec cat \u2019:uname capturing item\n014 write item on pname\n015 stop\n016 *\n017 usage:*\n018 crt \u2019Usage: import unixfile pickfile item\u2019",
            "ThecatUNIX command copies a file\nto stdout, which iscaptured.",
            "To expand the\ntabulations into the appropriate number of spaces to set tabulations\nto columns 5, 9, and so on, replace line 13 by (for example):",
            "execute \u2019!exec cat \u2019:uname:\u2019 |pr -t -e4 \u2019 capturing item",
            "In this example, the TCL!execUNIX command is used to avoid the creation of\n    an intermediate shell."
        ]
    },
    {
        "name":"exit statement",
        "Syntax":[
            "Syntax",
            "exit\n"
        ],
        "description":[
            "Description",
            "The exit statement forces an early exit from a loop that is under for...next or loop...repeat control.",
            "The program continues with the next executable statement after the next or repeat statement."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "loop\n   input guess\n   if guess=\u2019end\u2019 then exit\nwhile guess > 1 and guess < 100 do repeat"
        ]
    },
    {
        "name":"file statement",
        "Syntax":[
            "Syntax",
            "file file1{,file2...}\n"
        ],
        "description":[
            "Description",
            "The file statement is a compiler directive that allows the use of attribute definition items in the file\u2019s dictionary while compiling a program.",
            "The file statement is typically used to allow the use of attribute definition items to identify the attribute count of the field and automatically apply dictionary correlative codes to the field value in the item.",
            "When the FlashBASIC or BASIC compiler encounters a file statement, it opens the dictionary of the file specified by  file1, creates the executable code to open the data portion of the file during execution, scans the FlashBASIC or BASIC code for references to the given file, and dimensions an array with the same name as the file specified.",
            "The size of the dimensioned array is determined by the compiler. It scans the program looking for references to attribute names as dimensioned array subscripts (for example,  file1(credit.limit)). After it has found all references to the given file, it takes the highest attribute count reference derived, adds 1 to it, and uses the resulting value as the size of the dimensioned array.",
            "After an item is read from the file, attributes within the item can be referenced by using the attribute name from the associated dictionary as the array subscript. Correlative processing codes found in the file dictionary are executed, but output-conversions are not. Values within an attribute can be specified by appending a command and a value count to the attribute name or number.",
            "read and write statements cannot specify the file variable when the array name  file1 is used as the variable.",
            "The file pointer is assigned to the file variable in the form  fv.file1 and references the data section of the file opened.",
            "When referencing numeric attribute numbers (for example, entity(1)), if there are attribute-defining items (ADI) in the dictionary with numeric item-IDs (for example, 1), the attribute-defining item is used and not the direct (numeric) reference. The sequence of precedence is attribute-defining item first, followed by numeric reference; therefore, care must be used when mixing numeric and alphanumeric references.",
            "Changes to attribute definition items made after the program has been compiled are not reflected in the object code. Because binding takes place during the compile phase, the program must be recompiled whenever an attribute count or correlative is changed.",
            "Because the file statement creates an array for each file opened, file names must follow array naming conventions. Therefore, all numeric file names are not supported."
        ],
        "parameter":[
            "Parameter(s)",
            "file1{,file2...}Specifies the files from which attribute definition items\nare extracted for use in program compiling. Multiple files can be\nspecified (for example, file2, file3, and so on) in the same statement,\nseparated by commas. File paths are currently not allowed in thefilestatement."
        ],
        "example":[
            "Example(s)",
            "The file entity is bound by thefilestatement. When item\"100\"is successfully read, the name field is checked. If the name field\nis null,\"no name\"is output to the terminal.",
            "file entity\nID = \"100\"\nread entity from ID then\nif entity(name) = \"\" then crt \"no name!\"\nend",
            "This determines if the file variablefv.entityhas been assigned by AQL to the Update processor. If it has not\nbeen assigned, thefilestatement is executed.\nThis technique is particularly useful when calling subroutines from\nAQL, and prevents having to reopen a file each time the routine is\ncalled. Using this logic, thefilestatement is\nexecuted once.",
            "fv.entity = access(1)\nif not(assigned(fv.entity)) then file entity"
        ]
    },
    {
        "name":"filelock statement",
        "Syntax":[
            "Syntax",
            "filelock {file.var} {locked statement.block}\n"
        ],
        "description":[
            "Description",
            "The filelock statement sets an exclusive lock on an entire file.",
            "The filelock statement is useful for preventing updates to a file while a sequential operation is running (like a BASIC select).",
            "Once a file lock has been set, any attempt by another port to update, item lock, or file lock that file fails.",
            "File locks are displayed by the TCL list-locks command as special item locks with item-IDs of * and hash values of 0. If necessary, these locks can be cleared atypically with the TCL unlock-file command."
        ],
        "parameter":[
            "Parameter(s)",
            "file.varFile to lock. Iffile.varis not specified,\nthen the default file variable is assumed.lockedstatement.blockIf the file is already locked (meaning another user has\na file or an item lock, or is currently updating that file) and the\noptionallockedclause is present, thenstatement.blockis executed. If nolockedclause is present, then the statement blocks until the situation\nis resolved.Note:system(0)in thelockedclause returns the port number that has the item\nlocked."
        ],
        "example":[

        ]
    },
    {
        "name":"fileunlock statement",
        "Syntax":[
            "Syntax",
            "fileunlock {file.var}\n"
        ],
        "description":[
            "Description",
            "The fileunlock statement releases an exclusive lock set by the filelock statement on an entire file.",
            "Once a file lock has been set, any other port that attempts to update, item lock, or file lock that file will fail."
        ],
        "parameter":[
            "Parameter(s)",
            "file.varSpecifies the file to unlock. Iffile.varis not specified, then the default file variable is assumed."
        ],
        "example":[

        ]
    },
    {
        "name":"footing statement",
        "Syntax":[
            "Syntax",
            "footing str.exp\u00a0\nfooting \"{{text} {\u2019options\u2019}...}\"\n"
        ],
        "description":[
            "Description",
            "The footing statement designates a text string composed of literals and special options to output at the bottom of each page.",
            "The string expression is treated as any BASIC character string and can be surrounded by \" or \\ , or the expression can be contained in a variable. Embedded footing options must be enclosed within \u2019 to distinguish them from text. Multiple options can be enclosed in the same set of single quotation marks.",
            "The footing statement can be changed by a new footing statement, and the new footing is output when the end of the current page is reached.",
            "The system(4) function maintains line and system(5) function maintains the page counters while heading and footing are active."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "footing \"\u2019lc\u2019page \u2019pn\u2019 printed at \u2019tlc\u2019\"",
            "The abovefootingstatement uses a\nliteral string for the string expression and produces a footing that\nlooks as follows:",
            "page \u20191\u2019 printed at 13:45:00 10 FEB 2003",
            "The samefootingexpression can be\nplaced in a variable, and the variable name used in thefootingstatement.",
            "footstring=\"\u2019lc\u2019page \u2019pn\u2019 printed at \u2019tlc\u2019\"\nfooting footstring",
            "In this example, thefootingexpression\nis a compound string expression.",
            "footing \"\u2019lc\u2019page \u2019pn\u2019\":message:\"\u2019l\u2019\""
        ]
    },
    {
        "name":"for...next statement",
        "Syntax":[
            "Syntax",
            "for var = num.exp1 to num.exp2{step num.exp3} {[while|until] logical.exp}\nstatement{s}\n.\n.\nnext var\n"
        ],
        "description":[
            "Description",
            "The for...next statement is an iterative, incremental loop statement used to repeat a sequence of statements for a specific number of occurrences.",
            "A for...next loop executes a set of statements for successive values of a variable until a limiting value is encountered. Such values are specified by establishing an initial value (num.exp1), a limiting value (num.exp2), and an optional increment value (num.exp3) to be added at the end of each pass through the loop.",
            "If the loop-ending condition is not met, the loop variable is incremented by 1 or by the value of the step expression and program control transfers back to the beginning of the loop. This looping continues until the ending condition is met or the loop is explicitly exited with an exit or goto statement."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "This example displays every value\nin array element 13.",
            "number.values = dcount(array(13),char(253))\nfor i = 1 to number.values\ncrt i \"l#4\" : array(13)<1,i>\nnext i",
            "This example prints an incrementing counter based on the\nnumber of values in array element 13. The loop terminates as soon\nas the last value is tested (number.values) or the\nfirst null value is found.",
            "for i = 100 to 1 step -1\ncrt i \"l#4\" :\nnext i\nThis is a decrementing counter beginning at 100 and ending at 1.\nnumber.values = dcount(array(13),char(253))\nfor i = 1 to number.values until array(13)<1,i>=\u2019\u2019\nprint i\nnext i",
            "All of the abovefor...nextconstructs\ncan be constructed using theloop...repeatconstructs.",
            "for i = 1 to 99 until array(i) = \"\"\ncrt array(i)\nnext i",
            "There are 99 elements in the dimensioned arrayarray. This example prints all elements until a null value\nis found.",
            "t=time()\ntimeout=10\nfor try = 1 to 5 until ((time() - t)>timeout or system(14))\nsleep 2\nnext try",
            "Thisfor...nextloop has a maximum\nof 5 iterations. The loop terminates when the elapsed time in seconds\nexceeds 10, or there are characters in the type-ahead buffer.",
            "for i = 1 to 99 while array(i) # \"\"\ncrt array(i)\nnext i",
            "This loop terminates when the 99th entry displays or the\nfirst null entry is encountered.",
            "for i = 1 to 99 while not(array(i) = \"\")\ncrt array(i)\nnext i"
        ]
    },
    {
        "name":"function statement",
        "Syntax":"",
        "description":[
            "Description",
            "Internal Function Statement",
            "A user-defined function statement looks and acts much like an inline subroutine (invoked             with gosub), except the return statement becomes \"returning X \",             where X is the value to return (return_value).",
            "User-defined functions always return a single value and accept any number of input             expressions. User-defined functions may not pass dimensioned arrays. ",
            "All variables used within the function are local to the function, and are not available             to the external program. This private use of the variables allows standardized global             libraries to be created and referenced by any program (via the                include statement). Programmers need not be concerned about the             variable names used in the function as they cannot conflict with the variables in the             program, even if the names are the same.",
            "Example: X = @myfunction()",
            "External Function Statement",
            "A user-defined function statement looks, compiles, and catalogs like a callable             subroutine, except the return statement becomes \"return X\", where X is the value to             return (return_value).",
            "An external function exits with a return statement and a             return_value. Compare to an internal function, which exits with a             returning statement and a return_value. This allows internal             functions to be nested within an external function."
        ],
        "parameter":[
            "Parameter(s)",
            "Internal Function Statement",
            "arg.listVariables passed to the function.function.nameName of internally defined function.",
            "After the function has been defined, use the following format to call the function:",
            "@function.name([arg.list])",
            "External Function Statement",
            "arg.listVariables to be assigned by the corresponding@functioncall.function.nameName of external cataloged function."
        ],
        "example":[
            "Example(s)",
            "Example 1",
            "Internal function statement example:",
            "* Necessary comment\n function funcVolume(Height,Diameter)\n     wVolume = Height * ( (Diameter\/2) ^2 ) * 3.14\n returning wVolume\n *\n Print \u201cVolume of 6X2 cylinder is: \u201c:@funcVolume(6,2)",
            "* program funcGosub\n crt \"Function that does GOSUBs\"\n * Necessary comment\n function funcgs(a,b)\n   if a = b then gosub Same else gosub Diff\n   go ExitFunc\n Same: Msg = \"Same\"\n   return\n Diff: Msg = \"Diff\"\n   return\n ExitFunc:\n   returning Msg\n *\n print @funcgs(2,2)\n print @funcgs(2,3)\n *",
            "Example 2",
            "External function statement example.",
            "This example calls an external function that returns the volume of a cylinder:",
            "*program main\n deffun funcVolume(Height,Diameter) ;* This statement is optional\n Volume = funcVolume(6,2)\n Print \u201cVolume of the cylinder is \u201c:Volume",
            "Here is the external function:",
            "function funcVolume(Height,Diameter)\n wVolume = Height * ( (Diameter\/2) ^2 ) * 3.14\n return wVolume"
        ]
    },
    {
        "name":"get statement",
        "Syntax":[
            "Syntax",
            "get var{,length} {setting character.count}\nfrom port.exp{until termination.characters} {returning termination.characters}\n{waiting seconds.exp} {then|else statement.block}\n"
        ],
        "description":[
            "Description",
            "The get statement gets raw characters from the specified port.",
            "Data read by the get statement is typically echoed unless the program     issues an echo off statement.",
            " Unattached Line",
            "If the line is not previously attached, the get statement will     automatically attach and detach the device."
        ],
        "parameter":[
            "Parameter(s)",
            "varReceives the input. Printable characters are echoed to the line, unless the program\n        issues anecho offstatement. Control characters are included, but not\n        echoed to the screen. No prompt displays.lengthMaximum characters to get. If nolengthis specified, and there\n        is nountilclause, 1 is the default. If thelengthis specified, but this number of characters is not entered, the system waits indefinitely or\n        until thewaitingclause times out, thetermination.characteris entered, or thelengthis satisfied.\n        If thelengthis satisfied, thethenclause is\n        executed.character.countNumber of characters to be returned. If thelengthexpression is\n        less than the number of characters specified bysetting, input\n        terminates at thelength. If thelengthexpression\n        is greater thansetting, only the number of characters specified by thesettingare returned to the variable.port.expPort from which to get characters. This port must have been previously attached with\n        the TCLdev-attcommand. If an invalid port number is specified or the\n        port is not attached, theelseclause is taken.termination.charactersDefines a set of characters that terminate input. If thexoption is\n        not in effect, the input also terminates on achar(255) (x\u2019ff\u2019). Thetermination.characteris not included in the returned string. When atermination.characteris received, thethenclause\n        is executed.returningReturns the character that terminated input. If the returning variable is null, and\n        either no length is specified, or the returned data length is less than the length limit, a\n        segment mark (x\u2019ff\u2019) is assumed as thetermination.character.waitingSpecifies how long, in tenths of a second, the system should wait until an input\n        termination condition exists (such as satisfying the length requirement or theuntilclause). If a time-out occurs, all input received up to this\n        point is returned in the variable, and theelseclause, if present, is\n        executed.",
            "Note:When using an expression in theuntilclause, it is necessary to\n    enclose that expression in parentheses for proper recognition."
        ],
        "example":[
            "Example(s)",
            "This obtains up to 80 characters from port 10 until that port generates a carriage return\n     (char(13)) or linefeed (char(10)). If more than 6 seconds\n    elapse, the statement terminates.Note:Thexxvariable contains a maximum of\n     5 characters. Thetermvariable contains the character that actually\n     terminated input.",
            "execute \\unlink-pibdev 10,10\\\nexecute \\dev-att 10\\\nget xx,80 setting 5 from 10 until (char(13):char(10)) returning term waiting 60\nexecute \\dev-det 10\\\nexecute \\link-pibdev 10,10\\"
        ]
    },
    {
        "name":"getx statement",
        "Syntax":[
            "Syntax",
            "getx var{,length} {setting character.count} \nfrom port.exp{until termination.characters} {returning termination.characters}\n{waiting seconds.exp} {then|else statement.block}\n"
        ],
        "description":[
            "The getx statement receives input from an attached line in ASCII hexadecimal format. The statement returns an exploded ASCII hexadecimal string that allows binary data to contain a decimal 255 (x\u2019ff\u2019)"
        ],
        "parameter":[
            "Parameter(s)",
            "varReceives the input. Printable characters are echoed to the\nline, unless the program issues anecho offstatement.\nControl characters are included, but not echoed to the screen. No\nprompt displays.lengthMaximum characters to get. If nolengthis specified, and there is nountilclause,\n1 is the default. If thelengthis specified,\nbut this number of characters is not entered, the system waits indefinitely\nor until thewaitingclause times out, thetermination.characteris entered, or thelengthis satisfied. If thelengthis satisfied, thethenclause is executed.character.countNumber of characters to be returned. If thelengthexpression is less than the number of characters specified bysetting, input terminates at thelength. If thelengthexpression is greater thansetting, only the number of characters specified by thesettingare returned to the variable.port.expPort from which to get characters. This port must have been\npreviously attached with the TCLdev-attcommand.\nIf an invalid port number is specified or the port is not attached,\ntheelseclause is taken.termination.charactersDefines a set of characters that terminate input. If thexoption is not in effect, the input also terminates on\nachar(255) (x\u2019ff\u2019). Thetermination.characteris not included in the returned string. When atermination.characteris received, thethenclause is executed.returningReturns the character that terminated input. If the returning\nvariable is null, and either no length is specified, or the returned\ndata length is less than the length limit, a segment mark (x\u2019ff\u2019)\nis assumed as thetermination.character.waitingSpecifies how long, in tenths of a second, the system should\nwait until an input termination condition exists (such as satisfying\nthe length requirement or theuntilclause).\nIf a time-out occurs, all input received up to this point is returned\nin the variable, and theelseclause, if present,\nis executed.",
            "Note:When using an expression in theuntilclause, it is necessary to enclose that expression in parentheses\nfor proper recognition."
        ],
        "example":[
            "Example(s)",
            "If\"HELLO\"is\nentered on port 10,xxcontains\"48454C4C4F\". If the string,\"HE<Backspace>LLO\"is entered,xxcontains\"4845084C4C4F\", where the\"08\"is the backspace character.",
            "getx xx,10 from 10 waiting 50"
        ]
    },
    {
        "name":"gosub statement",
        "Syntax":[
            "Syntax",
            "gosub statement.label{:}\n"
        ],
        "description":[
            "The gosub statement transfers control to a local subroutine identified by a statement label within the program. Control returns to the next statement after the gosub statement when the return statement is encountered."
        ],
        "parameter":[
            "Parameter(s)",
            "statement.labelIdentifies the local subroutine to which control is transferred."
        ],
        "example":[

        ]
    },
    {
        "name":"goto statement",
        "Syntax":[
            "Syntax",
            "goto statement.label{:}\ngo to statement.label{:}\n"
        ],
        "description":[
            "The goto statement transfers control to the location in the FlashBASIC or BASIC program that begins with the given statement label.",
            "On statement labels beginning with a nonnumeric value, the : following the  statement.label is optional in the goto, but is required following the actual statement label."
        ],
        "parameter":[
            "Parameter(s)",
            "statement.labelSpecifies the location in a FlashBASIC or BASIC program to\nwhich control is transferred."
        ],
        "example":[
            "Example(s)",
            "goto 99\ngo to error\nif ans=\u2019y\u2019 then go begin"
        ]
    },
    {
        "name":"heading statement",
        "Syntax":[
            "Syntax",
            "heading str.exp\u00a0\nheading \"{{text} {\u2019options\u2019}...}\"\n"
        ],
        "description":[
            "Description",
            "The heading statement designates a text string composed of literals and special options to output at the top of each page.",
            " str.exp is any valid literal string, string expression, or variable. A literal string must be enclosed in either double quotation marks or backslashes because heading  options must be enclosed within single quotation marks to distinguish them from  text. Multiple options can be enclosed in the same set of single quotation marks.",
            "The heading can be changed with a new heading statement, which outputs the revised heading at the beginning of the next page. The first time the heading is activated, it is output directly to the screen.",
            "The page statement is used to force pagination.",
            "The system(4) function maintains line and system(5) maintains page counters while heading and footing are active.",
            "Under normal circumstances, a heading statement executed when there is another heading active does not display anything until the next page. However, D3 redisplays the heading immediately if the current page number is 0.",
            "Mixing heading and footing statements with direct cursor addressing commands is not allowed."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "In this example, theheadingoption string is assigned to the variableheadand subsequently assigned as the heading.",
            "heading \"\u2019lc\u2019page \u2019pn\u2019 printed at \u2019tlc\u2019 this end into shredder first.\u2019l\u2019\"\u00a0\nhead = \\\u2019c\u2019this is a heading\u2019l\u2019\\\nheading head"
        ]
    },
    {
        "name":"if statement",
        "Syntax":[
            "Syntax",
            "if logical.exp then statement.block\nif logical.exp else statement.block\nif logical.exp then statement.block else statement.block\n",
            "if logical.exp then statements else\nstatements\n.\n.\nend\n",
            "if logical.exp then\nstatements\n.\n.\nend else statements\n",
            "if logical.exp then\nstatements\n.\n.\nend else\nstatements\n.\n.end\n",
            "if logical.exp else\nstatements\n.\n.\nend\n",
            "if logical.exp then\nstatements\n.\n.\nend\n"
        ],
        "description":[
            "Description",
            "The if statement tests the result of a logical expression. Depending       on whether the expression evaluates to either true or false, the statements following the          then or else clauses, respectively, are       executed.",
            "Complex conditions can be tested by using the and and                or connectives. Regardless of the complexity of the overall             expression, each condition eventually evaluates to a simple true or false.",
            "NULL statements are often included in then or           else clauses as placeholders. A NULL statement performs no action.         However, you can use NULL statements to make the logic of a conditional more clear and         easier to read.",
            "If the then clause is           omitted, the statement would make sense to the compiler, but it might not be clear to the           user. The NULL statement is used to make clear to the user that if the match returns a           value of true, no action is taken.",
            "Many statements accommodate the                then\/else construct.             More information is available at then\/else statement blocks."
        ],
        "parameter":[
            "Parameter(s)",
            "logical.expExpression to be tested.If it evaluates to nonzero, it is considered true.If it evaluates to 0, it is false.thenstatement.blockExecutes the specified statements if the logical expression evaluates\n                        to nonzero.elsestatement.blockExecutes the specified statements if the logical expression evaluates\n                        to 0."
        ],
        "example":[
            "Example(s)",
            "Example 1",
            "if answer = \u2019exit\u2019 then stop\nif answer = \u2019y\u2019 then print \u2019ok\u2019; cnt=cnt+1; goto 20\nif answer = \u2019y\u2019 then\n   print \u2019ok\u2019\n   cnt=cnt+1\nend\nif answer = \u2019exit\u2019 then gosub 100 else gosub 200\nif answer = \u2019y\u2019 then print \u2019ok\u2019;cnt=cnt+1 else print \u2019no good\u2019;stop\nif answer = \u2019y\u2019 then\n   print \u2019ok\u2019\n   cnt=cnt+1\nend else\n   print \u2019no good\u2019\nend",
            "Example 2",
            "The following is an example testing if a value is\n        numeric:IF NUM(PRICE) THEN\n           NULL\nEND ELSE\n     PRINT \"ERROR: NON-NUMERIC PRICE. STOP\"\nSTOP\nEND"
        ]
    },
    {
        "name":"ifr statement",
        "Syntax":[
            "Syntax",
            "ifr logical.exp[then|else] statement.block\nifr logical.exp then statement.block else statement.block\n"
        ],
        "description":[
            "Description",
            "The ifr statement tests the result of a logical expression.",
            "Each attribute of the first element of the expression is tested against the target. Depending on     whether one of the attributes in the expression evaluates to either true or false, the     statements following the then or else clauses,     respectively, are executed."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "Example 1",
            "001 print \"Input string\":;input str2\n 002 str1=\"a\":@am:\"b\"\n 003 ifr str1=str2 then print \"match\" else print \"no match\"\n run bp testifr\n Input string?a\n match\n run bp testifr\n Input string?b\n match\n run bp testifr\n Input string?ab\n no match",
            "Example 2",
            "Exampleifrstatement for mvBase compatibility mode:",
            "001 print \"Input string\":;input str2\n 002 str1=\"a\":@vm:\"b\"\n 003 ifr str2=str1 then print \"match\" else print \"no match\"\n run bp testifr\n Input string?a\n match\n run bp testifr\n Input string?b\n match\n run bp testifr\n Input string?ab\n no match"
        ]
    },
    {
        "name":"in statement",
        "Syntax":[
            "Syntax",
            "in var{for time.exp then|else statement.block}\n"
        ],
        "description":[
            "Description",
            "The in statement accepts a single raw character of input from the keyboard, without displaying a prompt character or requiring pressing ENTER following the input.",
            "A character is retrieved from the type-ahead buffer without being processed and is converted to its equivalent decimal value before being assigned to the variable.",
            "For example, when the BACKSPACE key is pressed, the in statement retrieves an 8. When the LINEFEED key is pressed, the value is 10.",
            "The time expression is expressed in tenths of a second, as a positive integer from 1\u00a0to 32767. If  time.exp is zero and there is at least one character in the input buffer, the first character is returned and the then clause is taken. If  time.exp is zero, and there is no character available in the input buffer, the in statement returns immediately and the else clause is taken. If  time.exp is negative, then no time-out is in effect. The system waits indefinitely for the character.",
            "A  length.exp of zero is allowed in the input statement. This syntax is more consistent with other implementations of D3."
        ],
        "parameter":[
            "Parameter(s)",
            "time.expSpecifies the maximum amount of time that the system waits\nfor input before returning to the FlashBASIC or BASIC program.When a character is entered, thethenclause\nis taken.When a character is not entered in the allocated time, theelseclause is taken."
        ],
        "example":[
            "Example(s)",
            "This program loops until a carriage\nreturn (char(13)) is pressed.",
            "loop\nin key\nuntil key = 13 do repeat",
            "In this example, the system waits for key for 30 seconds.\nIf no keystroke is provided within 30 seconds,time-out occurreddisplays and the program stops.",
            "maxtime = 300 ;* 30 seconds\nin key for maxtime else\n   crt \u2019time-out occurred\u2019\nend",
            "input x,0\nx = seq(x)",
            "These two lines perform exactly the same as:",
            "in x"
        ]
    },
    {
        "name":"input statement",
        "Syntax":[
            "Syntax",
            " input {@(col.exp,{row.exp}):} var{= val.exp} {,length.exp} {,fill.exp} {:|mask} {_}\n{for time.exp{then|else statement.block}}"
        ],
        "description":[
            "Description",
            "The input statement temporarily suspends execution of the program   until a response is provided from the keyboard, and then assigns that response to a specified   variable.",
            "col.exp and row.exp must evaluate to valid screen     addresses.",
            "The input received is assigned to the specified variable after performing the optional                     mask() function. The mask can contain any valid mask                 described under masking except for masks beginning with a c. If the                 variable already has a value, and the @() function has been                 specified, the current value of the variable displays as the default at the                 specified cursor address. Pressing Enter accepts the default.",
            "If the input data value is incompatible with the optionally-specified  mask                 expression, the statement prompts again for input. mask()                 functions can be any combination of conversions, pattern-matching operators, or text                 justification.",
            "When an input statement is executed, a prompt character displays, followed by the cursor. If the @() function is used, the prompt displays preceding the location specified by @(). Unless the prompt character has been changed with the prompt statement, the default prompt character is the ?.",
            "Some implementations round time.exp to the nearest second.",
            "The then clause is taken if valid input is completed within the allocated time. The else clause is taken if there is no input, insufficient input, or when a noncarriage-return terminated input occurs in the allocated time.",
            "Due to the way UNIX schedules processes, there is no guarantee that, in case of a time-out, the process activates at exactly the specified time. There can be significant differences if the system is heavily loaded.",
            "There are some limitations on the types of numeric expressions used to designate the      length.exp. For example, the statement input x,2*3 does     not work, whereas the statement input x,(2*3) works.",
            "The input x,0 suppresses the prompt character and allows the input of certain control characters that were previously blocked, such as CTRL+X. Carriage return and linefeed return char(13) and char(10), respectively. CTRL+S and CTRL+Q are used for flow control and return no value unless xonoff is disabled."
        ],
        "parameter":[
            "Parameter(s)",
            ":Suppresses the CR\/LF after input has been completed.=val.expSets a default value for the input field. This value displays\nwithin the input field and the user can edit this value as need be.\nIf no editing is performed, then the default value is accepted as\nif the user had typed that value at the keyboard.length.expSpecifies the number of characters of input to accept. When the number of characters have\n                                been entered, the input instruction terminates exactly as though the\n                                operator had pressed Enter.fill.expSpecifies to perform a background fill within the input field.The first character of\n                                    this expression indicates the prompt background fill character.\n                                    This character is used to help the user see the length of a\n                                    prompt. The second character, if present, indicates the\n                                    overstrike character used to fill in any spaces when the input\n                                    is accepted. After input is accepted, the cursor is placed at\n                                    the end of the entered data unless a third fill character is\n                                    specified.In this case, the cursor is moved to the end of\n                                    the input field.fill.expis ignored if nolength.expis specified._Outputs a beep to the terminal for each character typed that exceeds the specified maximum\n        length. Echoing of characters to the screen is suppressed for the extra characters and\n        pressing Enter is required for acceptance. Only the number of characters less than or equal\n        to the length expression are accepted.fortime.expMaximum time that the system waits for input before returning\nto the FlashBASIC or BASIC program until any of the events below occur:When a valid termination occurs. Thethenclause is taken.When no carriage return is entered, even though input continues, and no valid termination occurs\n          within the specified time. The variable contains all characters entered until the time\n          expired. If no characters are in the type-ahead buffer, variable is null. Upon time-out,\n          theelseclause is taken.When not enough characters are entered to satisfy the length requirement within the allocated\n          time, theelseclause is taken.WARNING\u2014For Windows, this expression\nis not supported for pib 0 or RPC processes.on timeoutThis clause is only available when running in mvBase\n                                    Compatibility Mode.The timeout value is set up from a priorTIMEOUTstatement. When no input occurs\n                                    for the timeout value specified, the statement block following\n                                    theon timeoutclause is executed.col.expIn theinput @form, specifies the screen column address from which the\n        input of data from the terminal is prompted.row.expIn theinput @form, specifies the screen row address from which the input\n        of data from the terminal is prompted.maskIn theinput @form, mask is used to\nverify and reformat the actual entry of the data. Any valid format\nstring can be specified. The input is verified against the mask and,\nif acceptable, is assigned to the variable. Data is input and verified\naccording to the mask, then stripped of its output characteristics\nand stored in internal format.For example, if themaskcontains a decimal digit specification and\/or a\n         scaling factor, then numeric checking is performed. If themaskcontains a length specification, then length checking is performed."
        ],
        "example":[
            "Example(s)",
            "answeris the\nfirst character entered from the keyboard. No Enter is required.",
            "print \u2019are you sure? \u2019:\n input answer\n if answer[1,1]=\u2019y\u2019 then goto 100\n print \u2019are you sure? \u2019:\n input answer,1:",
            "input x,0\n x = seq(x)",
            "These two lines perform exactly the same as:",
            "in x",
            "Using 0 as a length expression is valid.",
            "input x for 50 else stop",
            "Wait 5 seconds for input. If there is no input, terminated\nby a carriage return, the program stops.",
            "input x for 0 then print x else x = 0",
            "The time-out value equal to 0 means read characters without\nwaiting. If there is any, thethenclause is taken,\notherwise theelseclause is taken.",
            "print \"Enter Cost \":\n input @(5,5):cost \"r2$\"",
            "Example A and Example B use masking. The previous mask\"r2$\"right justifies,\n                uses two decimal places, and puts a$on the left of the forced\n                numeric entry.Example A: A colon underscore \":_\" is used.Example B: An underscore colon \"_:\" is used.Both are valid.",
            "Example A",
            "print @(5,5):\"Name: \":\ninput name.new = item<3>, 20 ,\"_ \" :_\nitem<3> = name.new",
            "Example B",
            "print @(5,5):\"Name: \":\ninput name.new = item<3>, 20 ,\"_ \" _:\nitem<3> = name.new",
            "This displays a prompt for a name on a formatted screen. The data to be edited displays as though\n                the user already typed it in a field of 20 underscores (the first character infill.exp). As the user edits the data (when backspace is\n                used), underscores replace any erased data. When complete, the user must press Enter\n                or LINEFEED. The data is then repainted and the underscores are replaced with spaces\n                (the second character offill.exp)."
        ]
    },
    {
        "name":"inputclear statement",
        "Syntax":[
            "Syntax",
            "inputclear\n"
        ],
        "description":[
            "The inputclear statement clears the keyboard type-ahead buffer."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "print \u2019Do you wish to continue? (y\/n) \u2019:\ninputclear\ninput answer,1"
        ]
    },
    {
        "name":"inputctrl statement",
        "Syntax":[
            "Syntax",
            "inputctrl on|off\n"
        ],
        "description":[
            "Description",
            "The inputctrl statement is used to enable or suppress control         characters in BASIC input statements.",
            "Characters unaffected by the                                     input control statement:",
            "The default value for this setting is loaded from the TCL default and is always                 enabled. The TCL default can be changed with the TCL                     control-chars command.",
            "When you are in mvBase compatibility mode, the input control command works                     opposite of the way it does in D3. Review the following tables:",
            "D3 inputctrl statement",
            "mvBase compatibility input ctrl statement"
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "In the following example, the user is asked to enter a street address. To ensure that\n                no control character appears in the address, use the input control statement that\n                suppresses the control characters.",
            "$OPTIONS MVBASE\n PRINT \"ENTER YOUR STREET ADDRESS\"\n INPUT CTRL ON\n INPUT ADDRESS"
        ]
    },
    {
        "name":"inputerr statement",
        "Syntax":[
            "Syntax",
            "inputerr str.exp\n"
        ],
        "description":[
            "Description",
            "The inputerr statement displays a message on the status (bottom) line of the terminal. it meant to be used with the input@ statement.",
            "If inputerr is used in a subroutine call from the Update processor, the item cannot be filed if an error exists. In this case, control returns to the Update processor input screen."
        ],
        "parameter":[
            "Parameter(s)",
            "str.expError message text."
        ],
        "example":[
            "Example(s)",
            "This program has a single valid\nentry,e. If any other string is entered, the stringEntry errordisplays on the error message line.",
            "string=\u2019\u2019\nprompt \u2019\u2019\ncrt @(0,10):\"Enter string \"\nloop\n   input @(15,10):string,5\nuntil string=\u2019e\u2019 do\n   inputerr \u2019entry error\u2019\nrepeat"
        ]
    },
    {
        "name":"inputerr statement (Windows)",
        "Syntax":"",
        "description":[

        ],
        "parameter":[
            "Parameter(s)",
            "^Attribute mark.textText of the message box.titleOptional title. If the title\nis omitted, the default Error text displays.styleNumeric code for the message\nbox buttons. The numeric codes can be created by adding together one\nor more of the EQUATES shown below as defined indm,bp,includes\nnt_defs.inc:ButtonsNT$MSGBOX$OKOK (default)NT$MSGBOX$OKCancelOK CANCELNT$MSGBOX$AbortRetryIgnoreABORT RETRY IGNORENT$MSGBOX$YesNoCancelYES NO CANCELNT$MSGBOX$YesNoYES NOIconsNT$MSGBOX$CriticalCritical error stopNT$MSGBOX$ExclamationExclamation pointNT$MSGBOX$InformationInformation (default)NT$MSGBOX$QuestionQuestion markDefault ButtonsNT$MSGBOX$DefButton1Button 1 (default)NT$MSGBOX$DefButton2Button 2T$MSGBOX$DefButton3Button 3NT$MSGBOX$DefButton4Button 4Modal StateNT$MSGBOX$AppModalApplication modal (default)NT$MSGBOX$SysModalSystem modalNT$MSGBOX$TaskModalTask modal (similar to application modal)inputerrreturns\nwhen the user makes a selection, andsystem(0)returns\na numeric code indicating the user choice:NT$MSGBOX$SEL$YESYesNT$MSGBOX$SEL$NONoNT$MSGBOX$SEL$OKOKNT$MSGBOX$SEL$CANCELCancelNT$MSGBOX$SEL$IGNOREIgnoreNT$MSGBOX$SEL$RETRYRetryNT$MSGBOX$SEL$ABORTAbort"
        ],
        "example":[
            "Example(s)",
            "This example displays a dialog\nbox to prompt the user to insert a floppy. The message box has a title\nFormat, two buttons (OK and CANCEL), and a question mark icon:",
            "INCLUDE DM,BP,INCLUDES NT_DEFS.INC\nMsgFmt = NT$MSGBOX$OKCancel + NT$MSGBOX$Question\nINPUTERR \u201cInsert floppy and press OK\u201d:AM:\u201dFormat\u201d:AM:MsgFmt\nIF SYSTEM(0) = NT$MSGBOX$SEL$CANCEL THEN\n   * User selected CANCEL\n   ...\nEND"
        ]
    },
    {
        "name":"inputif statement",
        "Syntax":[
            "Syntax",
            " inputif var {= expr} {,length-expr} {,fillchars} {_} \n {:} {from line-expr} \n         then\/else statement\n end"
        ],
        "description":[
            "Description",
            "The inputif statement captures input from the type-ahead buffer         and assigns the input to a variable.",
            "The inputif statement checks the type-ahead buffer and, if it is                 non-null, initially assigns the variable var with the contents of                 the type-ahead buffer. ",
            "After the contents are assigned, it executes the THEN part of the statement. If a                 maximum length (length-expr) has been specified with an                 underscore (_), pressing Enter is necessary. If there is no data in the type-ahead                 buffer, the variable is not assigned and the ELSE part of the statement is                 executed.",
            "If the type-ahead buffer is empty, the variable is not assigned and the user is not                 prompted. However, if the type-ahead buffer is not empty, but a carriage return is                 required to complete the input, the user is prompted with the type-ahead buffer                 input.",
            "The inputif statement includes many features reflecting those of                 the standard input statement. See input statement for more information.",
            "The type-ahead feature can be controlled with the ta statement.                 The ta statement has options to turn on or off type-ahead and to                 clear the type-ahead buffer. Furthermore, the intrinsic function                     ta returns the number of characters in the type-ahead                 buffer."
        ],
        "parameter":[
            "Parameter(s)",
            ":A colon suppresses the automatic line feed and carriage return\n                                when the value is input._An underscore specifies that a carriage return must be entered\n                                by the user, even if the input length equalslength-expr.If the user tries to exceed\n                                    the maximum length, a bell rings.var=exprAssigns input data to variablevar. Ifexpris specified,varis\n                                initially set to the value ofexpr, and\n                                characters in the type-ahead buffer are appended to that\n                                value.length-exprAn expression, up to 140 characters, to be interpreted as the\n                                maximum number of characters to assign tovar.fillcharsAn expression evaluating to a string of one, two, or three\n                                characters.The first character is taken as a background mask\n                                    for the input field, and the second is used as an overstrike\n                                    filler for portions of the field left unwritten. The cursor\n                                    returns to the end of the input data unless there is a third\n                                    fill character. If there is a  third fill character, the cursor\n                                    remains at the end of the formatted field.FROMline-exprTake the input from the type-ahead of the attached lineline-expr.If the line is not attached, a\n                                    run-time error is printed and the BASIC Debugger is\n                                entered.THENstatementExecutes a statement if the type-ahead buffer isnotempty.ELSEstatementExecutes a statement if the type-ahead buffer is empty."
        ],
        "example":[
            "Example(s)",
            "Example 1",
            "To assign the variableTYPEAwith the current contents of the\n                type-ahead buffer and print \"TYPE AHEAD EMPTY\" if no data is received, the code\n                would read:",
            "INPUTIF TYPEA ELSE\n    PRINT \"TYPE AHEAD EMPTY\"\n END",
            "Example 2",
            "In this example, a requested calculation might take several minutes to complete. The\n                user is allowed to use the Esc key to exit from the program, and theinputifstatement is repeated at every iteration to see if\n                Escape was entered in the type-ahead buffer.",
            "PRINT \"ENTER <ESC> TO EXIT.\"\n LOOP\n    .\n    .\n    .\n    LOOP\n       INPUTIF STOPVAR,1 :  THEN         \n          IF STOPVAR = CHAR(27) THEN       \n             GOSUB EXIT                   \n          END\n          TA.EMPTY = 0                  \n       END ELSE\n          TA.EMPTY = 1                \n       END\n    UNTIL TA.EMPTY DO REPEAT              \n    .\n    .\n    .\n  UNTIL ...DO REPEAT"
        ]
    },
    {
        "name":"inputnull statement",
        "Syntax":[
            "Syntax",
            "inputnull \u2019character\u2019\n"
        ],
        "description":[
            "Description",
            "The inputnull statement is used with the input @ statement to define the character used to indicate a null input on subsequent input statements.",
            "The inputnull must precede the affected input @ statement. Only one inputnull statement is active at any one time. If there is an inputtrap active for the same character, the inputnull has precedence."
        ],
        "parameter":[
            "Parameter(s)",
            "characterCharacter to define as the indicator of null input for subsequentinputstatements. Only single character inputs are accepted."
        ],
        "example":[
            "Example(s)",
            "Theinput @statement requires a numeric value for string. Anx, although not numeric, is accepted as a null input.",
            "string=\u2019\u2019\ninputnull \u2019x\u2019\ninput @(10,10):string,50 \"mr%3\"\nif string=\u2019\u2019 then stop",
            "Even though theinputtrapreadsxas an active value, theinputnulloverrides.xdoes not terminate this program.",
            "string=\u2019\u2019\ninputtrap \u2019x?!\u2019 gosub statement.label1,statement.label2,statement.label3\nloop\n   inputnull \u2019x\u2019\n   input @(3,5):string,20 \"mr#4\"\nwhile string=\u2019\u2019 do repeat"
        ]
    },
    {
        "name":"inputparity statement",
        "Syntax":[
            "Syntax",
            "inputparity on|off\n"
        ],
        "description":[
            "Description",
            "The inputparity statement enables or disables the extended character set (xcs) for the current process.",
            "When xcs is on, the high order bit is not stripped from input that is transmitted to the system. This allows characters in the range 128 through 255 to be used as unique characters.",
            "When xcs is off, the high order bit is stripped from input. Characters from 128 through 255 are not available.",
            "The BASIC inputparity statement is equivalent to the TCL xcs command."
        ],
        "parameter":[
            "Parameter(s)",
            "onEnables the extended character set (xcs) for the current process.offDisables the extended character set (xcs) for the current\nprocess."
        ],
        "example":[

        ]
    },
    {
        "name":"inputtrap...gosub statement",
        "Syntax":[
            "Syntax",
            "inputtrap str.exp gosub statement.label{,statement.label...}\n"
        ],
        "description":[
            "Description",
            "The inputtrap...gosub statement, using the  str.exp, sets up an automatic computed gosub based on the next input @ statement data. The position of the character in the string expression corresponds to the position of the statement label in the list. This acts as a trap that causes a gosub on all subsequent input @ statements.",
            "Upon return from a gosub specification, execution continues at the statement following the inputtrap statement, not the input @ statement.",
            "inputtrap must precede its associated input @ statement. Only one inputtrap statement can be active at any time."
        ],
        "parameter":[
            "Parameter(s)",
            "str.expAn expression evaluating to characters to be searched for\nin the input.statement.labelstatement label to be branched to."
        ],
        "example":[
            "Example(s)",
            "inputtrap \"abcd\" gosub 10,20,30,40\ninput @(5,5):x\nstop\n10 print \"You entered a\"\nreturn\n20 print \"You entered b\"\nreturn\n30 print \"You entered c\"\nreturn\n40 print \"You entered d\"\nreturn"
        ]
    },
    {
        "name":"inputtrap...goto statement",
        "Syntax":[
            "Syntax",
            "inputtrap str.exp goto statement.label{,statement.label{,...}}\n"
        ],
        "description":[
            "Description",
            "The inputtrap...goto statement, using the  str.exp, sets up an automatic computed goto based on the next input @ statement\u2019s data. The position of each character in the string expression corresponds to the position of the statement label in the list. This acts as a trap that causes a goto on all subsequent input @ statements and branches to a label in the current program.",
            "inputtrap must precede its associated input @ statement. Only one inputtrap statement can be active at any time.",
            "If data is entered that does not correspond to the inputtrap  str.exp, then no trap occurs and execution continues with the statement after the input @."
        ],
        "parameter":[
            "Parameter(s)",
            "str.expAn expression evaluating to characters to be searched for\nin the input.statement.labelstatement label to be branched to."
        ],
        "example":[
            "Example(s)",
            "inputtrap \"abcd\" goto 10,20,30,40\ninput @(5,5):x\nstop\n10 print \"You entered a\"\nstop\n20 print \"You entered b\"\nstop\n30 print \"You entered c\"\nstop\n40 print \"You entered d\"\nstop"
        ]
    },
    {
        "name":"inputtrap off statement",
        "Syntax":[
            "Syntax",
            "inputtrap off\n"
        ],
        "description":[
            "The inputtrap off statement cancels the previous inputtrap statement."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"ins statement",
        "Syntax":[
            "Syntax",
            "ins str.exp before dyn.array.exp< ac.exp{,vc.exp{,sc.exp}}>\nins str.exp before dim.array.exp(element)< ac.exp{,vc.exp{,sc.exp}}>\n"
        ],
        "description":[
            "The ins statement is an alternative to the insert() function for inserting a string expression into a dynamic array."
        ],
        "parameter":[
            "Parameter(s)",
            "str.expSpecifies the element to insert in the dynamic array.array.expSpecifies the dynamic or dimensioned array in which the element\nwill be inserted.ac.expSpecifies the attribute in which the element will be inserted.vc.expSpecifies the value in which the element will be inserted.sc.expSpecifies the subvalue in which the element will be inserted."
        ],
        "example":[
            "Example(s)",
            "x<1> = \"a\"\nx<2> = \"c\"\nins \"b\" before x<2>\nprint x\na^b^c"
        ]
    },
    {
        "name":"key statement",
        "Syntax":[
            "Syntax",
            " key(\u2019operator\u2019, root.var, index.key, item-ID{,vc.exp}) {then|else statement.block}\n"
        ],
        "description":[
            "The key statement locates an item using a B-tree index key and returns   the item in a variable. This provides the ability to sequentially search the items in the file   based on the index."
        ],
        "parameter":[
            "Parameter(s)",
            "operatorMust be enclosed in single quotes\nand indicates the type of index search to use, and can be one of these:cCompares, left-to-right, against the index key and returns the first item-ID whose index\n                matches intoitem-ID.If no match is found, the next sequentially higher index and first associated\n                    item-ID are returned.If the item-ID is passed as null, then this returns the first item-ID that\n                    matches the passed index key.lReturns the last partial key.If a non-null item-ID is passed, then this operation is identical to thepoperator.If a null item-ID is passed, then this function returns the highest valued key\n                    in the index that still matches the passed key.nReturns the next index key and item-ID.If more than one item-ID exists for an index key, this returns the next\n                    item-ID.If the item-ID is passed as null, then the first item-ID that matches the\n                    passed index key is returned.After all item-IDs for an index key have been returned, it returns the next\n                  index key and item-ID.pReturns the previous index key and item-ID.If more than one item-ID exists for an index key, the previous item-ID is\n                    returned.After the first item-ID for an index key has been returned, or ifitem-IDis null, it returns the previous index key and the last\n                    item-ID.rReturns the index key and item-ID only on an exact match with\nthe index key.vVerifies the index. Locates the given index key anditem-IDand verifies that an exact match can be found.xReturns all item-IDs that exactly match the passed key.If no match is found, then it returns all matching IDs for the next key.If the passed item-ID is null, then the data for the passed key is\n                    returned.If the passed item-ID is non-null, then the list for the next key is\n                    returned.If the data is multivalued, then the item-ID list can contain duplicate\n                    item-IDs.Thevc.expparameter, if present, returns the number of\n                  elements found with an original value position not equal to 1. If thevc.expparameter is specified on input, then the item-ID on\n                  output is affected as follows:If thevc.expparameter is specified and equals 0, then no\n                    corresponding value numbers are returned.If thevc.expparameter is specified and does not equal 0,\n                    then the corresponding value numbers are returned.root.varIndicates the B-tree root FID associated with the target index.It must be initialized by therootstatement and must be\n                  defined prior to using thekeystatement.index.keySpecifies a mandatory variable containing the search string.The variable must be defined before using thekeystatement.\n                  The actual string found is returned into the variable when using thec,n, orpoperators. Therandvoperators expect\n                  an exact match.Theindex.keyvariable is used as a pair\n                  with theitem.IDvariable. These are the input and output\n                  parameters that specify the starting position within the index.item-IDIndicates the variable that is assigned the item-ID of the item\n                that contains the key.The item-ID need not be preassigned when using thepornoperators, but must be\n                  preassigned when using thevoperator.Theitem.IDvariable is used as a pair with theindex.keyvariable. These are the input and output parameters\n                  that specify the starting position within the index.vc.expIndicates the value number of the key attribute containing the\n                index key, returned to the value count expression by thekeystatement. This only works with thec,n,p, androperators.thenThethenclause is executed if the item-ID\n                is found or if the index key verifies with thevoperator.elseTheelseclause\nis executed if the item-ID is not found or if the index key does not\nverify with thevoperator.",
            "Therootstatement must precede thekeystatement. Although therootstatement\ndoes not require it, it is highly recommended to use thethen\/elseclause\nsince using thekeystatement on an invalid root\nvariable will cause a runtime abort."
        ],
        "example":[
            "Example(s)",
            "In therootstatement, employee is the file that contains the predefined index.\nIf the index is found, the root FID is assigned to the variablee.root.",
            "In thekeystatement,nindicates that the next matching string is to be located.e.keyis the variable that contains the search string anditem-IDis the variable to which the actual item-ID is\nassigned, if it is found.",
            "employee.index =\u2019a5\u2019; * phone number attribute\n execute \"create-index employee \":employee.index\n root \u2019employee\u2019,employee.index to e.root else\n print \"the index \":employee.index:\" not found\"\n end\n print \"Enter phone number to match \":\n input e.key\n key(\u2019n\u2019,e.root,e.key,item-ID) then print item-ID"
        ]
    },
    {
        "name":"let statement",
        "Syntax":[
            "Syntax",
            "{let} var = exp\n"
        ],
        "description":[
            "Description",
            "The let statement assigns the value of an expression to a variable.",
            "The let statement is a holdover from the original Dartmouth BASIC, and is only included for compatibility. It is supported to facilitate program readability."
        ],
        "parameter":[
            "Parameter(s)",
            "varVariable that is assigned the value ofexp. Can be a simple variable, an array element, an extraction, substring,\nor both extraction and substring.expValue to be assigned tovar."
        ],
        "example":[
            "Example(s)",
            "let a = 5",
            "The statement above is exactly the same as:",
            "a = 5"
        ]
    },
    {
        "name":"locate statement",
        "Syntax":[
            "Syntax",
            "locate(str.exp,dyn.array.exp{,ac.exp{,vc.exp}}\n{,start.exp};position.var{;sequence.exp})[then|else statement.block]\nlocate str.exp in dyn.array.exp{< ac.exp{,vc.exp}>} {,start.exp} {by sequence.exp}\nsetting position.var[then|else statement.block]\n"
        ],
        "description":[
            "Description",
            "The locate statement searches for the location of a specific string expression and returns the location in  position.var.",
            "The use of the optional attribute count expression and value count expression indicates whether the value returned into  position.var is a value count or a subvalue count. If both are omitted, the value returned into  position.var is an attribute count.",
            "To use the start expression while not specifying the ac expression and vc expression, a 0 must be substituted to hold the syntactical position.",
            "A frequent mistake when using locate is specifying one too many dynamic array specifiers. For example, users wishing to search through a set of attributes should use locate str.exp in dyn.array..., not dyn.array<1>. Users wishing to search through a list of values in attribute 1 should use locate str.exp in dyn.array<1>...,, not  dyn.array<1,1>."
        ],
        "parameter":[
            "Parameter(s)",
            "str.expString expression to locate.\nIt must match the element exactly in order for the location to be\nreturned.array.expArray used to search for the\nstring expression.ac.expAttribute used to search for\nthe string expression.vc.expSubvalue used to search for the\nstring expression.start.expSpecifies the first field to\nsearch. If not specified, the entire string is searched.Ifac.expandvc.expare both specified,start.expis the first subvalue\nto search.If onlyac.expis specified,start.expis the first value to search.Ifac.expis not specified,start.expis the first attribute to search.sequence.expSpecifies that the elements ofdyn.array.expas being in ascending or descending ASCII\nsequence, and sorted with either right or left justification. Possible\nvalues are:alAscending, left-aligned.alsAscending, left-aligned (Compatibility with thealparameter of thesort() function).arAscending, right-aligned.arsAscending, right-aligned (Compatibility with thearparameter of thesort() function).dlDescending, left-aligned.dlsDescending, left-aligned (Compatibility with thedlparameter of thesort() function).drDescending, right-aligned.drsDescending, right-aligned (Compatibility with thedrparameter of thesort() function).If the first character in the sequence expression is anything\nexceptaord, or thelorris not specified, no sort\nis performed. If the second character is anything exceptr, left justification is assumed. If no sequence parameter\nis specified,position.vardefaults to the end\nof the string expression.If the string is not found, the position where it should be\nplaced is returned.Thescharacter of the sequence expression\nis not supported in flash compiled programs.Note:In D3, the single quotation marks around the sequence expression\nare no longer required.Note:Non-integers and mixed numeric\nand non-numeric data types may return unexpected results.position.varVariable where the location of\nthe string expression is returned."
        ],
        "example":[
            "Example(s)",
            "equ vm to char(253)\ncontinents = \u2019africa\u2019:vm:\u2019asia\u2019:vm:\u2019south america\u2019\ninput acontinent\nlocate(acontinent,continents,1;position;\u2019al\u2019) then\n   crt acontinent:\u2019 is already there\u2019\nend else\n   continents=insert(continents,1,position;acontinent)\nend\ncrt continents",
            "or",
            "equ vm to char(253)\ncontinents = \u2019africa\u2019:vm:\u2019asia\u2019:vm:\u2019south america\u2019\ninput acontinent\nlocate acontinent in continents<1> by \u2019al\u2019 setting position then\n   crt acontinent:\u2019 is already there\u2019\nend else\n   continents=insert(continents,1,position;acontinent)\nend\ncrt continents",
            "continentsis a list of continents in\nalphabetical order.acontinentis added to the list\nonly if it does not already exist. Thelocatestatement\nuses the sequence parameteral(ascending, left-aligned).",
            "If the value ofacontinentis europe, it does\nnot exist incontinents, causinglocateto take theelseclause with the value ofpositionset to 3. Theinsert()function\nplaces europe in front of south america leaving continents as:",
            "africa]asia]europe]south america",
            "The]represents a value mark."
        ]
    },
    {
        "name":"lock statement",
        "Syntax":[
            "Syntax",
            " lock lock.num{then|else statement.block}\n"
        ],
        "description":[
            "Description",
            "The lock statement sets one of 992 execution locks. This prevents   re-entry to the program, allowing only one process to run the program at any given   time.",
            "The following information applies to the lock statement:",
            "If present, the else clause is executed.           ",
            "It is assumed the             programmer is doing what they need within the programming clauses."
        ],
        "parameter":[
            "Parameter(s)",
            "lock.numSpecifies the line number (from 0 to 991) to lock.Iflock.numis\n         greater than 991, the result is divided by 992, and the lock number is equal to the\n         remainder of the equation."
        ],
        "example":[
            "Example(s)",
            "Example 1",
            "This example unconditionally sets execution lock12.",
            "lock 12",
            "Example 2",
            "This example attempts to set lock14.",
            "If it is already locked, the program advises the operator and stops.",
            "lock 14 else crt \"Program is locked\" ; stop"
        ]
    },
    {
        "name":"loop statement",
        "Syntax":[
            "Syntax",
            "loop {statement.block1} [until|while] logical.exp{do} {statement.block2} repeat\nloop\n   {statement.block1}\n[until|while] logical.exp{do}\n   {statement.block2}\nrepeat\nloop {statement.block} repeat\n"
        ],
        "description":[
            "Description",
            "The loop statement repetitively executes (loops) until an ending condition is met. The first set of statements, if present, is executed at least once.",
            "The loop...until and loop...while forms are repetitive loop functions used to repeat a sequence of statements conditionally. The do word is optional.",
            "If the until clause is used, looping continues as long as the expression following it evaluates to false. If the while clause is used, looping continues as long as the expression following it evaluates to true.",
            "The statements in the do clause are executed as long as the loop is executed. If  while or until is specified, the do is required.",
            "The repeat statement defines the end of the loop.",
            "If neither a while nor until clause is used, the loop never finishes. The use of goto or exit is required to exit the loop in this construct.",
            "If the until expression is initially true or the while expression is initially false, the statements specified in  statement.block1 are executed at least once and those specified in  statement.block2 are not executed."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "This loop terminates when the\ncalculated value ofxis under 100. Each time through\nthe loop,cis incremented by one.",
            "c = 1\nloop\n   x = c*2\n      while x < 100 do\n   c = c + 1\n      repeat",
            "This processes an active list. When the last item-ID is\nread, theexitclause passes control to the next\nexecutable statement after therepeatstatement.\nNotice the select list is the default active select list.",
            "execute \"select customers\"\nloop\n   readnext item-ID else exit\n   print item-ID\n      repeat"
        ]
    },
    {
        "name":"mat statement",
        "Syntax":[
            "Syntax",
            "mat array.var = exp\u00a0\nmat array.var1 = mat array.var2\u00a0\n"
        ],
        "description":[
            "Description",
            "The mat statement assigns data to each element of a dimensioned array variable to a specific value in one operation.",
            "Array variables must be defined in a dim, common, or file statement."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "Copies one array into another.\nThe number of elements inarray.var1must be greater\nthan or equal to the number of elements inarray.var2. It is possible to assign a two-dimensional array to a single-dimensional\narray and conversely.",
            "Dim array(5)\nqty = 10\nmat array = qty\n\u00a0\ndim one(4,1)\nmat one = 1\ndim two(2,2)\nmat two = mat one",
            "Note:When assigning one matrix to another, the array to\nthe right of the equal sign must have the same total number of elements\nas the matrix to the left of the equal sign.",
            "This sets every\narray element ofcustomer.itemto null.",
            "mat customer.item = \"\"",
            "This sets every array entry ofcustomer.item.historyto its corresponding entry incustomer.item.",
            "mat customer.item.history = mat customer.item",
            "This example assigns all of the elements in the two dimensional\narray,ainto the one dimensional array,b. The rows are filled before the columns, thereforea(2,1)\u00a0=\u00a02.",
            "dim a(10,2)\ndim b(20)\nmat b = 1\nb(3) = 2\nmat a = mat b"
        ]
    },
    {
        "name":"matbuild statement",
        "Syntax":[
            "Syntax",
            "matbuild dyn.array.var from array.var{,start{,end}} using delimiter\u00a0\ndyn.array.var = array.var\n"
        ],
        "description":[
            "The matbuild statement converts a dimensioned array into a dynamic array."
        ],
        "parameter":[
            "Parameter(s)",
            "dyn.array.varVariable constructed from all or part of a dimensioned array.Note:If the dimensioned array contains any unassigned elements,\na message indicating this displays and a null dynamic array variable\nis returned.array.varReferences the dimensioned array. If any elements in the dimensioned\narray are unassigned, a message indicating this displays and a null\ndynamic array variable is returned.startInteger expression that indicates the optional starting position\nwithin the array to begin parsing. If omitted, it defaults to1. The value ofstartmust be numeric.endInteger expression run time indicates the optional ending\nposition within the array to stop parsing. If omitted, it defaults\nto the array size previously declared with adimstatement for the given array. The value ofendmust also be numeric.delimiterOptional delimiting character within the string to be used\nto separate data parsed from the array. If omitted, the default delimiter\nis an attribute mark (char(254)). The delimiter\ncan be any character between x\u201900\u2019 and x\u2019fe\u2019."
        ],
        "example":[
            "Example(s)",
            "dim a(10)\nfor x = 1 to 10\n   a(x) = x\nnext x\nmatbuild xyz from a,4,9 using char(253)\nprint xyz",
            "Output result would be the following:",
            "4]5]6]7]8]9",
            "dim a(4)\na(1) = \"larry\"\na(2) = \"moe\"\na(3) = \"curly\"\na(4) = \"\"\nstooges = a\nprint stooges",
            "Output result would be the following:",
            "larry^moe^curly",
            "Note that because the final element of the dimensioned\narray is null, it is not appended to the dynamic array."
        ]
    },
    {
        "name":"matparse statement",
        "Syntax":[
            "Syntax",
            "matparse array.var{,start{,end}} from dyn.array.exp{using delimiter} {setting} var\u00a0\narray.var = dyn.array.exp\n"
        ],
        "description":[
            "The matparse statement converts a dynamic array into a dimensioned array."
        ],
        "parameter":[
            "Parameter(s)",
            "array.varReferences the dimensioned array.startInteger expression that indicates the optional starting position\nwithin the array variable to begin updating. If omitted, it defaults\nto 1.endInteger expression that indicates the optional ending position\nwithin the array variable to stop updating. If omitted, it defaults\nto the array size previously declared with adimstatement for the given array. In all cases, the last array element\nis assigned all the remaining elements in the dynamic array.dyn.array.expData to be used to update the array.delimiterOptional delimiting character within the string used to separate\ndata parsed into the array. If omitted, the default delimiter is an\nattribute mark (char(254)). The delimiter can be\nany character between x\u201900\u2019 and x\u2019fe\u2019, but must be a string.variableIndicates the number of elements of array that were assigned\na value, in the form below, each attribute indyn.array.expis assigned to an element inarray.var.array.var=dyn.array.exp",
            "Note:If the dynamic array contains more elements than the\ndimensioned array, the remaining elements are put into the last location\nof the dimensioned array, delimited by attribute marks."
        ],
        "example":[
            "Example(s)",
            "dim a(10)\nrec<1> = \"test1\"\nrec<2> = \"test2\"\nmatparse a from rec setting attr.count\nprint a(1)",
            "Output result would be the following:",
            "test1",
            "a = \"\"\na<1> = \"larry\"\na<2> = \"moe\"\na<3> = \"curly\"\ndim stooges(4)\nmat stooges = \"unknown\"; * initialize\nstooges = a;* matparse equivalent\nprint stooges(3) : \" \" : stooges(4)",
            "Output result would be the following:",
            "curly",
            "Notice thatstooges(4)was null."
        ]
    },
    {
        "name":"matread statement",
        "Syntax":[
            "Syntax",
            " matread array.var from {file.var,} ID.exp {then|else statement.block}\n\n"
        ],
        "description":[
            "Description",
            "The matread statement reads the specified item from the optionally specified  file.var, or if not specified, the default  file.var, and stores one attribute per element in the dimensioned array.",
            "If a binary item is read, system(0) is set to 10. The     variable string consists of the hexadecimal FID in attribute 1 and the hexadecimal frame in     attribute 2.",
            "If the array is defined by a file statement, the file variable is not     used."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "This example writes the dimensioned arrayaon the default file, usingaas the item-ID. Although there are only five elements in the array, each\n    corresponds to two attributes (separated by attribute marks). Thus, ten total attributes are\n    written.",
            "open \u2019customer\u2019 to cust.fv\n dim customer.rec(20)\n matread customer.rec from cust.fv,item-ID\n dim a(5)\n mat a = \"xyz\":@am:\"abc\"\n matwrite a on \"a\""
        ]
    },
    {
        "name":"matreadu statement",
        "Syntax":[
            "Syntax",
            " matreadu array.var from {file.var,} ID.exp{locked statement.block}\n {then|else statement.block}\n\n"
        ],
        "description":[
            "Description",
            "The matreadu form of the matread statement tests if an item is already locked and locks the item if it is not. The item lock set by matreadu prevents the item from being read using the matreadu statement or updated by other processes while the lock is set.",
            "This statement can optionally be written matread or read.             If mat is omitted, a matrix read can be determined by the definition             of the variable, array.var. If no dim statement             appears, it is automatically treated as a dynamic array.",
            "The locked clause occurs before the then and\/or                else clauses and specifies the statements to execute if the item             is locked when the read is attempted. The locked clause can be used             in conjunction with a then or else clause, but not             both.",
            "The item lock is only released by a release, delete, or matwrite statement."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "dim customer.item(20)\n matreadu customer.item from cust.fv,item-ID locked\n    crt item-ID:\u2019 is locked by port \u2019:system(0)\n end then\n    crt \u2019got it\u2019\n end else\n    crt \u2019not on file\u2019\n end"
        ]
    },
    {
        "name":"matwrite statement",
        "Syntax":[
            "Syntax",
            "matwrite array.var on {file.var,} ID.exp\n"
        ],
        "description":[
            "Description",
            "The matwrite statement writes an item into the specified  file.var.",
            "This statement can optionally be written matwrite or write. If mat is omitted, a matrix write can be determined by the definition of the variable,  array.var. If no dim statement appears, it is automatically treated as a dynamic array.",
            "If  file.var is omitted, the default file variable is used.",
            "The array is truncated to the last nonnull array element. All trailing null elements are deleted. If the array is defined by a file statement, the file variable is not used.",
            "The write, matwrite, and matwriteu statements all wait until the actual disk update takes place before continuing execution of the program. They are used for critical write-through, such as error-logging."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "dim customer.item(30)\nmatread customer.item from customer.file,item-ID else...\ncustomer.item(1)=newname\ncustomer.item(30)=date()\nmatwrite customer.item on customer.file,item-ID"
        ]
    },
    {
        "name":"matwriteu statement",
        "Syntax":[
            "Syntax",
            "matwriteu array.var on {file.var,} ID.exp\n"
        ],
        "description":[
            "Description",
            "The matwriteu statement is identical to the matwrite statement, except the item remains locked. The matwriteu form keeps the item locked if it was previously locked by a readu, readvu, or matwriteu statement within the same program.",
            "This statement can optionally be written matwriteu or writeu. If mat is omitted, a matrix write can be determined by the definition of the variable,  array.var. If no dim statement appears, it is automatically treated as a dynamic array.",
            "The writeu, matwrite, and matwriteu statements all wait until the actual disk update takes place before continuing execution of the program. They are used for critical write-through, such as error-logging."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"next statement",
        "Syntax":[
            "Syntax",
            "for var = exp to exp{step exp}\nstatement{s}\nnext {var}\n"
        ],
        "description":[
            "Description",
            "The next statement occurs at the end of a for...next construct and causes the iteration counter to increment and branches to the corresponding for statement to decide whether to terminate.",
            "The for...next construct can also be exited using the                exit clause.",
            "The step clause allows the increments of the loop to be changed. For             example, step 2 increments the variable by 2 when the                next statement is encountered. The step clause             can be a negative number, decrementing the variable at the next             statement. A step of 0 does not execute the                for...next loop.",
            "The var is optional. It is typically used for code clarity, but is             ignored by the compiler."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "Example 1",
            "for i = 1 to 10\n   crt i:\" \":\nnext i\nprint",
            "Example 1 output result:",
            "1 2 3 4 5 6 7 8 9 10",
            "Example 2",
            "numbers = \u2019\u2019\n   for i = 1 to 2\n      for j = 1 to 5\n         numbers<i,j> = j\n      next j\n   next i\nprint numbers",
            "Example 2 output result:",
            "1]2]3]4]5^1]2]3]4]5",
            "Example 3",
            "for j = 10 to 1 step -1\n   print j:\" \":\nnext \nprint",
            "Example 3 output result:",
            "10 9 8 7 6 5 4 3 2 1"
        ]
    },
    {
        "name":"nxtkey statement",
        "Syntax":[
            "Syntax",
            "NXTKEY result FROM filevar,a.code,key,n THEN\/ELSE"
        ],
        "description":[
            "Description",
            "The nxtkey statement scans forward through a key file along a key   path.",
            "This statement retrieves at most n keys. Fewer may be retrieved if     end-of-file is reached.",
            "Repetitive use of this statement is allowed with the last key from the previous statement     being supplied as the beginning key for the next statement."
        ],
        "parameter":[
            "Parameter(s)",
            "resultReturned variable containing the keys retrieved in a\n        multi-attribute dynamic array.filevarVariable to which the data file has been opened.a.codeString expression containing the a (algebraic)\n        processing code located in the file-defining item that identifies the index to use.The\n         index must have previously been created withcreate-index.keyBeginning key value at which to begin the\n        retrieval.nNumber of keys to retrieve."
        ],
        "example":[

        ]
    },
    {
        "name":"null statement",
        "Syntax":[
            "Syntax",
            "null\n"
        ],
        "description":[
            "The null statement performs no operation, other than to provide an instruction where one is required. This is usually used for program readability."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "if answer = \"yes\" then print \"Are you sure?\" else null"
        ]
    },
    {
        "name":"on...gosub statement",
        "Syntax":[
            "Syntax",
            "on exp gosub statement.label{,\n   statement.label...}\n\u00a0\non exp gosub statement.label,...,\n   statement.label,\n   statement.label\n"
        ],
        "description":[
            "Description",
            "The on... gosub statement transfers control to a local subroutine designated by a specific statement label according to the positional value returned by the expression. The syntax can also be specified as on...go sub...(allowing a space between go and sub).",
            "If required, the  exp is truncated to an integer. The program executes the local subroutine at the  statement.label that corresponds to  exp. For example, if the expression evaluates to 1, the first subroutine is executed. If the  exp evaluates to a number less than 1, or to a number greater than the number of statement labels, no action is taken. Execution continues at the first executable statement following the on...gosub.",
            "The local subroutine must be terminated with a return statement. At the end of the subroutine, the program returns to the statement following the on...gosub statement.",
            "For ease of reading, the on...gosub  statement.label list can be spread over multiple lines if each continued line is terminated with a , (comma)."
        ],
        "parameter":[
            "Parameter(s)",
            "expNumeric value that corresponds to the position of comma-separatedstatement.labels."
        ],
        "example":[
            "Example(s)",
            "If response is 1, this branches\nto subroutine 8000. If it is 2, it branches to subroutine 9000. If\nit is 3, it branches to subroutine 9500.",
            "loop\nprint \u20191) doit 2) printit 3) deleteit\u2019\ninput response\nuntil num(response) do repeat\nif response >=1 and response <= 3 then\non response gosub 8000,9000,9500\nend",
            "In this example, the result of theindex()function is used as the index expression to determine which subroutine\nis called. If the response isa, then subroutinedoitis called, and so on.",
            "print \u2019a) doit b) printit c) deleteit\u2019\ninput response,1\non index(\u2019abc\u2019,response,1) gosub doit,printit,deleteit",
            "When the value of the index expression has a large number\nof possible branches, readability is improved by using the multiple\nline syntax.",
            "on response gosub 10,20,30,40,50,60,\n70,80,90,100,110,120,130"
        ]
    },
    {
        "name":"on...goto statement",
        "Syntax":[
            "Syntax",
            "on exp goto statement.label{,\n   statement.label...}\n\u00a0\non exp goto statement.label,...,\n   statement.label,\n   statement.label\n"
        ],
        "description":[
            "Description",
            "The on...goto statement transfers control to the line within the FlashBASIC or BASIC program that begins with the specified statement label, according to the positional value of the expression referenced by  exp. The syntax can also be specified as on...go to...(allowing a space between go and to).",
            "The on...goto is identical to the on...gosub, except there is no return required."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "This is an indexed branch in\nthe single-line format.",
            "on response goto 100,200,300,400,500",
            "This is an indexed branch in multiline format.",
            "on response goto 100,200,300,\n400,500,600,\n700,800,900"
        ]
    },
    {
        "name":"open statement",
        "Syntax":[
            "Syntax",
            "open {\"{dict}\",} file.ref{to file.var} {then|else statement.block}\n"
        ],
        "description":[
            "Description",
            "The open statement opens a specified file name and associates the file with the optional  file.var.",
            "If the file is opened successfully, the then clause, if present, is executed. If the file is not opened successfully, the else clause, if present, is executed. If the file cannot be opened and no then\/else clause is specified, the program terminates with error message [201].",
            "For Windows: When referencing a file in an open statement, if there is no explicit path, the following rules are applied to determine the current account:",
            "If the file access is performed by a VME user, the current account is the account where the VME user is logged on.",
            "If the file access is performed by a non-VME user (for example, VB or remote VME), the current account is the account in which the file is located.",
            "In triggers and CALL correlatives, these rules apply only to VME users accessing a file on their local computer. Otherwise, the full path is required in all open statements.",
            "The environment variable @ACCOUNT is set to the account where the file is located, not the account where the user is. @LOGNAME is set to the logged account if run from a VME and to \"\" (null string) if not.",
            "For regular FlashBASIC modules run from a VME (not a trigger or a CALL A-Correlative), the current account is the usual.",
            "For FlashBASIC or BASIC modules run from the D3 File Manager, the current account is the account where the file is located. @ACCOUNT and @LOGNAME both reflect this account.",
            "For FlashBASIC modules run from MS-DOS, the current account is the one specified by the -D command line switch. @ACCOUNT and @LOGNAME both reflect this account."
        ],
        "parameter":[
            "Parameter(s)",
            "dictSpecifies opening the dictionary level of the specifiedfile.varand assigning it tofile.var. The optionaldictcan be expressed as part\nof the file name asdictfile.var.file.refFile to open and associate with the file specified infile.var. If nofile.varis specified,\nthe file is opened and assigned to the default file variable.Note:For BASIC: The open statement try to open the requested file in the\nVME. For FlashBASIC: Theopenstatement will first\ntry to open the requested file in the FSI, then try to open the requested\nfile in the VME.file.varFile to associate with the opened file specified infile.var.For Windows:If the file variable\nspecified is already assigned to a file, the file is closed and the\nnew file is then assigned to the variable.Warning:Copying file variables can be dangerous since a subsequent\nclose on any of the file variables will close the file. Thus, any\nremaining file variables (containing a copy of the now invalid file\nhandle) may be incorrectly allocated to the wrong file."
        ],
        "example":[
            "Example(s)",
            "The example below opens the data\narea of the customer file to the file variablecustomer.file. If the customer file does not exist, it stops and prints error\nmessage[201].",
            "open \u2019customer\u2019 to customer.file else stop\n201,\u2019customer file cannot be opened\u2019",
            "The example below opens the dictionary of the invoice\nfile. If successful, it printsok. If not, it stops\nand prints error message[201], passing the stringdict invoice.",
            "open \u2019dict\u2019,\u2019invoice\u2019 to invoice.dict then\nprint \u2019ok\u2019\nend else\nstop 201,\u2019dict invoice\u2019\nend",
            "This results in the display:",
            "[201] \u2019dict invoices\u2019 is not a file name",
            "The example below demonstrates how theto,then, andelseare all optional\nin anopenstatement. Note thatfile.varwas left off of thereadstatement.",
            "open \"invoice.control\"\nreadv next.invoice-ID from \"invoice.counter\",1"
        ]
    },
    {
        "name":"out statement",
        "Syntax":[
            "Syntax",
            "out num.exp\n"
        ],
        "description":[
            "Description",
            "The out statement outputs a single ASCII character derived from a numeric expression in the range of 0 through 255, which indicates its corresponding position in the ASCII table.",
            " num.exp must evaluate to a decimal number. It is evaluated and adjusted (mod(expression,256)) to a value between 0 and 255. The corresponding ASCII character displays on the terminal."
        ],
        "parameter":[
            "Parameter(s)",
            "num.expExpression whose result is converted to its ASCII character\nequivalent."
        ],
        "example":[
            "Example(s)",
            "This printschar(7)and rings the terminal bell.",
            "out 7"
        ]
    },
    {
        "name":"page statement",
        "Syntax":[
            "Syntax",
            "page {num.exp}\n"
        ],
        "description":[
            "Description",
            "The page statement terminates the current page of output, prints the optional footing, positions to the top of the form, and prints the optional heading."
        ],
        "parameter":[
            "Parameter(s)",
            "num.expOptional expression used to change the current value of the\npage number."
        ],
        "example":[
            "Example(s)",
            "This example forces a new page\nif the attribute to be printed starts with the string.bp.",
            "heading \"this is a heading\"\nlines = dcount(item,char(254))\nfor i = 1 to lines\nl=item<i>\nif l[1,3]=\u2019.bp\u2019 then page else print l\nnext i"
        ]
    },
    {
        "name":"precision statement",
        "Syntax":[
            "Syntax",
            " precision num.constant\n"
        ],
        "description":[
            "Description",
            "The precision statement defines the number of fractional decimal places that a numerical value can hold.",
            "The default precision is 4. The precision statement can be set in the range of     0 to 9. Numbers with more decimal places than the precision are truncated on D3.",
            "Only one precision statement is allowed in a program and it must precede the     use of any numeric data. Programs calling subroutines or entering other programs must have the     same precision. ",
            "If the precisions do not match, the program aborts into the debugger. This restriction also     applies to main programs that share data in named common space. However, violations in this case     are not reported, and values of named common variables are incorrect.",
            "If the result of an arithmetic expression that divides (\/), multiplies (*), takes a remainder (\\), or produces an exponent (^) exceeds the maximum magnitude of the 48-bit representation, the system creates an internal variable type that uses a precision of 18 digits to the right of the decimal point, and unlimited to the left. This feature assures maximum accuracy.",
            "A precision of 0 forces 48-bit integer arithmetic for all operations. (99999\/100000 results in a 0)."
        ],
        "parameter":[
            "Parameter(s)",
            "num.constantNumber of decimal places (from 0 to 9) that a numeric value\ncan hold."
        ],
        "example":[
            "Example(s)",
            "This statement changes this program\u2019s\narithmetic precision to 2. All subroutines called from this program\nmust have the sameprecisionstatement.",
            "precision 2",
            "Example",
            "precision 6 \n print 9999999\/10000000",
            "Output Result",
            "0.999999"
        ]
    },
    {
        "name":"print statement",
        "Syntax":[
            "Syntax",
            "print {exp{,}{:}}{exp{,}{:}...}\n"
        ],
        "description":[
            "Description",
            "The print statement directs output of an expression to the current output device.",
            "If nothing follows the print statement, a blank line is output.",
            "The print list, if present, consists of any number of expressions, including @() functions, separated by commas or colons."
        ],
        "parameter":[
            "Parameter(s)",
            "expExpression whose output is sent to the printer. Multiple expressions\ncan be specified.,Defines 18-character tab stops at which comma-separated expressions\nare output left-aligned.Note:Use of@()cursor\npositioning in conjunction with this feature produces undesirable\nresults.:Inhibits the output of a return and scroll following output\nof the last printed line."
        ],
        "example":[
            "Example(s)",
            "This statement outputs the literal\nstringhello. The quotation marks delimit the literal\nstring and are not printed.",
            "print \u2019hello\u2019",
            "This statement outputs the contents of the variable message\nto the current active output device.",
            "message = \u2019hello\u2019\nprint message",
            "This statement outputs the results of a string expression\nmade up of the variables message andcompany.nameand the literal string space (\" \").",
            "print message:\u2019 \u2019:company.name",
            "This statement positions the cursor at column 10, row\n10 of the terminal display, displays the literal string the amount\nis, and outputs the result of the arithmetic expressionunit.price\n* qtyright-aligned in a field of 12 characters.",
            "print @(10,10):\u2019the amount is \u2019 : (unit.price * qty) \u2019r#12\u2019"
        ]
    },
    {
        "name":"print on statement",
        "Syntax":[
            "Syntax",
            "print on print.file.num print.exp\n"
        ],
        "description":[
            "Description",
            "The print on statement directs output to one of 32,767 open print files.",
            "The print file number has no connection to spooler print file numbers. This number is logical and local to the current program and is used to group output.",
            "Each logical print file number is assigned the next available spool job number. Therefore, it is possible to have the statement print on 1 answer output to job #3 and print on 2 string output to job #30."
        ],
        "parameter":[
            "Parameter(s)",
            "print.file.numSpecifies the print file (from 0-31,999) to which the input\nis sent. Up to 32,000 print files can be opened at one time.print.expExpression whose output is sent to the printer. Multiple expressions\ncan be specified."
        ],
        "example":[
            "Example(s)",
            "print on 0 oconv(chk.dt,\"d2\/\") \"l#9\":amt \"r2*20\""
        ]
    },
    {
        "name":"printchar statement",
        "Syntax":[
            "Syntax",
            "printchar str.exp\n"
        ],
        "description":[
            "The printchar statement prints the first character of the string expression to the screen or to the printer."
        ],
        "parameter":[
            "Parameter(s)",
            "str.expExpression whose first character is sent to the screen or\nprinter."
        ],
        "example":[

        ]
    },
    {
        "name":"printer statement",
        "Syntax":[
            "Syntax",
            " printer [on|off|close|num.exp]\n"
        ],
        "description":[
            "The printer statement controls the output from subsequent print, heading, footing, or page statements."
        ],
        "parameter":[
            "Parameter(s)",
            "onDirects output to the system\nprinter, via the spooler.offDirects output from subsequentprintstatements to the terminal.closeIndicates that the current (printer)\noutput is completed. This closes all open spooler entries generated\nby the current process, and releases control of the print jobs to\nthe spooler.printer closeis implicit when the\nFlashBASIC or BASIC program stops and returns to TCL, or the calling\nProc or executing program.num.expEvaluates as follows:-1Printer close.0Printer off.>=1Printer on."
        ],
        "example":[
            "Example(s)",
            "Example 1",
            "In this example, the first string\ndisplays, print output is turned on, and the second string is sent\nto the spooler.",
            "print \u2019press Enter to begin printing\u2019\n printer on\n print \u2019this is the first line\u2019",
            "The printer is turned on if the variable answer is the\nlettery.",
            "crt \u2019print? \u2019:;input answer\n printer (answer=\u2019y\u2019)",
            "This section turns off the printer to display an error\nmessage and prompt for operator intervention. When the printer is\nturned back on, output is appended to the currently open spooler file.",
            "printer on\n print rec<5>\n if rec<6>=\u2019\u2019 then\n    printer off\n    print \u2019error in attribute 6\u2019\n    print \u2019press Enter to continue \u2019:\n    input continue\n    printer on\n end",
            "Example 2",
            "In this example, a single section of a larger program\nsends output to the spooler, closes the job when finished, and continues\nexecution of the program.",
            "10 *\n print \u2019do you want to print? \u2019:\n input ans\n if ans # \u2019y\u2019 then stop \n printer on\n print \u2019the amount is \u2019:amount\n print...\n ...\n printer close\n printer off\n goto 10"
        ]
    },
    {
        "name":"printerr statement",
        "Syntax":[
            "Syntax",
            "printerr errmsg.id [, param1 [, param2 [, ...]]]"
        ],
        "description":[
            "Description",
            "The printerr statement allows BASIC programs to produce output   messages using the Error Message Processor and the errmsg file.",
            "The printerr statement is not restricted to error conditions. For example,     one use of this statement is to generate help messages.",
            "Before the introduction of the printerr statement, the Error Message     Processor was only available through the use of the stop and      abort statements, both of which terminated the program."
        ],
        "parameter":[
            "Parameter(s)",
            "errmsg.idThe ID of the item in theerrmsgfile to be output.param<1..n>Optional parameter (or parameters) used by the Error Message Processor. These\n        parameters can be referenced by theA,R, andXcommands from within the error message item."
        ],
        "example":[

        ]
    },
    {
        "name":"procread statement",
        "Syntax":[
            "Syntax",
            "procread var[then|else statement.block]\n"
        ],
        "description":[
            "Description",
            "The procread statement reads the calling Proc\u2019s primary input buffer and assigns its contents to a specified variable.",
            "When successful, the variable is treated as a string of characters delimited by spaces. The field() function can be used to parse the variable. The dcount() function can be used to determine the number of entries (number of spaces + 1) in the buffer variable.",
            "The else condition is taken when the program has not been executed from a Proc."
        ],
        "parameter":[
            "Parameter(s)",
            "varSpecifies the variable to receive the contents of the calling\nPROCs primary input buffer."
        ],
        "example":[
            "Example(s)",
            "This is a sample Proc that prompts\nthe operator for two dates.",
            "pq\nri\ns1\noenter beginning date +\nip\ns2\noenter ending date +\nip\nhrun bp this.program\np",
            "This information can now be passed to the FlashBASIC or\nBASIC programthis.program.",
            "this.program\n001 procread buffer else\n002 print\u2019this.program must be run from a Proc\u2019\n003 stop\n004 end\n005 start.date = field(buffer,\u2019 \u2019,1)\n006 end.date = field(buffer,\u2019 \u2019,2)"
        ]
    },
    {
        "name":"procwrite statement",
        "Syntax":[
            "Syntax",
            "procwrite var\n"
        ],
        "description":[
            "Description",
            "The procwrite statement writes a string expression variable to the calling Proc\u2019s primary input buffer.",
            "In order for a Proc to interact with the information in the variable, each space in the variable defines a new parameter in the Proc\u2019s input buffer."
        ],
        "parameter":[
            "Parameter(s)",
            "varSpecifies the string expression variable to write to the calling\nProc\u2019s primary input buffer."
        ],
        "example":[
            "Example(s)",
            "This Proc checks the primary\ninput buffer to see if it has been altered by the programthis.program.",
            "pq\nhrun bp this.program\np\nif a1 = abort x",
            "This program writes to the controlling Proc\u2019s primary\ninput buffer.",
            "buffer = start.date:\" \":end.date\nprocwrite buffer"
        ]
    },
    {
        "name":"program statement",
        "Syntax":[
            "Syntax",
            "program name\n"
        ],
        "description":[
            "The program statement is optionally used on the first line of a program to indicate that this is a program.",
            "It is not needed, and is ignored by the compiler. It is supported strictly for compatibility with other implementations."
        ],
        "parameter":[
            "Parameter(s)",
            "nameSpecifies the name of the program."
        ],
        "example":[
            "Example(s)",
            "001 program tester\n002 * this program tests things\n..."
        ]
    },
    {
        "name":"prompt statement",
        "Syntax":[
            "Syntax",
            "prompt character.exp\n"
        ],
        "description":[
            "Description",
            "The prompt statement indicates the single character to display during subsequent input statements that prompt for input from the keyboard.",
            "The default prompt character is ?. The prompt character remains defined until another prompt statement is executed."
        ],
        "parameter":[
            "Parameter(s)",
            "character.expSpecifies the single character to display during subsequentinputstatements that prompt for input from the keyboard."
        ],
        "example":[
            "Example(s)",
            "This statement sets the prompt\ncharacter to null so that no character is output when aninputstatement is executed. This is useful when working\nwith serial devices.",
            "prompt \"\""
        ]
    },
    {
        "name":"prvkey statement",
        "Syntax":[
            "Syntax",
            "PRVKEY result FROM filevar,a.code,key,n THEN\/ELSE"
        ],
        "description":[
            "Description",
            "The prvkey statement operates in the same manner as the    nxtkey statement with the exception that the keys returned are those previous   to the beginning key value key.",
            "The keys are returned in what might be viewed as reverse order, and a short list is due to a     beginning file condition."
        ],
        "parameter":[
            "Parameter(s)",
            "resultReturned variable containing the keys retrieved in a multi-attribute dynamic\n        array.filevarVariable to which the data file has been opened.a.codeString expression containing the a (algebraic) processing code located in the\n        file-defining item that identifies the index to use.The index must have previously been\n         created withcreate-index.keyBeginning key value at which to begin the retrieval.nNumber of keys to retrieve."
        ],
        "example":[

        ]
    },
    {
        "name":"read statement",
        "Syntax":[
            "Syntax",
            "read{u} dyn.array from {file.var,} ID.exp{locked statement{s}}\n[then|else statement.block]\n"
        ],
        "description":[
            "Description",
            "The read statement reads an item as a dynamic array and stores the item as a string. Each attribute is automatically an element of the dynamic array variable and can be referenced with the appropriate intrinsic functions.",
            "This statement can optionally be written matread or read.     If mat is omitted, a matrix read can be determined by the definition of the     variable, array.var. If no dim statement appears, it is     automatically treated as a dynamic array.",
            "If file.var is not specified, the default file variable is used.",
            "The else clause is taken when the item is not on file. The then clause is taken when the item is read successfully.",
            "The readu form tests if the item is already locked and locks the item if it is not. The item lock set by readu prevents the item from being read using the readu statement or updated by other processes while the lock is set.",
            "If the readu form is specified and no locked clause is present, the program pauses (and beeps continuously) at the locked item until it is available. If a locked clause is specified, the statements in the locked clause are executed if the item is already locked by another process or the current process at a different level. system(0) contains the port number that has the item locked. For backwards compatibility, system(0) in the locked clause also returns the port number that has the item locked.",
            "The item lock is only released by a release, delete, or write statement. Items can be updated without being unlocked by using the writeu statements.",
            "If a binary item is read, system(0) is set to 10. The variable string consists of the hexadecimal FID in attribute 1 and the hexadecimal frame in attribute 2."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "This example opens the customer\nfile and prompts the operator for the customer\u2019s item-ID. If thereadis successful, the customer name in attribute 1 displays.",
            "open \u2019customer\u2019 to customer.file else stop 201, \u2019customer\u2019\nitem = \u2019\u2019\ncrt \u2019enter customer-ID \u2019:\ninput item-ID\nread item from customer.file,item-ID else stop 202,item-ID\nprint \u2019the customer name is \u2019:item<1>",
            "This example uses thefilestatement\nto bind the customer file to this program. It prompts for the item-ID,\nreads the item, and prints the name. Thefilestatement\nallows dictionary-type references to the read data item.",
            "file customer\ncrt \u2019enter customer ID \u2019:\ninput item-ID\nread customer from item-ID else stop 202,item-ID\nprint \u2019the customer name is \u2019:customer(name)"
        ]
    },
    {
        "name":"readf statement",
        "Syntax":[
            "Syntax",
            "readf str from file.var, item.ID,\nstart.pos, no.of.bytes then\/else statement.block\n"
        ],
        "description":[
            "Description",
            "The readf statement reads the specified number of characters from a   normal item.",
            "D3 allows the user to read a specified number of characters from any normal item stored in a     disk file. The format is very similar to readv, but rather than specifying the     attribute to be read, the user specifies the starting position and number of bytes to read.      readfu behaves like readvu and sets and obeys item locks.",
            "If a starting position of 0 is specified, the number of bytes in the item is returned. If a     starting position beyond the end of the item is specified, null is returned. If too many bytes     are specified, as many as are available are returned."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"readnext statement",
        "Syntax":[
            "Syntax",
            " readnext ID.var{,value.count}{from select.var} [then|else statement.block]\n"
        ],
        "description":[
            "Description",
            "The readnext statement retrieves the next item-ID from an active list and assigns it to a specified variable.",
            "A list must be active before the readnext statement occurs. The list can be             generated within the program or the list can be passed into the program from an external             process, such as TCL or a Proc, that invokes a list-producing command immediately before             running this program.",
            "The else condition is executed when there are no more items in the list.",
            "The select and readnext statements both consume an external             list if one is available. As a result, system(11) always returns 0             after one of these commands. ",
            "For example:",
            "This prints 5, then 0. The external list is consumed by a BASIC variable, and is then only             available from FlashBASIC or BASIC.",
            "When using an external list, it is necessary to readnext all items in that             list until the readnext statement actually fails. At this point, the             list is reset and it searches again for a new external list."
        ],
        "parameter":[
            "Parameter(s)",
            "value.countIndicates the position of the multivalue within an attribute.This is a by-product of an\n                           exploded sort, executed prior to the execution of the program. This\n                           allows multivalues to be retrieved in exploded sort sequence. If the list\n                           is not exploded, the value count value is always1.select.varIfselect.varis not specified, the default primary or secondary select\n                        variable is used. The secondary specification uses the active secondary\n                        list."
        ],
        "example":[
            "Example(s)",
            "Example 1",
            "Thereadnextstatement retrieves the next itemID from an active list, but does\n            not implicitly address the file. The file to be accessed must be opened before an\n            attempt to use the itemID in areadstatement can be made.",
            "open \u2019customer\u2019 to customer.file else stop 201,\u2019customer\u2019\n execute \u2019sselect customer with balance.due by name\u2019\n loop\n    readnext itemID else stop\n    read item from customer.file,itemID then\n       print \u2019the name is \u2019:item<1>\n    end\n repeat",
            "Example 2",
            "This example displays each itemID.",
            "execute \"select md (s\"\n loop readnext ID else stop\n print ID\n repeat"
        ]
    },
    {
        "name":"readt statement",
        "Syntax":[
            "Syntax",
            "readt var[then|else|onerr statement.block]\n"
        ],
        "description":[
            "Description",
            "The readt statement reads a tape record and assigns the value returned to a specified variable.",
            "The length of the tape record is specified by the most recently executed TCL t-att command.",
            "The then clause is taken if the operation is successful.",
            "Either else or onerr can be specified, but not both. If the tape unit has not been attached or if an end-of-file (eof) mark is read, the else or onerr clause, if present, is executed. In addition, the onerr clause can be used to check for end-of-tape (eot), tape unit not ready, parity error, or block transfer error."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "The example below reads a series\nof tape records and displays the first 25 bytes of each record. Thereadtelseclause is usually taken when\nan end-of-tape or end-of-data condition is reached. Thesystem(0)function indicates whether there are any other unexpected problems.",
            "execute \u2019t-att\u2019\nrewind else stop\neot=0\nloop\nreadt rec else eot=1\nuntil eot do\nprint trim(rec[1,25])\nrepeat"
        ]
    },
    {
        "name":"readtx statement",
        "Syntax":[
            "Syntax",
            " readtx var[then|else|onerr statement.block] \n"
        ],
        "description":[
            "Description",
            "The readtx statement reads a tape record, converts the tape record to   hexadecimal, and assigns the resulting hexadecimal value to a specified variable.",
            "The length of the tape record is specified by the most recently executed TCL t-att command.",
            "The then clause is taken if the operation is successful.",
            "Either else or onerr can be specified, but not both. If the tape unit has not been attached or if an end-of-file (eof) mark is read, the else or onerr clause, if present, is executed. In addition, the onerr clause can be used to check for end-of-tape (eot), tape unit not ready, parity error, or block transfer error."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"readv statement",
        "Syntax":[
            "Syntax",
            "readv{u} var from {file.var,} ID.exp, ac.exp{locked statement.block}\n{then|else statement.block}\n"
        ],
        "description":[
            "Description",
            "The readv statement reads an item from the optionally-specified file variable and assigns the value contained in the attribute number referenced in the attribute expression to the specified variable.",
            "If  file.var is not specified, the default file variable is used.",
            "The else clause is taken when the item is not on file. The then clause is taken when the item is read successfully.",
            "The locked clause occurs before the then and\/or else clauses and specifies the statements to execute if the item is locked when the read is attempted. The locked clause can be used in conjunction with a then or else clause, but not both.",
            "The readvu form tests if the item is already locked and locks the item if it is not. The item lock set by readvu prevents the item from being read using the readvu statement or updated by other processes while the lock is set.",
            "If the readvu form is specified and no locked clause is present, the program pauses (and beeps continuously) at the locked item until it is available. If a locked clause is specified, the statements in the locked clause are executed if the item is already locked by another process or the current process at a different level. system(0) contains the port number that has the item locked. For backwards compatibility, system(0) in the locked clause also returns the port number that has the item locked.",
            "The item lock is only released by a release, delete, or writev statement. Items can be updated without being unlocked by using the writevu statements.",
            "The readv statement reads the entire item into temporary workspace, extracts the targeted attribute, places it into the variable, and resets temporary space. The rest of the item is ignored. A series of readv statements against different attributes in the same item force the system to continually reread the same item.",
            "readv should be used only in cases where 1 or 2 attributes are needed from a larger item without the rest of the item. Using readv exclusively causes the program to run significantly slower."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "Items in the inventory file have\na list of composite parts in attribute 10. In this example, only attribute\n10 is read, and each sub-part displays on a separate line.",
            "readv partlist from inventory,part.number,10 then\n   cnt = dcount(partlist,char(253))\n   for l = 1 to cnt\n      print partlist<1,l>\n   next l\nend",
            "This example reads the first attribute from thenextnumitem in thecontrol.file, and locks\nthe entire item. The lock is cleared by thewritevstatement.",
            "readvu next.number from control.file,\"nextnum\",1 then\n   print \u2019got the next number\u2019\n   writev next.number on control.file,\"nextnum\",1\nend"
        ]
    },
    {
        "name":"release statement",
        "Syntax":[
            "Syntax",
            "release {file.var,} {ID.exp}\n"
        ],
        "description":[
            "Description",
            "The release statement clears locks on items locked with a previous matreadu, readu, or readvu statement."
        ],
        "parameter":[
            "Parameter(s)",
            "file.varSpecifies the file containing the item to be unlocked.ID.expSpecifies the item to be unlocked."
        ],
        "example":[
            "Example(s)",
            "Example 1",
            "In the following example, an item is read from the customer file and locked.If a new name is entered, thenameattribute is changed, a date\n                  stamp is placed in attribute 20, and the item is written, automatically clearing\n                  the item lock.If no name is entered, nowriteoccurs, requiring the item\n                  lock to be cleared with thereleasestatement.",
            "readu item from customer.file,item-ID then\n    input name\n    if name # \u2019\u2019 then\n       item<1>=name\n       item<20>=date()\n       write item on customer.file,item-ID\n    end else\n       release customer.file,item-ID\n    end\n end"
        ]
    },
    {
        "name":"rem statement",
        "Syntax":[
            "Syntax",
            "rem text\n"
        ],
        "description":[
            "Description",
            "The rem statement designates that all text that follows the statement on the same line is ignored by the compiler.",
            "The rem statement is used to explain or document the program, allowing the programmer to place comments anywhere in the program without affecting program execution. It is provided for compatibility and readability."
        ],
        "parameter":[
            "Parameter(s)",
            "textSpecifies remarks to be ignored by the compiler."
        ],
        "example":[
            "Example(s)",
            "rem Last revised 1\/1\/02\n! look for next value\n* time to wrap up"
        ]
    },
    {
        "name":"remove statement",
        "Syntax":[
            "Syntax",
            "remove var from dyn.array at position.var setting delimiter.var\n"
        ],
        "description":[
            "Description",
            "The remove statement retrieves a substring delimited by a system delimiter from a dynamic array.",
            "Before the initial call, position.var must be set to zero. The variable is updated with the end of the current substring at the end of every call.",
            "delimiter.var is updated with the code indicating the delimiter found at the end of the substring returned. The code is one of these:"
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "$options ga\nx = \"a\":@am:\"b\":@vm:\"c\"\nl = 0\nremove xx from x at l setting d\nprint xx,l,d\nremove xx from x at l setting d\nprint xx,l,d\nremove xx from x at l setting d\nprint xx,l,d",
            "This prints:",
            "a \u00a0\u00a02 \u00a0\u00a02\nb \u00a0\u00a04 \u00a0\u00a03\nc \u00a0\u00a06 \u00a0\u00a00"
        ]
    },
    {
        "name":"repeat statement",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"replace statement",
        "Syntax":[
            "Syntax",
            "replace file.var, item-ID.old with item-ID.new\n"
        ],
        "description":[
            "Description",
            "The replace statement maintains referential integrity between items that contain bidirectional bridges used by the Update processor by eliminating duplicate item-IDs.",
            "item-ID.new replaces item-ID.old in bridged-to items. item-ID.old is deleted after replacement. In order for the database to be consistent, there should be two-way bridges between the references."
        ],
        "parameter":[
            "Parameter(s)",
            "file.varFile that contains the duplicate item-IDsitem-ID.oldItem to be replaced withitem-ID.new.item-ID.newItem to replaceitem-ID.old."
        ],
        "example":[
            "Example(s)",
            "Assume that two files exist with\nthe data shown below. Both files contain a bridge to attribute 1 of\nthe other file.",
            "File1File2IDAttr1IDAttr1b11bc22cd33d",
            "Now assume that this FlashBASIC or BASIC program is run:",
            "open \"file1\" to f1\nreplace f1,\"b\" with \"c\"",
            "Now, the files contain:",
            "File1File2IDAttr1IDAttr1c1]21cd32c3d"
        ]
    },
    {
        "name":"return statement",
        "Syntax":[
            "Syntax",
            "return\nreturn {to statement.label}\n"
        ],
        "description":[
            "Description",
            "The return statement terminates an internal or external subroutine,   and returns execution control to the statement following the invoking call or    gosub statement.",
            "The to clause can only be used with an internal subroutine, and transfers control to the specified statement label. This is not a recommended programming practice."
        ],
        "parameter":[
            "Parameter(s)",
            "statement.labelSpecifies the statement to which control is returned.return_valueThereturn_valueterminates an internal or external function,\n                  and returns execution control to the statement following the invoking call orgosubstatement.Required if returning from a user-defined function (deffunstatement) as opposed to a local sub-routine call or remote sub-routine call.",
            "For Windows:Locally defined variables in external subroutines (and files opened to local\n        file variables) are automatically abandoned or closed on return."
        ],
        "example":[
            "Example(s)",
            "Example 1:",
            "If the answer isy, then call internal subroutine 1000. When 1000 is\n        complete, control is returned to the line that prints back again.",
            "input answer\nif answer = \u2019y\u2019 then gosub 1000\nprint \u2019back again\u2019\nstop\n1000 * subroutine\nprint \u2019ok\u2019\nreturn",
            "Example 2:",
            "functionis compatible with other PICK vendors. You can also usesub. In this example, nCube is the return\n        value.fnCube \n001 function fnCube(px); \n002 nCube=px*px*px \n003 return nCube"
        ]
    },
    {
        "name":"rewind statement",
        "Syntax":[
            "Syntax",
            "rewind [then|else|onerr statement.block]\n"
        ],
        "description":[
            "Description",
            "The rewind statement rewinds the currently attached magnetic tape unit to the beginning of the tape.",
            "If the tape is not attached or not online, the else or onerr clause, if present, is executed. Otherwise the then clause is executed. In addition, the onerr clause can be used to check for a tape unit not ready error.",
            "Either else or onerr can be specified, but not both. "
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "execute \u2019t-att\u2019\nrewind else\ncrt \u2019cannot rewind the tape\u2019\nstop\nend"
        ]
    },
    {
        "name":"rollback work statement",
        "Syntax":[
            "Syntax",
            "rollback work {then|else statement.block}\n"
        ],
        "description":[
            "Description",
            "The rollback work statement rolls back (or undoes) a transaction.",
            "This operation automatically undoes all updates made since the last begin work statement. All locks acquired within the transaction are released."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "open \"myfile\" to f1\nopen \"mylog\" to f2\nbegin work\nwrite total on f2,timedate();* create synchronized log\nreadu total from f1,\"total\"\nif total = 0 then\n   rollback work;* Cannot do anything\nend else\n   total = total - 1\n   write total on f1,\"total\"\n   commit work else print \"Could not update\"\nend"
        ]
    },
    {
        "name":"root statement",
        "Syntax":[
            "Syntax",
            "root file.ref, a.code to root.var{then|else statement.block}\n"
        ],
        "description":[
            "Description",
            "The root statement provides an interface to the B-tree indexes for subsequent references with the key statement.",
            "This is similar to the open statement, in that a root statement is an open of an index, and must precede a key statement just as an open statement must precede a read statement. Any number of indexes can be opened at once, provided that each has a unique root variable.",
            "Numeric indexes will open regardless of the current case sensitivity settings. For non-numeric indexes, the case sensitivity of the index must match the current case setting, which can be set at TCL with the case command, and over-ridden in a BASIC program with the casing statement.",
            "The optional then clause is executed if the specified index is found. The  else clause is executed if it is not found.",
            "The key statement, in conjunction with the initializing root statement, provides the ability to sequentially cruise on any defined index for a particular file.",
            "The root statement must precede the key statement."
        ],
        "parameter":[
            "Parameter(s)",
            "file.refFile reference as a string expression.a.codeString expression containing thea(algebraic)\nprocessing code located in the file-defining item that identifies\nthe index to use. The index must have previously been created withcreate-index.root.varUsed by subsequentkeystatements."
        ],
        "example":[
            "Example(s)",
            "fname = \"customer\"\nroot fname,\"a1\" to cust.root else\n   print \"file is missing\"\n   goto 999\nend"
        ]
    },
    {
        "name":"rqm statement",
        "Syntax":[
            "Syntax",
            "rqm {num.exp}\nrqm {\"time.exp\"}\n"
        ],
        "description":[
            "Description",
            "The rqm statement suspends processing for a specific number of seconds, or until a specific time.",
            "If no argument is indicated, the process sleeps for one second. rqm and sleep are identical."
        ],
        "parameter":[
            "Parameter(s)",
            "num.expTime to sleep in seconds.time.expTime to sleep in military time format (hh:mm:ss)."
        ],
        "example":[

        ]
    },
    {
        "name":"select statement",
        "Syntax":[
            "Syntax",
            "select {var|file.var|list.var{to list.var}}\n"
        ],
        "description":[
            "Description",
            "The select statement creates an active list of item-IDs, allowing sequential access to each item in the file by use of the readnext statement.",
            "Unlike the AQL select or sselect commands, the BASIC select statement cannot have selection criteria or perform a sort. The BASIC select passes through every item in the file in hashed order.",
            "If  file.var is not specified, the default file variable is used. When used with the to clause, the item list is assigned to the specified select variable.",
            "If an external list is already active when the program is executed, or the program performs an execute of an AQL select, sselect, qselect, or get-list, the active list is returned by the BASIC select, regardless of the passed file variable."
        ],
        "parameter":[
            "Parameter(s)",
            "varSpecifies a dynamic array variable.file.varSpecifies a file variable that has been used on anopenstatement.list.varSpecifies the select list to be used."
        ],
        "example":[
            "Example(s)",
            "The customer file is opened and\nevery item is selected.",
            "open \u2019customer\u2019 to customer.file else stop 201,\u2019customer\u2019\nselect customer.file\neof=0\nloop\n   readnext ID else eof = 1\nuntil eof do\n   print ID:\" exists\"\nrepeat",
            "The customer file is selected and assigned to the list\nvariablecustomer.list.",
            "open \"customer\u2019 to customer.file else stop 201, \u2019customer\u2019\nselect customer.file to customer.list\nselect customer.list to save.cust.list; * save list for later\neof=0\nloop\n   readnext ID from customer.list else eof=1\nuntil eof do\n   print ID:\" exists\"\nrepeat",
            "The array variable,string, is treated\nas an active list by assigning it to the list variable,list.",
            "string = \u20191001\u2019:char(254):\u20191002\u2019:char(254):\u20191003\u2019\nselect string to list\neol=0\nloop\n   readnext ID from list else exit\n   print ID:\" exists\"\nrepeat",
            "This example demonstrates multiple active lists in the\nsame program. It first selects all local file pointers from the master\ndictionary and assigns them to the md.list list variable usingselect. Each file name is used to select all items in the\ndata section.",
            "open \u2019md\u2019 to md.file else stop 201,\u2019md\u2019\nexecute \u2019select md with a1 = \" d]\"\u2019\nselect md.fileto md.list\nloop\n   readnext file.name from md.list then\n      open file.name to temp.file then\n         execute \u2019select \u2019:file.name\n         select temp.file to temp.list\n         loop\n         readnext tempID else exit\n         print tempID:\" in \":file.name:\" exists\"\n         while 1 do repeat\n      end\n   end else exit\nuntil 1 do repeat",
            "Note:Anotherselectclears the primary\nand secondary lists.",
            "This form ofselectcauses BASIC to scan the file with eachreadnext.",
            "Theselectandreadnextstatements both consume an external list if one is available. As\na result,system(11)always returns 0 after one\nof these commands. For example:",
            "execute \"select bp sampling 5\"\nprint system(11)\nselect\nprint system(11)",
            "This prints5, then0. The external list is consumed by a BASIC variable and is then only\navailable from FlashBASIC or BASIC.",
            "A select list variable cannot\nbe read or written by normal BASIC functions and statements. Access\nmust be purely throughselectandreadnext."
        ]
    },
    {
        "name":"send statement",
        "Syntax":[
            "Syntax",
            "send str.exp{:} to port.num{then|else statement.block}\n"
        ],
        "description":[
            "Description",
            "The send statement sends output to a specified port.",
            "The port to which the output is being sent must be attached with the TCL dev-att command.",
            "In the send statement, the first expression is evaluated as a string. This string can contain any data formatting expressions that work in the print or crt statements, including cursor positioning, @(column,row), and special functions, @(-n). The actual codes that are generated is determined by the terminal characteristics of the process executing the send, not the port to which the characters are being passed. The correct terminal type must be established with the TCL term command.",
            " port.num must evaluate to a valid port number. If the port number is invalid, and there is no else clause, the program aborts into the FlashBASIC or BASIC debugger. If there is an else clause, it is executed when the port number is invalid.",
            "The send statement is typically used after a port has been attached by the sending process. Attachment ensures that the process has exclusive use of the port. Data can be sent to any port that is linked (but not attached) to another process. If the port is attached to another process, the else clause is executed.",
            "Both the then and else clauses are optional, but, at least one must be specified."
        ],
        "parameter":[
            "Parameter(s)",
            "str.expSpecifies the output to be sent to the specified port number.port.numPort number to which the output is sent.:Optionally suppresses a terminating CR\/LF."
        ],
        "example":[
            "Example(s)",
            "This sends the string,\u2019begin transmission\u2019, to port 10. If port 10 is already\nattached by another process, theelseclause is\nexecuted.",
            "execute \"dev-att 10\"\nsend \u2019begin transmission\u2019 to 10 else print \u2019port in use\u2019",
            "The string inmsgis sent without a CR\/LF\nto the device addressed bydevice1. If successful,\nthethenclause is executed.",
            "send msg: to device1 then print \u2019message sent\u2019",
            "This sends the string,\"hello there\",\nto port 10 at column position 10 on row 9. The term type of the sender\nmust match with the terminal of the receiver for this to work correctly.",
            "execute \"dev-att 10\"\nstring = \"hello there\"\nsend @(10,9) : string : to 10 then crt \"string sent\" else crt \"string not sent\""
        ]
    },
    {
        "name":"sendx statement",
        "Syntax":[
            "Syntax",
            "sendx str.exp to port.num{then|else statement.block}\n"
        ],
        "description":[
            "Description",
            "The sendx statement converts the exploded ASCII hexadecimal string results of  str.exp to its binary equivalent and then transmits it to the specified port. The conversion process terminates when the first nonhexadecimal character is encountered. sendx suppresses the output of a CR\/LF pair. sendx does not allow the : to exist as part of the statement.",
            "The port to which the output is being sent must be attached with the TCL dev-att command.",
            "In the sendx statement, the first expression is evaluated as a string. This string can contain any data formatting expressions that work in the print or crt statements, including cursor positioning, @(column,row), and special functions, @(-n). The actual codes that are generated is determined by the terminal characteristics of the process executing the send, not the port to which the characters are being passed. The correct terminal type must be established with the TCL term command.",
            " port.num must evaluate to a valid port number. If the port number is invalid, and there is no else clause, the program aborts into the FlashBASIC or BASIC debugger. If there is an else clause, it is executed when the port number is invalid.",
            "The sendx statement is typically used after a port has been attached by the sending process. Attachment ensures that the process has exclusive use of the port. Data can be sent to any port that is linked (but not attached) to another process. If the port is attached to another process, the else clause is executed.",
            "Both the then and else clauses are optional, but, at least one must be specified."
        ],
        "parameter":[
            "Parameter(s)",
            "str.expSpecifies the output to be sent to the specified port number.port.numPort number to which the output is sent."
        ],
        "example":[
            "Example(s)",
            "The binary equivalent of the\nASCII hexadecimal string inmsgis sent to the\nport addressed bydevice1and if successful, prints\na message.",
            "sendx msg to device1 then print \u2019hex message converted to binary and sent\u2019"
        ]
    },
    {
        "name":"sleep statement",
        "Syntax":[
            "Syntax",
            "sleep {num.exp}\nsleep {\"time.exp\"}\n"
        ],
        "description":[
            "Description",
            "The sleep statement places a process to sleep for a specific number of seconds, or, until a specific time.",
            "If no argument is included, the process sleeps for one second. rqm and sleep are identical.",
            "The specification of fractional seconds in the numeric expression is allowed. Also, a numeric expression of 0 causes the process to relinquish its time slice."
        ],
        "parameter":[
            "Parameter(s)",
            "num.expTime to sleep in seconds.time.expTime to sleep in military time format (hh:mm:ss)."
        ],
        "example":[
            "Example(s)",
            "This puts the process to sleep\nfor one hour.",
            "sleep 3600",
            "This puts the process to sleep, leaving a wakeup call\nfor 8:00 AM.",
            "until.wakeup.time = \"08:00\"\nsleep until.wakeup.time"
        ]
    },
    {
        "name":"spoolq statement",
        "Syntax":[
            "Syntax",
            "spoolq [off|on|exp]\n"
        ],
        "description":[
            "Description",
            "The spoolq statement enables or disables the spooler entry number message."
        ],
        "parameter":[
            "Parameter(s)",
            "onEnable the spooler entry number message.offDisables the spooler entry number message.expIn theexpform, the entry number printing\nis disabled when the expression evaluates to false and enabled when\nthe expression evaluates to true. In an expression, 0 =spoolq\noffand nonzero =spoolq on."
        ],
        "example":[

        ]
    },
    {
        "name":"stop statement",
        "Syntax":[
            "Syntax",
            "stop\nstop errnum, \"parameter\"{,\"parameter\"...}\n"
        ],
        "description":[
            "Description",
            "The stop statement stops program execution and returns to the invoking the process.",
            "The parameters are passed to the error message handler and the message stored in  errnum displays.",
            "The stop statement is similar to the abort statement, except the stop statement terminates execution of the program without going into the FlashBASIC or BASIC debugger. Control returns to the calling program, Proc, or macro."
        ],
        "parameter":[
            "Parameter(s)",
            "errnumNumber of the error message to display.parameterText to be displayed."
        ],
        "example":[
            "Example(s)",
            "Thestopstatement\nbelow stops program execution ifinvoicescannot\nbe opened, and prints the designated error message with a passed variable\nparameter.",
            "open \"invoices\" to inv.file else stop 201,\"invoices\"",
            "If the invoices file does not exist, this message displays:",
            "[201] \u2019invoices\u2019 is not a file name",
            "In this example, if the item referenced by the variableIDis not on file:",
            "read cust.item from cust.file,ID else stop 202,ID",
            "the program stops and displays:",
            "[202] \u2019ID\u2019 not on file.",
            "The actual item-ID displays in the error message."
        ]
    },
    {
        "name":"subroutine statement",
        "Syntax":[
            "Syntax",
            "subroutine {(arg.list)}\nsubroutine subroutine.name{(arg.list)}\n"
        ],
        "description":[
            "Description",
            "The subroutine statement defines a program as an external subroutine.",
            "FlashBASIC or BASIC provides the ability to call subroutines. The subroutine statement must appear on the first line of an external subroutine invoked by a call statement.",
            "Arguments defined in the argument list are delimited by , (commas).  arg.list must contain the same number of arguments as are in the call statement.",
            "If a subroutine is called from the Update processor, in either a file-defining item, or an attribute-defining item, no  arg.list can be specified by the call statement. If called from a file-defining item, the item being filed is automatically passed as a parameter in a call. If called from an attribute-defining item, the current value of the attribute being processed is automatically passed. Note that the subroutine is called once for every value in the attribute.",
            "A subroutine exits with a return statement.",
            "All external subroutines must be cataloged prior to execution."
        ],
        "parameter":[
            "Parameter(s)",
            "arg.listVariables to be assigned by the correspondingcallstatement.subroutine.nameSubroutine to define as external."
        ],
        "example":[
            "Example(s)",
            "This example prompts for a date\nand calls the external subroutinevalidate.dateto\nmake sure the date is legal.",
            "*program main\n10 input start.date\ncall validate.date(start.date,ok)\nif not(ok) then goto 10",
            "Here is the subroutine:",
            "subroutine validate.date(pdate,ok)\nif pdate matches \"1n0n1x1n0n1x2n0n\" then\n   if iconv(pdate,\u2019d\u2019) # \"\" then\n      ok=1\n   end else\n      ok=0\n   end\nend else\n   ok=0\nend\nreturn",
            "The variableokis set to 1 if the date\nis valid. Otherwise,okis set to 0 (false)."
        ]
    },
    {
        "name":"ta statement",
        "Syntax":[
            "Syntax",
            "ta [on|off|clear|exp]\n"
        ],
        "description":[
            "Description",
            "The ta statement toggles or resets the type-ahead buffer.",
            "The BASIC ta statement is equivalent to the TCL type-ahead command and the BASIC inputclear statement."
        ],
        "parameter":[
            "Parameter(s)",
            "onTurns on the type-ahead buffer.offTurns off the type-ahead buffer.clearClears the type-ahead buffer.expThe type-ahead input buffer is turned on if the expression\nevaluates to nonzero (true) and turned off if it evaluates to 0 (false)."
        ],
        "example":[

        ]
    },
    {
        "name":"tcl statement",
        "Syntax":[
            "Syntax",
            "tcl tcl.command{to dim.array.var)\n"
        ],
        "description":[
            "Description",
            "The tcl statement executes any valid TCL command as a subroutine.",
            "After execution, the FlashBASIC or BASIC program continues with the next statement.",
            "Input can be passed to the TCL statements using the data statement prior to the tcl statement.",
            "The to modifier passes the last message number and arguments of the tcl statement to the specified dimensioned array variable.",
            "After the tcl statement is completed, the data queue (stack) is reset. Multiple data statements can be passed when they are separated by value marks. Multiple tcl statements can be passed when they are separated by attribute marks.",
            "If an active list is generated by the tcl statement, it is passed back to the FlashBASIC or BASIC program. The list can be used by the readnext statement or it can be assigned to a specific variable using the select\u00a0to statement for later use with a readnext statement.",
            "If the TCL off command is issued as the tcl statement, control does not return to the FlashBASIC or BASIC program."
        ],
        "parameter":[
            "Parameter(s)",
            "tcl.commandTCL command to execute as a subroutine.dim.array.varReceives the last message number and arguments of thetcl.command."
        ],
        "example":[
            "Example(s)",
            "This example executes an AQLcountcommand and returns the error message item-IDs to\nthe dimensioned array,results.",
            "dim results(3)\ntcl \u2019count md if a1 \"pq\"\u2019 to results",
            "The output of thetclstatement\ndisplays as follows:",
            "[407] 26 items counted out of 897 items",
            "The contents of the dimensioned arrayresultsdisplays as follows:",
            "results(1) = 407\nresults(2) = 26\nresults(3) = 897"
        ]
    },
    {
        "name":"tclread statement",
        "Syntax":[
            "Syntax",
            "tclread var\n"
        ],
        "description":[
            "Description",
            "The tclread statement loads the TCL command used to activate the program into a variable.",
            "The program must be the program called from TCL. The  tclread statement does not work when called from a subroutine or from enter or tcl statements. This statement allows parameters to be passed from TCL to a program directly without processing. Individual parameters can be extracted using the field() function."
        ],
        "parameter":[
            "Parameter(s)",
            "varVariable in which the TCL command used to activate the program\nis loaded."
        ],
        "example":[
            "Example(s)",
            "tclreadis\nused to extract the file name and item-ID from the TCL command line.\nHere is a sample TCL command using theshowprogram:"
        ]
    },
    {
        "name":"timeout statement",
        "Syntax":[
            "Syntax",
            " timeout exp"
        ],
        "description":[
            "Description",
            "mvBase Only: The timeout statement specifies the number of   seconds the operating environment waits for terminal input before a timeout condition   occurs.",
            "If a timeout occurs and an ELSE clause is specified on the INPUT statement, the ELSE clause is     carried out. Otherwise, no action is taken and the program continues to wait for input."
        ],
        "parameter":[
            "Parameter(s)",
            "expContains the number of seconds to wait.If theexpvariable is\n         set to zero, the timeout waiting feature is turned off."
        ],
        "example":[
            "Example(s)",
            "SyntaxDescriptionTIMEOUT 30A 30-second timeout is established for subsequent input statements.TIMEOUT \"LOGGED OFF\"\"Error: An expression cannot be used as parameter.TIMEOUTError: The number of seconds must be specified."
        ]
    },
    {
        "name":"transaction statement",
        "Syntax":[
            "Syntax",
            "transaction [on|off|exp]\n"
        ],
        "description":[
            "Description",
            "The transaction statement enables or disables participation in a transaction.",
            "This functionality is intended for languages built on top of FlashBASIC or BASIC (like some SQL engines or 4GLs) that need to use temporary files for internal reasons without affecting a user-level transaction.",
            "The term on or off is required if an expression is used with this function."
        ],
        "parameter":[
            "Parameter(s)",
            "onEnables participation in a transaction.offDisables participation in a transaction.expTransaction is turned on if the expression evaluates to nonzero\n(true) and turned off if it evaluates to 0 (false)."
        ],
        "example":[
            "Example(s)",
            "transaction start\ntransaction cache off\ntransaction off else msg=\"8 off\"; goto fail\nwrite \"1\" on \"1\"\nread xx from \"1\" else msg=\"8 read\"; goto fail\nx=1\ntransaction onoff x else msg=\"8 onoff\"; goto fail\nwrite 1 on 2\nread xx from 2 then msg=\"8 read2\"; goto fail\ntransaction commit\nread xx from 2 else msg=\"8 read3\"; goto fail\ndelete 1\ndelete 2"
        ]
    },
    {
        "name":"transaction abort statement",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "transaction start tn else res = \"Failed transaction start\";\ngosub failure; goto done:\n*\n* Perform series of writes\n* ------------------------\nfor i = 31 to 40\n   msg = \"write \":i\n   xx = str('*',i)\n   write xx on i on error res = \"Write failed\"; gosub failure; goto done:\nnext i\n*\n* Rollback the transaction with transaction abort\n* -----------------------------------------------\nmsg = \"Transaction Abort\"\ntransaction abort else res = \"Error with transaction abort\"; gosub failure\n*\n* Verify writes were rolled back\n* ------------------------------\nfor i = 31 to 40\n   msg = \"read \":i\n   readu xx from i then res = \"Read should have failed\"; gosub failure\n\u00a0\nnext i"
        ]
    },
    {
        "name":"transaction cache statement",
        "Syntax":[
            "Syntax",
            "transaction cache [on|off|exp]\n"
        ],
        "description":[
            "Description",
            "The transaction cache statement enables or disables the transaction read cache.",
            "Normally, all read operations within a transaction first query the list of uncommitted updates. This allows the re-reading of an item already written.",
            "Users can turn this cache off if they are confident that the transaction does not attempt this activity. Turning the cache off can improve the performance of reads within a transaction, especially if the transaction is particularly long.",
            "Once the cache is turned off, it remains off until the program completes."
        ],
        "parameter":[
            "Parameter(s)",
            "onEnables the transaction read cache.offDisables the transaction read cache.expThe transaction read cache is turned on if the expression\nevaluates to nonzero (true) and turned off if it evaluates to 0 (false)."
        ],
        "example":[
            "Example(s)",
            "transaction start\ntransaction cache on else msg=\"6 cache\"; goto fail\nwrite \"1\" on \"1\"\nread xx from \"1\" else msg=\"6 read\"; goto fail\ntransaction rollback\nread xx from \"1\" then msg=\"6 read2\"; goto fail\ndelete 1\ntransaction start\ntransaction cache off else msg=\"7 cache\"; goto fail\nwrite \"1\" on \"1\"\nread xx from \"1\" then msg=\"7 read\"; goto fail\ntransaction commit\nread xx from \"1\" else msg=\"7 read2\"; goto fail\ndelete 1"
        ]
    },
    {
        "name":"transaction commit statement",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"transaction flush statement",
        "Syntax":[
            "Syntax",
            "transaction flush [on|off|exp]\n"
        ],
        "description":[
            "Description",
            "The transaction flush statement enables or disables the transaction flush mechanism.",
            "Normally, all updates processed within a transaction are force-flushed to a reliable medium (disk). This is done to assure ACID (Atomic, Consistent, Isolated, Durable) compliance, that is, the ability to recover a transaction if the machine should halt unexpectedly.",
            "If ACID compliance is not necessary, then this flush mechanism can be disabled, providing significantly higher performance.",
            "Once the flush is turned off, it remains off until the program completes.",
            "If the flush is disabled and the machine halts, all pending transactions are aborted in a potentially semi-committed state."
        ],
        "parameter":[
            "Parameter(s)",
            "onEnables the transaction flush mechanism.offDisables the transaction flush mechanism.expThe transaction flush mechanism is turned on if the expression\nevaluates to nonzero (true) and turned off if it evaluates to 0 (false)."
        ],
        "example":[
            "Example(s)",
            "transaction flush off else msg=\"9 flush\"; goto fail\ntransaction start\nwrite \"1\" on \"1\"\ntransaction flush 1 else msg=\"9 flush2\"; goto fail\ntransaction rollback\ndelete 1"
        ]
    },
    {
        "name":"transaction rollback function",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "transaction start\ntransaction cache on else msg=\"6 cache\"; goto fail\nwrite \"1\" on \"1\"\nread xx from \"1\" else msg=\"6 read\"; goto fail\ntransaction rollback\nread xx from \"1\" then msg=\"6 read2\"; goto fail\ndelete 1"
        ]
    },
    {
        "name":"transaction start function",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "transaction start\ntransaction cache on else msg=\"6 cache\"; goto fail\nwrite \"1\" on \"1\"\nread xx from \"1\" else msg=\"6 read\"; goto fail\ntransaction rollback\nread xx from \"1\" then msg=\"6 read2\"; goto fail\ndelete 1"
        ]
    },
    {
        "name":"unlock statement",
        "Syntax":[
            "Syntax",
            "unlock\nunlock lock.num.exp\n"
        ],
        "description":[
            "The unlock statement resets an execution lock, in the range 0 to 991, previously set with a lock statement."
        ],
        "parameter":[
            "Parameter(s)",
            "lock.num.expSpecifies which execution lock (from 0 to 991) to reset. If\nnot specified, all locks set by the program are unlocked."
        ],
        "example":[
            "Example(s)",
            "This conditionally sets execution\nlock 12 just before a segment of code that performs file retrieval\nand update. When complete, lock 12 is cleared by theunlockstatement.",
            "again: lock 12 else rqm; goto again\nread rec from file,ID else print ID:\" not found\"; rec = \"X\"\nwrite rec on file,ID\nunlock 12"
        ]
    },
    {
        "name":"wakeup statement",
        "Syntax":[
            "Syntax",
            " WAKEUP process.no THEN\/ELSE ....\n\n"
        ],
        "description":[
            "Description",
            "The wakeup statement is used for BASIC programs to wake up a       different process that is either sleeping or waiting for input at an INPUT       statement (which has an associated ELSE clause).",
            "When the specified process wakes up, it executes the next statement in that program. If             the specified process was waiting for input, it takes the ELSE clause of the                INPUT statement. In either case, SYSTEM(0) can be used to             determine which process woke it up."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"weof statement",
        "Syntax":[
            "Syntax",
            "weof var[then statement.block{[else|onerr] statement.block}]\n"
        ],
        "description":[
            "Description",
            "The weof statement writes an eof (end of file) mark to the currently attached magnetic media.",
            "The then clause is executed if the operation was successful. If the operation was unsuccessful, the else or onerr clause is executed.",
            "The onerr clause can be used to check for tape error conditions by interrogating the system(0) function. Either else or onerr can be specified, but not both.",
            "See then\/else statement blocks for an explanation on the use of then and else clauses in statements that allow or require them."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "In this subroutine, a series\nof tape files are written using items in a previously formatted disk\nfile. The items represent tape blocks and the IDs are numbered 1 though\nM, where M is the block count. When a null item is encountered, the\nlogic assumes that an eof is to be written to tape. Two eof marks\nindicate an end-of-data condition.",
            "subroutine outtape\nexecute \u2019t-att \u2019:blocksize\n* tape not attached\nif system(0) = \"1\" then\n   err=system(0)\n   return\nend\nctr=1; eot=0 ; err=0\nloop\nread block from tape.hold.file,ctr then\n   * a null block in the file\n      if block=\u2019\u2019 then\n         * write an eof.\n         weof else err=system(0)\n      end else\n         writet block else err=system(0)\n      end\n   end else eot=1\nuntil eot or err do\n   ctr=ctr+1\nrepeat\n* at end-of-tape\nif eot then\n   * write 2 eof\u2019s\n   weof then\n      weof else err=system(0)\n   end else err=system(0)\nend\nreturn"
        ]
    },
    {
        "name":"write statement",
        "Syntax":[
            "Syntax",
            "write dyn.array.var on {file.var,} ID.exp{on error.clause}\n"
        ],
        "description":[
            "Description",
            "The write statement writes the item specified in dyn.array.var into the specified file, using the item-ID specified in the ID.exp.",
            "The writeu form of the write command writes a dynamic array into the specified file variable and keeps items locked that were locked by a previous readu, readvu, or matreadu command.",
            "The writex, matwritex, and matwritexu commands all have the property of waiting until the actual disk update takes place before continuing execution of the program. They are used for critical write-through, such as error-logging.",
            "If the file updated performs a callx correlative and that subroutine does an inputerr, then the FlashBASIC program performing the write command drops immediately to TCL in the default case. If the on error.clause is present, then that clause is taken in the inputerr case."
        ],
        "parameter":[
            "Parameter(s)",
            "dyn.array.varItem to write to the specified file.file.varFile onto which the dynamic array variable is written. If\nnot specified, the default file variable is used.ID.expItem-ID to assign to the new item being added to the file.on error.clauseAn optionalon error.clausecan be specified,\nwhich consists of the clauseon errorfollowed\nby a statement block. The clause is taken if the update fails because\nthe data source is unavailable (as can be the case if the file is\nremote), or if acallxcorrelative applied to the\nfile fails because of aninputerrstatement."
        ],
        "example":[
            "Example(s)",
            "write item on customer.file,item-ID",
            "This statement unconditionally writes the contents of\nthe array variableitemon the customer file with\na specifieditem-ID. If the item does not exist,\nit is added. If the item exists, it is overwritten.",
            "readu item from customer.file,item-ID else stop\n...\nbegin case\ncase action = \u2019fs\u2019\nwriteu item on customer.file,item.ID\ncase action = \u2019fi\u2019\nwrite item on customer.file,item.ID\nreturn\ncase action = \u2019ex\u2019\nrelease customer.file,item.ID\nreturn\nend case\n...",
            "The example below illustrates the use of theon error.clausewith thewritestatement.",
            "open \"\/tmp\" to tmp else stop\nwrite rec on tmp,\"test\" on error crt \"Unable to write to \/tmp\""
        ]
    },
    {
        "name":"writet statement",
        "Syntax":[
            "Syntax",
            "writet exp[then statement.block{[else|onerr.clause] statement.block}]\n"
        ],
        "description":[
            "Description",
            "The writet statement writes a tape record to the attached magnetic media from the specified variable.",
            "The then clause is executed if the writet is successful. Either else or onerr can be specified, but not both. In addition, the onerr clause can be used to check for tape error conditions by interrogating the system(0) function."
        ],
        "parameter":[
            "Parameter(s)",
            "expIf the size of the expression is less than the attached tape\nblock size, it is padded to fill the block size. If it is greater\nthan the block size, it is truncated.onerr.clauseAn optionalonerr.clausecan be specified,\nwhich consists of the clauseonerrfollowed by\na statement block. Theelseoronerrclause is executed if the tape unit is not attached or the string\nvalue of expression is an empty string ('')."
        ],
        "example":[
            "Example(s)",
            "record = name \u2019l#20\u2019 : address \u2019l#15\u2019\nwritet record else stop"
        ]
    },
    {
        "name":"writetx statement",
        "Syntax":[
            "Syntax",
            " writetx var[then|else|onerr statement.block] \n"
        ],
        "description":[
            "Description",
            "The writetx statement writes a tape record, converts the string from   ASCII hex to binary, and copies the string to the tape buffer.",
            "The length of the tape record is specified by the most recently executed TCL      t-att command.",
            "If the tape unit has not been attached or if an end-of-file (eof) mark is read, the        else or onerr clause, if present, is executed. In       addition, the onerr clause can be used to check for end-of-tape (eot), tape       unit not ready, parity error, or block transfer error."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"writeu statement",
        "Syntax":[
            "Syntax",
            "writeu dyn.array.var on {file.var,} ID.exp{onerr.clause}\n"
        ],
        "description":[
            "Description",
            "The writeu form of the write statement writes a dynamic array into the specified file variable and keeps items locked that were locked by a previous readu or readvu statement.",
            "This statement unconditionally writes the contents of the array variable item on the customer file with a specified item-ID. If the item does not exist, it is added. If the item exists, it is overwritten.",
            "The write and writeu statements all have the property of waiting until the actual disk update takes place before continuing execution of the program. They are used for critical write-through, such as error-logging.",
            "If the file updated performs a callx correlative and that subroutine does an inputerr, then the FlashBASIC or BASIC program performing the writeu statement drops immediately to TCL in the default case. If the onerr.clause is present, then that clause is taken in the inputerr case.",
            "Because a writeu does not clear the item lock, a release or an explicit write is required to clear the lock before continuing."
        ],
        "parameter":[
            "Parameter(s)",
            "dyn.array.varItem to write to the specified file.file.varFile onto which the dynamic array variable is written. If\nnot specified, the default file variable is used.ID.expItem-ID to assign to the new item being added to the file.onerr.clauseAn optionalonerr.clausecan be specified,\nwhich consists of the clauseonerrfollowed by\na statement block. The clause is taken if the update fails because\nthe data source is unavailable (as can be the case if the file is\nremote), or if acallxcorrelative applied to the\nfile fails because of aninputerrstatement."
        ],
        "example":[
            "Example(s)",
            "writeu item on customer.file,item.ID"
        ]
    },
    {
        "name":"writev statement",
        "Syntax":[
            "Syntax",
            "writev exp ON {file.var,} ID.exp, ac.exp\n"
        ],
        "description":[
            "Description",
            "The writev statement writes the value of an expression into the attribute designated in the attribute expression parameter, using the item-ID specified in ID.exp.",
            "\u20131 can be used as the value of the attribute count expression. This appends a new attribute to the end of the item.",
            "writev requires that the entire item be read into temporary workspace so that it can be rebuilt with the new attribute value, before it is written back to the file.",
            "A series of writev statements addressing different attributes in the same item can get very slow because the item has to be reread for every writev.",
            "A further problem with writev is that it is not atomic. A writev, although faster, is equivalent to this fragment of BASIC code:"
        ],
        "parameter":[
            "Parameter(s)",
            "expExpression to write to the specified file.file.varFile to write to. Contains the item expressed inID.exp. If omitted, the default file variable is used.ID.expItem to write to. Contains the attribute expressed inac.exp.ac.expAttribute to write to."
        ],
        "example":[
            "Example(s)",
            "writev time() on control.file,\u2019control.list\u2019,3"
        ]
    },
    {
        "name":"writevu statement",
        "Syntax":[
            "Syntax",
            "writevu exp ON {file.var,} ID.exp, ac.exp\n"
        ],
        "description":[
            "Description",
            "The writevu form of this statement is identical to    writev, except that it keeps items locked that were locked by a previous    readu or readvu statement.",
            "-1 can be used as the value of the attribute count expression. This appends a new attribute to the end of the item.",
            "writevu requires that the entire item be read into temporary workspace so that it can be rebuilt with the new attribute value, before it is written back to the file.",
            "A series of writevu statements addressing different attributes in the same item can get very slow because the item has to be reread for every writevu.",
            "A further problem with writevu is that it is not atomic. A writevu, although faster, is equivalent to this fragment of BASIC code:"
        ],
        "parameter":[
            "Parameter(s)",
            "expExpression to write to the specified file.file.varFile to write to. Contains the item expressed inID.exp. If omitted, the default file variable is used.ID.expItem to write to. Contains the attribute expressed inac.exp.ac.expAttribute to write to."
        ],
        "example":[
            "Example(s)",
            "writevu time() on control.file,\u2019control.list\u2019,3"
        ]
    },
    {
        "name":"writex statement",
        "Syntax":[
            "Syntax",
            "writex dyn.array.var on {file.var,} ID.exp{onerr.clause}\n"
        ],
        "description":[
            "The writex statement writes the item specified in dyn.array.var into the specified file, using the item-ID specified in the ID.exp. The writex statement will wait until the actual disk update takes place before continuing execution of the program. This is used for \"critical\" write-through, such as error-logging."
        ],
        "parameter":[
            "Parameter(s)",
            "dyn.array.varItem to write to the specified file.file.varFile onto which the dynamic array variable is written. If\nnot specified, the default file variable is used.ID.expItem-ID to assign to the new item being added to the file.onerr.clauseAn optionalonerr.clausecan be specified,\nwhich consists of the clauseonerrfollowed by\na statement block. The clause is taken if the update fails because\nthe data source is unavailable (as can be the case if the file is\nremote), or if acallxcorrelative applied to the\nfile fails because of aninputerrstatement."
        ],
        "example":[

        ]
    },
    {
        "name":"BASIC user exits",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"u$pl.mon.data user exit",
        "Syntax":[
            "Syntax",
            "result = oconv(\"\", \"u$pl.mon.data\")\n"
        ],
        "description":[
            "The u$pl.mon.data user exit returns this monitor information:"
        ],
        "parameter":[
            "Parameter(s)",
            "result<1>Address of extended memory table (hexadecimal).result<2>Segment of 1st device driver (hexadecimal).result<3>Offset of 1st device driver (hexadecimal).result<4>Address of top of PIB links (hexadecimal).result<5>PIB size (decimal).result<6>Offset of$sio.gen.driver(hexadecimal).result<7>Address of monitor tape buffer (hexadecimal).result<8>Address of tape device code branch table (hexadecimal)."
        ],
        "example":[

        ]
    },
    {
        "name":"u000e user exit",
        "Syntax":[
            "Syntax",
            "account.name = oconv(\u2019\u2019, \u2019u000e\u2019)\n"
        ],
        "description":[
            "The u000e user exit gets the name of the current account."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"u0003 user exit",
        "Syntax":[
            "Syntax",
            "result = oconv(\u2019\u2019, \u2019u0003\u2019)\n"
        ],
        "description":[
            "The u0003 user exit returns the TCL command invoking the FlashBASIC or BASIC program."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"u0004 user exit",
        "Syntax":[
            "Syntax",
            "result = oconv(\"\", \"u0004\")\n"
        ],
        "description":[
            "Description",
            "The u0004 user exit returns term settings in dynamic array format.",
            "The term settings are:"
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "result = oconv(\"\",\"u4\")\nprint result\nwy-50^79^80^24^59^0^1^1^8^"
        ]
    },
    {
        "name":"u0005 user exit",
        "Syntax":[
            "Syntax",
            "result = oconv(\u2019\u2019, \u2019u0005\u2019)\n"
        ],
        "description":[
            "The u0005 user exit clears the type-ahead buffer."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"u0010 user exit",
        "Syntax":[
            "Syntax",
            "result = oconv(logon.data, \"u10\")\n"
        ],
        "description":[
            "The u0010 user exit creates a phantom process."
        ],
        "parameter":[
            "Parameter(s)",
            "logon.dataDynamic array, that consists\nof:user.ID]user.password^md-ID]md.password^command^options^parent.pib#^child.pib#]Denotes a value mark (char(253)).^Denotes an attribute mark (char(254)).optionssDo not create hold file.mReturn any messages toparent.pib."
        ],
        "example":[

        ]
    },
    {
        "name":"u0011 user exit",
        "Syntax":[
            "Syntax",
            "port.num = oconv(\u2019\u2019, \u2019u0011\u2019)\n"
        ],
        "description":[
            "The u0011 user exit gets the port number of the scheduler process."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"u001c user exit",
        "Syntax":[
            "Syntax",
            "attributes = oconv(\u2019\u2019, \u2019u001c\u2019)\n"
        ],
        "description":[
            "The u001c user exit gets the number of attributes (elements) after a matread."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"u001e user exit",
        "Syntax":[
            "Syntax",
            "x = oconv(var, \u2019u001e\u2019)\n"
        ],
        "description":[
            "The u001e user exit returns the checksum of a string."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"u001f user exit",
        "Syntax":[
            "Syntax",
            "status = oconv(\u2019\u2019, \u2019u1f\u2019)\n"
        ],
        "description":[
            "The u001f user exit returns the last shutdown status."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"u0033 user exit",
        "Syntax":[
            "Syntax",
            "roman.num = oconv(decimal.num, \u2019u0033\u2019)\n"
        ],
        "description":[
            "The u0033 user exit converts a decimal number into a Roman numeral."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"u0039 user exit",
        "Syntax":[
            "Syntax",
            "result = oconv(read.command, \u2019u39\u2019)\n"
        ],
        "description":[
            "Description",
            "The u0039 user exit reads an absolute disk sector. This user exit provides more information than u14a.",
            "read.command is a dynamic array that contains:",
            "where  drive.num can be:",
            " ",
            "where"
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"u005b user exit",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"u007a user exit",
        "Syntax":[
            "Syntax",
            "code = oconv(size^ item-ID^ item.body, \"u007a\")\n"
        ],
        "description":[
            "Description",
            "The u007A user exit updates a binary item from a FlashBASIC or BASIC program.",
            "The file in which the item is stored is referenced by the last open or last file access preceding the call. See the examples below."
        ],
        "parameter":[
            "Parameter(s)",
            "item-IDItem-ID of the binary item.item.bodyBecause a FlashBASIC or BASIC\nprogram cannot handle segment mark (decimal 255) characters, a special\nencoding scheme is used. A segment mark is replaced by the special\ntwo character sequencedle_, wheredleis a data link escape character (decimal 16). These special sequences\nare replaced at file time:dle dleReplaced by onedle.dle_Replaced by one segment mark.dle xxReplaced by one or more segment marks, wherexxis the number of segment marks from 1 to 126, plus 128 (hexadecimal\nx 80). For example,dle\u00a0x\u00a081is replaced\nby one segment mark,dle\u00a0x\u00a0A3is replaced\nbyx\u00a0A3\u00a0-x\u00a080\u00a0=x\u00a023\u00a0=35segment marks.sizeItem body size, in decimal. The\nsize does not include the specialdleescape sequences,\nbut it should include the number of segment marks after decompression.\nIn other words, it is the size where the item body was not encoded\nwithdlesequences. If the size is not large enough,\nadditional overflow is allocated to hold the binary item. However,\nthis space is not contiguous in the virtual space, which can have\nsome impact on performance while accessing the binary item.codeReturn code:>0Number of frames allocated to hold the binary item.-1Not enough overflow.-2Illegaldlesequence.-3Illegal file reference."
        ],
        "example":[
            "Example(s)",
            "The example below writes a binary\nitem test containing the two characters (in hexadecimal) x\u201901ff\u2019 in\nthe dictionary of the fileobject.codereturns 1 frame allocated.",
            "equ dle to char(16)\nx=char(01):dle:\"_\"\nopen \"dict\",\"object\" to fd\ncode=oconv(2:am:\u2019test\u2019:am:x, \"u007a\")",
            "The example below writes a binary item test containing\n32 consecutive segment marks, followed by oneDLE, in a file described by the file descriptor (fd). Note how thereadof a dummy (possibly nonexistent)\nitem is used to reference the file.",
            "equ DLE to char(16)\nx=DLE:char(128+32):DLE:DLE\nread dummy from fd,\u2019\u2019 else dummy=\u2019\u2019\ncode=oconv(33:am:\u2019test\u2019:am:x, \"u007a\")"
        ]
    },
    {
        "name":"u0074 user exit",
        "Syntax":[
            "Syntax",
            " VMEItemLocks = oconv( \"\", \"u74\" )"
        ],
        "description":[
            "Description",
            "The u0074 is used to get a list of the VME item locks in a dynamic   array format.",
            "The user exit returns a list of the VME item locks in a dynamic array format. ",
            "Each attribute (row) is an item lock entry. Each value (column) within an entry is a piece of     data, such as the item-id, date, and so on. The format of the structure is declared in      dm,bp,includes locks.inc."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "VMEItemLocks = OConv( \"\", \"u74\" )\n Crt VMEItemLocks"
        ]
    },
    {
        "name":"u0079 user exit",
        "Syntax":[
            "Syntax",
            "result = oconv(pcb.num, \u2019u0079\u2019)\n"
        ],
        "description":[
            "The u0079 user exit returns the where status for the specified PCB (Process Control Block) FID, and its return stack information."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "b = oconv(\u201902c0\u2019, \u2019u0079\u2019)",
            "02c0is the PCB (which happens to be\nport 0) to examine."
        ]
    },
    {
        "name":"u0089 user exit",
        "Syntax":[
            "Syntax",
            "binary.num = oconv(hex.num, \u2019u0089\u2019)\n"
        ],
        "description":[
            "User exit u0089 converts a hexadecimal number (in a string) to a binary number."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"u009d user exit",
        "Syntax":[
            "Syntax",
            "coded.str = iconv(seed:am:str, \u2019u009d\u2019)\nuncoded.str = oconv(seed:am:str, \u2019u009d\u2019)\n"
        ],
        "description":[
            "The u009d user exit encodes or decodes a string of characters."
        ],
        "parameter":[
            "Parameter(s)",
            "iconvEncodes the string, andoconvdecodes the\nstring.seedAny non-null string of characters that are used in the encryption\nalgorithm.amIndicates an attribute mark (char(254))."
        ],
        "example":[

        ]
    },
    {
        "name":"u009e user exit",
        "Syntax":[
            "Syntax",
            "xx = oconv(\"u\":am:str1:am:str2:am: str3, \"u9e\")\n"
        ],
        "description":[
            "The u009e user exit replaces all occurrences of  str1 with  str2 in  str3."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "xx=oconv(\"u\":am:\"jan\":am:\"feb\":am:\"The month is jan\",\"u9e\")The value of xx is \"The month is feb\"."
        ]
    },
    {
        "name":"u009f user exit",
        "Syntax":[
            "Syntax",
            "hex.number = oconv('binary.number','u009f')\n"
        ],
        "description":[
            "The u009f user exit converts a binary number to a hexadecimal number (32-bit limit)."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"u00ba user exit",
        "Syntax":[
            "Syntax",
            "result = iconv(registers, \u2019u00ba\u2019)\n"
        ],
        "description":[
            "Description",
            "The u00ba user exit performs BIOS INT 10 calls to change the video screen attributes on the console.",
            "Below is a partial listing of the functions available through the INT 10 call:"
        ],
        "parameter":[
            "Parameter(s)",
            "registersDynamic array containing the\nvalues for theA,B,C, andDregisters in the form:registers<1>AX register (AH:AL)registers<2>BX register (BH:BL)registers<3>CX register (CH:CL)registers<4>DX register (DH:DL)"
        ],
        "example":[

        ]
    },
    {
        "name":"u00b9 user exit",
        "Syntax":[
            "Syntax",
            "soundex = oconv(str, \u2019u00b9\u2019)\n"
        ],
        "description":[
            "The u00b9 user exit returns a  soundex value for a specified string."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "string = \u2019DEMONS\u2019\nsoundex= oconv(string, \u2019u00b9\u2019)",
            "This returns D552 to the variable,soundex."
        ]
    },
    {
        "name":"u014a user exit",
        "Syntax":[
            "Syntax",
            "result = oconv(read.command, \u2019u014a\u2019)\n"
        ],
        "description":[
            "The u014a user exit reads an absolute disk sector."
        ],
        "parameter":[
            "Parameter(s)",
            "resultStatus code indicating:00Successful.xxFailed, wherexxis any nonzero code.",
            "read.commandis a dynamic array that\ncontains:",
            "read.command<1>=drive.num, <vm>,block.num",
            "where",
            "drive.num1Drive A:2Drive B:3Drive C:4Drive D:<vm>Value mark.block.numLogical disk block number to\nread.",
            "read.command<2>=mode, <vm>,table1, <vm>,table2",
            "where",
            "mode1Convert ASCII to hexadecimal.2Transform and prefix character.3Translate and delete character.4Transform, prefix and drop Most Significant Bit.5Transform, delete and drop Most Significant Bit.<vm>Value mark.table1Contains one or more hexadecimal\ncharacters to scan for on input. If there is more than one entry,\nthen they are separated by subvalue marks.<vm>Value mark.table2Contains one or more hexadecimal\ncharacters to replace the corresponding characters fromtable1. If there is more than one entry, then they are separated by subvalue\nmarks."
        ],
        "example":[

        ]
    },
    {
        "name":"u014b user exit",
        "Syntax":[
            "Syntax",
            "result = oconv(write.command, \u2019u014b\u2019)\n"
        ],
        "description":[
            "The u014b user exit writes an absolute disk sector."
        ],
        "parameter":[
            "Parameter(s)",
            "resultA status code indicating:00Successful.xxFailed, wherexxis any nonzero code.write.commandwrite.command<1>=drive.num, <vm>,block.numdrive.num1 = Drive A:2 = Drive B:3 = Drive C:4 = Drive D:<vm>Value mark.block.numLogical disk block number to write.write.command<2>=modeCan be:1Convert hexadecimal to ASCII.write.command<3>u014bwrite.command<4>A sector\u2019s worth of data to write, in 1024 2-digit hexadecimal\ncharacters, which corresponds to a 512-byte sector."
        ],
        "example":[

        ]
    },
    {
        "name":"u017e user exit",
        "Syntax":[
            "Syntax",
            "var = oconv(str,\u2019u017e\u2019)\n"
        ],
        "description":[
            "The u017e user exit allows output of any character to the terminal or spooler."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "Output a character x\u2019FF\u2019 to the\nspooler.",
            "printer on\nx = oconv(char(255),\u2019u017e\u2019)",
            "Outputs the stringabcto the terminal.",
            "x = oconv(\u2019abc\u2019,\u2019u017e\u2019)"
        ]
    },
    {
        "name":"u01b6 user exit",
        "Syntax":[
            "Syntax",
            "x = oconv(num.exp, \"u01b6\")\n"
        ],
        "description":[
            "The u01b6 user exit converts a numeric expression to the number of units as defined by the TCL set-units, set-dozens, set-decimal, or set-thousands commands."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            ":set-dozens\n:u bp test\n01 print oconv(24,\"u01b6\")",
            "This program prints the value 2, as 24 = 2 dozen."
        ]
    },
    {
        "name":"u0209 user exit",
        "Syntax":[
            "Syntax",
            "result = oconv(var, \u2019u0209\u2019)\n"
        ],
        "description":[
            "The u0209 user exit returns only alphabetical and numeric characters."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"u0358 user exit",
        "Syntax":[
            "Syntax",
            "var = iconv(length, \"u0358\")\n"
        ],
        "description":[
            "The u0358 user exit allows character input combined with an eoi (end-of-input) character."
        ],
        "parameter":[
            "Parameter(s)",
            "lengthMaximum length of the input, not including the eoi delimiter.lengthcannot be over 500 characters. The eoi character\ncan be: x\u20190A\u2019, x\u20190E\u2019, x\u201917\u2019, x\u20190C\u2019, x\u20190D\u2019, x\u20191A\u2019, x\u20190B\u2019"
        ],
        "example":[
            "Example(s)",
            "lg = 5\nvar=iconv(lg,\"U0358\")\ncarvalid=seq(extract(var,2))\nif carvalid=14 then...\nif carvalid=15 then..."
        ]
    },
    {
        "name":"u0c user exit",
        "Syntax":[
            "Syntax",
            "pswd = iconv(var, \"u0c\")\n"
        ],
        "description":[
            "The u0c user exit encrypts a password."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"u1072 user exit",
        "Syntax":[
            "Syntax",
            "sorted.dyn.array = oconv(dyn.array, \u2019u1072\u2019)\n"
        ],
        "description":[
            "Description",
            "The u1072 user exit returns a dynamic array, sorted in ascending order.",
            "Each element sorted must be separated by an attribute mark."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "equ am to char(254)\na = \u2019abcd\u2019: am: \u2019zxy\u2019: am: \u2019hijk\u2019: am: 1234: am: 789\nb = oconv(a, \u2019u1072\u2019)",
            "bnow contains:",
            "1234 :am: 789 :am: abcd :am: hijk :am: zxy"
        ]
    },
    {
        "name":"u10b9 user exit",
        "Syntax":[
            "Syntax",
            "intl.format = oconv(american.format, \u2019u10b9{; char}\u2019)\n"
        ],
        "description":[
            "Description",
            "The u10b9 user exit converts American currency punctuation ($1,000.00) to international punctuation (#1.000,00)",
            "The $ is converted to char. If char is not specified, then a blank is assumed.",
            ", (commas) are converted to . (periods).",
            ". (decimal points) are converted to , (commas)."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"u11b6 user exit",
        "Syntax":[
            "Syntax",
            "x = oconv(num.exp, \"u11b6\")\n"
        ],
        "description":[
            "The u11b6 user exit converts a unit expression to a numeric value as defined by the TCL set-units, set-dozens, set-decimal, or set-thousands commands."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            ":set-dozens\n:u bp test\n01 print oconv(5,\"u11b6\")",
            "This program prints the value 60, as 60 = 5 dozen."
        ]
    },
    {
        "name":"u1209 user exit",
        "Syntax":[
            "Syntax",
            "result = oconv(var, \u2019u1209,\u2019:length)\n"
        ],
        "description":[
            "The u1209 user exit breaks a single line of text into multiple lines of text with each line being no longer than  length characters. This function is similar to the t justification in AQL."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"u1a user exit",
        "Syntax":[
            "Syntax",
            "x = oconv(\u2019\u2019, \u2019u1a\u2019)\n"
        ],
        "description":[
            "The u1a user exit returns the tape block size."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"u1f user exit",
        "Syntax":[
            "Syntax",
            "x = oconv(\u2019{n}\u2019, \u2019u1f\u2019)\n"
        ],
        "description":[
            "Description",
            "The u1f user exit returns a string of digits indicating the boot status.",
            "If the n constant is not specified as the input string, then the boot status is cleared. If the first digit is one, then normal monitor shut down has started. If the second digit is one, then normal monitor shutdown completed. If the third digit is one, then a full file-restore has just completed."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"u20b9 user exit",
        "Syntax":[
            "Syntax",
            "american.format = oconv(intl.format, \u2019u20b9\u2019)\namerican.format = oconv(intl.format, \u2019u20b9; char\u2019)\n"
        ],
        "description":[
            "Description",
            "The u20b9 user exit converts international currency punctuation (#1.000,00) to American punctuation ($1,000.00)."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"u21 user exit",
        "Syntax":[
            "Syntax",
            "result = oconv(var, \"u21\")\n"
        ],
        "description":[
            "The u21 user exit converts upper case to lower case."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"u2117 user exit",
        "Syntax":[
            "Syntax",
            "result = oconv(0, \u2019u2117\u2019)\n"
        ],
        "description":[
            "Description",
            "The u2117 user exit returns information about the current process.",
            "The information is returned in a dynamic array.",
            "If the process is not logged on, then  result<1> and  result<2> are empty."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"u21a3 user exit",
        "Syntax":[
            "Syntax",
            "result = iconv(file.ref, \u2019u21a3\u2019)\nvar = oconv(\u2019\u2019, \u2019u21a3\u2019)\n"
        ],
        "description":[
            "Description",
            "The u21a3 user exit opens a file, or reads the next attribute from a file.",
            "If used in an iconv, it opens a file.",
            "If the open was successful, result contains a 1.",
            "If used in an oconv, it reads the next attribute."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "result = iconv(\u2019bp fdisk\u2019, u21a3\u2019)\nvar = oconv(\u2019\u2019, \u2019u21a3\u2019)",
            "Opens the filebp, fdisk, and reads the\nnext attribute into the variable."
        ]
    },
    {
        "name":"u21b6 user exit",
        "Syntax":[
            "Syntax",
            "x = oconv(\u2019\u2019, \"u21b6\")\n"
        ],
        "description":[
            "The u21b6 user exit returns a numeric value representative of the current unit setting defined by the TCL set-units, set-dozens, set-decimal, or set-thousands commands."
        ],
        "parameter":[
            "Parameter(s)",
            "0Units1Dozens2Decimal3Thousands"
        ],
        "example":[
            "Example(s)",
            ":set-dozens\n:u bp test\n01 print oconv(5,\"u21b6\")",
            "This program prints the value 1."
        ]
    },
    {
        "name":"u22 user exit",
        "Syntax":[
            "Syntax",
            "result = oconv(var, \"u22\")\n"
        ],
        "description":[
            "The u22 user exit converts lower case to upper case."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"u222d user exit",
        "Syntax":[
            "Syntax",
            "result = oconv(\"dict file.name item.name\", \"u222d\")\n"
        ],
        "description":[
            "Description",
            "The u222d user exit retrieves the CC pointer item information from binary items.",
            "A null result is returned on any error, such as the file could not be opened, the item did not exist, or the item was not binary and there was no CC pointer information."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"u28 user exit",
        "Syntax":[
            "Syntax",
            "result = oconv(\u2019\u2019, \u2019u28\u2019)\n"
        ],
        "description":[
            "Description",
            "The u28 user exit returns the number of saves that have occurred since the last full restore.",
            "This user exit is used by the file stats portion of the TCL file-save command, and is passed into the AQL selection processor to eliminate files that were not saved on the most recent file-save. It is also used by the TCL list-file-stats command."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "statno = oconv(\u2019\u2019,\u2019u28\u2019)\nexecute \u2019list stat-file with stat# \"\u2019:statno:\u2019\" and with reel# # \"1\" \u2019"
        ]
    },
    {
        "name":"u3060 user exit",
        "Syntax":[
            "Syntax",
            "result = oconv(var, \u2019u3060\u2019)\n"
        ],
        "description":[
            "Description",
            "The u3060 user exit encrypts a character string. The result is always an 8-character hexadecimal string.",
            "This is the same user exit called by the password program.",
            "The accepted practice is to input a string, encrypt it, and compare the two encrypted values for a match."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "a = \"FRED\"\nb = oconv(a, \u2019u3060\u2019)\n(b = 8F7D5A29)\na = \"fred\"\nb = oconv(a, \u2019u3060\u2019)\n(b = D3575E89)"
        ]
    },
    {
        "name":"u3079 user exit",
        "Syntax":[
            "Syntax",
            "pcb.fid = iconv(port.num, \u2019u3079\u2019)\nport.num = oconv(pcb.fid, \u2019u3079\u2019)\n"
        ],
        "description":[
            "Description",
            "The u3079 user exit returns the PCB FID of the current process, or returns the port number of the current process.",
            "If iconv is used, it returns the PCB FID in hexadecimal of the current process.",
            "If oconv is used, it returns the port number of the current process.",
            "If another port is specified, then the port number must be in hexadecimal."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "a = iconv(0, \u2019u3079\u2019)\na is the PCB for port 0 (in hexadecimal).\na = oconv(\u201902c0\u2019, \u2019u3079\u2019)",
            "ais Port 0 for a system with 704 ABS\nframes."
        ]
    },
    {
        "name":"u307a user exit",
        "Syntax":[
            "Syntax",
            "dummy = oconv(time.of.day, \u2019u307a\u2019)\n"
        ],
        "description":[
            "Description",
            "The u307a user exit suspends processing until a specified time.",
            "This user exit is identical to the BASIC sleep and rqm statements."
        ],
        "parameter":[
            "Parameter(s)",
            "time.of.dayTime when the sleep ends. It can be specified in military\ntime format (hh:mm:ss). If not specified, the process sleeps for one\nsecond."
        ],
        "example":[
            "Example(s)",
            "a = oconv(\u201919:00\u2019, \u2019u307a\u2019)",
            "Sleeps until 7:00 PM."
        ]
    },
    {
        "name":"u3090 user exit",
        "Syntax":[
            "Syntax",
            "dummy = oconv(\u2019\u2019, \u2019u3090\u2019)\n"
        ],
        "description":[
            "The u3090 user exit aborts a FlashBASIC or BASIC program."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"u313c user exit",
        "Syntax":[
            "Syntax",
            "result = oconv(\u2019\u2019, \u2019u313c\u2019)\n"
        ],
        "description":[
            "Description",
            "The u313c user exit returns the diskette drive type and density selected.",
            "For Windows: Not supported.",
            "The results are placed in a dynamic array.",
            "result<1> contains the diskette density:",
            "result<2> contains the diskette drive:"
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "result = oconv(\u2019\u2019, \u2019u313c\u2019)\nresult = 2 :am: a",
            "Diskette drive (A) is hi-density 1.2 MB."
        ]
    },
    {
        "name":"u3b user exit",
        "Syntax":[
            "Syntax",
            "line.status = oconv(code, \u2019u3b\u2019)\n"
        ],
        "description":[
            "The u3b user exit returns information about the port."
        ],
        "parameter":[
            "Parameter(s)",
            "line.statusPort information.codeSingle character that describes\nthe type of information requested, followed by the port number to\nexamine.aReturns the ABS base FID.cReturns the CPU units currently used.hReturns the number of pages printed.lReturns the current return stack.pReturns decimal PCB FID.sReturns the hexadecimal PIB status code.",
            "Note:When getting the CPU units, it is necessary to first\nperform anexecuteof:tcl {line} {user}chargesto synchronize thechargesvalue."
        ],
        "example":[
            "Example(s)",
            "result= oconv(\"c\":46, \u2019u3b\u2019)\nprint result\n188",
            "The current CPU charges for port 46 is 188 units."
        ]
    },
    {
        "name":"u352e user exit",
        "Syntax":[
            "Syntax",
            "result = oconv(\u2019\u2019, \u2019u352e\u2019)\n"
        ],
        "description":[
            "The u352e user exit retrieves statistical information about the use of buffers by the D3 monitor. This user exit is for internal usage only."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"u3f user exit",
        "Syntax":[
            "Syntax",
            "results = oconv(str.exp, \u2019u3f\u2019)\n"
        ],
        "description":[
            "Description",
            "The u3f user exit converts an ASCII hexadecimal-format string to binary, and sends it to the printer.",
            "The ASCII hexadecimal characters have to be in matched pairs. If a character with a single digit value (less than x\u201910\u2019) is to be printed, make sure there is a leading zero."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "stuff = \"0D0A0000\"\nx = oconv(stuff,\u2019u3f\u2019)",
            "Sends the hexadecimal string\"0D0A0000\"to the printer (CR\/LF, and 2 nulls for linefeed delay.)"
        ]
    },
    {
        "name":"u4070 user exit",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"u407a user exit",
        "Syntax":[
            "Syntax",
            "dummy = oconv(seconds, \u2019u407a\u2019)\n"
        ],
        "description":[
            "The u407a user exit sets a port to sleep for a specified number of seconds. This is the same as the BASIC sleep statement."
        ],
        "parameter":[
            "Parameter(s)",
            "dummyDummy variable. No data is returned.secondsNumber of seconds for the process to sleep."
        ],
        "example":[

        ]
    },
    {
        "name":"u4117 user exit",
        "Syntax":[
            "Syntax",
            "pcb.fid = oconv(\u2019\u2019, \u2019u4117\u2019)\n"
        ],
        "description":[
            "The u4117 user exit returns the PCB (Process Control Block) in hexadecimal for the current process."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"u413c user exit",
        "Syntax":[
            "Syntax",
            "status = oconv(\u2019\u2019, \u2019u413c\u2019)\n"
        ],
        "description":[
            "The u413c sets the format type to the given format media."
        ],
        "parameter":[
            "Parameter(s)",
            "statusStatus code indicating:0Successful.1Failed2Improper drive"
        ],
        "example":[

        ]
    },
    {
        "name":"u4209 user exit",
        "Syntax":[
            "Syntax",
            "result = oconv(var, \u2019u4209\u2019)\n"
        ],
        "description":[
            "Description",
            "The u4209 user exit parses the input into discrete words.",
            "Each word of the output is separated by attribute marks."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"u47 user exit",
        "Syntax":[
            "Syntax",
            "result = oconv(fid:sep:offset:sep:string, \u2019u47\u2019)\nresult = iconv(fid:sep:offset:sep:string, \u2019u47\u2019)\n"
        ],
        "description":[
            "Description",
            "The u47 user exit writes a string in ASCII or hexadecimal to a specific location in a frame.",
            "If iconv is used the string is written in ASCII. If oconv is used, then the string is written in hexadecimal."
        ],
        "parameter":[
            "Parameter(s)",
            "fidFrame ID.offsetLocation within frame.sepDelimiter such as@am,@vm, or@svm.stringValue to be converted to ASCII or hexadecimal."
        ],
        "example":[

        ]
    },
    {
        "name":"u48 user exit",
        "Syntax":[
            "Syntax",
            "result = oconv(fid:sep:offset:sep:window, \u2019u48\u2019)\nresult = iconv(fid:sep:offset:sep:window, \u2019u48\u2019)\n"
        ],
        "description":[
            "Description",
            "The u48 user exit reads a specific location of a frame and returns the content.",
            "The result will consists of two attributes. Attribute 1 will contain the ASCII value of the content of the frame at the offset specified. Attribute 2 will contain the same string in hexadecimal."
        ],
        "parameter":[
            "Parameter(s)",
            "fidFrame ID.offsetLocation within frame.sepDelimiter such as@am,@vm, or@svm.windowNumber of characters to be returned."
        ],
        "example":[

        ]
    },
    {
        "name":"u50bb user exit",
        "Syntax":[
            "Syntax",
            "result = oconv(\u2019{[a|u|p]}{%pib}\u2019, \u2019u50bb\u2019)\n"
        ],
        "description":[
            "Description",
            "The u50bb user exit returns the port number, user-ID, and current account for this process, just like the TCL who command.",
            "A specific portion of the who information can be requested. If the conversion value begins with the character a, u, or p, then only the account, user, or PIB is returned respectively.",
            "The data for another PIB can be obtained by inserting a % followed by the PIB number in the conversion value."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "In D3,acontains\n0 bob dm if the current user-ID is bob and the current account name\nis dm.",
            "a = oconv(\u2019\u2019, \u2019u50bb\u2019)",
            "acontains the current account.",
            "a = oconv(\u2019a\u2019,\u2019u50bb\u2019)",
            "acontains the user-ID for PIB 3.",
            "a = oconv(\u2019u%3\u2019,\u2019u50bb\u2019)"
        ]
    },
    {
        "name":"u5117 user exit",
        "Syntax":[
            "Syntax",
            "pcb.fid = oconv(\u2019\u2019, \u2019u5117\u2019)\n"
        ],
        "description":[
            "The u5117 user exit returns the PCB in hexadecimal for port 0."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"u5e user exit",
        "Syntax":[
            "Syntax",
            "var = oconv(\u2019\u2019,\u2019u5e\u2019)\n"
        ],
        "description":[
            "The u5e user exit clears the internal BASIC heading and footing so that subsequent heading and footing statements display properly at the top of the next page."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "for i = 1 to 2\n   printer on\n   heading \"report #\":i\n   x = oconv(\"\",\"u5e\")\n   for j = 1 to 55\n      print \"page \":i:\", line \":j\n   next j\n   printer close\n   printer off\nnext i",
            "In this case, the user exit ensures that the heading displays\nat the top of each page. Current heading functionality was preserved\nto maintain compatibility with previous releases."
        ]
    },
    {
        "name":"u60ba user exit",
        "Syntax":[
            "Syntax",
            "result = oconv(\u2019\u2019, \u2019u60ba\u2019)\n"
        ],
        "description":[
            "The u60ba user exit flushes all memory to disk, and shuts down the D3 system."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"u60bb user exit",
        "Syntax":[
            "Syntax",
            "result = oconv(\u2019\u2019, \u2019u60bb\u2019)\n"
        ],
        "description":[
            "Description",
            "The u60bb user exit returns the user-ID and account name of the current process.",
            "See the c and a options for the who command in Terminal Control Language for altering the presentation format of the user-ID and account name."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "a= oconv(\u2019\u2019, \u2019u60bb\u2019)",
            "On D3, a contains bob dm if the current user-ID is bob\nand the current account name is dm."
        ]
    },
    {
        "name":"u6193 user exit",
        "Syntax":[
            "Syntax",
            "results = oconv(str.exp, \u2019u6193\u2019)\n"
        ],
        "description":[
            "The u6193 user exit removes all but the last three characters from the data passed from the variable."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "string = \"abcdefghixyz\"\nstring = oconv(string,\u2019u6193\u2019)",
            "In this example, the result of the conversion call is\nxyz."
        ]
    },
    {
        "name":"u63 user exit",
        "Syntax":[
            "Syntax",
            "result = oconv(value, \u2019u63\u2019)\nresult = iconv(value, \u2019u63\u2019)\n"
        ],
        "description":[
            "Description",
            "The u63 user exit sets\/clears privilege bits.",
            "If iconv is used then the value is set. If oconv is used, then the value is cleared. The result is the value of the bit before it was changed, except when used with the value 0. In this case, the result is undefined.",
            "This user exit is similar to the bitset and bitreset commands on some licensee platforms."
        ],
        "parameter":[
            "Parameter(s)",
            "valueThe bit to be set or cleared.\nmust be one of these:0Entire table.-1Inhibit (like break on\/off, but works like a bit).-2TCL restart.-3Break\/End restart."
        ],
        "example":[

        ]
    },
    {
        "name":"u65 user exit",
        "Syntax":[
            "Syntax",
            "result = oconv(\"\", \u2019u0065\u2019)\n"
        ],
        "description":[
            "Description",
            "The u0065 user exit returns the estimated number of items in the most recently referenced file.",
            "This user exit returns an immediate estimate of the number of items in the file. This estimate is automatically updated by any simple AQL count or select that traverses the entire file, or by the TCL file-save command. Normal insert and delete statement executions also update this estimate, although complete accuracy is not assured because this update is not done under lock.",
            "If the internal estimate has never been updated, then a -1 is returned.",
            "To use this user exit, a file reference to the desired file must be created. A dummy read accomplishes this."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "open \"myfile\"\n.\n.\n* just reference file\nread xx from \"\"\nprint oconv(\"\",\"u65\")"
        ]
    },
    {
        "name":"u6d user exit",
        "Syntax":[
            "Syntax",
            "dummy = oconv(\"\", \u2019u6d\u2019)\n"
        ],
        "description":[
            "The u6d user exit sends shutdown message."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"u7000 user exit",
        "Syntax":[
            "Syntax",
            "item.size = oconv(\u2019file.name item-ID\u2019, \u2019u7000\u2019)\n"
        ],
        "description":[
            "The u7000 user exit returns the size of an item."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"u70ba user exit",
        "Syntax":[
            "Syntax",
            "dummy = oconv(\u2019\u2019, \u2019u70ba\u2019)\n"
        ],
        "description":[
            "The u70ba user exit forces the system to restart."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"u71 user exit",
        "Syntax":[
            "Syntax",
            "code = oconv(n, \"u71\" )\n"
        ],
        "description":[
            "The u71 user exit sets the HAForceCheck option programmatically. See the Host Authentication topic in the System Administration Guide for more information on host authentication."
        ],
        "parameter":[
            "Parameter(s)",
            "nCan be one of the following numberic\nvalues:0Disables theHAForceCheckoption.1Enables theHAForceCheckoption.2Returns the current setting for theHAForceCheckoption.",
            "If the value is changed, the change lasts until the line\nexits. The next connection to that line will use the defaultHAForceCheckvalue:",
            "UNIX:HAForceCheckis disabledWindows:The current setting as specified from the\nD3 Device Manager."
        ],
        "example":[
            "Example(s)",
            "This example illustrates using\ntheu71user exit to changeHAForceCheckat runtime.",
            "Suppose you want your application to manage whether\nor not a user will be prompted for logon credentials, but would still\nlike to utilize Host Authentication when a challenge is required.\nTo implement this configuration, make sure the defaultHAForceCheckvalue is disabled, which will send telnet users straight to the\nD3 md prompt without challenging for logon credentials. The user macro\nin the users item should run your application. In other words, the\nuser does not get access to TCL. Your application will do whatever\nchecks you want it to do to test whether the user will be challenged.",
            "For example:",
            "Test ifoconv( \"2\", \"u71\" )returns 1,\nwhich meansHAForceCheckis already set, implying\nthat credentials were already checked and the user can proceed.Identify the IP address from which the user connected. On\nWindows this may be accomplished by usingnt_pinfo, and on Unix by using!d3 qn(note that the success\nor failure of this technique is dependent upon the terminal emulator\nused and\/or other factors).If you deem the address as trusted, the application continues\nas normal.If you deem the address as untrusted, or if the IP address\nwas not successfully retrieved, the application will perform anoconv( \"1\", \"u71\" )to enable theHAForceCheckflag and thenchain \"off\". This time around,\nthe user will be challenged for logon credentials before being granted\naccess to D3 andoconv( \"2\", \"u71\" )will return\n1 because you had setHAForceCheck."
        ]
    },
    {
        "name":"u7193 user exit",
        "Syntax":[
            "Syntax",
            "results = oconv(str.exp, \u2019u7193\u2019)\n"
        ],
        "description":[
            "Description",
            "The u7193 user exit converts the American date format (mm\/dd\/yy) to international format (dd\/mm\/yy).",
            "Month, day and year must all be 2-digit numbers."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "date = \"11\/06\/01\"\nintl.date = oconv(date,\u2019u7193\u2019)",
            "At the end of this operation,intl.datecontains\"06\/11\/01\"."
        ]
    },
    {
        "name":"u8194 user exit",
        "Syntax":[
            "Syntax",
            "result = oconv(\"\", \u2019u819f\u2019)\n"
        ],
        "description":[
            "The u8194 user exit returns the number of items selected by the most previous select."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"u83 user exit",
        "Syntax":[
            "Syntax",
            "result = oconv(group.fid, \u2019u83\u2019)\n"
        ],
        "description":[
            "The u83 user exit sets a group lock."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"u84 user exit",
        "Syntax":[
            "Syntax",
            "result = oconv(group.fid, \u2019u84\u2019)\n"
        ],
        "description":[
            "The u84 user exit clears a group lock from the group lock table."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"u86 user exit",
        "Syntax":[
            "Syntax",
            "root.fid = oconv(fid.list<vx>,\u2019u86\u2019)\n"
        ],
        "description":[
            "The u86 user exit sets the root fid of the index."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"u90 user exit",
        "Syntax":[
            "Syntax",
            "fofnum = oconv(\"\", \u2019u90\u2019)\n"
        ],
        "description":[
            "Description",
            "The u90 user exit returns the file of files number for the file most previously referenced in the FlashBASIC or BASIC program.",
            "This user exit is used by the get-fof command.",
            "The user must open the desired file before using this user exit."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"u90e3 user exit",
        "Syntax":[
            "Syntax",
            "result = oconv(var, \u2019u90e3\u2019)\n"
        ],
        "description":[
            "Description",
            "The u90e3 user exit flips the parity bit on the input.",
            "This user exit is useful for reading or writing some licensee compatible tapes."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"u91 user exit",
        "Syntax":[
            "Syntax",
            "oconv(\"\", \u2019u0091\u2019)\noconv(\"var.name\", \"u0091\")\noconv(\"var.name^var.value\", \"u0091\")\noconv(\"var.name]\", \"u0091\")\n"
        ],
        "description":[
            "Description",
            "The u0091 user exit reads and writes D3 shell variables.",
            "The first form returns a list of all active user shell variables (not including their values).",
            "The second form returns the value of a specific variable.",
            "The third form sets the value of a specific variable. Note that unlike the retrieval forms, the user should avoid the @$ prefix before the variable name. The ^ symbol indicates an attribute mark.",
            "The fourth form deletes a shell variable. As with the third form, the user should avoid the @$ prefix before the variable name. The ] symbol indicates a value mark.",
            "This user exit is used by the TCL set, unset, and penv commands."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"u9116 user exit",
        "Syntax":[
            "Syntax",
            "dummy= oconv(\u2019port.num, user-ID{,user.password},\naccount.name{,account.password}\u2019, \u2019u9116\u2019)\n"
        ],
        "description":[
            "Description",
            "The u9116 user exit logs on a given port.",
            "This is the same as logon."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "a = oconv(\u20193, SYSPROG\u2019, \u2019u9116\u2019)",
            "Logs on port3toSYSPROG"
        ]
    },
    {
        "name":"u92 user exit",
        "Syntax":[
            "Syntax",
            "iconv(str, \u2019u92\u2019)\noconv(str, \u2019u92\u2019)\n"
        ],
        "description":[
            "Description",
            "The u92 user exit follows the links of a frame.",
            "The format of str is as follows:",
            "If  loop.count is not specified, then the user exit traverses links until it encounters a 0 value.",
            "The iconv version scans forwards, while the oconv version scans backwards."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"u98 user exit",
        "Syntax":[
            "Syntax",
            "links = oconv(fid, \u2019u98\u2019)\n"
        ],
        "description":[
            "The u98 user exit retrieves the links for the specified fid."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "crt oconv('24601','u98')",
            "Returns a string in the format:",
            "NumberOfBackwardLinksAMBackwardLinkAMForwardLinkAMNumberOfForwardLinks",
            "whereAMis an attribute mark."
        ]
    },
    {
        "name":"ua116 user exit",
        "Syntax":[
            "Syntax",
            "a = oconv(port, \u2019ua116\u2019)\n"
        ],
        "description":[
            "The ua116 user exit logs of the specified  port."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "a = oconv(\u20196\u2019, \u2019ua116\u2019)",
            "Logs off port6."
        ]
    },
    {
        "name":"ub070 user exit",
        "Syntax":[
            "Syntax",
            "result = oconv(var, \u2019ub070\u2019)\n"
        ],
        "description":[
            "The ub070 user exit returns the absolute value of a variable, stripping the leading \u2013, if any."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"ub0ba user exit",
        "Syntax":[
            "Syntax",
            "str = oconv(memory.address, \u2019ub0ba\u2019)\n"
        ],
        "description":[
            "The ub0ba user exit reads one string of memory. The string that is returned must be pre-allocated prior to running oconv."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "memory.address<1>= \u201940000000\u2019Address in hexadecimalmemory.address<2>= \u2019100\u2019Number of decimal bytes to readstr= space<n>str= oconv (memory.address, \u2019ub0ba\u2019)byteContains the contents of memory\nlocation 0000:09e6.",
            "Warning:Failure to follow this syntax results\nin a monitor halt."
        ]
    },
    {
        "name":"uc0ba user exit",
        "Syntax":[
            "Syntax",
            "dummy = oconv(memory.location, \u2019uc0ba\u2019)\n"
        ],
        "description":[
            "Description",
            "The uc0ba user exit writes a value into a memory address.",
            "The memory location 0000:09e6 now contains the value 0x0001."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"ud0ba user exit",
        "Syntax":[
            "Syntax",
            "char = oconv(port.num, \u2019ud0ba\u2019)\n"
        ],
        "description":[
            "Description",
            "The ud0ba user exit reads a character byte from a serial port."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"ue0ba user exit",
        "Syntax":[
            "Syntax",
            "dummy = oconv(port.num, \u2019ue0ba\u2019)\n"
        ],
        "description":[
            "Description",
            "The ue0ba user exit writes a character byte out to a serial port."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"uf070 user exit",
        "Syntax":[
            "Syntax",
            "var = oconv(function, \u2019uf070\u2019)\n"
        ],
        "description":[
            "Description",
            "The uf070 user exit starts and stops multiuser mode, and returns information about the number of serial ports, PIBs, phantom PIBs, licensed users, users logged on, and the maximum number of users that can log on.",
            "Setting the system in single-user mode prevents more users from being able to log on. Users currently logged on are not affected.",
            "The returned string consists of six values in this order:",
            "There can be more ports than licensed users."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "x = oconv(\"\", \"UF070\")\nprint \"The current number of users is: \":xtd(x<5>)"
        ]
    },
    {
        "name":"xsuex user exit",
        "Syntax":[
            "Syntax",
            "lresult = oconv(xscmdappend: @am : hxstring: @am : sstring, xsuex)\n"
        ],
        "description":[
            "Description",
            "The xsuex user exit obtains and manipulates external strings, allowing the caller (likely non-FlashBASIC) to store data without writing to a file or storing it in BASIC string space.",
            "External strings exist outside of FlashBASIC or BASIC and are called with the create command. This prompts the system to return a handle, which is then used for append, clear, delete, and get operations.",
            "External strings can be shared and are persistent (even after rebooting).",
            "The general syntax for this user exit is:",
            "where  xscmdcommand is the specified command (either append, clear, create, delete, or get) prefixed by the literal xscmd.",
            "There are five command-specific forms for this user exit, each performing a specific task. They are:",
            "append",
            "The append form attaches a specified string to the specified external string.",
            "External strings improve performance by maintaining a pointer at the end of the string. This facilitates rapid appends since they can quickly jump to the end of the string. Furthermore, when extra space is required, it can be quickly linked to the end of the string.",
            "External strings are most effectively used to build large strings by repeatedly appending smaller strings, especially when the resulting string is to be used only after being completely built (for example, in operations using multiple append calls and few get calls)."
        ],
        "parameter":[
            "Parameter(s)",
            "lresultReturn code.hxstringHandle of the external string to be appended (obtained from\nacreatecommand).sstringSpecifies the string to attach to the external string.",
            "clear",
            "Theclearform clears\nan external string."
        ],
        "example":[
            "Example(s)",
            "This program pauses at each step.\nPress any key to move to the next step.",
            "include dm,bp,includes xs.inc\n\u00a0\nprint\nprint \"allocating an external string.\"\nin k\nhxstring = oconv(xscmdcreate, xsuex)\nprint \"handle = '\" : hxstring : \"'\"\n\u00a0\ngosub showit\n\u00a0\nprint\nprint \"appending 500 bytes.\"\nin k\nlresult = oconv(xscmdappend : @am : hxstring : @am : str(\"!\", 500), xsuex)\nprint \"lresult = '\" : lresult : \"'\"\n\u00a0\ngosub showit\n\u00a0\ngosub clearit\n\u00a0\ngosub showit\n\u00a0\nprint\nprint \"appending 250 bytes.\"\nin k\nlresult = oconv(xscmdappend : @am : hxstring : @am : str(\"@\", 250), xsuex)\nprint \"lresult = '\" : lresult : \"'\"\n\u00a0\ngosub showit\n\u00a0\nprint\nprint \"appending 10000 bytes.\"\nin k\nlresult = oconv(xscmdappend : @am : hxstring : @am : str(\"#\", 10000), xsuex)\nprint \"lresult = '\" : lresult : \"'\"\n\u00a0\ngosub showit\n\u00a0\ngosub clearit\n\u00a0\ngosub showit\n\u00a0\nprint\nprint \"appending 3000 bytes.\"\nin k\nlresult = oconv(xscmdappend : @am : hxstring : @am : str(\"$\", 3000), xsuex)\nprint \"lresult = '\" : lresult : \"'\"\n\u00a0\ngosub showit\n\u00a0\nprint\nprint \"appending 6000 bytes.\"\nin k\nlresult = oconv(xscmdappend : @am : hxstring : @am : str(\"%\", 6000), xsuex)\nprint \"lresult = '\" : lresult : \"'\"\n\u00a0\ngosub showit\n\u00a0\nprint\nprint \"deleting.\"\nin k\nlresult = oconv(xscmddelete : @am : hxstring, xsuex)\nprint \"lresult = '\" : lresult : \"'\"\n\u00a0\ngosub showit\n\u00a0\nprint\nprint \"deleting again.\"\nin k\nlresult = oconv(xscmddelete : @am : hxstring, xsuex)\nprint \"lresult = '\" : lresult : \"'\"",
            "gosub showit\n\u00a0\nprint\nprint \"issuing bad command.\"\nin k\nlresult = oconv(\"999\", xsuex)\nprint \"lresult = '\" : lresult : \"'\"\nprint\nprint \"issuing get with bad handle.\"\nin k\nlresult = oconv(xscmdget : @am : \"0\", xsuex)\nprint \"lresult = '\" : lresult : \"'\"\nstop\n\u00a0\nclearit:\n\u00a0\nprint\nprint \"clearing.\"\nin k\nlresult = oconv(xscmdclear : @am : hxstring, xsuex)\nprint \"lresult = '\" : lresult : \"'\"\n\u00a0\nreturn\n\u00a0\nshowit:\nprint\nprint \"getting string.\"\nin k\nsresult = oconv(xscmdget : @am : hxstring, xsuex)\nprint \"sresult = '\" : sresult : \"', len(sresult) = '\" : len(sresult) : \"'\"\n\u00a0\nreturn\n\u00a0\nend"
        ]
    },
    {
        "name":"FlashBASIC C functions",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"FlashBASIC C functions overview",
        "Syntax":[
            "Syntax",
            " {variable =}{(type)}%function({{(type)} arg0{,...{(type)} argn}})\n"
        ],
        "description":[
            "C functions can be called from a FlashBASIC program or subroutine using a syntax similar to that of normal C.",
            "For Windows: The FlashBASIC program or subroutine must be compiled with     the optimized (o option.",
            "Commonly used functions are included in the run time package and require no special linking.     These functions are referred to as built-in functions. A user-defined function can     also be included in a FlashBASIC application by linking it with the monitor, thus making a     user-defined built-in function.",
            "C function calls can be embedded in FlashBASIC expressions, FlashBASIC statements or can be     used as arguments to other C function calls. Combined size of all parameters passed cannot     exceed 32 KB. This size can be changed, however, by the TCL set-cmem     command.",
            "FlashBASIC expressions and FlashBASIC statements should not be used as arguments to     FlashBASIC C functions.",
            "If a type specifier is omitted before an argument name, the argument is     assumed to be of type integer when arg is a number, or to be of type pointer     when arg is a dynamic array (string). If type is omitted     before the function name, the function is assumed to be of type integer.",
            "arg0...argn are the optional arguments to the function; up     to 15 arguments are supported.",
            "The return type of a function is void if the function is not part of an assignment statement     or used as an argument to another C function or FlashBASIC statement. Whenever the return value     of a function can be neglected, the type can be overridden by (void).",
            "When a call to a function is made:",
            "If a C function tries to modify a string beyond the end of the string, the string is       truncated to its original size, but no error is reported. As is usual in C, no data       translation occurs implicitly.",
            "When assigned to a FlashBASIC       variable, a pointer can only be passed to another C function or be tested for the value 0       (null pointer), anything other than this makes no sense. The following statement has       unpredictable results:",
            "The only valid form is to test for ptr = 0 or ptr #     0.",
            "These argument types are supported:",
            "All types, except pointers can be prefixed by the keyword unsigned, (unsigned char, for example).",
            "Dimensioned arrays of integers can be passed to an external C function. When the array is passed, the C function receives a pointer to the array and all the integers in the array are divided by the precision factor. If the array is multidimensional, the integers are organized column by column. For example, if we have an array that is dimensioned to (2, 5) in FlashBASIC, the values in the C array would be in this order: (1, 1), (2, 1), (1, 2), (2, 2), (1, 3), (2, 3), and so on.",
            "These function types are supported:",
            "The C unary operator, &, is used to pass the address of an integer to an external C\u00a0function. This is the only valid form. Note that FlashBASIC converts numbers that are too large into strings. In this case, the C function would receive a pointer to a character instead of a pointer to an integer.",
            "When a FlashBASIC variable (a dynamic array or an element of a one or two-dimensional array) is used to store data returned by a call to a C function (by means of a pointer passed as an argument), the FlashBASIC variable must have been assigned a size before the call to the function. This needs to be done because C has no notion of dynamic arrays. If a size is not assigned before the result of a C\u00a0function call is stored in the variable, the data is truncated. For example:",
            "This reserves at least size bytes for var. size can be a constant or an expression. var can be a dynamic array or an element of a one or two-dimensional array. After reserving space for var, the content of the variable is undefined.",
            "If a string longer than size is assigned to a variable, it is truncated and the characters beyond the given size are ignored. If a string shorter than size is assigned to a variable, the remainder of the char buffer remains undefined. The content of the buffer, including how it is terminated, is determined by the function. A terminator is not automatically added.",
            "The buffer should not be used for any purpose other than as a C function call parameter. Doing so may change the internal format of the variable such that it is no longer a char buffer. If the data in the buffer needs further processing by BASIC, it should be copied to another variable and the copy used. For an example, see the %read() function example code.",
            "When using user-defined built-in functions, static data     defined as part of a user-defined function remains valid as long as the D3 process is not     disconnected from the virtual machine. This is true even if the FlashBASIC program is finished     executing and has returned to TCL. The scope of static data lasts longer than in conventional     UNIX or Windows programs.",
            "Because static data takes up space in the data section of each     D3 process (therefore main memory), it is not advisable to have large amounts of static     space.",
            "The following header files are provided in the file bp,unix.h, in     the dm account.",
            "These rules apply when making a call to a C function:"
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"FlashBASIC C functions list",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"%accept() function",
        "Syntax":[
            "Syntax",
            "code = %accept(fd, &address, &port)\n"
        ],
        "description":[
            "Description",
            "The %accept() function extracts the first connection on the queue of pending connections, creates a new socket, and allocates a new file descriptor.",
            "To compile successfully, the statement cfunction socket.builtin must be included in the source code.",
            "Upon successful completion, the new file descriptor is returned in code and the address and port FlashBASIC variables are updated.",
            "In the case of an error, a value of -1 is returned and the FlashBASIC system(0) function is set to the value of  errno.",
            "A legal integer value must be assigned to the port variable and a legal integer value (IPv4) or char array (IPv6)must be assigned to the address variable before the call."
        ],
        "parameter":[
            "Parameter(s)",
            "fdFile descriptor of the local socket returned by a previous\ncall to the FlashBASIC C function%socket().addressOriginating address of the incoming call.For IPv4 implementations:Theaddressargument must be an integer.For IPv6 implementations:Theaddressargument\nmust be achar[xx]wherexxspecifies a buffer size of at least 46.portOriginating port number or the incoming call."
        ],
        "example":[
            "Example(s)",
            "IPv4 Example:",
            "cfunction socket.builtin\ninclude dm,bp,includes sysid.inc\ninclude dm,bp,unix.h socket.h\n* Create a socket\nfd=%socket(af$inet, sock$stream, 0)\n* Bind the socket to a local Ethernet port.\n* Use default address.\nif %bind(fd, af$inet, inaddr$any, 1024)<0 then\ncrt \u2019bind failed\u2019; stop\nend\n* Wait for incoming connection\n%listen(fd, 1)\n* Accept a connection\naddress=0; port=0\nrd2=%accept(fd, &address, &port)\ncrt \"Called by address \":address:\", port #\":port\n* Read data from the data link\n%recv(fd2, buffer, 1024)\n%closesocket(fd2)\n%closesocket(fd)",
            "IPv6 Example:",
            "cfunction socket.builtin\ninclude dm,bp,includes sysid.inc\ninclude dm,bp,unix.h socket.h\n* Create a socket\nfd=%socket(af$inet6, sock$stream, 0)\n* Bind the socket to a local Ethernet port.\n* Use default address.\nif %bind(fd, af$inet6, inaddr$any, 1024)<0 then\n   crt \"bind failed\"; stop\nend\n* Wait for incoming connection\nfd2sten(fd, 1)\n* Accept a connection\nchar address[46]\nport=0\nfd2=%accept(fd, &address, &port)\ncrt \"Called by address \":address:\", port #\":port\n* Read data from the data link\n%recv(fd2, buffer, 1024)\n%closesocket(fd2)\n%closesocket(fd)"
        ]
    },
    {
        "name":"%accept_ssl() function",
        "Syntax":[
            "Syntax",
            "code = %accept_ssl(fd, &address, &port, certificate_file, privkey_file, &ssl_fd);\n"
        ],
        "description":[
            "Description",
            "The %accept_ssl() function first calls the          %accept() function to extract the first connection on the queue of       pending connections, and then creates a new socket.",
            " Thereafter, the function will wait for a TLS\/SSL Client to initiate the TLS\/SSL             handshake, and then create a secure SSL connection.",
            "To compile successfully, the statement cfunction socket.builtin must be included in the source code.",
            "On successful completion, a value of 0 is returned in code and the                address, port and ssl_fd             FlashBASIC variables are updated.",
            "In the case of an error, the return code is a negative value. The following table lists all of             the error return codes:",
            "A legal integer value must be assigned to the port variable, and a legal integer value (IPv4) or char array (IPv6) must be assigned to the address variable before the call."
        ],
        "parameter":[
            "Parameter(s)",
            "fdFile descriptor of the local socket returned by a previous\ncall to the FlashBASIC C function%socket().addressOriginating address of the incoming call.portOriginating port number of the incoming call.certificate_fileCertificate file to be used bySSL_CTX_use_certificate_file. See your\n                        OpenSSL documentation for more information.For UNIX, you must specify\n                           the full path for the certificate file.privkey_filePrivate key file to be used bySSL_CTX_use_PrivateKey_file. See your\n                        OpenSSL documentation for more information.ssl_fdFile descriptor of the secure connection."
        ],
        "example":[
            "Example(s)",
            "include dm,bp,includes sysid.inc\ninclude dm,bp,unix.h socket.h\n* Create a socket\nfd=%socket(af$inet6, sock$stream, 0)\n* Bind the socket to a local Ethernet port.\n* Use default address.\nif %bind(fd, af$inet6, inaddr$any, 1024)<0 then\n   crt \"bind failed\"; stop\nend\n* Wait for incoming connection\n%listen(fd, 1)\n* Accept a connection\naddress=0; port=0; ssl_fd = 0\ncert.file = \"server.pem\"\nprivkey.file = \"server.pem\"\nfd2=%accept_ssl(fd, &address, &port, cert.file,\nprivkey.file, &ssl_fd)\nif fd2 < 0 then stop\ncrt \"Called by address \":address:\", port #\":port\n* Read data from the established secure socket link\nchar buffer[24]\ncode = %read_ssl(ssl_fd, buffer, 24)\nif code < 0 then stop\ncrt \"READ: \":buffer\ncode = %write_ssl(ssl_fd,\"I hear you\",10)\nif code < 0 then stop\n* close the connection\ncode = %close_ssl(fd2, &ssl_fd)\ncode = %closesocket(fd)\nend"
        ]
    },
    {
        "name":"%accept_starttls() function",
        "Syntax":[
            "Syntax",
            "code = %accept_starttls(fd, &address, certificate_file, privkey_file, &SSL);\n"
        ],
        "description":[
            "Description",
            "The %accept_starttls function provides the ability to elevate an       unsecured connection to a secured connection. ",
            "The %accept_starttls function is supported on D3 Windows and D3             Linux.",
            "The Server, accepting connections from a Client, uses the %accept             function for accepting an unsecured connection from a Client. Then, the Server uses the                %accept_starttls function for elevating the received connection to             a secured connection. ",
            "The server code initially calls the %accept function to establish an             unsecured connection. The Server then calls the %accept_starttls             function to elevate the unsecured connection to a secured connection. This function             negotiates with the Client by sending and receiving messages on the socket to specify if             the Server supports STARTTLS. If the Server supports STARTTLS and the Client chooses to             use STARTTLS, the Client negotiates with the Server to use STARTTLS. The Server then             calls the %accept_starttls function to elevate the unsecured             connection to a secured connection. ",
            "The %accept_starttls function provides similar functionality to the                %accept_ssl function, except the embedded call to the                %accept function has been removed. When calling the                %accept_starttls function, the connection must have been             previously established by using the %accept function. ",
            "When using the %accept_starttls function, the sock             and addr parameters that are returned by the                %accept function must be passed to the                %accept_starttls function in the acceptfd and                acceptaddr parameters."
        ],
        "parameter":[
            "Parameter(s)",
            "fdFile descriptor of the local socket returned by a previous call to the\n                        FlashBASIC C function%accept().addressOriginating address of the incoming call. This should be the same\n                        address used for the%accept()function.certificate_fileCertificate file to be used bySSL_CTX_use_certificate_file. See your OpenSSL\n                        documentation for more information.For UNIX, you must specify the full\n                           path for the certificate file.privkey_filePrivate key file to be used bySSL_CTX_use_PrivateKey_file. See your OpenSSL\n                        documentation for more information.SSLReturn value for the SSL handle."
        ],
        "example":[
            "Example(s)",
            "Example 1",
            "UNIX: Server code for elevating unsecured connection to secured connection using\n            the%acceptand%accept_starttlsfunctions:",
            "cfunction socket.builtin\ninclude dm,bp,includes sysid.inc\ninclude dm,bp,unix.h socket.h\ninclude dm,bp,unix.h errno.h\n*\nSOCKFD = %socket(AF$INET, SOCK$STREAM, 0)\nIF SOCKFD = -1 THEN\nCRT \"Getting soxket failed\"\nSTOP\nEND\n*\nHOST = \"irv-vm-rh64b01\"\nCERT.FILE = \"\/home\/pick\/10.2\/server.pem\"\nKEY.FILE = \"\/home\/pick\/10.2\/ server.pem\"\nPORT = 9050\nSSL = 0\nACCEPTADDR = 0\n*\n\n    Bind the socket to the ethernet port\n    ------------------------------------\n    bp=0\n    bp=%bind( sockfd, AF$INET, INADDR$ANY, port )\n    if bp<0 then\n    errno=system(0)\n    errmsg=\"Bind err=\":errno\n    crt 'bind failed error: ':errmsg\n    %close( sockfd)\n    stop\n    end\n    *\n    n=%listen( sockfd, 5 )\n    if n<0 then\n    errno=system(0)\n    errmsg=\"Listen err=\":errno\n    crt 'listen failed error: ':errmsg\n    %close( sockfd)\n    stop\n    end\n    ACCEPTADDR = STR(CHAR(0), 127) ;* sizeof(struct sockaddr_storage)\n    ACCEPTFD = %accept(SOCKFD, &ACCEPTADDR, &PORT)\n    IF ACCEPTFD < 0 THEN\n    CRT \"Accept failed\"\n    %close(SOCKFD)\n    STOP\n    END\n    *\n    RESULT = %accept_starttls(ACCEPTFD,&ACCEPTADDR,CERT.FILE,KEY.FILE,&SSL)\n    IF RESULT < 0 THEN\n    CRT \"SSL connection to \":HOST:\" failed\"\n    CRT \"SSL accept failed\"\n    %close(SOCKFD)\n    STOP\n    END\n    *\n    %close(SOCKFD)\n    *\n    CRT \"SSL accept successful\"\n    STOP",
            "Example 2",
            "Windows: Server code for elevating unsecured connection to secured connection\n            using the%acceptand%accept_starttlsfunctions:",
            "cfunction socket.builtin\ninclude dm,bp,includes sysid.inc\n*\nPLATFORM = SYSTEM(38)\nWINDOWS.BASED = (PLATFORM<SYS$IMP> = SYS$NT)\nAF$INET = 2 + 0; * internetwork: UDP, TCP, etc\nSOCK$STREAM = 1 + 0; * stream socket\nINADDR$ANY = 0 ;\n*\nSOCKFD = %socket(AF$INET, SOCK$STREAM, 0)\nIF SOCKFD = -1 THEN\nCRT \"Getting soxket failed\"\nSTOP\nEND\n*\nHOST = \"irv-vm-w10dd01\"\nCERT.FILE = \"server.pem\"\nKEY.FILE = \"server.pem\"\nPORT = 9050\nSSL = 0\nACCEPTADDR = 0\n*\n\n    Bind the socket to the ethernet port\n    ------------------------------------\n    bp=%bind( sockfd, AF$INET, INADDR$ANY, port )\n    if bp<0 then\n    crt \"Bind failed\"\n    %CLOSESOCKET( SOCKFD )\n    STOP\n    END\n    *\n    n=%listen( sockfd, 5 )\n    if n<0 then\n    CRT \"Listen failed\"\n    %CLOSESOCKET( SOCKFD )\n    STOP\n    END\n    *\n    ACCEPTADDR = STR(CHAR(0), 127) ;* sizeof(struct sockaddr_storage)\n    ACCEPTFD = %accept(SOCKFD, &ACCEPTADDR, &PORT)\n    IF ACCEPTFD < 0 THEN\n    CRT \"Accept failed\"\n    %CLOSESOCKET( SOCKFD )\n    STOP\n    END\n    *\n    RESULT = %accept_starttls(ACCEPTFD,&ACCEPTADDR,CERT.FILE,KEY.FILE,&SSL)\n    IF RESULT < 0 THEN\n    CRT \"SSL accept failed\"\n    %CLOSESOCKET( SOCKFD )\n    STOP\n    END\n    *\n    %CLOSESOCKET( SOCKFD )\n    *\n    CRT \"SSL accept successful\"\n    STOP"
        ]
    },
    {
        "name":"%alarm() function",
        "Syntax":[
            "Syntax",
            "var = %alarm(num)\n"
        ],
        "description":[
            "Description",
            "The %alarm() function instructs the alarm clock of the calling process to send the signal SIGALRM to the calling process.",
            "For Windows: Not Supported",
            "The default alarm handler is null (that is, it just interrupts the process). If num is 0, any previous alarm request is canceled. If a user-written built-in function changes the alarm signal handler, it remains in effect, even if the FlashBASIC program terminates, until the process is disconnected from the virtual machine.",
            "The alarm signal handler can be assigned to any D3 statement using the TCL trap command.",
            "To differentiate between an alarm and another interrupt, the FlashBASIC program may have to check the time. See the example below."
        ],
        "parameter":[
            "Parameter(s)",
            "numNumber of seconds before the signal is sent."
        ],
        "example":[
            "Example(s)",
            "* Set a timer\nalarmend=time()+3\n%alarm(3)\n* Read from device\nn=%recv(fd, buffer, bufsize)\nif n<0 and system(0)=eintr then\n   * Read was interrupted\n   if time() >= alarmend then\n      * Was the timer\n      stop \"time out\"\n   end else\n      * Not the timer. Disarm it\n      %alarm(0)\n   end\nend else\n   * Read completed. Cancel timer\n   %alarm(0)\nend"
        ]
    },
    {
        "name":"%bind() function",
        "Syntax":[
            "Syntax",
            "code = %bind(fd, addr.family, address, port)\n"
        ],
        "description":[
            "Description",
            "The %bind() function binds a socket to a named resource. In case of a       network, the resource would be an access point into the system.",
            "To compile successfully, the statement cfunction socket.builtin must be included in the source code.",
            "On successful completion, a value of 0 is returned in code. ",
            "In case of an error, -1 is returned and the FlashBASIC system(0)             function is set to the value of  errno."
        ],
        "parameter":[
            "Parameter(s)",
            "fdFile descriptor of the local socket returned by a previous\ncall to the FlashBASIC C function%socket().addr.familySpecifies the addressing scheme used by the protocol. This field must match the address\n                        family used when creating the socket.Valid values are defined in the\n                           include file:dm,bp,unix.h socket.haddressLegal values are defined in the include file:dm,bp,unix.h\nsocket.h.portPort number on the local host. The legal value for this field depends on the protocol.On\n                           TCP\/IP, for example, valid port numbers are from 1024 to 32767. This\n                           field might not be applicable for all protocols."
        ],
        "example":[
            "Example(s)",
            "cfunction socket.builtin\ninclude dm,bp,includes sysid.inc\ninclude dm,bp,unix.h socket.h\n* Create a socket\nfd=%socket(af$inet, sock$stream, 0)\n* Bind the socket to a local Ethernet port.\n* Use default address.\nif %bind(fd, af$inet, inaddr$any, 1024)<0 then\n   crt \u2019bind failed\u2019; stop\nend\n* Wait for incoming connection\n%listen(fd, 1)\n* Accept a connection\naddress=0; port=0\nrd=%accept(fd, &address, &port)\n* Read data from the data link\nchar buffer[128]\n%recv(rd, buffer, 1024)"
        ]
    },
    {
        "name":"%calloc() function",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"%chdir() function",
        "Syntax":[
            "Syntax",
            "var = %chdir(str)\n"
        ],
        "description":[
            "Description",
            "The %chdir() function changes the current directory to the one specified in  str.",
            "A -1 returned from this function indicates an error condition."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "if %chdir(\u2019\/usr\/pick\u2019) = -1 then crt \u2019errno=\u2019:system(0)",
            "If an error occurs, the error message displays fromsystem(0)function."
        ]
    },
    {
        "name":"%chmod() function",
        "Syntax":[
            "Syntax",
            "var = %chmod(str, mode)\n"
        ],
        "description":[
            "Description",
            "The %chmod() function changes the mode of the file str to the value specified in mode.",
            "For Windows: Not Supported",
            "The valid values for mode are in the include file: mode.h. Combinations of the modes are obtained by adding several elementary mode values together."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "include dm,bp,unix.h mode.h\nfilename = \"\/tmp\/myfile\"\nn=%chmod(filename,S$IRUSR+S$IWUSR+S$IRGRP+S$IWGRP)"
        ]
    },
    {
        "name":"%chown() function",
        "Syntax":[
            "Syntax",
            "var = %chown(str, owner, group)\n"
        ],
        "description":[
            "The %chown() function changes the owner-ID and group-ID of the file str to the values specified in owner and group respectively.",
            "For Windows: Not Supported"
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "if %chown(\"\/tmp\/ap.log\", 2000, 0) < 0 then\n   crt \u2019Cannot change owner\u2019; stop\nend"
        ]
    },
    {
        "name":"%close() function",
        "Syntax":[
            "Syntax",
            "var = %close(file.descriptor)\n"
        ],
        "description":[
            "The %close() function closes the UNIX file specified by file.descriptor returned by a previous call to %open(), %creat(), %dup(), %socket(), or %accept().",
            "All host OS files opened from a FlashBASIC program are closed automatically at main program termination. However, it is a safe practice to close files explicitly."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "if %close(fd) then\n   crt \u2019Cannot close file\u2019\n   stop\nend",
            "Note the use of the implicit (void) casting by not including\nthe statement as part of an assignment. The return code of the close\nis thrown away."
        ]
    },
    {
        "name":"%close_ssl() function",
        "Syntax":[
            "Syntax",
            "var = %close_ssl(fd, ssl_fd)\n"
        ],
        "description":[
            "The %close_ssl function closes the socket specified by the fd file descriptor, as well as the secure connection specified by the ssl_fd descriptor. The fd file descriptor is returned by a previous call to %socket whereas the ssl_fd descriptor is returned buy a previous call to %accept_ssl() or %connect_ssl.",
            " "
        ],
        "parameter":[
            "Parameter(s)",
            "fdFile descriptor of the local socket returned by a previous\ncall to the FlashBASIC C function%socket().ssl_fdFile descriptor of the Secure connection."
        ],
        "example":[
            "Example(s)",
            "if %close_ssl(fd, ssl_fd) then\n   crt \u201cclose error\u201d\nstop",
            "Note the use of the implicit (void) casting by not including\nthe statement as part of an assignment. The return code of the close\nis thrown away."
        ]
    },
    {
        "name":"%closeall() function",
        "Syntax":[
            "Syntax",
            "closeall()\n"
        ],
        "description":[
            "The %closeall() function closes all opened file-descriptors, including sockets."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"%closesocket() function",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"%connect() function",
        "Syntax":[
            "Syntax",
            "code = %connect(fd, addr.family, host, port)\n"
        ],
        "description":[
            "Description",
            "The %connect() function requests a connection between two sockets.",
            "To compile successfully, the statement cfunction\u00a0socket.builtin must be included in the source code.",
            "Upon successful completion, a value of 0 is returned in code. In case of error, a value of -1 is returned and the system(0) function is set to the value of  errno.",
            "The connection is closed when the socket is closed."
        ],
        "parameter":[
            "Parameter(s)",
            "fdFile descriptor of the local socket returned by a previous\ncall to the FlashBASIC C function%socket().addr.familySpecifies the addressing scheme used by the protocol. This\nfield must match the address family used when creating the socket.\nValid values are defined in the include file:dm,bp,unix.h\u00a0socket.h.hostDestination host name. The string must be known to the local\nnetwork manager. Internally, this callsgetaddrinfoto resolve the remote host.portPort number on the distant host. Legal value for this field\ndepends on the protocol. On TCP\/IP, for example, valid port numbers\nare from 1024 to 32767."
        ],
        "example":[
            "Example(s)",
            "cfunction socket.builtin\ninclude dm,bp,includes sysid.inc\ninclude dm,bp,unix.h socket.h\n* Create a socket\nfd=%socket(af$inet,sock$stream,0)\n* Connect to the distant host\nif %connect(fd,af$inet,\"prod\",1024)<0 then\n   crt \u2019Connect failed\u2019; stop\nend\n* Write data to it\nmsg=\"CONNECTED\"\n%send(fd,msg,len(msg))\n* Terminate connection\n%close(fd)"
        ]
    },
    {
        "name":"%connect_ssl() function",
        "Syntax":[
            "Syntax",
            "code = %connect_ssl(fd, addr.family, host, port, &ssl_fd);\n"
        ],
        "description":[
            "Description",
            "The %connect_ssl() function requests a secure connection between two sockets.",
            "The %connect_ssl() function requests a secure connection between two sockets.",
            "To compile successfully, the statement cfunction socket.builtin must be included in the source code.",
            "Upon successful completion, a value of 0 is returned in code, and the  ssl_fd FlashBASIC variable is updated.",
            "In the case of an error, the return code is a negative value. The table below lists all of the error return codes:",
            "The connection is closed when the socket is closed."
        ],
        "parameter":[
            "Parameter(s)",
            "fdFile descriptor of the local socket returned by a previous\ncall to the FlashBASIC C function%socket().addr.familySpecifies the addressing scheme used by the protocol. This\nfield must match the address family used when creating the socket.\nValid values are defined in the include file:dm,bp,unix.h\nsocket.h.hostDestination host name. The string must be known to the local\nnetwork manager. Internally, this callsgetaddrinfoto resolve the remote host.portPort number on the distant host. Legal value for this field\ndepends on the protocol. On TCP\/IP, for example, valid port numbers\nare from 1024 to 32767.ssl_fdFile descriptor of the Secure connection."
        ],
        "example":[
            "Example(s)",
            "cfunction socket.builtin\ninclude dm,bp,includes sysid.inc\ninclude dm,bp,unix.h socket.h\n\u00a0\n* Create a socket\nfd=%socket(af$inet,sock$stream,0)\n* Connect to the distant host\nssl_fd = 0\ncode=%connect_ssl(fd, af$inet, \"prod\", 1024, &ssl_fd)\nif code < 0 then print \"failed to connect\"; stop\n\u00a0\n* Write data to it thru the secure connection\nmsg=\"Hello World\"\nmsglen=len(msg)\ncode = %write_ssl(ssl_fd, msg,msglen)\nif code < 0 then\n   code = %close_ssl(fd, &ssl_fd)\n   stop\nend\n* read from host\nChar buffer[100]\ncode = %read_ssl(ssl_fd, buffer, 100)\nif code < 0 then\n   code = %close_ssl(fd, &ssl_fd)\n   stop\nend\nprint \"READ: \":buffer\ncode = %close_ssl(fd, &ssl_fd)"
        ]
    },
    {
        "name":"%connect_starttls() function",
        "Syntax":[
            "Syntax",
            "code = %connect_starttls(fd, &SSL);\n"
        ],
        "description":[
            "Description",
            "The %connect_starttls function provides the ability to elevate an       unsecured connection to a secured connection. ",
            "The %connect_starttls function is supported on D3 Windows and D3             Linux.",
            "The Client connecting to a Server uses the %connect function for             establishing an unsecured connection to a server. Then, the Server uses the                %connect_starttls function to elevate the unsecured connection to             a secured connection. ",
            "The Client initially calls the %connect function to establish an             unsecured connection, then calls the %connect_starttls function to             elevate the unsecured connection to a secured connection. This function negotiates with             the Server by sending and receiving messages on the socket to determine if the Server             supports STARTTLS. If the Server supports STARTTLS and the Client chooses to use             STARTTLS, the Client negotiates with the Server to use STARTTLS. ",
            "The %connect_starttls function provides similar functionality to the                %connect_ssl function, except the embedded call to the                %connect function has been removed. When calling the                %connect_starttls function, the connection must have been             previously established by using the %connect function."
        ],
        "parameter":[
            "Parameter(s)",
            "fdFile descriptor of the local socket returned by a previous call to the\n                        FlashBASIC C function%socket().SSLReturn value for the SSL handle."
        ],
        "example":[
            "Example(s)",
            "Example 1",
            "UNIX: Client code for connecting to mail server using the%connectand%connect_starttlsfunctions:",
            "cfunction socket.builtin\ninclude dm,bp,includes sysid.inc\ninclude dm,bp,unix.h socket.h\ninclude dm,bp,unix.h errno.h\n*\nCRLF = CHAR(13):CHAR(10)\nHELO = 'gmail.com'\n*\nSOCKFD = %socket(AF$INET, SOCK$STREAM, 0)\nIF SOCKFD = -1 THEN\nCRT \"Getting soxket failed\"\nSTOP\nEND\n*\nHOST = \"smtp.gmail.com\"\nPORT = 587\nSSL = 0\n*\nRESULT = %connect(SOCKFD,AF$INET,HOST,PORT)\nIF RESULT < 0 THEN\nCRT \"Connection to \":HOST:\" failed\"\n%close(SOCKFD)\nSTOP\nEND\nGOSUB DO.READ\n*\n\n    SMTP PROTOCOL:\n    MSG = 'EHLO ':HELO:CRLF\n    GOSUB DO.WRITE\n    GOSUB DO.READ\n    *\n    MSG = 'HELO ':HELO:CRLF\n    GOSUB DO.WRITE\n    GOSUB DO.READ\n    *\n    MSG = 'STARTTLS':CRLF\n    GOSUB DO.WRITE\n    GOSUB DO.READ\n    *\n    RESULT = %connect_starttls(SOCKFD,&SSL)\n    IF RESULT < 0 THEN\n    CRT \"SSL connection to \":HOST:\" failed\"\n    %close(SOCKFD)\n    STOP\n    END\n    *\n    %close(SOCKFD)\n    *\n    CRT \"SSL connection to :\"HOST:\" successful\"\n    STOP\n    DO.READ:*\n    BUFFER = SPACE(4096)\n    LEN.BUFFER = LEN(BUFFER)\n    RESULT = %READ(SOCKFD, BUFFER, LEN.BUFFER)\n    IF RESULT < 0 THEN\n    CRT \"%READ FAILED RESULT : \":RESULT\n    %close(SOCKFD)\n    STOP\n    END\n    BYTES.READ = RESULT\n    CRT BUFFER[1, BYTES.READ]\n    RETURN\n    DO.WRITE:*\n    LEN.MSG = LEN(MSG)\n    RESULT = %WRITE(SOCKFD, MSG, LEN.MSG)\n\nIF RESULT < 0 THEN\nCRT \"%WRITE FAILED RESULT : \":RESULT\n%close(SOCKFD)\nSTOP\nEND\nRETURN",
            "Example 2",
            "Windows: Client code for connecting to mail server using the%connectand%connect_starttlsfunctions:",
            "cfunction socket.builtin\ninclude dm,bp,includes sysid.inc\n*\nPLATFORM = SYSTEM(38)\nWINDOWS.BASED = (PLATFORM<SYS$IMP> = SYS$NT)\nAF$INET = 2 + 0; * internetwork: UDP, TCP, etc\nSOCK$STREAM = 1 + 0; * stream socket\n*\nCRLF = CHAR(13):CHAR(10)\nHELO = 'gmail.com'\n*\nSOCKFD = %socket(AF$INET, SOCK$STREAM, 0)\nIF SOCKFD = -1 THEN\nCRT \"Getting soxket failed\"\nSTOP\nEND\n*\nHOST = \"smtp.gmail.com\"\nPORT = 587\nSSL = 0\n*\nRESULT = %connect(SOCKFD,AF$INET,(CHAR *)HOST,PORT)\nIF RESULT < 0 THEN\nCRT \"Connection to \":HOST:\" failed\"\n%CLOSESOCKET( SOCKFD )\nSTOP\nEND\nGOSUB DO.READ\n*\n\n    SMTP PROTOCOL:\n    MSG = 'EHLO ':HELO:CRLF\n    GOSUB DO.WRITE\n    GOSUB DO.READ\n    *\n    MSG = 'HELO ':HELO:CRLF\n    GOSUB DO.WRITE\n    GOSUB DO.READ\n    *\n    MSG = 'STARTTLS':CRLF\n    GOSUB DO.WRITE\n    GOSUB DO.READ\n    *\n    RESULT = %connect_starttls(SOCKFD,&SSL)\n    IF RESULT < 0 THEN\n    CRT \"SSL connection to \":HOST:\" failed\"\n    %CLOSESOCKET( SOCKFD )\n    STOP\n    END\n    *\n    %CLOSESOCKET( SOCKFD )\n    *\n    CRT \"SSL connection to :\"HOST:\" successful\"\n    STOP\n    DO.READ:*\n    SOCKFD = SOCKFD + 0\n    BUFFER = SPACE(4096)\n    LEN.BUFFER = LEN(BUFFER)\n    RESULT = %RECV( SOCKFD, (CHAR *)BUFFER, LEN.BUFFER, 0)\n    IF RESULT < 0 THEN\n    CRT \"%READ FAILED RESULT : \":RESULT\n    %CLOSESOCKET( SOCKFD )\n    STOP\n    END\n    BYTES.READ = RESULT\n    CRT BUFFER[1, BYTES.READ]\n    RETURN\n    DO.WRITE:*\n    SOCKFD = SOCKFD + 0\n    LEN.MSG = LEN(MSG)\n    RESULT = %SEND( SOCKFD, (CHAR *)MSG, LEN.MSG, 0)\n    IF RESULT < 0 THEN\n    CRT \"%WRITE FAILED RESULT : \":RESULT\n    %CLOSESOCKET( SOCKFD )\n    STOP\n    END\n    RETURN"
        ]
    },
    {
        "name":"%creat() function",
        "Syntax":[
            "Syntax",
            "file.descriptor = %creat(str, mode)\n"
        ],
        "description":[
            "The %creat() function creates a new host OS file or prepares to rewrite an existing host OS file designated by  str for write only."
        ],
        "parameter":[
            "Parameter(s)",
            "strName of the file to create.modeControls the file mode. Valid values ofmodeare in the include: mode.h. Combinations of the modes are obtained\nby adding several elementary modes together.",
            "Note:On D3, files are closed automatically when the FlashBASIC\nprogram terminates."
        ],
        "example":[
            "Example(s)",
            "include dm,bp,unix.h mode.h\n* Create a local file named myfile\n* read and write permissions\nfd=%creat(\"myfile\",s$iread+s$iwrite)",
            "Note the usage of the+operator to\ncombine flags, where a regular C program would have used anor."
        ]
    },
    {
        "name":"%decrypt() function",
        "Syntax":[
            "Syntax",
            " code = %decrypt(params, inputstring, outputstring, &outputstring length)\n\n"
        ],
        "description":[
            "Description",
            "The %decrypt() function decrypts a string. The appropriate OpenSSL libraries must be     present to use this function. See your platform-specific System Administration       Guide for details.",
            "This function returns an integer to the code variable as follows:"
        ],
        "parameter":[
            "Parameter(s)",
            "codeReturn code representing the result of the function.paramsA dynamic array containing the following information:Algorithm (Supported algorithms are Crypto$Algorithm$AES128 and Crypto$Algorithm$AES256).Length of input string.Size of output buffer.Clear text key (must be 16 bytes long for AES128 and 32 bytes long for AES256). If the clear\n                text key is null, the default key will be used.inputstringInput string.outputstringOutput string.outputstring lengthLength of the encrypted string."
        ],
        "example":[
            "Example(s)",
            "The following example illustrates encrypting and decrypting a user-provided string using\n        AES128:",
            "* encryptAES128Test\n*\nopen 'sqldemo,customers,' to file then\n  read item from file,\"1\" then\n    dataItem = item<6>\n      call encryptAES128.sub(dataItem,errMsg) ;* now do the encryption\n      if errMsg = \"\" then\n        writev dataItem on file,\"1\",6\n      end else\n        crt errMsg\n      end\n    end\n  end\nend\n*\n* End of source\n\nsubroutine encryptAES128.sub(dataItem,errMsg)\ninclude dm,bp,includes crypto.inc\n*\n* Key must be 16 characters long\nkey = \"1234567890123456\"'l%16'\n*\n* now do the encryption\ndataLen = len(dataItem)*2\nchar encrItem[ dataLen ]\ncryptoParams = \"\"\ncryptoParams< Crypto$P$Algorithm > = Crypto$Algorithm$AES128\ncryptoParams< Crypto$P$inputlength > = Len(dataItem)\ncryptoParams< Crypto$P$outputLength > = dataLen\ncryptoParams< Crypto$P$ClearKey > = key\nencryptedLen = 0\ngp.result = %Encrypt(cryptoParams, dataItem, encrItem, &encryptedLen)\nif gp.result < 0 then\n  errMsg = \"Encryption failed: \" : gp.result\nend else\n  dataItem = encrItem[1, encryptedLen] ;* MANDATORY trim of buffer padding\n  errMsg = \"\"\nend\n*\nreturn\n*\n* End of source\n\n* decryptAES128Test\n*\nopen 'sqldemo,customers,' to file then\n  read item from file,\"1\" then\n    dataItem = item<6>\n      call decryptAES128.sub(dataItem,errMsg) ;* now do the decryption\n      if errMsg = \"\" then\n        writev dataItem on file,\"1\",6\n      end else\n        crt errMsg\n      end\n    end\n  end\nend\n*\n* End of source\n\nsubroutine decryptAES128.sub(dataItem,errMsg)\ninclude dm,bp,includes crypto.inc\n*\n* Key must be 16 characters long\nkey = \"1234567890123456\"'l%16'\nencrItem = dataItem\nencryptedLen = len(encrItem)\n* now do the decryption\nchar decrItem[Len(encrItem)]\ncryptoParams = \"\"\ncryptoParams< Crypto$P$Algorithm > = Crypto$Algorithm$AES128\ncryptoParams< Crypto$P$inputLength > = encryptedLen\ncryptoParams< Crypto$P$outputLength > = Len(decrItem)\ncryptoParams< Crypto$P$ClearKey > = key\ndecryptedLen = 0\n*\ngp.result = %Decrypt(cryptoParams, encrItem, decrItem, &decryptedLen)\nif gp.result < 0 then\n  errMsg = \"Decryption failed: \" : gp.result\nend else\n  dataItem = encrItem[1, encryptedLen] ;* MANDATORY trim of buffer padding\n  errMsg = \"\"\nend\n*\ndataItem = decrItem\n*\nreturn\n*\n* End of source",
            "The following example illustrates encrypting and decrypting a user-provided string using\n        AES256 (D3 versions 10.3.4 and later):",
            "* encryptAES256Test\n*\nopen 'sqldemo,customers,' to file then\n  read item from file,\"1\" then\n    dataItem = item<6>\n      call encryptAES256.sub(dataItem,errMsg) ;* now do the encryption\n      if errMsg = \"\" then\n        writev dataItem on file,\"1\",6\n      end else\n        crt errMsg\n      end\n    end\n  end\nend\n*\n* End of source\n\nsubroutine encryptAES256.sub(dataItem,errMsg)\ninclude dm,bp,includes crypto.inc\n*\n* Key must be 32 characters long\nkey = \"12345678901234567890123456789012\"'l%32'\n*\n* now do the encryption\ndataLen = (int(len(dataItem)\/32)+2)*32\nchar encrItem[ dataLen ]\ncryptoParams = \"\"\ncryptoParams< Crypto$P$Algorithm > = Crypto$Algorithm$AES256\ncryptoParams< Crypto$P$inputlength > = Len(dataItem)\ncryptoParams< Crypto$P$outputLength > = dataLen\ncryptoParams< Crypto$P$ClearKey > = key\nencryptedLen = 0\ngp.result = %Encrypt(cryptoParams, dataItem, encrItem, &encryptedLen)\nif gp.result < 0 then\n  errMsg = \"Encryption failed: \" : gp.result\nend else\n  dataItem = encrItem[1, encryptedLen] ;* MANDATORY trim of buffer padding\n  errMsg = \"\"\nend\n*\nreturn\n*\n* End of source\n\n* decryptAES256Test\n*\nopen 'sqldemo,customers,' to file then\n  read item from file,\"1\" then\n    dataItem = item<6>\n      call decryptAES256.sub(dataItem,errMsg) ;* now do the decryption\n      if errMsg = \"\" then\n        writev dataItem on file,\"1\",6\n      end else\n        crt errMsg\n      end\n    end\n  end\nend\n*\n* End of source\n\nsubroutine decryptAES256.sub(dataItem,errMsg)\ninclude dm,bp,includes crypto.inc\n*\n* Key must be 32 characters long\nkey = \"12345678901234567890123456789012\"'l%32'\nencrItem = dataItem\nencryptedLen = len(encrItem)\n* now do the decryption\nchar decrItem[Len(encrItem)]\ncryptoParams = \"\"\ncryptoParams< Crypto$P$Algorithm > = Crypto$Algorithm$AES256\ncryptoParams< Crypto$P$inputLength > = encryptedLen\ncryptoParams< Crypto$P$outputLength > = Len(decrItem)\ncryptoParams< Crypto$P$ClearKey > = key\ndecryptedLen = 0\n*\ngp.result = %Decrypt(cryptoParams, encrItem, decrItem, &decryptedLen)\nif gp.result < 0 then\n  errMsg = \"Decryption failed: \" : gp.result\nend else\n  dataItem = encrItem[1, encryptedLen] ;* MANDATORY trim of buffer padding\n  errMsg = \"\"\nend\n*\ndataItem = decrItem\n*\nreturn\n*\n* End of source"
        ]
    },
    {
        "name":"%dup() function",
        "Syntax":[
            "Syntax",
            "new.descriptor = %dup(file.descriptor)\n"
        ],
        "description":[
            "The %dup() function returns a new file descriptor associated to the same file as the one associated with  file.descriptor."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"%encrypt() function",
        "Syntax":[
            "Syntax",
            "code = %encrypt(params, inputstring, outputstring, &outputstring length)\n"
        ],
        "description":[
            "Description",
            "The %encrypt() function encrypts a string. The appropriate OpenSSL     libraries must be present to use this function. See your platform-specific System       Administration Guide for details.",
            "This function returns an integer to the code variable as follows:"
        ],
        "parameter":[
            "Parameter(s)",
            "codeReturn code representing the result of the function.paramsA dynamic array containing the following information:Algorithm (Supported algorithms are Crypto$Algorithm$AES128 and Crypto$Algorithm$AES256).Length of input string.Size of output buffer.Clear text key (must be 16 bytes long for AES128 and 32 bytes long for AES256). If the clear\n                text key is null, the default key will be used.inputstringInput string.outputstringOutput string.outputstring lengthLength of the encrypted string."
        ],
        "example":[
            "Example(s)",
            "The following example illustrates encrypting and decrypting a user-provided string using\n        AES128:",
            "* encryptAES128Test\n*\nopen 'sqldemo,customers,' to file then\n  read item from file,\"1\" then\n    dataItem = item<6>\n      call encryptAES128.sub(dataItem,errMsg) ;* now do the encryption\n      if errMsg = \"\" then\n        writev dataItem on file,\"1\",6\n      end else\n        crt errMsg\n      end\n    end\n  end\nend\n*\n* End of source\n\nsubroutine encryptAES128.sub(dataItem,errMsg)\ninclude dm,bp,includes crypto.inc\n*\n* Key must be 16 characters long\nkey = \"1234567890123456\"'l%16'\n*\n* now do the encryption\ndataLen = len(dataItem)*2\nchar encrItem[ dataLen ]\ncryptoParams = \"\"\ncryptoParams< Crypto$P$Algorithm > = Crypto$Algorithm$AES128\ncryptoParams< Crypto$P$inputlength > = Len(dataItem)\ncryptoParams< Crypto$P$outputLength > = dataLen\ncryptoParams< Crypto$P$ClearKey > = key\nencryptedLen = 0\ngp.result = %Encrypt(cryptoParams, dataItem, encrItem, &encryptedLen)\nif gp.result < 0 then\n  errMsg = \"Encryption failed: \" : gp.result\nend else\n  dataItem = encrItem[1, encryptedLen] ;* MANDATORY trim of buffer padding\n  errMsg = \"\"\nend\n*\nreturn\n*\n* End of source\n\n* decryptAES128Test\n*\nopen 'sqldemo,customers,' to file then\n  read item from file,\"1\" then\n    dataItem = item<6>\n      call decryptAES128.sub(dataItem,errMsg) ;* now do the decryption\n      if errMsg = \"\" then\n        writev dataItem on file,\"1\",6\n      end else\n        crt errMsg\n      end\n    end\n  end\nend\n*\n* End of source\n\nsubroutine decryptAES128.sub(dataItem,errMsg)\ninclude dm,bp,includes crypto.inc\n*\n* Key must be 16 characters long\nkey = \"1234567890123456\"'l%16'\nencrItem = dataItem\nencryptedLen = len(encrItem)\n* now do the decryption\nchar decrItem[Len(encrItem)]\ncryptoParams = \"\"\ncryptoParams< Crypto$P$Algorithm > = Crypto$Algorithm$AES128\ncryptoParams< Crypto$P$inputLength > = encryptedLen\ncryptoParams< Crypto$P$outputLength > = Len(decrItem)\ncryptoParams< Crypto$P$ClearKey > = key\ndecryptedLen = 0\n*\ngp.result = %Decrypt(cryptoParams, encrItem, decrItem, &decryptedLen)\nif gp.result < 0 then\n  errMsg = \"Decryption failed: \" : gp.result\nend else\n  dataItem = encrItem[1, encryptedLen] ;* MANDATORY trim of buffer padding\n  errMsg = \"\"\nend\n*\ndataItem = decrItem\n*\nreturn\n*\n* End of source",
            "The following example illustrates encrypting and decrypting a user-provided string using\n        AES256 (D3 versions 10.3.4 and later):",
            "* encryptAES256Test\n*\nopen 'sqldemo,customers,' to file then\n  read item from file,\"1\" then\n    dataItem = item<6>\n      call encryptAES256.sub(dataItem,errMsg) ;* now do the encryption\n      if errMsg = \"\" then\n        writev dataItem on file,\"1\",6\n      end else\n        crt errMsg\n      end\n    end\n  end\nend\n*\n* End of source\n\nsubroutine encryptAES256.sub(dataItem,errMsg)\ninclude dm,bp,includes crypto.inc\n*\n* Key must be 32 characters long\nkey = \"12345678901234567890123456789012\"'l%32'\n*\n* now do the encryption\ndataLen = (int(len(dataItem)\/32)+2)*32\nchar encrItem[ dataLen ]\ncryptoParams = \"\"\ncryptoParams< Crypto$P$Algorithm > = Crypto$Algorithm$AES256\ncryptoParams< Crypto$P$inputlength > = Len(dataItem)\ncryptoParams< Crypto$P$outputLength > = dataLen\ncryptoParams< Crypto$P$ClearKey > = key\nencryptedLen = 0\ngp.result = %Encrypt(cryptoParams, dataItem, encrItem, &encryptedLen)\nif gp.result < 0 then\n  errMsg = \"Encryption failed: \" : gp.result\nend else\n  dataItem = encrItem[1, encryptedLen] ;* MANDATORY trim of buffer padding\n  errMsg = \"\"\nend\n*\nreturn\n*\n* End of source\n\n* decryptAES256Test\n*\nopen 'sqldemo,customers,' to file then\n  read item from file,\"1\" then\n    dataItem = item<6>\n      call decryptAES256.sub(dataItem,errMsg) ;* now do the decryption\n      if errMsg = \"\" then\n        writev dataItem on file,\"1\",6\n      end else\n        crt errMsg\n      end\n    end\n  end\nend\n*\n* End of source\n\nsubroutine decryptAES256.sub(dataItem,errMsg)\ninclude dm,bp,includes crypto.inc\n*\n* Key must be 32 characters long\nkey = \"12345678901234567890123456789012\"'l%32'\nencrItem = dataItem\nencryptedLen = len(encrItem)\n* now do the decryption\nchar decrItem[Len(encrItem)]\ncryptoParams = \"\"\ncryptoParams< Crypto$P$Algorithm > = Crypto$Algorithm$AES256\ncryptoParams< Crypto$P$inputLength > = encryptedLen\ncryptoParams< Crypto$P$outputLength > = Len(decrItem)\ncryptoParams< Crypto$P$ClearKey > = key\ndecryptedLen = 0\n*\ngp.result = %Decrypt(cryptoParams, encrItem, decrItem, &decryptedLen)\nif gp.result < 0 then\n  errMsg = \"Decryption failed: \" : gp.result\nend else\n  dataItem = encrItem[1, encryptedLen] ;* MANDATORY trim of buffer padding\n  errMsg = \"\"\nend\n*\ndataItem = decrItem\n*\nreturn\n*\n* End of source"
        ]
    },
    {
        "name":"%endlistilocks() function",
        "Syntax":[
            "Syntax",
            " code = %endlistilocks( handle )"
        ],
        "description":[
            "Description",
            "The %endlistilocks() function is used to release the handle allocated   by the %startlistilocks() function.",
            "To compile successfully, the statement cfunction fsi.builtin must be     included in the source code. ",
            "This function always returns 0. This function is used to release the handle allocated by he      %startlistilocks() function."
        ],
        "parameter":[
            "Parameter(s)"
        ],
        "example":[
            "Example(s)",
            "cfunction fsi.builtin\n hostFSI = \"myserver\"\n handle = 0\n code = %startlistilocks( hostFSI, &handle )\n filter = \"\"\n bufferLength = 1000000\n Char buffer[ bufferLength ]\n bufferLength = %listitemlocksfilter( handle, filter, buffer, bufferLength )\n Crt buffer[ 1, bufferLength ]\n code = %endlistilocks( handle )",
            "Note:For a use case, seedm,bp, nt_list-ilocks."
        ]
    },
    {
        "name":"%fclose() function",
        "Syntax":[
            "Syntax",
            "var = %fclose((char*)stream)\n"
        ],
        "description":[
            "The %fclose() function closes the stream specified by  stream returned by a previous call to %fopen()."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"%fdopen() function",
        "Syntax":[
            "Syntax",
            "stream = (char*)%fdopen(file.descriptor, type)\n"
        ],
        "description":[
            "The %fdopen() function associates a stream with the file.descriptor obtained from an %open(), %dup(), or %creat()."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"%fgetc() function",
        "Syntax":[
            "Syntax",
            "var = %fgetc((char*)strea)m\n"
        ],
        "description":[
            "Description",
            "The %fgetc() function returns the next character from the named input stream.",
            "The character is returned as a number. Normal usage would override the type (see the example below). The getc() and getchar() system functions cannot be used because they are macros, rather than functions."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "c=(char)%fgetc((char*) stream)\ncrt c",
            "Note the character type casting to override the default\n(int) type."
        ]
    },
    {
        "name":"%fgets() function",
        "Syntax":[
            "Syntax",
            "ptr = (char*)%fgets(var, n, (char*)stream)\n"
        ],
        "description":[
            "Description",
            "The %fgets() function reads characters from the named input  stream into var until  n-1 characters are read or a new line character is read and transferred to the string.",
            "The string is terminated with a null character (hexadecimal 00). A string of a size at least equal to n must be assigned to var before the call, otherwise the data is truncated. If less than n-1 bytes are returned, the content of the string beyond is undefined, as is usual in C. No data translation occurs.",
            "The pointer returned has no meaning, except for a null value which indicates an error or that end of file has been encountered."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "char line[128] ;* make a buffer\npointer=(char*)%fgets(line, 128, (char*)stream)\nif pointer#0 then\n   line=field(line,char(0),1)\n   print line\nend"
        ]
    },
    {
        "name":"%filecheck() function",
        "Syntax":[
            "Syntax",
            " file.descriptor = %filecheck(arg, error_count)"
        ],
        "description":[
            "The %filecheck() function can be run from the TCL to call the       system fsck (file system check) command. "
        ],
        "parameter":[
            "Parameter(s)",
            "file.descriptorSpecifies the return value of a previous call to the%open()function.argSpecifies whether or not errors should be corrected.0 = Do not fix errors2 = Fix errorserror_countSpecifies the output parameter.Theerror_countvariable takes the address of a variable to place the number of errors\n                           encountered during the file check."
        ],
        "example":[
            "Example(s)",
            "fsidm,bp, FsiResize\n ...\n include dm,bp,includes nt_defs.inc\n ...\n *\n * Do file check\n * -------------\n   ErrCnt = 0 ;* [1.7]\n   RetCode = %FileCheck( FileDesc, FileChkOpt+0, &ErrCnt ) ;* [1.7]\n   if RetCode # 0 then ;* [1.7]\n ..."
        ]
    },
    {
        "name":"%fopen() function",
        "Syntax":[
            "Syntax",
            "stream = (char*)%fopen(str, type)\n"
        ],
        "description":[
            "Description",
            "The %fopen() function opens the host OS file designated by str and associates a stream with it.",
            "The stream is returned as a pointer to a character or 0 if an error occurred. system(0) contains the error number."
        ],
        "parameter":[
            "Parameter(s)",
            "strSpecifies the file to open.typeCharacter string having one of\nthese values:rOpens for reading only.r+Opens for update.wTruncates or creates for writing only.w+Truncates or creates for update.aAppend. Opens for writing at the end of file or creates for\nwriting.a+Append. Opens for writing at the end of file or creates for\nupdate."
        ],
        "example":[
            "Example(s)",
            "stream=(char*)%fopen(\u2019fname\u2019,\"w+\")\nif stream=0 then\n   crt \u2019Cannot open stream. errno=\u2019:system(0)\nend"
        ]
    },
    {
        "name":"%fprintf() function",
        "Syntax":[
            "Syntax",
            "var = %fprintf((char*)stream, format, arg...)\n"
        ],
        "description":[
            "Description",
            "The %fprintf() function writes formatted output on stream under control of format.",
            "Floating types are not supported. See your host system documentation."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"%fputc() function",
        "Syntax":[
            "Syntax",
            "var = %fputc(character, (char*)stream)\n"
        ],
        "description":[
            "Description",
            "The %fputc() function writes the character specified by character on the named output stream.",
            "If successful, the character is returned as a number, otherwise eof (-1) is returned.",
            "If the character is contained in a FlashBASIC dynamic array, an explicit (char) type override must be used, otherwise a pointer would be passed to the C function."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "c=\u2019a\u2019\nn=%fputc((char)c, (char*) strm)"
        ]
    },
    {
        "name":"%fputs() function",
        "Syntax":[
            "Syntax",
            "var = %fputs(str, (char*)stream)\n"
        ],
        "description":[
            "Description",
            "The %fputs() function writes the string designated by str on the named output stream.",
            "eof (-1) is returned in case of an error."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "equ nl to char(10)\nn=%fputs(\u2019Input file name\u2019:nl,(char*)stream)"
        ]
    },
    {
        "name":"%fread() function",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"%free() function",
        "Syntax":[
            "Syntax",
            "(void)%free((char*)pointer)\n"
        ],
        "description":[
            "The %free() function frees a block of memory allocated by a call to %malloc()."
        ],
        "parameter":[
            "Parameter(s)",
            "pointerPointer to the area of memory allocated by a previous call\nto%malloc().",
            "CAUTION:",
            "The result is unpredictable ifpointerdoes not contain a valid address and can corrupt\nmemory. If this is suspected, exit the D3 process and restart the\nline."
        ],
        "example":[
            "Example(s)",
            "%free((char*)ptr)"
        ]
    },
    {
        "name":"%freopen() function",
        "Syntax":[
            "Syntax",
            "stream = (char*)%freopen(str, type, (char*)stream1)\n"
        ],
        "description":[
            "Description",
            "The %freopen() function substitutes the named file specified by str in place of the opened stream stream1.",
            "The stream is returned as a pointer to a character or 0 if an error has occurred. system(0) is then set to the error number."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"%fsize() function",
        "Syntax":[
            "Syntax",
            "size = %fsize(file.descriptor)\n"
        ],
        "description":[
            "Description",
            "The %fsize() function returns the size in bytes of the file associated to the opened file.descriptor returned by a previous call to %open() or %creat().",
            "If the file does not exist or is not readable, -1 is returned."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"%fwrite() function",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"%getaddrinfo() function",
        "Syntax":[
            "Syntax",
            "Code\u00a0= p_getaddrinfo(server, outlist\u00a0)\n"
        ],
        "description":[
            "Description",
            "Front end to the socket %getaddrinfo() function.",
            "This function returns 0 if successful or -1 if an error occurs."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"%getenv() function",
        "Syntax":[
            "Syntax",
            "pointer = (char*)%getenv(name)\n"
        ],
        "description":[
            "The %getenv() function searches the environment for a string of the form name=value and returns a pointer to  value in the current environment if such a string is present, otherwise, a null is returned."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "* Gets and displays the PATH environment variable\ncfunction unix.builtin\npointer=(char*)%getenv('PATH')\nif pointer = 0 then\n   print \"PATH is not defined\"\nend else\n* We got a C pointer the path variable. Copy it\n* into pick variable\n   char path[1024]\n   %strcpy(path, (char*)pointer)\n   path = field(path,char(0),1)\n   print path\nend"
        ]
    },
    {
        "name":"%gethostid() function",
        "Syntax":[
            "Syntax",
            "var = %gethostid()\n"
        ],
        "description":[
            "Description",
            "The %gethostid() function allows a FlashBASIC application to retrieve the unique 32-bit identifier for the current host. The ID is returned as a decimal number.",
            "For Windows: Not Supported",
            "If the function fails, a value of -1 is returned and the FlashBASIC system(0) function returns the value of  errno.",
            "To compile successfully, the program must include the statement:"
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "cfunction socket.builtin\nID=%gethostid()\nif ID=-1 then\n   crt \u2019Cannot get host ID. errno=\u2019:system(0)\n   stop\nend"
        ]
    },
    {
        "name":"%gethostname() function",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"%getnamedhost() function",
        "Syntax":[
            "Syntax",
            "port = (unsigned int) %getnamedhos(host);\n"
        ],
        "description":[
            "Description",
            "Front end to the socket %gethostbyname() function.",
            "This function returns the host id or -1 if an error occurs."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"%getperfcount() function",
        "Syntax":[
            "Syntax",
            "n = %getperfcount(buffer, MAXBUF)\n"
        ],
        "description":[
            "The %getperfcount() function returns the D3 performance counters. "
        ],
        "parameter":[
            "Parameter(s)",
            "nNumber of characters returned in the buffer. Ifn= -1, the buffer size is too small.bufferSpecifies the buffer in which to return a dynamic array of\nthe performance count information.MAXBUFSpecifies the maximum size for the buffer."
        ],
        "example":[
            "Example(s)",
            "The example program below illustrates\ndisplaying the performance counter.",
            "include dm,bp,includes nt_util.inc\nequ MAXBUF to 512\nchar buffer[MAXBUF]\nn = %getperfcount( buffer, MAXBUF )\nif n > 0 print buffer",
            "This returns a display of the following performance counters:",
            "Reads: \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0117988\nWrites: \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a04008\nItemLocks: \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a02\nGroupLocks: \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a00\nOpens: \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a036245\nMemoryFull: \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a00\nOvfAdds: \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a01\nOvfReads: \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a016413\nCacheMiss: \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a016823",
            "ReadsRepresents the number of times per second a record was read.Note:This does not necessarily imply a disk I\/O.WritesRepresents the number of times per second a record was written.Note:This does not necessarily imply a disk I\/O.ItemLocksRepresents the number of times per second a thread failed\nto acquire an item lock.GroupLocksRepresents the number of times per second a thread failed\nto acquire a group lock. Group locks are internal locks set when a\ntable is modified. High group lock counts indicate that small tables\nare accessed by many threads. A solution might be to increase the\nmodulo \u00a0\u00a0of these tables.OpensRepresents the number of times per second a table was opened.\nIf this number is consistently high, it may be an indication of an\napplication problem that keeps opening files and never closes them.Note:The VME caches file descriptors. As a result, it does not hurt to\nleave files open. Generally, Visual Basic OLE applications do not\nhave access to such a cache. Therefore, a rogue Visual BASIC application\nthat loops opening files can create this kind of problem.MemoryFullRepresents the number of times per second the server failed\nto map a page in memory because all entries are in use. This counter\nshould always be null. If this counter becomes non-null, it is an\nindication that the memory is too small for the application. If the\nphysical memory is already above 2 GB of memory, splitting the database\nacross two or more servers could help solve this problem.OvfAddsRepresents the number of times per second a table was extended.\nIf this number is consistently not null, it is an indication that\none or more files are severely undersized and are in the process of\nbeing populated.OvfReadsRepresents the number of times per second poorly-sized tables\nare accessed. If this number is consistently not null, it is an indication\nthat one or more files are severely undersized and are accessed heavily.A high ratio (Ovf Read \/ ( Read + Write ) is an indication that there\nare one or more frequently used files that are poorly sized. It is\nimportant to locate these files and resize them. The D3 File Manager\nhas a tool to scan a database for poorly sized files and, currently,\nthey can be resized using thent_resizeutility\nfrom the VME (see theD3 Reference Manual). Determining\nthat the ratio is high depends on the capability of the system. A\n50% ratio would start to be problematic. Approaching 100% will likely\ndegrade performance.CacheMissRepresents the number of times per second a given page was\nnot found in the mapped pages. Each cache miss does not necessarily\ntrigger a disk I\/O, because the missing page can still be in the Windows\ndisk cache."
        ]
    },
    {
        "name":"%getpgrp() function",
        "Syntax":[
            "Syntax",
            "var = %getpgrp()\n"
        ],
        "description":[
            "The %getpgrp() function returns the UNIX process group ID of the calling process.",
            "For Windows: Not Supported"
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"%getpid() function",
        "Syntax":[
            "Syntax",
            "var = %getpid()\n"
        ],
        "description":[
            "The %getpid() function returns the Process-ID (PID) of the calling process."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"%getppid() function",
        "Syntax":[
            "Syntax",
            "var = %getppid()\n"
        ],
        "description":[
            "The %getppid() function returns the UNIX parent Process-ID of the calling process.",
            "For Windows: Not Supported"
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"%getsockopt() function",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"%inet_addr() function",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"%ioctl() function",
        "Syntax":[
            "Syntax",
            "var = %ioctl(file.descriptor, request, arg)\n"
        ],
        "description":[
            "Description",
            "The %ioctl() function is a general purpose control function that passes the arguments  request and  arg to the device designated by  file.descriptor.",
            "For Windows: Not Supported",
            "The format of the arguments is device-specific. These arguments are usually binary data that must be kept out of FlashBASIC data space. See the example below."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "* Allocate some data\nptr=(char*)%malloc(128)\n* Open the terminal and get its termio structure\nexecute \"!exec tty\" capturing ttyname\nfd=%open(ttyname, o$rdwr)\nn=%ioctl(fd, tcgeta, (char*)ptr)\n...\n* Release data\n%free((char*) ptr)"
        ]
    },
    {
        "name":"%ioctlsocket() function",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"%kill() function",
        "Syntax":[
            "Syntax",
            "var = %kill(pid, signal)\n"
        ],
        "description":[
            "Description",
            "The %kill() function sends the signal specified in signal to the process pid.",
            "For Windows: Not Supported",
            "All D3 processes normally catch signals for their internal use. The built-in %pgetpid allows finding the PID of a process by knowing its port number (PIB). Only SIGUSR2 should be sent to a D3 process. Other signals are used internally and can cause problems if used out of context.",
            "Signal numbers are defined in dm,bp,unix.h signal.h."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "* Get its pid, and send hangup (SIGHUP=1) to it.\npib=32\npid=%pgetpid(pib)\nif %kill(pid, 1) = -1 then\n   print \"Cannot logoff process \":pib\nend"
        ]
    },
    {
        "name":"%listitemlocksfilter() function",
        "Syntax":[
            "Syntax",
            " bufferLength = %listitemlocksfilter( handle, filter, buffer, bufferLength ) "
        ],
        "description":[
            "Description",
            "The listitemlocksfilter() function is used to get a list of the FSI   item locks in a dynamic array format.",
            "To compile successfully, the statement cfunction fsi.builtin must be     included in the source code. This function returns the number of bytes used in the output     buffer. ",
            "If the buffer was not large enough, then the required size is returned as a negative value.     This allows detecting the error, reallocating the buffer to at least that size, and calling     again. The buffer variable is populated with a dynamic array containing the list of item     locks."
        ],
        "parameter":[
            "Parameter(s)"
        ],
        "example":[
            "Example(s)",
            "cfunction fsi.builtin\n hostFSI = \"myserver\"\n handle = 0\n code = %startlistilocks( hostFSI, &handle )\n filter = \"\"\n bufferLength = 1000000\n Char buffer[ bufferLength ]\n bufferLength = %listitemlocksfilter( handle, filter, buffer, bufferLength )\n Crt buffer[ 1, bufferLength ]\n code = %endlistilocks( handle )",
            "Note:For a use case, seedm,bp, nt_list-ilocks."
        ]
    },
    {
        "name":"%listen() function",
        "Syntax":[
            "Syntax",
            "code = %listen(fd, backlog)\n"
        ],
        "description":[
            "Description",
            "The %listen() function marks the specified socket as accepting incoming connections and limits the number of outstanding connections in the system queue.",
            "To compile successfully, the statement cfunction\u00a0socket.builtin must be included in the source code. Upon successful completion, a value of 0 is returned in code. In case of error, a value of -1 is returned and the system(0) function is set to the value of  errno."
        ],
        "parameter":[
            "Parameter(s)",
            "fdFile descriptor of the local socket returned by a previous\ncall to the FlashBASIC C function%socket().backlogMaximum number of outstanding connections. The maximum value\nfor this number isSOMAXCONNdefined in the include\nfile:dm,bp,unix.h socket.h."
        ],
        "example":[
            "Example(s)",
            "cfunction socket.builtin\ninclude dm,bp,includes sysid.inc\ninclude dm,bp,unix.h socket.h\n* Create a socket\nfd=%socket(af$inet, sock$stream, 0)\n* Bind the socket to a local Ethernet port.\n* Use default address.\nchar buffer[1024]\nif %bind(fd, af$inet, inaddr$any, 1024)<0 then\n   crt \u2019bind failed\u2019; stop\nend\n* Wait for incoming connection and allow up to\n* three more to be waiting.\n%listen(fd, 3)\n* Accept a connection until got them all\nloop\n   address=0; port=0\n   socket=%accept(fd, &address, &port)\nuntil socket<0 do\n   crt \u2019Called by address \u2019:addr:\u2019, port #\u2019:port\n* Read data from the data link\n   %recv(socket, buffer, 1024)\n   char buff[1024]\n* Done with this connection, close it\n   %closesocket(socket)\nrepeat"
        ]
    },
    {
        "name":"%lseek() function",
        "Syntax":[
            "Syntax",
            "variable = %lseek(file.descriptor, offset, whence)\n"
        ],
        "description":[
            "The %lseek() function moves the read\/write pointer. See your host OS system documentation."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"%malloc() function",
        "Syntax":[
            "Syntax",
            "var = (char*)%malloc(size)\n"
        ],
        "description":[
            "Description",
            "The %malloc() function allocates a memory block of  size bytes and returns the address of this block.",
            "The memory is freed by the %free() built-in. If the system fails to allocate memory, a null pointer is returned.",
            "If the FlashBASIC program terminates, the space allocated by %malloc is not released automatically. This feature can be used to create static data, live across program executions. The TCL environ command uses this fact.",
            "Memory allocated by %malloc can be freed by exiting the D3 process."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "ptr=(char*)%malloc(2048)\nif ptr=0 then stop \u2019cannot allocate memory\u2019"
        ]
    },
    {
        "name":"%memccpy() function",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"%memchr() function",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"%memcopy() function",
        "Syntax":[
            "Syntax",
            "var = (char*)%memcopy(s1, s2, (char) character, length)\n"
        ],
        "description":[
            "The %memcopy() function copies characters from the memory area specified by s2 into s1, stopping after the first occurrence of the character designated by character has been copied, or after the number of characters specified by  length have been copied, whichever comes first."
        ],
        "parameter":[
            "Parameter(s)",
            "varPointer to the character after the copy ofcharacterins1or a null pointer ifcis found in the firstlengthcharacters ofs2.s1Can be a FlashBASIC string or a pointer to a character. Ifs1is a D3\u00a0string, the value returned by this function,\nexcept null, has no meaning.s2Can be a FlashBASIC string or a pointer to a character.characterCharacter to copy.lengthNumber of characters to copy.",
            "Note:If the source string contains a segment mark (x\u2019ff\u2019),\nthe string is truncated."
        ],
        "example":[

        ]
    },
    {
        "name":"%memcpy() function",
        "Syntax":[
            "Syntax",
            "var = (char*)%memcpy(s1, s2, length)\n"
        ],
        "description":[
            "The %memcpy() function copies the number of characters specified by number from memory area s2 into s1."
        ],
        "parameter":[
            "Parameter(s)",
            "varPointer tos1.s1Can be a FlashBASIC string or a pointer to a character. Ifs1is a D3\u00a0string, the value returned by this function\nhas no meaning.s2Can be a FlashBASIC string or a pointer to a character.lengthNumber of bytes to copy.",
            "Note:If the string contains a segment mark (x\u2019ff\u2019), the\ndata is truncated."
        ],
        "example":[
            "Example(s)",
            "* Read 1024 bytes from device\n* and copy them in a D3 buffer\nprecision 0\nchar buffer[1024]\np=(char*)%malloc(1024)\nn=%read(fd, (char*)p, 1024)\n%memcpy(buffer, p+32, n-32)",
            "In this example, note the operation on pointers, allowed\nbecause of the statementprecision 0. This allows\nreading data from a device, and copy only the portion after a fixed\nsize header (32 bytes in this example)."
        ]
    },
    {
        "name":"%memxcpy() function",
        "Syntax":[
            "Syntax",
            "var = (char*)%memxcpy(s1, s2, length)\n"
        ],
        "description":[
            "The %memxcpy() function copies a specified  number of characters from memory area s2 into s1, and converts each input character into two ASCII hexadecimal characters 0 through 9 and A through F."
        ],
        "parameter":[
            "Parameter(s)",
            "varPointer after the last converted character ins2.s1Can be a FlashBASIC string or a pointer to a character.s2Can be a FlashBASIC string or a pointer to a character. Ifs2is a D3 string, the value returned by this function\nhas no meaning.lengthNumber of bytes to copy."
        ],
        "example":[
            "Example(s)",
            "* Obtain memory workspace\nptr=(char*)%malloc(2048)\n* Read from file\nn=%read(fd, (char*)ptr, 1024)\n* Convert the binary data into hexadecimal ASCII\nchar buffer[2048]\n%memxcpy(buffer, (char*)ptr, n*2)"
        ]
    },
    {
        "name":"%open() function",
        "Syntax":[
            "Syntax",
            " file.descriptor = %open(str, oflag, pmode)\n"
        ],
        "description":[
            "Description",
            "The %open() function opens the host OS file specified by str and sets the file status flags according to the value of oflag.",
            "Files opened by %open() are closed automatically when the FlashBASIC program terminates.",
            "The file descriptor is returned as a number or -1 if an error occurred. system(0) contains the error number."
        ],
        "parameter":[
            "Parameter(s)",
            "strSpecifies the file name to open\nor create.oflagSpecifies the status of the file.Valid values are defined\n                           in the include file:fcntl.h. Multiple flags can be\n                           specified in the syntax.O$APPENDMoves the file pointer to the end of the file.O$BINARYOpens in binary mode.O$CREATCreates a new file with the name specified instr.Owner-ID and\n                           group-ID are set. The mode of the file is set according to the value ofmodemodified as follows: all bits in the file mode\n                           creation mask of the process are cleared and the sticky bit is cleared.If no value for the mode is specified when using theO$CREATflag, an arbitrary value is used from your\n                           stack and undefined permissions are used.O$EXCLIfO$EXCLandO$CREATare set, open fails if the file\n                        exists.O$NDELAYNonblocking I\/O.The effect of this flag varies depending on the type of the file. See\n                           host OS system documentation.O$RDONLYOpens for reading only.O$RDWROpens for reading and writing.O$SYNCSynchronized writes.O$TEXTOpens in text mode and translates text (default).For example:^Zis\n                           assumed to be an end of line.O$TRUNCIf the file exists, its length is set to 0.O$WRONLYOpens for writing only.pmodeSpecifies the read-write permissions for newly created files\n                        opened with theO$CREATflag.Valid values are defined\n                           in the include file:mode.h.If no value for the mode is specified when using theO$CREATflag, an arbitrary value is used from your\n                           stack and undefined permissions are used.S$IRUSRUNIX only. Opens a new file with read only permissions.S$IWUSRUNIX only. Opens a new file with write only permissions.S$IREADWindows only. Opens a new file with read only permissions.S$IWRITEWindows only. Opens a new file with write only permissions."
        ],
        "example":[
            "Example(s)",
            "include dm,bp,unix.h fcntl.h\n fd=%open(\u2019fname\u2019, o$wronly+o$append)\n if fd<0 then\n    crt \u2019Cannot open. errno=\u2019:system(0)\n end"
        ]
    },
    {
        "name":"%pause() function",
        "Syntax":[
            "Syntax",
            " (void)%pause()\n"
        ],
        "description":[
            "Description",
            "The %pause() function suspends the calling process until it receives a signal.",
            "For Windows: Not Supported",
            "Break, Esc, a logoff, a signal, or a message sent by another process causes the process to resume     execution. In case of a logoff, control is not returned to the FlashBASIC program. This is     equivalent to an infinite sleep. ",
            "Only SIGUSR2 should be used to wake up a process waiting in      %pause()."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"%pclose() function",
        "Syntax":[
            "Syntax",
            "var = %pclose((char*)stream)\n"
        ],
        "description":[
            "The %pclose() function closes the stream designated by stream opened by a\u00a0%popen() and returns the exit status of the command."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"%pgetpid() function",
        "Syntax":[
            "Syntax",
            "var = %pgetpid(line)\n"
        ],
        "description":[
            "Description",
            "The %pgetpid() function returns the UNIX Process-ID (PID) associated to the D3\u00a0process  line.",
            "For Windows: Not Supported",
            "If line is equal to -1, the PID of the current process is returned. If line is equal to -2, the PID of the flush process is returned. If the D3 process is not connected, 0 is returned."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "* Get our own pid\npid=%pgetpid(system(22))"
        ]
    },
    {
        "name":"%popen() function",
        "Syntax":[
            "Syntax",
            "pointer = (char*)%popen(command, type)\n"
        ],
        "description":[
            "Description",
            "The %popen() function creates a pipe between the calling process and the command to be executed.",
            "A stream opened by %popen() must be closed by %pclose(). The stream is closed automatically at FlashBASIC program termination."
        ],
        "parameter":[
            "Parameter(s)",
            "pointerStream pointer that directs a\nwrite to the standard input of the command if the I\/O mode isw, and reads from the standard output of the command if\nthe type isr.commandShell command line.typeI\/O mode.rReadingwWriting"
        ],
        "example":[
            "Example(s)",
            "include dm,bp,includes sysid.inc\ncfunction unix.builtin\nchar buffer[128]\nif system(38)<sys$imp> = sys$win then\n   cmd = \"dir\"\nend else\n   cmd = \"ls -l\"\nend\nptr=(char*)%popen(cmd,\"r\")\nif ptr=0 then crt \"error\" ; stop\nloop\n   n=(char*)%fgets(buffer,128,(char*)ptr)\nwhile n # 0 do\n   print field(buffer,char(0),1)\nrepeat\n%pclose((char*)ptr)",
            "This example executes a UNIX command, capturing the result."
        ]
    },
    {
        "name":"%printf() function",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"%putenv() function",
        "Syntax":[
            "Syntax",
            "result = %putenv(str)\n"
        ],
        "description":[
            "Description",
            "The %putenv() function makes the value of the environment variable name equal to the value designated by str, by altering an existing variable or by creating a new one.",
            "The environment contains a pointer to str, making it a mistake to use a FlashBASIC variable as str (FlashBASIC variables are essentially volatile). Proper use requires using %malloc() to obtain non-FlashBASIC space, using %strcpy() to copy the FlashBASIC variable into it, and passing the space allocated by %malloc() to %putenv, as in the example below."
        ],
        "parameter":[
            "Parameter(s)",
            "resultReturns nonzero if the variable is added successfully to the\nenvironment, or 0 if an error occurred.strString of the formname=value."
        ],
        "example":[
            "Example(s)",
            "Add the stringport=current\nport.numberto the host environment of the process. After\nthis program has been executed, the TCLenvcommand\ndisplays the port number of the process. The TCLenvironcommand performs this kind of environment setting.",
            "* Build the string\nstring=\u2019PORT_NUMBER=\u2019:system(22)\n* get workspace (+1 for terminating NULL)\nptr=(char*)%malloc(1+len(string))\n* Put the string into the allocated buff\n%strcpy((char*)ptr, string)\n* Add it to the environment\n%putenv((char*)ptr)"
        ]
    },
    {
        "name":"%rdhex() function",
        "Syntax":[
            "Syntax",
            "n = %rdhex(file.descriptor, var, size)\n"
        ],
        "description":[
            "Description",
            "The %rdhex() function reads the number of bytes designated by (size * 2) into var from the file specified in file.descriptor, converting each byte into two ASCII hexadecimal characters.",
            "The function returns the number of bytes actually read or -1 if an error occurred. If less than twice the size of size bytes are returned, the content of the trailing string is undefined, as is normal in C. This function is the opposite of %whex()."
        ],
        "parameter":[
            "Parameter(s)",
            "file.descriptorfile.descriptoris returned by a previous call to%open(),%creat(), or%dup().varContains the 2-byte hexadecimal\ncharacters returned. A string at least twice the size of the number\nof bytes read must have been assigned tovarbefore\nthe call by either an explicit assignment (for example,buffer=space(1000)) or by thecharreservestatement, otherwise data\nis truncated.sizeThe number of (bytes * 2) to\nread."
        ],
        "example":[

        ]
    },
    {
        "name":"%read() function",
        "Syntax":[
            "Syntax",
            "n = %read(file.descriptor, var, size)\n"
        ],
        "description":[
            "Description",
            "The %read() function reads the number of bytes designated in size into var, from the file specified by file.descriptor. This file is returned by a previous call to %open(), %creat(), or %dup().",
            "A string of a size at least equal to size must have been assigned to var before the call by either an explicit assignment (for example, buffer=space(1000)) or by the char reserve statement, or else the data is truncated.",
            "This function returns the number of bytes actually read. If the bytes returned are less than size, the content of the trailing string is undefined, as is normal in C. No data translation occurs. If the data read in var contains segment marks (x\u2019ff\u2019), results are unpredictable. Use %malloc() to obtain a memory block in which to read binary data."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "item=\u2019\u2019\nchar buffer[10000] ;* reserve buffer space\nloop while true do\n   n=%read(fd, buffer, 10000)\n   if n=-1 then\n      print \"Error \":system(0)\n      stop\n   end else\n      if n<10000 then\n         * The whole file has been read.\n         item=item:buffer[1,n]\n         convert char(10) to char(254) in item\n         write item on itemname\n         stop\n         end else\n      * Some more to read\n      item=item:buffer\n   end\nend\nrepeat"
        ]
    },
    {
        "name":"%read_ssl() function",
        "Syntax":[
            "Syntax",
            "n = %read_ssl(ssl_fd, var, size)\n"
        ],
        "description":[
            "Description",
            "The %read_ssl() function reads the number of bytes designated in  size into var, from the Secure connection specified by ssl_fd descriptor. This descriptor is returned by a previous call to %accept_ssl() or %connect_ssl.",
            "The %read_ssl() function reads the number of bytes designated in  size into  var, from the Secure connection specified by  ssl_fd descriptor. This descriptor is returned by a previous call to %accept_ssl() or %connect_ssl.",
            "A string of a size at least equal to size must have been assigned to var before the call by either an explicit assignment (for example, buffer=space(1000)) or by the char reserve statement, or else the data is truncated.",
            "This function returns the number of bytes actually read. If the bytes returned are less than size, the content of the trailing string is undefined, as is normal in C. No data translation occurs. If the data read in var contains segment marks (x\u2019ff\u2019), results are unpredictable.",
            "In the case of an error, the return code is a negative value. The table below lists all of the error return codes:",
            " "
        ],
        "parameter":[
            "Parameter(s)",
            "ssl_fdFile descriptor of the secure connection."
        ],
        "example":[

        ]
    },
    {
        "name":"%readregistry() function",
        "Syntax":[
            "Syntax",
            "result = %readregistry(registryEntry, valueName, buffer, &bufferSize)\n"
        ],
        "description":[
            "The %readregistry() function retrieves string values from the registry.",
            "For UNIX: Not Supported"
        ],
        "parameter":[
            "Parameter(s)",
            "registryEntryString containing the name of the registry entry. This value\nis relative to the following registry directory:HKEY_LOCAL_MACHINE\\SOFTWARE\\RocketSoftware\\D3\\CurrentVersion\\For example, to retrieve the UserLogon value, you can pass in\nthe following:registryEntry = \"D3vme\\pick0\"\nvalueName = \"UserLogon\"valueNameString containing the name of the value to read.bufferchar array to use as the output buffer.bufferSizeInteger representing the size of the buffer Must be passed\nin as&bufferSize."
        ],
        "example":[

        ]
    },
    {
        "name":"%realloc() function",
        "Syntax":[
            "Syntax",
            "var = (char*)%realloc((char*)buffer, size)\n"
        ],
        "description":[
            "The %realloc() function resizes the memory buffer specified to the specified size in bytes and returns a pointer to the resized buffer. The contents of the buffer are not changed. If buffer is null, this function behaves like the %malloc() function for the specified size. If the specified size is zero and the specified buffer is not null, the buffer memory is freed."
        ],
        "parameter":[
            "Parameter(s)",
            "bufferBuffer to resize.sizeNumber of bytes to reallocate\nto the specified buffer."
        ],
        "example":[

        ]
    },
    {
        "name":"%recv() function",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"%recvfrom() function",
        "Syntax":[
            "Syntax",
            "code = %recvfrom(socket, buffer, bufferLength, flags, &sourceAddress, &port)\n"
        ],
        "description":[
            "The %recvfrom() function receives a datagram from a bound socket and stores the information on the sender. If no errors occur, the number of bytes received is returned."
        ],
        "parameter":[
            "Parameter(s)",
            "socketFile descriptor for the local socket.bufferData to be received.bufferLengthMaximum length of the buffer.flagsShould be zero.sourceAddressAddress of the sender.portPort number of the sender."
        ],
        "example":[
            "Example(s)",
            "*\n* Open a connection through UDP\/IP.\n* \u00a0\u00a0recv packets from the network execute the command\n* \u00a0\u00a0and send result packets back\n*\ncfunction socket.builtin\ninclude dm,bp,includes sysid.inc\ninclude dm,bp,unix.h socket.h\nequ ip_port to 3176\n*\n* Create a socket\nfd=%socket( AF$INET, SOCK$DGRAM, 0)\nif fd<0 then print \"Error opening socket \":system(0); stop\n*\n* Bind the socket to an ethernet port\nport=%bind( fd, AF$INET, INADDR$ANY, ip_port )\n*\n* Read buffers to get the command to execute\npackcnt = 0\nbigbuff = \"\"\nloop\n   addr=0; \u00a0port=0\n   buffer = space(256)\n   length=%recvfrom( fd, buffer, 256, 0, &addr, &port)\n   if length<0 then print \"Read Error: \":system(0)\n   PackSeq = buffer[5,4]\n   MaxPack = buffer[9,4]\n   packcnt += 1\n   bigbuff[1+((PackSeq-1)*242),242] = buffer[13,242]\nuntil packcnt = MaxPack do repeat\n*\n* execute the command\nexecute bigbuff capturing ret\n*\n* get the byteswapped remote address\nremhost = \"\"\naddr = dtx(addr)\nlad = len(addr)\naddr = xtd(addr[lad-7,8])\nfor x = 1 to 4\n   part = rem(addr,256)\n   addr = int(addr\/256)\n   remhost<-1>= part\nnext x\nconvert @AM to '.' in remhost\n*\nln = len(ret)\nMaxPack = int(ln\/242)+1\nfor x = 1 to MaxPack\n   Buffer = \"RETC\":x 'r%4':MaxPack 'r%4':ret[((x-1)*242)+1,242]:space(242)\n   n = %sendto(fd, Buffer, 256, 0, &remhost, ip_port)\n   if n < 0 then\n      print \"Write error: \":system(0)\n   end\nnext x\n*\n* Close the socket\n%close( fd )"
        ]
    },
    {
        "name":"%semctl() function",
        "Syntax":[
            "Syntax",
            "code = %semctl(sem-ID, semnum, cmd, arg)\n"
        ],
        "description":[
            "The %semctl() function performs semaphore control operations.",
            "For Windows: Not Supported"
        ],
        "parameter":[
            "Parameter(s)",
            "sem-IDSemaphore ID returned by a call\nto%semget().semnumSemaphore number in the set,\nwhen applicable (depending oncmd).cmdValid values forcmdare defined in sem.h and ipc.h. The commands below are executed\nwith respect to the semaphore specified bysem-IDandsemnum:getvalReturns the value ofsemval.setvalSetssemvalto the value ofarg.getpidReturns the value ofsempid.getncntReturns the value ofsemncnt.getzcntReturns the value ofsemzcnt.The commands below apply to all\nsemaphores in the set:getallPlace all the semaphore values in theargdimensioned array.setallSet all the semaphores to the values contained in the dimensioned\narrayarg.These commands are also available:ipc$statReturn a dimensioned array that contains the various fields\nof the UNIX semaphore structures. The elements are (see the UNIX system\ndocumentation):1 sem_perm.uid2 sem_perm.cid3 sem_perm.guid4 sem_perm.gcid5 sem_perm.mode6 sem_perm.seq7 sem_perm.key8 sem_nsems9 sem_otime10 sem_ctimeipc$setSets the values of the below members of the data structure\nassociated tosem-IDto the first three elements\nof the arrayarg:1 sem_perm.uid2 sem_perm.gid3 sem_perm.modeipc$rmidRemoves the semaphore identifier.argDimensioned array that contains\nthe argument."
        ],
        "example":[
            "Example(s)",
            "include dm,bp,unix.h ipc.h\ninclude dm,bp,unix.h sem.h\n* Set initial semaphore values\ndim val(3)\nmat val=0\n%semctl(sem-ID, 0, setall, val)"
        ]
    },
    {
        "name":"%semget() function",
        "Syntax":[
            "Syntax",
            "value = %semget(key, nsems, semflg)\n"
        ],
        "description":[
            "Description",
            "The %semget() function creates a semaphore set.",
            "For Windows: Not Supported",
            "Valid values for key and semflg are defined in the files: sem.h and ipc.h. See the UNIX system documentation."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"%semop() function",
        "Syntax":[
            "Syntax",
            "code = %semop(sem-ID, sops, num)\n"
        ],
        "description":[
            "The %semop() function performs an array of semaphore operations on a set of semaphores.",
            "For Windows: Not Supported"
        ],
        "parameter":[
            "Parameter(s)",
            "sem-IDSemaphore identifier returned by a call to%semget().sopsArray of semaphores operation.sopsis\na number by 3 two-dimensional arrays. Each row in the array is the\nequivalent of asopsstructure, as defined in the\nUNIX system documentation. In other words,sops\u00a0(\u00a0i\u00a0,1)issem_num,sops\u00a0(\u00a0i\u00a0,2)issem_op,sops\u00a0(\u00a0i\u00a0,3)issem_flg. See the UNIX system documentation\nfor the description of these fields.numNumber of rows in thesopsarray.",
            "Note:The elements of thesopsarray are\nintegers, instead of short integers, as the regularlibc.acall."
        ],
        "example":[
            "Example(s)",
            "include dm,bp,unix.h ipc.h\ninclude dm,bp,unix.h sem.h\ninclude dm,bp,unix.h mode.h\n* Get a set of 4 semaphores\nsem-ID=semget(key, 4, ipc$creat)\nif sem-ID<0 then\n   crt \"semget error=\":system(0)\n   stop\nend\n* Wait for: (1st sem >=1) and (2nd sem >=2)\ndim sops(2,3)\n* - Set 1st condition\nsops(1,1)=0 ;* 1st sem\nsops(1,2)=-1 ;* Wait until can do -1\nsops(1,3)=0 ;* No flag\n* - Set 2nd condition\nsops(1,1)=1 ;* 2nd sem\nsops(1,2)=-2 ;* Wait until can do -2\nsops(1,3)=0 ;* No flag\nn=semop(sem-ID, sops, 2)\nif n<0 then\n   crt \"semop error=\":system(0)\n   stop\nend"
        ]
    },
    {
        "name":"%send() function",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"%sendto() function",
        "Syntax":[
            "Syntax",
            "code = %sendto(socket, buffer, buflen, flags, HostName, port)\n"
        ],
        "description":[
            "The %sendto() sends data to a specified destination. If no errors occur, the total number of bytes sent is returned."
        ],
        "parameter":[
            "Parameter(s)",
            "socketFile descriptor for the local socket.bufferData to send.buflenLength of the data in bytes.flagsShould be zero.HostNameDestination target server name.portPort number for the target server."
        ],
        "example":[
            "Example(s)",
            "*\n* Open a connection through UDP\/IP.\n*\ncfunction socket.builtin\ninclude dm,bp,includes sysid.inc\ninclude dm,bp,unix.h socket.h\nequ ip_port to 3176\n*\n* Get the host name.\ntclread line\nhost = field(trim(line),' ',2)\n*\n* Create a socket\nfd=%socket( AF$INET, SOCK$DGRAM, 0)\nif fd<0 then print \"Open error: \":system(0); stop\n*\nport=%bind( fd, AF$INET, INADDR$ANY, ip_port )\n*\nleng = 4; err = \" \u00a0\u00a0\u00a0\"\nx = %getsockopt(fd,SOL$SOCKET,SO$ERROR,&err,&leng)\n*\nprompt \"\"\nprint \"command: \":; input cmd\nln = len(cmd)\nMaxPack = int(ln\/242)+1\nfor x = 1 to MaxPack\n   Buffer = \"ExEC\":x 'r%4':MaxPack 'r%4':cmd[((x-1)*242)+1,242]:space(242)\n   n = %sendto(fd, Buffer, 256, 0, &host, ip_port)\n   if n < 0 then\n      print \"Write error: \":system(0)\n   end\nnext x\n*\n* Loop reading the Result packets\nbigbuff = \"\"; packcnt = 0\nloop\n   addr=0; \u00a0port=0\n   buffer = space(256)\n   length=%recvfrom( fd, buffer, 256, 0, &addr, &port)\n   if length<0 then print \"Read Error: \":system(0)\n   PackSeq = buffer[5,4] \n   MaxPack = buffer[9,4]\n   packcnt += 1\n   bigbuff[1+((PackSeq-1)*242),242] = buffer[13,242]\nuntil packcnt = MaxPack do repeat\n*\n* print the buffer\ncnt = dcount(bigbuff,char(254))\nfor x = 1 to cnt\n   print bigbuff<x>\nnext x\n*\n* Close the socket\n%close( fd )\nend"
        ]
    },
    {
        "name":"%setflush() function",
        "Syntax":[
            "Syntax",
            "oldp = %setflush(newp, newfp)\n"
        ],
        "description":[
            "Description",
            "The %setflush() function sets the flush periods.",
            "For Windows: Not Supported",
            "The normal flush period is set to the number of seconds specified by newp, the forced flush period to newfp and the previous values are returned into oldp. The upper 16 bits of the (int) oldp is the value of the forced flush period, and the lower 16 bits, the value of the normal flush.",
            "If newp is null, no change is made to the normal flush.",
            "If newfp is equal to -2, no change is made to the forced flush.",
            "If newfp is equal to -1, the forced flush is disabled.",
            "If newfp is equal to 0, the forced flush is set into immediate write mode."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"%setsockopt() function",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"%shell() function",
        "Syntax":[
            "Syntax",
            "code = %shell (command)\n"
        ],
        "description":[
            "Description",
            "The %shell() function executes the MS-DOS command, command, and returns the exit code of the command.",
            "The %shell() function executes an executable file, not the command built-ins."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"%shellcapture() function",
        "Syntax":[
            "Syntax",
            "code = %shellcapture(command, buffer, size, read)\n"
        ],
        "description":[
            "Description",
            "The %shellcapture() function executes the MS-DOS command, command, and captures the result in the buffer variable, up to the maximum size. If the buffer is not large enough, the exceeding output is discarded.",
            "This form should be used when the expected output is small. The size of the buffer is returned in read. If there is not enough space in the provided buffer, read is set to the maximum value size.",
            "This function returns 0 if successful."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "The%shellcapture()function executes an executable file, not the command built-ins.\nFor example, to list a directory (DIR), type the following, or something\nsimilar:",
            "%shellcapture(\"cmd \/c dir\", buffer, buffsize, &readsize)"
        ]
    },
    {
        "name":"%shmat() function",
        "Syntax":[
            "Syntax",
            "pointer = (char*)%shmat(shmid, (char*)shmaddr, shmflg)\n"
        ],
        "description":[
            "Description",
            "The %shmat() function attaches a shared memory segment associated with the shared memory identifier shmid and returns the address of the segment.",
            "For Windows: Not Supported",
            "Valid values for shmflg are defined in shm.h and ipc.h. See the UNIX system documentation."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"%shmctl() function",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"%shmdt() function",
        "Syntax":[
            "Syntax",
            "value = %shmdt((char*)shmaddr)\n"
        ],
        "description":[
            "The %shmdt() function detaches the shared memory segment located at the address specified by shmaddr.",
            "For Windows: Not Supported"
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"%shmget() function",
        "Syntax":[
            "Syntax",
            "shmid = %shmget(key, size, shmflg)\n"
        ],
        "description":[
            "Description",
            "The %shmget() function creates a shared memory segment and returns a shared memory identifier.",
            "For Windows: Not Supported",
            "Valid values for key and shmflg are defined in shm.h and ipc.h. See the UNIX system documentation."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"%shutdown() function",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"%socket() function",
        "Syntax":[
            "Syntax",
            "n = %socket(addr.family, type, protocol)\n"
        ],
        "description":[
            "Description",
            "The %socket() function creates a socket in the specified addr.family and of the specified type. A  protocol can be specified or assigned by the system. If the protocol is left unspecified (with a value of 0), the system selects an appropriate protocol in the specified addr.family.",
            "To compile successfully, the statement cfunction\u00a0socket.builtin must be included in the source code.",
            "Upon successful completion, a valid file descriptor is returned. If the call fails, a value of -1 is returned and the system(0) function returns the value of  errno.",
            "The socket is closed by a %close call or automatically when the FlashBASIC program terminates."
        ],
        "parameter":[
            "Parameter(s)",
            "addr.familySpecifies the addressing scheme\nused later to decode addresses. Valid values are defined in the include\nfile:dm,bp,unix.h socket.h. Commonly used values\nare:af$inetIPv4af$inet6IPv6typeSpecifies the semantics of communication.\nValid values are defined in the include: dm,bp,unix.h socket.h. Commonly\nused values are:sock$streamSocket streamssock$dgramDatagramprotocolShould be left to0, to let the system assign the protocol."
        ],
        "example":[
            "Example(s)",
            "cfunction socket.builtin\ninclude dm,bp,includes sysid.inc\ninclude dm,bp,unix.h socket.h\nfd=%socket(af$inet, sock$stream, 0)\nif fd<0 then\n   crt \u2019Socket creation failed. Error \u2019:system(0)"
        ]
    },
    {
        "name":"%sprintf() function",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"%startfileio() function",
        "Syntax":[
            "Syntax",
            "%startfileio(file path names)\n"
        ],
        "description":[
            "Description",
            "Specifies that all input comes from the input file and all output goes to the output   file. ",
            "UNIX: Not Supported",
            "The FlashBASIC tab of the D3 Device Manager contains the default path of the input and output     files. See the D3 System Administration Guide for more information."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "The file path name specified in the D3 Device Manager and the%startfileioC function has the following format:",
            "\"inputfile\" ; \"outputfile\" ,size; \"debug\u00a0inputfile\" ; \"debug\u00a0outputfile\" ,size"
        ]
    },
    {
        "name":"%startlistilocks() function",
        "Syntax":[
            "Syntax",
            " code = %startlistilocks( hostFSI, &handle )"
        ],
        "description":[
            "Description",
            "The %startlistilocks() function prepares for calls to the    %listitemlocksfilter() function and the %endlistilocks()   function. ",
            "To compile successfully, the cfunction fsi.builtin statement must be     included in the source code. ",
            "If a value other than 0 is returned, then the call failed. This function is used to prepare     for calls to the %listitemlocksfilter() and      %endlistilocks() functions."
        ],
        "parameter":[
            "Parameter(s)"
        ],
        "example":[
            "Example(s)",
            "cfunction fsi.builtin\n hostFSI = \"myserver\"\n handle = 0\n code = %startlistilocks( hostFSI, &handle )\n filter = \"\"\n bufferLength = 1000000\n Char buffer[ bufferLength ]\n bufferLength = %listitemlocksfilter( handle, filter, buffer, bufferLength )\n Crt buffer[ 1, bufferLength ]\n code = %endlistilocks( handle )",
            "Note:For a use case, seedm,bp, nt_list-ilocks."
        ]
    },
    {
        "name":"%stopfileio() function",
        "Syntax":[
            "Syntax",
            "%stopfileio()\n"
        ],
        "description":[
            "Stops all input and output to and from the file. The FlashBASIC tab of the D3 Device Manager contains the default path of the input and output files (see the D3 System Administration Guide for more information).",
            "For UNIX: Not Supported"
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"%strcat() function",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"%strcpy() function",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"%strlen() function",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"%ttyname() function",
        "Syntax":[
            "Syntax",
            "ptr = (char*)%ttyname(fd)\n"
        ],
        "description":[
            "Description",
            "The %ttyname() function returns a pointer to a static area containing the null terminated path name of the terminal device associated to the file descriptor fd.",
            "For Windows: Not Supported",
            "If fd does not describe a device in the \/dev directory, a null pointer is returned.",
            "When run on a phantom process, this function returns a null pointer."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "char buffer[32]\n* Get the device name associated to our standard input\nptr=(char*)%ttyname(0)\nif ptr=0 then\n* This is not a terminal (pipe?)\n   return\nend\n* Copy the data from the static string to Pick\nchar buffer[32]\n%strcpy(buffer, (char*)ptr)\nmytty=field(buffer, char(0), 1)"
        ]
    },
    {
        "name":"%unlink ()function",
        "Syntax":[
            "Syntax",
            "code = %unlink(path)\n"
        ],
        "description":[
            "The %unlink() function removes the directory entry named by the path name pointed to by  path. The named file is unlinked, and when all the links have been removed, and the file is no longer open, the file is removed."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "include dm,bp,unix.h fcntl.h\n* Get a local file named myfile\nfn=\u2019myfile'\nfd=%creat(fn, o$rdwr)\n...\n* Remove the temporary file\nif %unlink(fn) # 0 then\n   crt \u2019Cannot remove temporary file. Error \u2019:system(0)\nend"
        ]
    },
    {
        "name":"%wait() function",
        "Syntax":[
            "Syntax",
            "var = %wait(&status)\n"
        ],
        "description":[
            "Description",
            "The %wait() function returns the exit code of the child processes created by the current process.",
            "For Windows: Not Supported",
            "The status is returned in the integer status, passed by its address.",
            "Note that even though status is an integer, only the lower 16 bits are updated by the system call. See the UNIX system documentation for more details on the format of the returned status."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "status=0\n(void)%wait(&status)\nhigh$status=int(status\/256)\nlow$status=mod(status,256)\nbegin case\ncase low$status=255\n* Child stopped due to a signal\ncase low$status=0\n* Child stopped by calling exit()\ncase high$status=0\n* Child was terminated due to a signal\nend case"
        ]
    },
    {
        "name":"%whex() function",
        "Syntax":[
            "Syntax",
            "byte.count = %whex(file.descriptor, var)\n"
        ],
        "description":[
            "Description",
            "The %whex() function writes to the file specified by file.descriptor returned by a previous call to %open(), %creat(), or %dup() a string of bytes resulting from converting the ASCII string variable into binary.",
            "Two digits are converted into one eight bit binary character. var is assumed to contain only hexadecimal characters 0 to 9, A to F or a to f. The function returns the number of bytes actually written or -1 if an error occurred. The size written to the file is the size of  var divided by 2. This function is the reverse of %rdhex()."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "* Write \"eof\"x\u2019ff\u2019 on device\nn=%whex(fd, oconv(\"eof\",\"mx\"):\u2019FF\u2019)"
        ]
    },
    {
        "name":"%write() function",
        "Syntax":[
            "Syntax",
            " n= %write(file.descriptor, var, size)\n"
        ],
        "description":[
            "Description",
            "The %write() function writes the number of bytes designated by size from var to the file specified by file.descriptor returned by a previous call to %open(), %creat(), or %dup().",
            "This function returns the number of bytes actually written. If the length of var is less than size, the content of the string written is undefined, as is usual in C. No data translation occurs."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "n=len(item)\nif %write(fd,item,n)<n then crt \"write error\""
        ]
    },
    {
        "name":"%write_ssl() function",
        "Syntax":[
            "Syntax",
            "n = %write_ssl(ssl.fd, var, size)\n"
        ],
        "description":[
            "Description",
            "The %write_ssl() function writes the number of bytes designated by size from var to the Secure connection specified by ssl_fd descriptor. This descriptor is returned by a previous call to %accept_ssl() or %connect_ssl.",
            "The %write_ssl() function writes the number of bytes designated by size from var to the Secure connection specified by  ssl_fd descriptor. This descriptor is returned by a previous call to %accept_ssl() or %connect_ssl.",
            "This function returns the number of bytes actually written. If the length of var is less than size, the content of the string written is undefined, as is usual in C. No data translation occurs."
        ],
        "parameter":[
            "Parameter(s)",
            "ssl_fdFile descriptor of the secure connection."
        ],
        "example":[
            "Example(s)",
            "n=len(item)\nif %write_ssl(ssl_fd,item,n)<n then crt \"write error\""
        ]
    },
    {
        "name":"Compiling programs",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"FlashBASIC and BASIC differences",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Compiler directives",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"$* directive",
        "Syntax":[
            "Syntax",
            " $* \" text \"\n $* ' text '\n $* \\ text \\\n\n"
        ],
        "description":[
            "Description",
            "The $* (asterisk) directive allows a comment to be embedded directly     into the program\u2019s object code at compilation.",
            "The $* directive directs the compiler to write the quoted text directly     into the object code of the program. These comments are generally used to place copyright     information or version numbers into object code before it is distributed."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "Example 1",
            "To place the string \"HELLO\" directly into the object code of a program, the code might read:",
            "$* \"HELLO\"",
            "Example 2",
            "In this example, the$*directive is used to place a copyright into an\n    adventure\n    game:$* \" DRAGONS -- Version 1.1 \"\n $* \" Copyright 1989 N. West, NBM Inc. \"\n EQUATE TRUE TO 1, FALSE TO 0,\n    BEL TO CHAR(7)\n .\n .\n ."
        ]
    },
    {
        "name":"$chain directive",
        "Syntax":[
            "Syntax",
            " $chain {file.ref} item-ID\n"
        ],
        "description":[
            "Description",
            "The $chain directive continues FlashBASIC or BASIC compilation in a   different source item.",
            "When file.ref is omitted, the current file is assumed.",
            "There is no limit to the number of $chain directives, but any statement           after a $chain directive is ignored."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "bp myprog\n 003 equ bell to char(7)\n 004 equ am to char(254), vm to char(253), svm to char(252)\n 005 open \"cust\" to customer.file\n 006 $chain prog\n  \u00a0\n bp prog\n 002 read item1 from customer.file,\"01234\" else print bell"
        ]
    },
    {
        "name":"$DEFINE directive",
        "Syntax":[
            "Syntax",
            " $DEFINE identifier {replacement-text}"
        ],
        "description":[
            "Description",
            "The $DEFINE directive supplies replacement text for a symbol and   defines a symbol used to control the compilation of the program.",
            "When used to replace symbol text, the specified identifier and any associated replacement text     is added to the symbol table. Every occurrence of the symbol following the      $DEFINE directive is replaced by the replacement text. If no replacement     text is specified, the symbol is defined with a value of null."
        ],
        "parameter":[
            "Parameter(s)",
            "identifierSpecifies the symbol to be defined.replacement-textSpecifies a string of characters that the compiler uses to replace each occurrence of\n        the symbol in the current program. Thereplacement-textparameter is\n        terminated by a RETURN."
        ],
        "example":[
            "Example(s)",
            "Example 1",
            "TEST. DEF",
            "001 $DEFINE GREETINGS PRINT TIMEDATE();PRINT 'Hello'\n 002 GREETINGS",
            "Example 2",
            "PLATFORM",
            "001 $DEFINE PLATFORM.D3"
        ]
    },
    {
        "name":"$IFDEF directive",
        "Syntax":[
            "Syntax",
            " $IFDEF identifier statements\n {$ELSE statements}\n $ENDIF"
        ],
        "description":[
            "The $IFDEF directive tests for the definition of an identifier in the compiler symbol   table. "
        ],
        "parameter":[
            "Parameter(s)",
            "identifierSpecifies the symbol to be tested.If the symbol is defined in the symbol table (by $DEFINE), the statements following the\n         identifier are executed.If the symbol is not defined in the symbol table (by $DEFINE), the statements in the\n         $ELSE clause are executed if specified. The $ENDIF directive is required.$ELSE(Optional) If the symbol is not defined, the statements in the $ELSE\n         clause are executed if specified.$ENDIF(Required) The $ENDIF directive marks the end of the $IFDEF directive."
        ],
        "example":[
            "Example(s)",
            "Example 1",
            "PLATFORM",
            "001 $DEFINE PLATFORM.D3",
            "Example 2",
            "TEST.IFDEF",
            "001 $INCLUDE PLATFORM\n 002 $IFDEF PLATFORM.D3\n 003 USER.INFO = OCONV('', 'U50BB')\n 004 $ELSE\n 005 CALL !GET.USERS('', '', '',USER.INFO,'')  \n 006 $ENDIF\n 007 PRINT USER.INFO"
        ]
    },
    {
        "name":"$IFNDEF directive",
        "Syntax":[
            "Syntax",
            "$IFNDEF identifier statements \n{$ELSE statements}\n$ENDIF"
        ],
        "description":[
            "The $IFNDEF directive tests for the absence of a definition for an identifier in the   compiler symbol table."
        ],
        "parameter":[
            "Parameter(s)",
            "identifierSpecifies the symbol to be tested.If the symbol is not defined in the symbol table (by $DEFINE), statements following the\n         identifier are executed.If the symbol is defined in the symbol table (by $DEFINE), the statements in the $ELSE\n         clause are executed if specified. The $ENDIF directive is required.$ELSE(Optional) If the symbol is defined, the statements in the $ELSE clause are executed\n        if specified.$ENDIF(Required) The $ENDIF directive marks the end of the $IFNDEF directive."
        ],
        "example":[

        ]
    },
    {
        "name":"$include directive",
        "Syntax":[
            "Syntax",
            " $include {file.ref} item-ID\n"
        ],
        "description":[
            "Description",
            "The $include directive inserts FlashBASIC or BASIC code from a   separate item (known as an include item) to be compiled as part of the object module of the   current program or subroutine. The original source program is not altered.",
            "The $include directive is typically used to include an item consisting of      common or equate statements, format strings, and     executable statements from a single source into several programs.",
            "When the FlashBASIC or BASIC compiler encounters an $include directive, it     opens the file specified by file.ref, reads the item, and compiles it into     the current program.",
            "Include items contain FlashBASIC or BASIC statements, but need not be a complete FlashBASIC or     BASIC program, and it is not necessary to compile them. If an include item is modified, however,     all FlashBASIC or BASIC programs that include it must be recompiled.",
            "If file.ref is omitted, the current file is assumed.",
            "There is no limit to the number of $include directives in a program, but only     five levels of nesting are allowed."
        ],
        "parameter":[
            "Parameter(s)",
            "file.refSpecifies the file that contains the item that contains the FlashBASIC or BASIC code to be\n        inserted for compiling.item-IDSpecifies the item that contains the FlashBASIC or BASIC code\nto be inserted for compiling."
        ],
        "example":[
            "Example(s)",
            "bp standard.equates.inc\n 001 equ stx to char(1)\n 002 equ form.feed to char(12)\n 003 equ bell to char(7)\n 004 equ am to char(254), vm to char(253), svm to char(252)\n 005 dim customer.item(25)\n 006 open \u2019customer\u2019 to customer.file else stop 201,\u2019customer\u2019\n 007 equ last.name to customer.item(1)\n 008 equ first.name to customer.item(2)\n 009 equ title to customer.item(3)\n \u00a0\n bp prog\n 001 $include standard.equates.inc\n 002 read item1 from customer.file,\"01234\" else print bell"
        ]
    },
    {
        "name":"$options directive",
        "Syntax":[
            "Syntax",
            " $options {tag}\n"
        ],
        "description":[
            "Description",
            "The $options directive sets compatibility options for the FlashBASIC   or BASIC compiler."
        ],
        "parameter":[
            "Parameter(s)",
            "APProvides code compatibility with previous releases (provided\nnew features are not used).DEFAULTExtended. Provides as many statements and functions as are available. This is the default\n                                                  setting and is the same asEXT.Use as the new development default setting.EXTExtended. Provides as many statements and functions as are available. This is the default\n                                                  setting and is the same asDEFAULT.Use as the new\n                                                  development default setting.Because many\n                                                  new functions are allowed, array references in\n                                                  existing code might need to be changed to some\n                                                  other name for proper compilation.GAGeneral Automation. Similar to theEXToption, but provides tighterGAcompatibility with regard to\n                                                  thelocateandmatchstatements.Note:It is\n                                                  suggestednotto use this mode for new\n                                                  development, as this setting disallows any\n                                                  functions not provided by General Automation\n                                                  Pick.IN2Currently the same asEXT.CAUTION:Never use this setting for new\n                                                  development.INFORMATIONPrime Information. Currently the same asEXT.CAUTION:Never use this setting for new\n                                                  development.mvBaseProvides the same features asEXT, but supports the mvBase\n                                                  syntax for theifrandinputstatements.Additionally, supports thetimeout,nxtkey, andprvkeystatements.CAUTION:Never use this setting for new\n                                                  development.PICKPick System\u2019sR83. Same asR83.R83Pick System\u2019sR83. Currently the same asAP.CAUTION:Never use this setting for new\n                                                  development.REALITYCurrently the same asEXT.CAUTION:Never use this setting for new\n                                                  development."
        ],
        "example":[
            "Example(s)",
            "$options ext\n x=\"abc\"\n print ereplace(x,\"a\",\"b\")\n \"bbc\""
        ]
    },
    {
        "name":"$UNDEFINE directive",
        "Syntax":[
            "Syntax",
            "$UNDEFINE identifier"
        ],
        "description":[
            "The $UNDEFINE directive deletes a specified identifier from the symbol table. The   identifier must have previously been defined by a $DEFINE directive."
        ],
        "parameter":[
            "Parameter(s)",
            "identifierSpecifies the symbol to be deleted from the symbol table.If the identifier was not previously defined, the $UNDEFINE directive has no effect."
        ],
        "example":[

        ]
    },
    {
        "name":"Error logging",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "To enable logging for a file\ncalled bp, type:",
            "create-file bp,$log 7",
            "Compiling using theooption now logs\nerrors into thebp,$logfile. These can be displayed\nby typing any of these commands:",
            "ct bp,$log\nlist-item bp,$log\nsort-item bp,$log"
        ]
    },
    {
        "name":"Performance",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"BASIC symbolic debugger",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"FlashBASIC modules",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Creating a FlashBASIC module",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Cataloging a FlashBASIC Module",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Running a FlashBASIC module",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Running FlashBASIC from a Windows command prompt",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Flash interpreter",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Running FlashBASIC from Visual Basic",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Passing Visual Basic arguments",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Passing D3 Visual Basic objects",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Accessing VME resources from a rule module",
        "Syntax":"",
        "description":[

        ],
        "parameter":[
            "Parameter(s)",
            "PrinterNameSpecifies the name and location\nof a printer (for example, \\\\Server\\Printer).boj(Optional) Beginning of job page\neject. Specifies whether or not an empty page is ejected before a\nprint job. Possible values are:SSuppresses the initial page eject.nullEjects one page prior to each job.eoj(Optional) End of job page eject.\nSpecifies number of empty pages from 0-8 the printer ejects after\neach job. The default is 0."
        ],
        "example":[
            "Example(s)",
            "nameThebojandeojare\nnot specified, resulting in a single page eject prior to the job.\nNo page ejects occur after the job.name,SThebojspecification is S (suppress) and\ntheeojis not specified. The result is no page\nejects prior to or after the job.name,,5Thebojspecification is null and theeojspecification is 5. The result is a single page eject\nprior to the job and 5 page ejects after.name,S,7Thebojspecification is S (suppress) and\ntheeojspecification is 5. The result is no page\neject prior to the job and 7 page ejects after.",
            "The printer device is specified with theprint\nonstatement, where the device number, starting at 0, is\nthe device listed in the D3FLASHPRT MS-DOS variable. By default, the\nfirstprinter(0)is used."
        ]
    },
    {
        "name":"Using the COM interface to FlashBASIC",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"FlashBASIC automation application interfaces",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"%CoInitialize interface",
        "Syntax":[
            "Syntax",
            "retcode = %CoInitialize(Param)\n"
        ],
        "description":[
            "Call to initialize the COM library."
        ],
        "parameter":[
            "Parameter(s)",
            "Param[out]Handle to the CAutoCTRL object."
        ],
        "example":[

        ]
    },
    {
        "name":"%CoCreateObject interface",
        "Syntax":[
            "Syntax",
            "retcode = %CoCreateObject(Param1, Param2, Param3)\n"
        ],
        "description":[
            "Call to create a COM Object."
        ],
        "parameter":[
            "Parameter(s)",
            "Param1[in]CAutoCTRL handle.Param2[in]ProgID name (for example, Excel.Application.8).Param3[out]Dispatch object containing the IUnknown interface."
        ],
        "example":[

        ]
    },
    {
        "name":"%CoQueryInterface interface",
        "Syntax":[
            "Syntax",
            "retcode = %CoQueryInterface(Param1, Param2, Param3)\n"
        ],
        "description":[
            "Query IUnknown for IDispatch interface."
        ],
        "parameter":[
            "Parameter(s)",
            "Param1[in]Dispatch object containing the IUknown interface.Param2[in]IID_IDispatch.Param3[out]Dispatch object containing the IDispatch interface."
        ],
        "example":[

        ]
    },
    {
        "name":"%CoQueryMethod interface",
        "Syntax":[
            "Syntax",
            "retcode = %CoQueryMethod(Param1, Param2, Param3, \u2026 )\n"
        ],
        "description":[
            "Query for a method."
        ],
        "parameter":[
            "Parameter(s)",
            "Param1[in]Dispatch object containing the IDispatch this call is associated\nwith.Param2[in]Integer identifies how many methods followed here.Param3[out]Method name #1."
        ],
        "example":[

        ]
    },
    {
        "name":"%CoGetDispatch interface",
        "Syntax":[
            "Syntax",
            "retcode =%CoGetDispatch (Param1, Param2, Param3, Param4, Param5, \u2026)\n"
        ],
        "description":[
            "Call a to get an IDispatch."
        ],
        "parameter":[
            "Parameter(s)",
            "Param1[in]Dispatch object containing the IDispatch this call is associated\nwith.Param2[in]String - The get method name.Param3[out]Returned dispatch object containing the IDispatch queried.Param4[in]Format string specifying the data types of the arguments followed\nhere (0 if no arguments).Param5[in]Argument #1."
        ],
        "example":[

        ]
    },
    {
        "name":"%CoPropertyGet interface",
        "Syntax":[
            "Syntax",
            "retcode = %CoPropertyGet (Param1, Param2, Param3)\n"
        ],
        "description":[
            "Call a Property Get."
        ],
        "parameter":[
            "Parameter(s)",
            "Param1[in]Dispatch object containing the IDispatch this call is associated\nwith.Param2[in]String - The get property name.Param3[out]String buffer for the returned value of the property."
        ],
        "example":[

        ]
    },
    {
        "name":"%CoPropertyPut interface",
        "Syntax":[
            "Syntax",
            "retcode = %CoPropertyPut (Param1, Param2, Param3, Param4, \u2026 )\n"
        ],
        "description":[
            "Call a Property Put."
        ],
        "parameter":[
            "Parameter(s)",
            "Param1[in]Dispatch object containing the IDispatch this call is associated\nwith.Param2[in]String - The put property name.Param3[in]Format string specifying the data types of arguments (0 if\nno arguments).Param4[in]Argument #1."
        ],
        "example":[

        ]
    },
    {
        "name":"%CoInvoke interface",
        "Syntax":[
            "Syntax",
            "retcode = %CoInvoke(Param1, Param2, Param3, Param4, Param5, Param6, \u2026 )\n"
        ],
        "description":[
            "Call a method."
        ],
        "parameter":[
            "Parameter(s)",
            "Param1[in]Dispatch object containing the IDispatch this call is associated\nwith.Param2[in]String - The method name.Param3[in]Flag identifying the type of IDispatch call:DISPATCH_PROPERTYGET,DISPATCH_PROPERTYPUT, orDISPATCH_METHOD.Param4[out]If this is a call to get an IDispatch, the output is a dispatch\nobject containing the returned IDispatch. Otherwise, pass 0 as the\ninput value.Param5[in]String specifying the data types of arguments (pass 0 if no\narguments).Param6[in]Argument #1."
        ],
        "example":[

        ]
    },
    {
        "name":"%CoGetException interface",
        "Syntax":[
            "Syntax",
            "retcode = %CoGetException(Param1, Param2)\n"
        ],
        "description":[
            "Get error description."
        ],
        "parameter":[
            "Parameter(s)",
            "Param1[in]CAutoCTRL handle.Param2[out]String buffer for error description."
        ],
        "example":[

        ]
    },
    {
        "name":"%CoRelease interface",
        "Syntax":[
            "Syntax",
            "retcode = %CoRelease(Param1, Param2)\n"
        ],
        "description":[
            "Release a dispatch or COM object when done."
        ],
        "parameter":[
            "Parameter(s)",
            "Param1[in]Dispatch object to be released.Param2[in]Boolean: FALSE to release just the dispatch object passed-in,\nTRUE to release the COM object to which this dispatch object belongs."
        ],
        "example":[

        ]
    },
    {
        "name":"%CoUninitialize interface",
        "Syntax":[
            "Syntax",
            "retcode = %CoUninitialize(Param)\n"
        ],
        "description":[
            "Uninitialize the COM library."
        ],
        "parameter":[
            "Parameter(s)",
            "Param[in]CAutoCTRLhandle."
        ],
        "example":[

        ]
    },
    {
        "name":"FlashBASIC triggers",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Inserting a trigger",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Recompiling a trigger",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Named common in triggers",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "To audit all accesses to a file,\nthe application opens the audit file in the open trigger and stores\nthe file descriptor in the common, along with the file name and an\naudit message number:",
            "OpenTrigger\n   subroutine OpenTrigger( InputFileName )\n      common \/audit\/ AuditFd, FileName, MsgNumber\n      open \u201cdm,Audit,\u201d to AuditFd\n      FileName = InputFileName\n      MsgNumber = 1\n   writev \u201cOpening \u201c:FileName to AuditFd, FileName, MsgNumber\n   return",
            "The write trigger or the read trigger accesses the audit\nfile using this file descriptor in the common:",
            "ReadTrigger\n   subroutine ReadTrigger( Record )\n      common \/audit\/ AuditFd, FileName, MsgNumber\n      Msg = \u201cReading \u201c:Access(10):\u201d from \u201c:FileName\n      MsgNumber = MsgNumber + 1\n      writev Msg to AuditFd, FileName, MsgNumber\n   return",
            "The close trigger closes the audit file:",
            "CloseTrigger\n   subroutine CloseTrigger( File )\n      common \/audit\/ AuditFd, FileName, MsgNumber\n      Msg = \u201cClosing:FileName\n      MsgNumber = MsgNumber + 1\n      writev Msg to AuditFd, FileName, MsgNumber\n      close AuditFd\n   return",
            "Note:Triggers are attached to the file object, and while the code is shared among all users, the\n                  named commons are not. In other words, the data stored in a named common is\n                  private to the client application. Also, if a file is opened more than once\n                  (aliases), the file descriptors have different named common spaces. Make sure all\n                  accesses to the file are done using the same file descriptor.The named common space is destroyed when the file object is destroyed, not closed. This\n                  distinction does not affect VME applications for which closing a file implies the\n                  object destruction, but for VB and C++ applications it is possible to close the\n                  file without destroying the object.Commons are shared."
        ]
    },
    {
        "name":"Environment variables in triggers",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"BASIC screen utilities",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"screen.display utility",
        "Syntax":[
            "Syntax",
            "call \"dm,bp, screen.display\"\n"
        ],
        "description":[
            "The screen.display utility displays a screen and waits for a selection."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "include dm,bp,includes screen.inc\n* Init the screen\n* ---------------\ncall \"dm,bp, screen.init\"\n* Clear the whole screen\n* ----------------------\ncrt @(-1)\n* Build the menu\n* --------------\nscreen.x=0 ; screen.y=0 ;* Top left corner\nscreen(1)=\"User\" ;* Option 1\nscreen(2)=\"Account\"\nscreen.help(1)=\"User name\" ;* Help messages\nscreen.help(2)=\"Account name\"\nscreen.size=2 ;* Number of options\nscreen.active=1 ;* Option 1 is default\nscreen.msgline=23 ;* Help line\n* Display the menu\n* ----------------\ncall \"dm,bp, screen.display\"\nbegin case\n   case screen.active=\u2019x\u2019\n      * Back to TCL\n      stop\n   case screen.active=\u2019q\u2019\n      * User typed \u2019q\u2019 or Esc\n      ...\n   case 1\n      * Selected an option from 1 to screen.size\n      ...\nend case"
        ]
    },
    {
        "name":"screen.erase utility",
        "Syntax":[
            "Syntax",
            "call \"dm,bp, screen.erase\"\n"
        ],
        "description":[
            "The screen.erase utility erases a formatted screen."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"screen.init utility",
        "Syntax":[
            "Syntax",
            "call \"dm,bp, screen.init\"\n"
        ],
        "description":[
            "The screen.init utility initializes the screen common workspace. This call should be done prior to any other call the screen subroutines."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"screen.input utility",
        "Syntax":[
            "Syntax",
            "call \"dm,bp, screen.input\"\n"
        ],
        "description":[
            "The screen.input utility displays a formatted screen and waits for input from a user. Multiple fields can be entered by the user before validation. Type checking is done by the subroutine, and the caller can provide a custom external routine to perform additional controls."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "The example below displays a\nscreen like:",
            "User : ...........\nOrder #1 Order #2\n................ .................\ninclude dm,bp,includes screen.inc\n* Init the screen\n* ---------------\ncall \"dm,bp, screen.init\"\n* Clear the whole screen\n* ----------------------\ncrt @(-1)\n* Build the menu\n* --------------\nscreen.x=0 ; screen.y=0 ;* Top left corner\nscreen(1)=\"User\" ;* Option 1\nscreen(2)=\"\"\nscreen(2)<1,-1>=\"Order #1 \" ;* 1st column\nscreen(2)<1,-1>=\"Order #2 \" ;* 2nd column\nscreen.type(1)=\u2019t\u2019 ;* Mandatory text\nscreen.type(2)=1 ;* User provided control\nmat screen.data=\u2019\u2019 ;* Clear result\nscreen.help(1)=\"User name\" ;* Help messages\nscreen.help(2)=\"Account number and val date\"\nscreen.size=2 ;* Number of options\nscreen.active=1 ;* Option 1 is default\nscreen.msgline=23 ;* Help line\nscreen.control=\"account,bp, check.input\"\n* Display the screen and input data\n* ---------------------------------\ncall \"dm,bp, screen.input\"\nbegin case\n   case screen.active=\u2019x\u2019\n      * Back to TCL\n      stop\n   case screen.active=\u2019q\u2019\n      * User typed \u2019q\u2019 or Esc\n      ...\n   case screen.active=\u2019y\u2019\n      * OK. Validated\n      ...\nend case"
        ]
    },
    {
        "name":"O\/S interoperability commands and functions",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"uclose command",
        "Syntax":"",
        "description":[
            "Description",
            "The command fails if FileHandle is not valid. If an error occurs, the ELSE     clause executes. If the uerror() function is called, the appropriate error     code is returned."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "These statements open, and then close, the\\books\\chap1.txtfile:",
            "FileName=\"c:\\books\\chapt1.txt\"\nUOPEN FileName FOR READ TO FileHandle ELSE\n   PRINT \"Unable to open \":FileName\n   STOP\nEND\nUCLOSE FileHandle ELSE\n   STOP\nEND"
        ]
    },
    {
        "name":"ucreate command",
        "Syntax":"",
        "description":[
            "Description",
            "If the file already exists, the ucreate command shortens the length of the     file to 0. If the file does not exist, the ucreate command creates a new     file. The file pointer is positioned at the beginning of the file. All future references to this     file must be made through FileHandle. If an error occurs, the ELSE path     executes."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "The following example creates the\\books\\chap1.txtfile. If the file\n    exists, theucreatecommand truncates the file to zero bytes. The file opens\n    for reading\/writing and the file descriptor is returned in the variable FILEDES. If an error\n    occurs, the ELSE clause executes:",
            "FILENAME=\"c:\\books\\chap1.txt\"\nUCREATE FILENAME TO FILEDES ELSE\n   PRINT \"Unable to create and open \":FILENAME\n   STOP\nEND\nUCLOSE FILEDES ELSE STOP"
        ]
    },
    {
        "name":"udelete command",
        "Syntax":"",
        "description":[
            "Description",
            "If no process has the file open, the file is deleted. If an error occurs, the ELSE path     executes."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "To remove the\\library\\book1.txtfile:",
            "FILENAME = \u201cc:\\library\\book1.txt\u201d\nUDELETE FILENAME ELSE\n   PRINT \u201cCan\u2019t delete \":FILENAME\nEND"
        ]
    },
    {
        "name":"uerror() function",
        "Syntax":"",
        "description":[
            "Description",
            "If an inter-operating system command fails, a positive integer code indicating the reason for     the failure is stored for access by the uerror() function. If the command is     successful, the error code is zero.",
            "The uerror() function reports return status codes resulting from the last     mvBASIC inter-operating system statement. Exceptions are the uexecute     command, uwaitfor command, and the umessage command."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "The following example opens the\\library\\book1.txtfile for reading or\n    prints an error code if the OPEN was not successful.",
            "FILENAME=\"c:\\library\\book1.txt\"\nUOPEN FILENAME FOR READ TO FILEDES ELSE\n   PRINT \"Unable to UOPEN \":FILENAME:\"\n      Code=\":UERROR( )\n   STOP\nEND\nUREAD VAAR2 FROM FILEDES FOR 50 THEN\n   LENGTH=LEN(VAR2)\n   IF LENGTH=50 ELSE\n      PRINT \"Only able to read \":UERROR( ):\" bytes.\"\n   END\nEND ELSE\n   PRINT \"Unable to read \":FILENAME:\"\n      Code=\":UERROR( )\nEND\nUCLOSE FILEDES ELSE NULL"
        ]
    },
    {
        "name":"uexecute command",
        "Syntax":"",
        "description":[
            "Description",
            "If the RETURNING clause is used, the specified var contains an identifier     used in either a umessage or uwaitfor command. This     identifier is only valid while the previously launched uexecute command is     running.",
            "If the RETURNING clause is not used, the uexecute command does not return     control to the mvBASIC program until the launched command terminates."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "To execute the Windows program NOTEPAD:",
            "*\n* Launch notepad. Program will not resume\n* until notepad is terminated.\n*\nUEXECUTE \"NOTEPAD.EXE\"\n*\n* Launch Notepad; sleep for 2 seconds then close\n*\nUEXECUTE \"NOTEPAD.EXE\" RETURNING HANDLE\nSLEEP 2\nUMESSAGE TO HANDLE,16,0,\"\""
        ]
    },
    {
        "name":"ulock command",
        "Syntax":"",
        "description":[
            "Description",
            "FileHandle must be opened for WRITE or READWRITE. The number of contiguous     bytes from the current file pointer position to be locked or unlocked is indicated by      n. If an error occurs, the ELSE path is executed. If n is     -1, all bytes from the present position of the file pointer to the end of the file are locked.     This statement does not move the file pointer. n has a maximum lockable     region size of 4 MB.",
            "The ulock command may be used against a file opened in READ mode. The      ulseek() function allows the file pointer to be positioned beyond the locked     section of the file."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "The following statements open a file, and then lock the first 50 bytes of that file. Data is\n    then written into the locked section of the file. Theuwritecommand advances\n    the file pointer for the file (in this case, by 17, the length of the string). Theulseekfunction is used to move the file pointer back to the beginning of\n    the file so that the first 50 bytes may be unlocked.",
            "FILENAME=\"c:\\books\\chap2.txt\"\nUOPEN FILENAME FOR WRITE TO FILEDES ELSE\n  PRINT \"Unable to open \":FILENAME\n  STOP\nEND\n* Pointer by default, set to begining of file\nULOCK FILEDES LOCK FOR 50 ELSE\n  PRINT \"Unable to Lock first 50 bytes of \":FILENAME\n  GOTO EOJ:\nEND\nUWRITE \"THIS IS TEST DATA\" ON FILEDES THEN\n  * NOTE: UWRITE will advance Pointer\nEND ELSE\n  PRINT \"Unable to write to \":FILENAME\n  GOTO EOJ:\nEND\n* Set pointer back to begining of file\nIF (ULSEEK(FILEDES,0,0) = -1) THEN\n  PRINT \"ULSEEK failed\"\n  GOTO EOJ:\nEND\nULOCK FILEDES UNLOCK FOR 50 ELSE NULL\n*\nEOJ:\nUCLOSE FILEDES ELSE NULL"
        ]
    },
    {
        "name":"ulseek() function",
        "Syntax":"",
        "description":[
            "Description",
            "The ulseek() function positions the file pointer in      FileHandle n bytes from either the beginning, current, or ending position in the file. ",
            "To indicate where the offset should start, specify one of the following as the second     parameter:",
            "The value returned is the absolute location of the file pointer from the beginning of the     file, measured in bytes. If an error occurs, a value of -1 is returned."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "ULSEEK (FileHandle, 0, 2)Points to the end of a file.ULSEEK (FileHandle, 0, 0)Points to the beginning of a file.ULSEEK (FileHandle, -8, 2)Points to the eighth byte before the end of the file.ULSEEK (FileHandle, 0, 1)Returns the current file pointer position.",
            "The following example opens the\\books\\chap3.txtfile for reading and\n    reads the last 50 bytes of the file into the variableVAR2. If it is unable\n    to do this, it prints an error message telling which inter-operating system command failed\n     (ulseekoruread).",
            "FILENAME=\"c:\\books\\chap3.txt\"\nUOPEN FILENAME FOR READ TO FILEDES ELSE\n  PRINT \"Unable to open \":FILENAME\n  STOP\nEND\n* Use ULSEEK to move pointer 50 bytes in\n* from end of file\nVAR1=ULSEEK(FILEDES,-50,2)\nIF (VAR1<>-1) THEN\n  * Now move read last 50 bytes\n  UREAD VAR2 FROM FILEDES FOR 50 ELSE\n     PRINT \"Unable to read \":FILENAME\n     GOTO EOJ:\n  END\nEND ELSE\n  PRINT \"Ulseek failed on file \":FILENAME\n  GOTO EOJ:\nEND"
        ]
    },
    {
        "name":"umessage command",
        "Syntax":"",
        "description":[
            "Description",
            "If the TO clause is used, var must be an identifier returned by the           uexecute command RETURNING clause.",
            "If the TO clause is not used, the message and parameters are sent to the process\u2019s Client.         ",
            "The following table lists connection message numbers and definitions:"
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "*\n * Program will launch notepad, Sleep 2 seconds\n * then close the window.\n *\n   UEXECUTE \"NOTEPAD.EXE EXISTING.TXT\" RETURNING HANDLE\n   SLEEP 2\n   UMESSAGE TO HANDLE,16,0,\"\"\n *\n * Program will now display a message in bottom of\n * mvTERM Window.\n *\n   UMESSAGE 1527,0,\"Remember to Close your files...\"\n *"
        ]
    },
    {
        "name":"uopen command",
        "Syntax":"",
        "description":[
            "Description",
            "The file pointer is positioned at the beginning of the file. The path points to a path naming     a file. If an error occurs or the file does not exist, the ELSE clause executes.",
            "One reason that the uopen command may fail is that the user attempting to     open the file does not have the necessary permissions. For example, if the file contains     confidential information that the user is not authorized to read, the uopen     command does not open the file. The ELSE clause executes instead.",
            "FileHandle is a variable that is returned from the uopen command and must     be used for subsequent accesses to this file. The FileHandle variable is the     file descriptor of the file on the host system. If the file cannot be opened, the ELSE clause     executes."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "FILEDES1 contains the file descriptor that allows the user to access the\\books\\chap4.txtfile. In the following statement, the file is opened for\n    READ only. Any attempt to write to the file using this file descriptor results in an error.",
            "UOPEN \u201cc:\\books\\chap4.txt\u201d FOR READ TO FILEDES1 ELSE STOP",
            "The following statement opens thechap4.txtfile located in the current\n    directory. FILEDES2 contains the file descriptor necessary to open thechap4.txtfile. The file is opened for WRITE only.  If the UREAD command\n    is used, an error results. If the file cannot be opened for any reason, the message in the ELSE\n    clause displays.",
            "UOPEN \u201cchap4.txt\u201d FOR WRITE TO FILEDES2 ELSE PRINT \u201cCAN NOT OPEN FILE!\u201d",
            "The next statement opens thechap4.txtfile located in the parent\n    directory of the current directory. If the file can be opened for reading and writing, FILEDES3\n    contains the file descriptor allowing access to the file. If an error occurs, the ELSE clause\n    executes.",
            "UOPEN \u201c..\\chap4.txt\u201d FOR READWRITE TO FILEDES3 ELSE STOP",
            "The last statement opens thechap4.txtfile for reading and writing.\n    After the file is opened, FILEDES4 contains the file descriptor that allows access to thechap4.txtfile. If an error occurs, the ELSE clause executes.",
            "UOPEN \u201cchap4.txt\u201d TO FILEDES4 ELSE STOP"
        ]
    },
    {
        "name":"uread command",
        "Syntax":"",
        "description":[
            "Description",
            "The uread command reads the file currently opened to the file variable      FileHandle for the number of bytes specified by n or     until an EOF mark is reached. The n variable indicates the number of     contiguous bytes to be read from the current file pointer position. The resulting string value     is assigned to the var variable. If an error occurs, the ELSE clause executes     and the uerror() command returns the appropriate error code. The file pointer     is advanced by the number of bytes read."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "UOPEN \"C:\\TEST.TXT\" TO HANDLE ELSE STOP\n10 UREAD ITEM FROM HANDLE FOR 500 THEN\n     PRINT UERROR( )\n  END ELSE\n     PRINT \"ERROR CODE = \": UERROR( )\n     GOTO EOJ:\n  END\n  GOTO 10\nIf TEST.TXT is 943 bytes the output is:\n  500\n  443  \n  ERROR CODE = 38",
            "The following example prints the first 50 bytes of the\\books\\chap5.txtfile. If less than 50 bytes are present, the bytes available are printed. A null string is\n    returned if the file pointer is positioned at the end of the file. Line feed characters embedded\n    in the file are also printed.",
            "FILENAME=\"c:\\books\\chap5.txt\"\n  UOPEN FILENAME FOR READ TO FILEDES ELSE\n     PRINT \"Unable to open \":FILENAME\n     STOP\n  END\n  UREAD VAR1 FROM FILEDES FOR 50 ELSE GOTO EOJ:\n  PRINT VAR1",
            "After execution of the following example, the string TESTDATA2 is equal to TESTDATA1. The\\books\\chap6.txtfile was created using theucreatestatement, which opened the file for writing only.",
            "TESTDATA1 = \"THIS IS TEST DATA\"\nFILENAME=\"c:\\books\\chap6.txt\"\n  UCREATE FILENAME TO FILEDES2 ELSE\n     PRINT \"Unable to create and open \":FILENAME\n     STOP\n  END\n  * Write out DATA and CLOSE\n  UWRITE TESTDATA1 ON FILEDES2 ELSE\n     PRINT \"Write to \":FILENAME:\" failed\"\n  END\n  UCLOSE FILEDES2 ELSE\n     PRINT \"UCLOSE failed on \":FILENAME\n  END\n  *\n  UOPEN FILENAME TO FILEDES3 ELSE STOP\n  UREAD TESTDATA2 FROM FILEDES3 FOR 17 ELSE GO TO EOJ:"
        ]
    },
    {
        "name":"ureadline() function",
        "Syntax":"",
        "description":[
            "Description"
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "For example, the following statement generates the behavior as shown in the table.",
            "UREADLINE var FROM filehandle UNTIL ';' THEN\/ELSE clause",
            "The Host File Contents column describes the content of the host file for the example.EOF indicates the actual End of File.The var column is the value returned.The THEN\/ELSE column indicates which of the THEN or ELSE clauses is taken.The UERROR() column indicates what the value returned by an immediate call to\n      theuerror()function would return.",
            "Table 1:Host File ContentsvarTHEN\/ELSEUERROR( )EOF\"\"ELSE38\";EOF\"\"\"\"\"THENELSE038\";;EOF\"\"\"\"\"\"\"THENTHENELSE0038\"ABCEOF\"\"ABC\"\"\"THENELSE338\"ABC;EOF\"\"ABC\"\"\"THENELSE338\"ABC;;EOF\"\"ABC\"\"\"\"\"THENTHENELSE3038\"ABC;XYZEOF\"\"ABC\"\"XYZ\"\"\"THENTHENELSE3338\"ABC;XYZ;;EOF\"ABC\"\"XYZ\"\"\"THENTHENELSE3338\";ABC;;XYZ;;EOF\"\"\"\"ABC\"\"\"\"XYZ\"\"\"\"\"THENTHENTHENTHENTHENELSE0303038",
            "The following example prints the first line (delimited by a line-feed) of the\\books\\chap5.txtfile. A null string is returned if the file pointer is\n    positioned at the end of the file.",
            "FILENAME=\"c:\\books\\chap5.txt\"\nLF = CHAR(10)\nUOPEN FILENAME FOR READ TO FILEDES ELSE\n   PRINT \"Unable to open \":FILENAME\n   STOP\nEND\nUREADLINE VAR1 FROM FILEDES UNTIL LF ELSE GOTO   EOJ:\nEND\nPRINT VAR1"
        ]
    },
    {
        "name":"usystem() function",
        "Syntax":"",
        "description":[
            "Description",
            "The usystem() function returns:"
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "Enum = 0; Config = ''\nLOOP\n Temp=USYSTEM(206,WorkStation:@AM:ClientID:@AM:Type:@AM:Enum)\n FOR I = 2 TO DCOUNT(Temp,@AM)\n    Config<-1> = Temp<I>\n NEXT I\n Enum = Temp<1>\nWHILE Enum GT 0 DO REPEAT"
        ]
    },
    {
        "name":"uwaitfor command",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "Example 1",
            "*\n * Launch Notepad; Allow user 3 seconds to\n * Complete edit. If not done in 3 seconds\n * Close application for them.\n *\n UEXECUTE \"NOTEPAD.EXE\" RETURNING HANDLE\n UWAITFOR HANDLE, 300 ELSE\n   UMESSAGE TO HANDLE,16,0,\"\"\n END",
            "Example 2",
            "Running the following program will close Notepad.exe after 5 seconds:",
            "001 UEXECUTE \"NOTEPAD.EXE\" RETURNING HANDLE\n 002\n 003 UWAITFOR HANDLE, 500 THEN\n 004 __PRINT \"THANKS FOR WAITING\"\n 005 END ELSE\n 006 __UMESSAGE TO HANDLE,16,0,\"\"\n 007 END"
        ]
    },
    {
        "name":"uwrite command",
        "Syntax":"",
        "description":[
            "Description",
            "A file on the host system is represented as an unformatted string of bytes without internal     subdividers or markers. READ and WRITE commands provide sequential access to files by advancing     a pointer within the file. Subsequent READ or WRITE commands advance this internal pointer from     the current position in the file. The user may specify the exact location within a file to be     written to by positioning the file pointer at the preferred location before executing the     command.",
            "See the ulseek() function section for more     information.",
            "The uwrite command allows the user to write the string value of      var to a file previously described by the FileHandle     variable. The FileHandle variable is obtained from the      uopen command and the ucreate command. The write starts     at the position indicated by the file pointer. The number of contiguous bytes from the current     file pointer position to be written is equal to the number of bytes in var     variable."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "FILENAME=\"c:\\letter\\write.txt\"\n  UOPEN FIELNAME FOR WRITE TO FILEDES2 ELSE\n     PRINT \"Unable to open \":FILENAME\n     STOP\n  END\n  TESTDATA = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n  UWRITE TESTDATA ON FILEDES2 ELSE\n     PRINT \"Unable to write to \":FILENAME\n  END\n  UCLOSE FILEDES2 ELSE NULL",
            "The following example displays a file descriptor returned from auopencommand being used to write data to a file on the host system. The result is that the alphabet\n    is written to the\\letter\\write2.txtfile. If this file had already\n    existed, the first 26 characters in the file would be overwritten by this command. Other data in\n    the file is not affected.",
            "FILENAME=\"c:\\letter\\write2.txt\"\n  UOPEN FILENAME FOR READWRITE TO FILEDES3 ELSE\n     PRINT \"Unable to open \":FILENAME\n     STOP\n  END\n  TESTDATA = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n  UWRITE TESTDATA ON FILEDES3 ELSE\n     PRINT \"Unable to write to \":FILENAME\n  END\n  UCLOSE FILEDES3 ELSE NULL",
            "The following example uses the file descriptor created from theucreatecommand to write data to a file on the host system:",
            "FILENAME=\"c:\\letter\\write3.txt\"\n  UCREATE FILENAME TO FILEDES4 ELSE\n     PRINT \"Unable to create and open \":FILENAME\n     STOP\n  END\n  TESTDATA = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n  UWRITE TESTDATA ON FILEDES4 ELSE\n     PRINT \"Unable to write to \":FILENAME\n  END\n  UCLOSE FILEDES4 ELSE NULL"
        ]
    },
    {
        "name":"BASIC\/FlashBASIC Debugger",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Symbol table (FlashBASIC Debugger)",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Entering the Debugger (BASIC\/FlashBASIC Debugger)",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Referencing variables",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Zone output specification",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"FlashBASIC Debugger commands",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"# command",
        "Syntax":[
            "Syntax",
            "#\n"
        ],
        "description":[
            "The # command displays the item-ID of the error message that caused the most recent abort into the BASIC\/FlashBASIC debugger."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Dollar command",
        "Syntax":[
            "Syntax",
            "$\n"
        ],
        "description":[
            "The $ command displays the current program name and current line number, and verifies the object code. The object code is verified by performing a checksum verification. This is used to determine if the object code has been corrupted since the last time it was compiled. The $ and ? commands are identical."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            ":run bp conv (d\n*E1",
            "Displayed by debugger.",
            "*$\n*$ conv L 1 object verifies."
        ]
    },
    {
        "name":"$! command",
        "Syntax":[
            "Syntax",
            "{flash.routine.name:}$!\n"
        ],
        "description":[
            "The $! command displays the current call stack with parameter names and values being shown. If the symbol table is not present, the internal names are shown."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"\/ command",
        "Syntax":[
            "Syntax",
            "{flash.routine.name:}\/variable\n{flash.routine.name:}\/dim.array.variable\n{flash.routine.name:}\/dim.array.variable(vector.number)\n{flash.routine.name:}\/dim.array.variable(row.num, col.num)\n\/*\n"
        ],
        "description":[
            "The \/ command references and optionally alters the contents of variables within the run-time code being executed."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "*\/variableAccesses a plain variable and displays its current value.*\/dim.array.variableDisplays each element of a dimensioned array. If a dimensioned\narray is referenced without a subscript, each element displays, one\nat a time. To exit this display without stepping through all the elements,\npress BREAK, or enter any non-null value. The non-null value will\nnot replace any element displayed. The contents of the arraycannotbe altered.*\/dim.array.variable(vector.number)Accesses a single-dimensioned array variable. With the vector\nnumber designated, only that element displays. This can also access\na two-dimensional array and assumes the second vector number is 1.*\/dim.array.variable(row.num,col.num)Accesses a specific location of a two-dimensional array.*\/*Displays the current assignment of every variable in the program.\nTypically, programs have a lot of variables. This function doesnotpaginate. Pressing BREAK interrupts this runaway variable\ndisplay and returns to the debugger prompt.",
            "In each of the above cases (except thedim.array.variableform), the operator is given the opportunity to change the requested\nvalue. If you press ENTER at the=prompt, the symbol\nremains unchanged. Otherwise, any value entered is placed into the\nvariable.",
            "Note:flash.routine.namecan only\nbe specified if the program has been optimized through the FlashBASIC\ncompiler. Whenflash.routine.nameis specified,\nthe correspondingdebuggercommand is executed\nagainst the specified routine. The colon separatingflash.routine.nameand thedebuggercommand is required."
        ]
    },
    {
        "name":"? command (FlashBASIC Debugger)",
        "Syntax":[
            "Syntax",
            "?\n"
        ],
        "description":[
            "The ? command displays the current program name and line number."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "run bp conv (d\n*E1\n*?\n*? conv L 1 object verifies.",
            "whereconvis the name of the program\nbeing executed andL 1indicates that line one of\nthe program is about to be executed.",
            "If theconvprogram had beenflashed(compiled with theooption), the message produced by the?command\nis:",
            "*? conv L 1 FlashBASIC object verifies."
        ]
    },
    {
        "name":"?! command",
        "Syntax":[
            "Syntax",
            "{flash.routine.name:}?!\n"
        ],
        "description":[
            "The ?! command is used in the BASIC\/FlashBASIC debugger to display the current call stack with current parameter values being shown."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"> command",
        "Syntax":[
            "Syntax",
            ">command-expr"
        ],
        "description":[
            "The > command executes any TCL command typed concatenated after the       > and returns to the BASIC debugger."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            ">who56 ref bob"
        ]
    },
    {
        "name":"b command (FlashBASIC Debugger)",
        "Syntax":[
            "Syntax",
            "{flash.routine.name:}b\n{flash.routine.name:}bvariable operator variable\n{flash.routine.name:}bvariable operator numeric.literal\n{flash.routine.name:}bvariable operator \"literal.string\"\n{flash.routine.name:}bvariable\n{flash.routine.name:}b$operator line.number\n"
        ],
        "description":[
            "The b command establishes a breakpoint condition in the breakpoint table     that causes the program to enter the BASIC\/FlashBASIC debugger when the condition defined in the     breakpoint expression is met. ",
            "The valid comparative operators are: >, <, and           =. ",
            "A plus sign displays for each breakpoint successfully entered into the table until the         table is full. In BASIC\/FlashBASIC, there is no limit to the number of table entries. When a         breakpoint is placed in the table, the debugger is entered each time the breakpoint is         met."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "Sets a breakpoint on line 5.\nThe breakpoint remains until execution is complete, or it is manually\nremoved.",
            "run bp fred (d\n*E1\n*b$=5",
            "When running FlashBASIC, this command sets a breakpoint\nthat causes execution to pause every time the subroutinesallyis entered. A breakpoint set at a nonexecutable comment line is\nignored by the FlashBASIC debugger.",
            "*sally:b",
            "Note:Invoking the FlashBASIC debugger slows down the run-time execution of the program.flash.routine.namecan only be specified if the program has been optimized\n       through the FlashBASIC compiler.Whenflash.routine.nameis specified, the corresponding debugger command\n       is executed against the specified routine. The colon separatingflash.routine.nameand the debugger command is required."
        ]
    },
    {
        "name":"c command (FlashBASIC Debugger)",
        "Syntax":[
            "Syntax",
            "c{!}\n"
        ],
        "description":[
            "The c command toggles on or off the display of the current source line when stepping through the program with CTRL+J. When this function is on, the line displays after it has been executed."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"CTRL+J command",
        "Syntax":[
            "Syntax",
            "CTRL+J\n"
        ],
        "description":[
            "The\u00a0CTRL+J command has the same effect as the BASIC\/FlashBASIC debugger g command, except that CTRL+J only requires one character. If the BASIC\/FlashBASIC debugger c option is enabled, CTRL+J also displays the BASIC instruction after it is executed."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"CTRL+N command",
        "Syntax":[
            "Syntax",
            "CTRL+N\n"
        ],
        "description":[
            "The CTRL+N command is similar to the BASIC\/FlashBASIC debugger g command except that if single-stepping is active, the CTRL+N command will step over any subroutine calls."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"d command (FlashBASIC Debugger)",
        "Syntax":[
            "Syntax",
            " {flash.routine.name:}d\n"
        ],
        "description":[
            "The d command displays the contents of the breakpoint and trace table."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "The following table shows that there are two variables being traced and one breakpoint\n    active:",
            "*d\n T1 incount\n T2 client.number\n T3\n T4\n T5\n T6\n B1 b$=250\n B2\n B3\n B4",
            "Note:flash.routine.namecan only be\nspecified if the program has been optimized through the FlashBASIC\ncompiler. Whenflash.routine.nameis specified,\nthe corresponding debugger command is executed against the specified\nroutine. The colon separatingflash.routine.nameand the debugger command is required."
        ]
    },
    {
        "name":"de command (FlashBASIC Debugger)",
        "Syntax":[
            "Syntax",
            "de\n"
        ],
        "description":[
            "The de command invokes the system debugger from the BASIC\/FlashBASIC debugger. Issuing a g command from the system debugger returns control to the BASIC\/FlashBASIC debugger. The de command is identical to the debug command at TCL."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "*de\n!g\n*",
            "Warning:The system debugger is extremely powerful\nand shouldnotbe used without a strong working knowledge of\nits capabilities and features. Using the system debugger incorrectly\ncould result in corrupt data or a system crash."
        ]
    },
    {
        "name":"debug command (FlashBASIC Debugger)",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "Press BREAK to enter the debugger.",
            "*I3***debugI bd.d.064 => 19 b$bd.com!!!g",
            "Returns to the BASIC\/FlashBASIC debugger.",
            "***g",
            "Resumes program execution.",
            "Warning:The\nsystem debugger is extremely powerful and shouldnotbe used without a strong working knowledge of its capabilities and\nfeatures. Using the system debugger incorrectly could result in corrupt\ndata or a system crash."
        ]
    },
    {
        "name":"down command",
        "Syntax":[
            "Syntax",
            "down\n"
        ],
        "description":[
            "The down command is used in the BASIC\/FlashBASIC debugger to move down the call stack."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"e command",
        "Syntax":[
            "Syntax",
            "e{number.lines}\n"
        ],
        "description":[
            "The e command indicates the number of instructions to execute prior to returning to the BASIC\/FlashBASIC debugger."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "Sets the execution counter.",
            "*e10",
            "Resumes program execution. This invokes the debugger after\nexecuting 10 lines.",
            "*g",
            "Setscontinuousexecution.",
            "*e",
            "Resumes program execution, cancels any previousecommands, and makes the program run without execution\ninterruption. Thegcommandmustfollow\ntheecommand to resume the program.",
            "*g"
        ]
    },
    {
        "name":"edit command (BASIC\/FlashBASIC Debugger)",
        "Syntax":[
            "Syntax",
            " edit\n"
        ],
        "description":[
            "The edit command invokes the Update processor for editing the current program from within the BASIC\/FlashBASIC debugger. It automatically positions the cursor at the current execution line number."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"end command (FlashBASIC Debugger)",
        "Syntax":[
            "Syntax",
            "end\n"
        ],
        "description":[
            "The end command terminates the run-time portion of a BASIC or FlashBASIC program, exits the debugger, and returns control to TCL."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"g command (FlashBASIC Debugger)",
        "Syntax":[
            "Syntax",
            "g{line.number}\n"
        ],
        "description":[
            "The g command resumes execution of a program after it has been interrupted by the execution of a BASIC\/FlashBASIC debug statement or by pressing ESC or BREAK."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"k command",
        "Syntax":[
            "Syntax",
            "{flash.routine.name:}k{breakpoint.number}\n"
        ],
        "description":[
            "The k (kill) command kills a breakpoint previously set with the b command, and removes the entry from the breakpoint table. The k command, followed by pressing ENTER, removes all breakpoint entries from the table."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "Kills the first breakpoint in\nthe table.",
            "*k1",
            "Kills all breakpoints.",
            "*k",
            "Note:flash.routine.namecan only be\nspecified if the program has been optimized through the FlashBASIC\ncompiler. Whenflash.routine.nameis specified,\nthe corresponding debugger command is executed against the specified\nroutine. The colon separatingflash.routine.nameand the debugger command is required."
        ]
    },
    {
        "name":"l command (FlashBASIC Debugger)",
        "Syntax":[
            "Syntax",
            "{flash.routine.name:}?l{starting.line-ending.line}\n{flash.routine.name:}?l{line.number}\n{flash.routine.name:}?l{*}\n{flash.routine.name:}?l\n"
        ],
        "description":[
            "The l command lists the current source line, or a specified range of lines, from the corresponding source program being executed. The l* form displays the entire program. The l command, followed by pressing ENTER, displays the current program source line."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "Lists lines 10 through 17.",
            "*l10-17",
            "Lists line 5.",
            "*l5",
            "Lists the whole program.",
            "*l*",
            "Note:flash.routine.namecan only be\nspecified if the program has been optimized through the FlashBASIC\ncompiler. Whenflash.routine.nameis specified,\nthe corresponding debugger command is executed against the specified\nroutine. The colon separatingflash.routine.nameand the debugger command is required."
        ]
    },
    {
        "name":"lp command",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"m command (FlashBASIC Debugger)",
        "Syntax":[
            "Syntax",
            " m"
        ],
        "description":[
            "Description",
            "The m command toggles modal trapping on and off.",
            "A modal trap occurs whenever an external subroutine is called, returned from, or when a     mainline program enters another mainline program. In response to the modal trap, type the      m command to toggle the modal trap ON or OFF depending on the trap\u2019s     previous state.",
            "When a modal trap occurs, it will be indicated by entering the BASIC debugger (*), and     one of these prompts appears:",
            " xxx indicates the source code line number in the entered program (should          be line 1).",
            " xxx indicates the source code line number in the calling program where          the return occurred.",
            " xxx indicates the source code line number in the entered program (should          be line 1).",
            "In response to the previous modal traps, type the m command at the *     prompt to toggle the modal trap ON or OFF. While in this mode, using the g     command will resume execution until the next modal trap occurs."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "Example 1",
            "This example shows one main program calling a subroutine:",
            "main\n 001 debug\n 002 print \"calling sub\"\n 003 call subr\n 004 print \"returned from sub\"\n\n     subr\n 001 subroutine subr\n 002 print \"in the sub\"\n 003 return10",
            "Example 2",
            "This example shows program execution showing modal trapping on:",
            ":main\n\n *I1\n *m on\n *g calling sub\n \n *MC subr 1\n *g in the sub\n \n *MR main 3\n *g returned from sub\n :"
        ]
    },
    {
        "name":"n command (FlashBASIC Debugger)",
        "Syntax":[
            "Syntax",
            "n{number.times}\n"
        ],
        "description":[
            "The n command ignores any debugger breakpoint conditions for a specific number of occurrences."
        ],
        "parameter":[
            "Parameter(s)",
            "number.timesIf not specified, the program executes through one breakpoint,\nand then stops."
        ],
        "example":[
            "Example(s)",
            "Skips four breakpoint conditions\nbefore reentering debugger.",
            "*n4",
            "Note:flash.routine.namecan only be\nspecified if the program has been optimized through the FlashBASIC\ncompiler. Whenflash.routine.nameis specified,\nthe correspondingdebuggercommand is executed\nagainst the specified routine. The colon separatingflash.routine.nameand thedebuggercommand is required."
        ]
    },
    {
        "name":"off command (FlashBASIC Debugger)",
        "Syntax":[
            "Syntax",
            "off\n"
        ],
        "description":[
            "The off command stops processing at all levels on the current port and returns control to the initial logon prompt."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"p command (FlashBASIC Debugger)",
        "Syntax":[
            "Syntax",
            "p\n"
        ],
        "description":[
            "The p command toggles disabling output display; debugger output is still displayed."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"pc command",
        "Syntax":[
            "Syntax",
            "pc\n"
        ],
        "description":[
            "The pc command closes the current spooler entry and releases the print job to the Spooler."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"r command (FlashBASIC Debugger)",
        "Syntax":[
            "Syntax",
            "{flash.routine.name:} r\n"
        ],
        "description":[
            "The r command pops the top return stack address of the local subroutine from the stack, causing the next return command to return to the address revealed by the pop."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"return command",
        "Syntax":[
            "Syntax",
            "return\n"
        ],
        "description":[
            "The return command returns from the current subroutine in the BASIC\/FlashBASIC debugger. All code from the current debug point to the end of the routine is executed normally."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"s command (FlashBASIC Debugger)",
        "Syntax":[
            "Syntax",
            "{flash.routine.name:}s{!}\n"
        ],
        "description":[
            "Description",
            "The s command displays the contents of the subroutine stack.",
            "The ! lists the actual lines of source where the gosub statements are found (FlashBASIC only)."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"t command (FlashBASIC Debugger)",
        "Syntax":[
            "Syntax",
            "{flash.routine.name:} t {variable}\n"
        ],
        "description":[
            "Description",
            "The t command places a given variable into the trace table, causing   the debugger to display the specified data element along with the contents of the break and trace   tables on each break. ",
            "A plus sign displays for each variable successfully entered into the table, until the table is full. The maximum number of trace table entries is six, except in FlashBASIC, where the number is unlimited.",
            "The t command, followed by pressing ENTER, toggles the trace function on or off.",
            "In mvBase compatibility mode, the t command is similar to the      c! command, in that it displays the source line before it has been     executed."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "Sets a trace on the variable calledcounter:",
            "*tcounter",
            "Warning:flash.routine.namecan only be specified if the program has been optimized\n    through the FlashBASIC compiler. Whenflash.routine.nameis specified, the\n    correspondingdebuggercommand is executed against the specified routine. The\n    colon separatingflash.routine.nameand thedebuggercommand is required."
        ]
    },
    {
        "name":"u command (FlashBASIC Debugger)",
        "Syntax":[
            "Syntax",
            "{flash.routine.name:} u {variable}\n"
        ],
        "description":[
            "Description",
            "The u command removes from the trace table a given variable, or all variables, previously specified with the t command.",
            "A minus sign displays for each trace table entry successfully removed from the table. The u command, followed by pressing ENTER, clears all trace table entries."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "This removes the trace on the\nclient number variable from the table.",
            "*uclient.number",
            "This removes all traced variables from the table.",
            "*u",
            "Warning:flash.routine.namecan only be specified if the program has been optimized through\nthe FlashBASIC compiler. Whenflash.routine.nameis specified, the correspondingdebuggercommand\nis executed against the specified routine. The colon separatingflash.routine.nameand thedebuggercommand\nis required."
        ]
    },
    {
        "name":"up command",
        "Syntax":[
            "Syntax",
            "up\n"
        ],
        "description":[
            "The up command is used in the BASIC\/FlashBASIC debugger to move up the call stack."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"v command",
        "Syntax":[
            "Syntax",
            "v\n"
        ],
        "description":[
            "The v command verifies the current BASIC object code by performing a checksum verification. This determines if the object code has been corrupted since the last time it was compiled."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "run bp conv (d\n*E1\n*v\n*$ object verifies."
        ]
    },
    {
        "name":"[ command",
        "Syntax":[
            "Syntax",
            "[{left.limit,right.limit]}\n"
        ],
        "description":[
            "The [ command sets the left output zone limits of debugger display."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "*[1,30]\n*["
        ]
    },
    {
        "name":"\\ command",
        "Syntax":[
            "Syntax",
            "{flash.routine.name:}\\variable.expression\n{flash.routine.name:}\\integer.expression\n"
        ],
        "description":[
            "The \\ command is used by the BASIC\/FlashBASIC debugger to display the current value of a variable or integer expression."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "*\\a(i,j)\n*\\a(i)+b(i)",
            "Note:flash.routine.namecan only be\nspecified if the program has been optimized through the FlashBASIC\ncompiler (see theooption under thecompile command). Whenflash.routine.nameis specified, the correspondingdebuggercommand\nis executed against the specified routine. The colon separatingflash.routine.nameand thedebuggercommand\nis required."
        ]
    },
    {
        "name":"] command",
        "Syntax":[
            "Syntax",
            "]\n"
        ],
        "description":[
            "The ] command sets the right output zone limits of debugger display."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"C programming language C functions",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"C functions overview",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Library format",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"General usage",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"String handling",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Environment setting",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Break key handling",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Handling general D3 interrupts",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Custom signal processing",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "\/* Prints the name of all users in the users file. *\/\n#include \"CPuser.h\"\nmain()\n{\nCPSTR * machine = _CP_mkstrl(\"pick0\",5); \/* default *\/\nCPSTR * user = _CP_mkstrl(\"dm\",2);\nCPSTR * md = _CP_mkstrl(\"dm\",2);\nCPSTR * filename = _CP_mkstrl(\"users\",5);\nint fd = -1;\nint sl = -1; \/* initialize select list *\/\nCPSTR * item_id = _CP_str_null;\n\/* Logon onto \"pick0\" as \"dm\" in the \"dm\" md *\/\nif (_CP_logon(machine, user, _CP_str_null,\nmd, _CP_str_null, -1, 0) < 0)\n{\nprintf(\"Logon error %d\\n\", _CP_errno);\nexit(1);\n}\n\/* done with machine, user, and md *\/\n_CP_str_free(machine);\n_CP_str_free(user);\n_CP_str_free(md);\n\/* Make the break key terminate the program *\/\n_CP_unix_break();\n\/* Open the users file into the file descriptor fd *\/\nif (_CP_open(&fd, _CP_str_null, filename) < 0)\n{\n_CP_logoff();\nprintf(\"Could not open users file \\n\");\nexit(2);\n}\n\/* done with filename *\/\n_CP_str_free(filename);\n\/* Do a raw select of \"users\" and store that select\nlist in the select list descriptor sl *\/\n_CP_select(fd, &sl, 0);\n\/* Switch to Unix-type I\/O so we can use printf *\/\n_CP_unix_env();\n\/* repeatedly read item-IDs and print them as a list *\/\n\/* Note how item_id is repeatedly passed to _CP_readnext.\nEach time, _CP_readnext will resize it if necessary,\nand write the next item-ID into that CPSTR *\/\nwhile (_CP_readnext(&item_id, &sl, 0, 0) >= 0)\n{\n_CP_TERM(item_id); \/* terminate for printf *\/\nprintf(\"%s\\n\", _CP_SADDR(item_id));\n}\n\/* done with item_id - Not absolutely necessary since *\/\n\/* it will be cleaned up when we exit *\/\n_CP_str_free(item_id);\n\/* logoff and return *\/\n_CP_logoff();\nreturn 0;\n}"
        ]
    },
    {
        "name":"C functions, integration",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"C programming language C functions list",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"C string",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "char x [] = \"hi there\";"
        ]
    },
    {
        "name":"CPSTR",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"CPSTR*",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"_CP_alpha",
        "Syntax":[
            "Syntax",
            "int _CP_alpha(int* result, CPSTR* string)\n"
        ],
        "description":[
            "Description",
            "The _CP_alpha function is equivalent to the  result = alpha(string) BASIC statement.",
            "This function returns -1 if an error occurs. The error code is contained in _CP_errno."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "\/* is \"hi\" alphabetic? *\/\nCPSTR * s = _CP_mkstr(\"hi\");\nint i;\n\u00a0\n_CP_alpha(&i,s);\n_CP_unix_env();\nprintf(\"%d\\n\", i);\n_CP_str_free(s);"
        ]
    },
    {
        "name":"_CP_ascii",
        "Syntax":[
            "Syntax",
            "int _CP_ascii(CPSTR** result, CPSTR* string)\n"
        ],
        "description":[
            "Description",
            "_CP_ascii is equivalent to the result = ascii(string) BASIC statement.",
            "This function returns -1 if an error occurs. The error code is contained in _CP_errno."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "CPSTR * s = _CP_mkstr(\"a\");\n_CP_unix_env();\n_CP_ascii(&s,s);\nprintf(\"%c\\n\",*(_CP_SADDR(s)));"
        ]
    },
    {
        "name":"_CP_at1",
        "Syntax":[
            "Syntax",
            "int _CP_at1(CPSTR** result, int x)\n"
        ],
        "description":[
            "Description",
            "_CP_at1 is equivalent to the  result = @(x) BASIC statement.",
            "This function returns -1 if an error occurs. The error code is contained in _CP_errno."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "\/* clear the screen *\/\nCPSTR * s = _CP_str_null;\n_CP_at1(&s,-1);\n_CP_print(s);"
        ]
    },
    {
        "name":"_CP_at2",
        "Syntax":[
            "Syntax",
            "int _CP_at2(CPSTR** result, int x, int y)\n"
        ],
        "description":[
            "Description",
            "_CP_at2 is equivalent to the  result = @(x,y) BASIC statement.",
            "This function returns -1 if an error occurs. The error code is contained in _CP_errno."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "\/* home the cursor *\/\nCPSTR * s = _CP_str_null;\n_CP_at2(&s,1,1);\n_CP_print(s);"
        ]
    },
    {
        "name":"_CP_atvar",
        "Syntax":[
            "Syntax",
            " _CP_atvar(CPSTR ** result, CPSTR * input)"
        ],
        "description":[
            "Description",
            "The _CP_atvar function reads and writes D3 shell variables. It is   equivalent to the BASIC u91 user exit."
        ],
        "parameter":[
            "Parameter(s)",
            "resultThe result from processing the input parameter.inputThis parameter can take on the following four forms:Null string: Returns the names of all D3 shell variables as an attribute mark delimited\n          list.var.name: Returns the value associated with the specified variable.var.name^value: Attribute mark delimited name and value.This\n                      assigns the given value to the specified variable.var.name]: Name followed by value mark.This deletes the\n                      specified variable."
        ],
        "example":[
            "Example(s)",
            "CPSTR * AM = _CP_mkstrl(\"\\xfe\", 1);\n CPSTR * VM = _CP_mkstrl(\"\\xfd\", 1);\n CPSTR * connectionType = _CP_mkstr(\"CONNECTIONTYPE\");\n CPSTR * connectionTypeValue = _CP_mkstr(\"web interface\");\n CPSTR * input = _CP_str_null;;\n CPSTR * result = _CP_str_null;\n \n \/\/ Display existing D3 shell variable names.\n if (_CP_atvar(&result, _CP_str_null) == 0) _CP_print(result);\n \n \/\/ Set the D3 shell variable called CONNECTIONTYPE to \"web interface\".\n _CP_cat(&input, connectionType, AM);\n _CP_cat(&input, input, connectionTypeValue);\n if (_CP_atvar(&result, input) == 0) _CP_print(result);\n \n \/\/ Display existing D3 shell variable names, followed by the value of the CONNECTIONTYPE variable.\n if (_CP_atvar(&result, _CP_str_null) == 0) _CP_print(result);\n if (_CP_atvar(&result, connectionType) == 0) _CP_print(result);\n \n \/\/ Delete the CONNECTIONTYPE variable then the display the remaining D3 shell variables.\n _CP_cat(&input, connectionType, VM);\n if (_CP_atvar(&result, input) == 0) _CP_print(result);\n if (_CP_atvar(&result, _CP_str_null) == 0) _CP_print(result);\n \n _CP_str_free(input);\n _CP_str_free(connectionType);\n _CP_str_free(connectionTypeValue);"
        ]
    },
    {
        "name":"_CP_break",
        "Syntax":[
            "Syntax",
            "int _CP_break(int expression)\n"
        ],
        "description":[
            "Description",
            "_CP_break is equivalent to the break expression BASIC statement.",
            "This function returns -1 if an error occurs. The error code is contained in _CP_errno."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "\/* turn the break off *\/\n_CP_break(0);"
        ]
    },
    {
        "name":"_CP_build_msg",
        "Syntax":[
            "Syntax",
            "nt _CP_build_msg(CPSTR * s)\n"
        ],
        "description":[
            "_CP_build_msg queues up arguments for _CP_out_msg. This function, in conjunction with _CP_out_msg, is equivalent to the BASIC error statement. Each parameter is first stacked with _CP_build_msg, and then output with the _CP_out_msg."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "\/* Print file not found message *\/\n\u00a0\nCPSTR * s = _CP_mkstr(\"201\");\nCPSTR * t = _CP_mkstr(\"myfile\");\n\u00a0\n_CP_build_msg(s);\n_CP_build_msg(t);\n_CP_out_msg();"
        ]
    },
    {
        "name":"_CP_call",
        "Syntax":[
            "Syntax",
            "int _CP_call(int* number, CPSTR* name, int expression,\n{\u00a0CPSTR** string1{,CPSTR** string2{,... }}})\n"
        ],
        "description":[
            "Description",
            "_CP_call is equivalent to the call name( {string1 {, string2 {, ...}}}) BASIC statement.",
            "Each parameter passed to FlashBASIC must be a CPSTR**. Upon return from the subroutine, FlashBASIC will reconvert its variables back to strings, if necessary, and stuff the results back into the passed CPSTR**s.",
            "This function returns -1 if an error occurs. The error code is contained in _CP_errno. Specific error codes include:"
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "\/* call a user-written routine *\/\nCPSTR * s = _CP_mkstr(\"hi\");\nint i = -1;\nr = _CP_call(&i,s,0);\nif (r < 0)\n{\n_CP_logoff();\nexit(-1);\n}\n\/* Now that the subroutine is loaded, it can be called *\/\n\/* very efficiently *\/\nfor (j=1; j < 100; j++) _CP_call(&i,s,0);"
        ]
    },
    {
        "name":"_CP_casing",
        "Syntax":[
            "Syntax",
            "int _CP_casing(int expression)\n"
        ],
        "description":[
            "Description",
            "_CP_casing is equivalent to the casing expression BASIC statement.",
            "This function returns -1 if an error occurs. The error code is contained in _CP_errno."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "CPSTR * s = _CP_mkstr(\"a\");\nCPSTR * t = _CP_mkstr(\"A\");\nint i;\n\u00a0\n_CP_unix_env();\n\/* default is casing off - print 0 *\/\n_CP_compare(&i,s,t);\nprintf(\"%d\\n\",i);\n\/* turn casing on - print 1 *\/\n_CP_casing(1);\n_CP_compare(&i,s,t);\nprintf(\"%d\\n\",i);"
        ]
    },
    {
        "name":"_CP_cat",
        "Syntax":[
            "Syntax",
            "int _CP_cat(CPSTR** result, CPSTR* string1, CPSTR* string2)\n"
        ],
        "description":[
            "Description",
            "_CP_cat is equivalent to the  result = string1:string2 BASIC statement.",
            "This function returns -1 if an error occurs. The error code is contained in _CP_errno."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "CPSTR * s = _CP_mkstr(\"a\");\nCPSTR * t = _CP_mkstr(\"A\");\n\u00a0\n_CP_unix_env();\n_CP_cat(&s,s,t);\n_CP_TERM(s);\nprintf(\"%s\\n\",_CP_SADDR(s));"
        ]
    },
    {
        "name":"_CP_clearfile",
        "Syntax":[
            "Syntax",
            "int _CP_clearfile(int expression)\n"
        ],
        "description":[
            "Description",
            "_CP_clearfile is equivalent to the clearfile BASIC statement.",
            "The expression should be an integer file descriptor returned by the _CP_open call. This function returns -1 if an error occurs. The error code is contained in _CP_errno."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "CPSTR * s = _CP_mkstr(\"myfile\");\nint f;\n\u00a0\n_CP_open(&f,_CP_str_null,s);\n_CP_clearfile(f);"
        ]
    },
    {
        "name":"_CP_clearselect",
        "Syntax":[
            "Syntax",
            "int _CP_clearselect(int expression)\n"
        ],
        "description":[
            "Description",
            "_CP_clearselect is equivalent to the clearselect BASIC statement.",
            "The expression should be an integer file descriptor returned by the _CP_select call. This function returns -1 if an error occurs. The error code is contained in _CP_errno. This function should always be used when only part of a select list is referenced."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"_CP_close",
        "Syntax":[
            "Syntax",
            "int _CP_close(int expression)\n"
        ],
        "description":[
            "Description",
            "_CP_close is equivalent to the close BASIC statement.",
            "The expression should be an integer file descriptor returned by the _CP_open call. This function returns -1 if an error occurs. The error code is contained in _CP_errno."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "CPSTR * s = _CP_mkstr(\"myfile\");\nint f;\n\u00a0\n_CP_open(&f,_CP_str_null,s);\n_CP_clearfile(f);\n_CP_close(f);"
        ]
    },
    {
        "name":"_CP_col1",
        "Syntax":[
            "Syntax",
            "int _CP_col1(int* result)\n"
        ],
        "description":[
            "Description",
            "_CP_col1 is equivalent to the  result = col1 BASIC statement.",
            "This function returns -1 if an error occurs. The error code is contained in _CP_errno."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "\/* Prints \"ab 2 5\" *\/\n\u00a0\nCPSTR * s = _CP_mkstr(\"zdabdz\");\nCPSTR * t = _CP_mkstr(\"d\");\nint i,j;\n\u00a0\n_CP_field(&s,s,t,2);\n_CP_col1(&i);\n_CP_col1(&j);\n_CP_TERM(s);\n_CP_unix_env();\nprintf(\"%s %d %d\\n\",_CP_SADDR(s),i,j);"
        ]
    },
    {
        "name":"_CP_col2",
        "Syntax":[
            "Syntax",
            "int _CP_col2(int* result)\n"
        ],
        "description":[
            "Description",
            "_CP_col2 is equivalent to the result = col2 BASIC statement.",
            "This function returns -1 if an error occurs. The error code is contained in _CP_errno."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "\/* Prints \"ab 2 5\" *\/\n\u00a0\nCPSTR * s = _CP_mkstr(\"zdabdz\");\nCPSTR * t = _CP_mkstr(\"d\");\nint i,j;\n\u00a0\n_CP_field(&s,s,t,2);\n_CP_col2(&i);\n_CP_col2(&j);\n_CP_TERM(s);\n_CP_unix_env();\nprintf(\"%s %d %d\\n\",_CP_SADDR(s),i,j);"
        ]
    },
    {
        "name":"_CP_compare",
        "Syntax":[
            "Syntax",
            "int _CP_compare(int* result, CPSTR* string1, CPSTR* string2)\n"
        ],
        "description":[
            "_CP_compare is equivalent to the result = (string1 = string2) BASIC statement.",
            "This function has the return codes:"
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "CPSTR * s = _CP_mkstr(\"a\");\nCPSTR * t = _CP_mkstr(\"A\");\nint i;\n\u00a0\n_CP_unix_env();\n\/* default is casing off - print 0 *\/\n_CP_compare(&i,s,t);\nprintf(\"%d\\n\",i);\n\/* turn casing on - print 1 *\/\n_CP_casing(1);\n_CP_compare(&i,s,t);\nprintf(\"%d\\n\",i);"
        ]
    },
    {
        "name":"_CP_convert",
        "Syntax":[
            "Syntax",
            "int _CP_convert(CPSTR** result, CPSTR* string1, CPSTR* string2)\n"
        ],
        "description":[
            "Description",
            "_CP_convert is equivalent to the convert string1 to string2 in  result BASIC statement.",
            "This function returns -1 if an error occurs. The error code is contained in _CP_errno."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "\/* Prints \"bbc\". *\/\n\u00a0\nCPSTR * s = _CP_mkstr(\"a\");\nCPSTR * t = _CP_mkstr(\"b\");\nCPSTR * u = _CP_mkstr(\"abc\");\n\u00a0\n_CP_unix_env();\n_CP_convert(&u,s,t);\n_CP_TERM(u);\nprintf(\"%s\\n\",_CP_SADDR(u));"
        ]
    },
    {
        "name":"_CP_count",
        "Syntax":[
            "Syntax",
            "int _CP_count(int* result, CPSTR* string1, CPSTR* string2)\n"
        ],
        "description":[
            "Description",
            "_CP_count is equivalent to the result = count(string1, string2) BASIC statement.",
            "This function returns -1 if an error occurs. The error code is contained in _CP_errno."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "\/* Prints \"2\". *\/\n\u00a0\nCPSTR * s = _CP_mkstr(\"bbc\");\nCPSTR * t = _CP_mkstr(\"b\");\nint i;\n\u00a0\n_CP_count(&i,s,t);\n_CP_unix_env();\nprintf(\"%d\\n\", i);"
        ]
    },
    {
        "name":"_CP_crt",
        "Syntax":[
            "Syntax",
            "int _CP_crt(CPSTR* string)\n"
        ],
        "description":[
            "Description",
            "_CP_crt is equivalent to the crt BASIC statement.",
            "This function returns -1 if an error occurs. The error code is contained in _CP_errno."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "CPSTR * t = _CP_mkstr(\"b\");\n_CP_crt(t);"
        ]
    },
    {
        "name":"_CP_crt_n",
        "Syntax":[
            "Syntax",
            "int _CP_crt_n(CPSTR* string)\n"
        ],
        "description":[
            "Description",
            "_CP_crt_n is equivalent to the crt BASIC statement.",
            "This function returns -1 if an error occurs. The error code is contained in _CP_errno."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "CPSTR * t = _CP_mkstr(\"b\");\n_CP_crt_n(t);"
        ]
    },
    {
        "name":"_CP_data",
        "Syntax":[
            "Syntax",
            "int _CP_data(CPSTR* string)\n"
        ],
        "description":[
            "Description",
            "_CP_data is equivalent to the data string BASIC statement.",
            "This function returns -1 if an error occurs. The error code is contained in _CP_errno."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "\/* Copies the \"xx\" item in the md to item \"yy\". *\/\n\u00a0\nCPSTR * s = _CP_mkstr(\"copy md xx\");\nCPSTR * t = _CP_mkstr(\"yy\");\nCPSTR * c = _CP_str_null;\nCPSTR * r = _CP_str_null;\n\u00a0\n_CP_data(t);\n_CP_execute(_CP_EXECUTE,s,&c,&r);"
        ]
    },
    {
        "name":"_CP_date",
        "Syntax":[
            "Syntax",
            "int _CP_date(int* result)\n"
        ],
        "description":[
            "Description",
            "_CP_date is equivalent to the result = date() BASIC statement.",
            "This function returns -1 if an error occurs. The error code is contained in _CP_errno."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "\/* Prints the numeric date *\/\n\u00a0\nint i;\n\u00a0\n_CP_date(&i);\n_CP_unix_env();\nprintf(\"%d\\n\",i);"
        ]
    },
    {
        "name":"_CP_dcount",
        "Syntax":[
            "Syntax",
            "int _CP_dcount(int* result, CPSTR* string1, CPSTR* string2)\n"
        ],
        "description":[
            "Description",
            "_CP_dcount is equivalent to the result = dcount(string1, string2) BASIC statement.",
            "This function returns -1 if an error occurs. The error code is contained in _CP_errno."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "\/* Prints \"3\". *\/\n\u00a0\nCPSTR * s = _CP_mkstr(\"bbc\");\nCPSTR * t = _CP_mkstr(\"b\");\nint i;\n\u00a0\n_CP_dcount(&i,s,t);\n_CP_unix_env();\nprintf(\"%d\\n\", i);"
        ]
    },
    {
        "name":"_CP_debug",
        "Syntax":[
            "Syntax",
            "int _CP_debug(int expression)\n"
        ],
        "description":[
            "Description",
            "_CP_debug is equivalent to the debug BASIC statement.",
            "The C function differs slightly, however. The expression passed to _CP_debug displays as a pseudo line number within the BASIC\/FlashBASIC debugger. Variables within the C program are not known to the BASIC\/FlashBASIC debugger. For access to these, the user should use a system debugger such as dbx or sdb. The _CP_debug statement is useful however, as it can be used to set breakpoints in FlashBASIC subroutines that will be called later.",
            "This function returns -1 if an error occurs. The error code is contained in _CP_errno."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "When run, the user can enter\nbreakpoints for the not-yet-executed subroutinemysub. For example, to stop whenmysubreaches line number\n3, the user should typemysub:b$=3followed bygat the debugger prompts. The BASIC\/FlashBASIC debugger\nthen breaks withinmysubat line number 3.",
            "\/* Enters the BASIC\/FlashBASIC debugger and then calls routine \"mysub\". *\/\n\u00a0\nCPSTR * s = _CP_mkstr(\"mysub\");\nint i = -1;\n\u00a0\n_CP_debug(1);\n_CP_call(&i,s,0);"
        ]
    },
    {
        "name":"_CP_delete",
        "Syntax":[
            "Syntax",
            "int _CP_delete(CPSTR** result, CPSTR* string, int ac.expression,\nint vc.expression, int sc.expression)\n"
        ],
        "description":[
            "Description",
            "_CP_delete is equivalent to the result = delete(string, ac.expression, vc.expression, sc.expression) BASIC statement.",
            "This function returns -1 if an error occurs. The error code is contained in _CP_errno."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "\/* Prints \"a\". *\/\n\u00a0\nCPSTR * s = _CP_mkstr(\"a\\376b\");\n\u00a0\n_CP_delete(&s,s,2,0,0);\n_CP_print(s);"
        ]
    },
    {
        "name":"_CP_delete_item",
        "Syntax":[
            "Syntax",
            "int _CP_delete_item(int expression, CPSTR* string)\n"
        ],
        "description":[
            "Description",
            "_CP_delete_item is equivalent to the delete expression,string BASIC statement.",
            "The expression should be an integer file descriptor returned by the _CP_open call. This function returns -1 if an error occurs. The error code is contained in _CP_errno."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "\/* Deletes item \"1\" from \"myfile\". *\/\n\u00a0\nCPSTR * s = _CP_mkstr(\"myfile\");\nCPSTR * t = _CP_mkstr(\"1\");\nint f;\n\u00a0\n_CP_open(&f,_CP_str_null,s);\n_CP_delete_item(f,t);"
        ]
    },
    {
        "name":"_CP_dtx",
        "Syntax":[
            "Syntax",
            "int _CP_dtx(CPSTR** result, double expression)\n"
        ],
        "description":[
            "Description",
            "_CP_dtx is equivalent to the result = dtx(expression) BASIC statement.",
            "This function returns -1 if an error occurs. The error code is contained in _CP_errno."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "\/* Prints \"F\". *\/\n\u00a0\nCPSTR * s = _CP_str_null;\n\u00a0\n_CP_dtx(&s,15.0);\n_CP_print(s);"
        ]
    },
    {
        "name":"_CP_ebcdic",
        "Syntax":[
            "Syntax",
            "int _CP_ebcdic(CPSTR** result, CPSTR* string)\n"
        ],
        "description":[
            "Description",
            "_CP_ebcdic is equivalent to the result = ebcdic(string) BASIC statement.",
            "This function returns -1 if an error occurs. The error code is contained in _CP_errno."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "\/* Prints \"a\". *\/\n\u00a0\nCPSTR * s = _CP_mkstr(\"\/\");\n_CP_unix_env();\n_CP_ascii(&s,s);\nprintf(\"%c\\n\",*(_CP_SADDR(s)));"
        ]
    },
    {
        "name":"_CP_echo",
        "Syntax":[
            "Syntax",
            "int _CP_echo(int expression)\n"
        ],
        "description":[
            "Description",
            "_CP_echo is equivalent to the echo expression BASIC statement.",
            "This function returns -1 if an error occurs. The error code is contained in _CP_errno."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "\/* Gets input without echoing it. *\/\n\u00a0\nCPSTR * s = _CP_str_null;\n\u00a0\n_CP_echo(0);\n_CP_input(_CP_INPUT,&s,0,0);"
        ]
    },
    {
        "name":"_CP_execute",
        "Syntax":[
            "Syntax",
            "int _CP_execute(int type, CPSTR* command, CPSTR** string1, CPSTR** string2)\n"
        ],
        "description":[
            "Description",
            "_CP_execute is equivalent to the execute command capturing string1 returning string2 BASIC statement.",
            "This function returns -1 if an error occurs. The error code is contained in _CP_errno."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "\/* Gets information about the current user. *\/\n\u00a0\nCPSTR * s = _CP_mkstr(\"who\");\nCPSTR * c = _CP_str_null;\nCPSTR * r = _CP_str_null;\n\u00a0\n_CP_execute(_CP_EXECUTE_CR, s, &c, &r);"
        ]
    },
    {
        "name":"_CP_extract",
        "Syntax":[
            "Syntax",
            "int _CP_extract(CPSTR** result, CPSTR* string, int ac.expression,\nint vc.expression, int sc.expression)\n"
        ],
        "description":[
            "Description",
            "_CP_extract is equivalent to the result = extract(string, ac.expression, vc.expression, sc.expression) BASIC statement.",
            "This function returns -1 if an error occurs. The error code is contained in _CP_errno."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "\/* Prints \"a\". *\/\n\u00a0\nCPSTR * s = _CP_mkstr(\"a\\376b\");\n\u00a0\n_CP_extract(&s,s,1,0,0);\n_CP_print(s);"
        ]
    },
    {
        "name":"_CP_field",
        "Syntax":[
            "Syntax",
            "int _CP_field(CPSTR** result, CPSTR* string1, CPSTR* string2, int expression)\n"
        ],
        "description":[
            "Description",
            "_CP_field is equivalent to the result = field(string1, string2, expression) BASIC statement.",
            "This function returns -1 if an error occurs. The error code is contained in _CP_errno."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "\/* Prints \"ab 2 5\" *\/\n\u00a0\nCPSTR * s = _CP_mkstr(\"zdabdz\");\nCPSTR * t = _CP_mkstr(\"d\");\nint i,j;\n\u00a0\n_CP_field(&s,s,t,2);\n_CP_col1(&i);\n_CP_col2(&j);\n_CP_TERM(s);\n_CP_unix_env();\nprintf(\"%s %d %d\\n\",_CP_SADDR(s),i,j);"
        ]
    },
    {
        "name":"_CP_field_store",
        "Syntax":[
            "Syntax",
            "int _CP_field_store(CPSTR** result, CPSTR* string1, CPSTR* string2,\nint expression1, int expression2)\n"
        ],
        "description":[
            "Description",
            "_CP_field_store is equivalent to the  result[string2, expression1, expression2] = string1 BASIC statement.",
            "This function returns -1 if an error occurs. The error code is contained in _CP_errno."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "\/* Prints \"zdhidz\" *\/\n\u00a0\nCPSTR * s = _CP_mkstr(\"zdabdz\");\nCPSTR * t = _CP_mkstr(\"d\");\nCPSTR * u = _CP_mkstr(\"hi\");\n\u00a0\n_CP_field_store(&s,u,t,2,1);\n_CP_print(s);"
        ]
    },
    {
        "name":"_CP_filelock",
        "Syntax":[
            "Syntax",
            "int _CP_filelock(int expression)\n"
        ],
        "description":[
            "Description",
            "_CP_filelock is equivalent to the filelock expression BASIC statement.",
            "This function returns -1 if an error occurs or if the file is already locked. The error code is contained in _CP_errno."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"_CP_fileunlock",
        "Syntax":[
            "Syntax",
            "int _CP_fileunlock(int expression)\n"
        ],
        "description":[
            "Description",
            "_CP_fileunlock is equivalent to the fileunlock expression BASIC statement.",
            "This function returns -1 if an error occurs. The error code is contained in _CP_errno."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"_CP_fold",
        "Syntax":[
            "Syntax",
            "int _CP_fold(CPSTR** result, CPSTR* string1, CPSTR* string2, CPSTR* string3)\n"
        ],
        "description":[
            "Description",
            "_CP_fold is equivalent to the result = fold(string1, string2, string3) BASIC statement.",
            "This function returns -1 if an error occurs. The error code is contained in _CP_errno."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "\/* Prints \"A|long|strin|g\" *\/\n\u00a0\nCPSTR * s = _CP_mkstr(\"A long string\");\nCPSTR * t = _CP_mkstr(\"5\");\nCPSTR * u = _CP_mkstr(\"|\");\n\u00a0\n_CP_fold(&s,s,t,u);\n_CP_print(s);"
        ]
    },
    {
        "name":"_CP_footing",
        "Syntax":[
            "Syntax",
            "int _CP_footing(CPSTR* string)\n"
        ],
        "description":[
            "_CP_footing is equivalent to the footing string BASIC statement."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "\/* Sets the footing to \"footing\". *\/\nCPSTR * s = _CP_mkstr(\"footing\");\n_CP_footing(s);"
        ]
    },
    {
        "name":"_CP_get",
        "Syntax":[
            "Syntax",
            "int _CP_get(int type, CPSTR** result, int expression1, int expression2,\nint expression3, CPSTR* string1, CPSTR** string2, int expression4)\n"
        ],
        "description":[
            "_CP_get is equivalent to the following BASIC statement:"
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "\/* Gets input from port 1. *\/\n\u00a0\nCPSTR * s = _CP_mkstr(\"dev-att 1\");\nCPSTR * c = _CP_str_null;\nCPSTR * r = _CP_str_null;\n\u00a0\n_CP_execute(_CP_EXECUTE,s,&c,&r);\n_CP_get(_CP_GET_X+_CP_GET_LEN, &r, 1, 0, 1, c, &c, 50);"
        ]
    },
    {
        "name":"_CP_heading",
        "Syntax":[
            "Syntax",
            "int _CP_heading(CPSTR* string)\n"
        ],
        "description":[
            "Description",
            "_CP_heading is equivalent to the heading string BASIC statement.",
            "This function returns -1 if an error occurs. The error code is contained in _CP_errno. If the heading is too long, _CP_errno will contain PE_LONG_STR."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "\/* Sets the heading to \"heading\". *\/\nCPSTR * s = _CP_mkstr(\"heading\");\n_CP_heading(s);"
        ]
    },
    {
        "name":"_CP_iconv",
        "Syntax":[
            "Syntax",
            "int _CP_iconv(CPSTR** result, CPSTR* string1, CPSTR* string2)\n"
        ],
        "description":[
            "Description",
            "_CP_iconv is equivalent to the result = iconv(string1, string2) BASIC statement.",
            "This function returns -1 if an error occurs. The error code is contained in _CP_errno."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "\/* Prints \"a\". *\/\n\u00a0\nCPSTR * s = _CP_mkstr(\"a2\");\nCPSTR * t = _CP_mkstr(\"mca\");\n\u00a0\n_CP_iconv(&s,s,t);\n_CP_print(s);"
        ]
    },
    {
        "name":"_CP_in",
        "Syntax":[
            "Syntax",
            "int _CP_in(int* result, int expression)\n"
        ],
        "description":[
            "Description",
            "_CP_in is equivalent to the in result for expression BASIC statement.",
            "If no for clause is used, the user should pass -1 in expression. This function returns -1 if an error occurs. The error code is contained in _CP_errno. If the time out occurs, _CP_errno contains PE_TMOUT."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "\/* Gets 1 character of input. *\/\n\u00a0\nint i;\n\u00a0\n_CP_in(&i,-1);\n_CP_unix_env();\nprintf(\"%d\\n\", i);"
        ]
    },
    {
        "name":"_CP_index",
        "Syntax":[
            "Syntax",
            "int _CP_index(int* result, CPSTR* string1, CPSTR* string2, int expression)\n"
        ],
        "description":[
            "Description",
            "_CP_index is equivalent to the result = index(string1, string2, expression) BASIC statement.",
            "This function returns -1 if an error occurs. The error code is contained in _CP_errno."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "\/* Prints \"2\". *\/\n\u00a0\nCPSTR * s = _CP_mkstr(\"bbc\");\nCPSTR * t = _CP_mkstr(\"b\");\nint i;\n\u00a0\n_CP_index(&i,s,t,2);\n_CP_unix_env();\nprintf(\"%d\\n\", i);"
        ]
    },
    {
        "name":"_CP_input",
        "Syntax":[
            "Syntax",
            "int _CP_input(int type, CPSTR** result, int expression1, int expression2)\n"
        ],
        "description":[
            "Description",
            "_CP_input is equivalent to the input BASIC statement.",
            "This function returns -1 if an error occurs. The error code is contained in _CP_errno. If the time out occurs, _CP_errno contains PE_TMOUT."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "\/* Gets 1 line of input. *\/\nCPSTR * s = _CP_str_null;\n_CP_input(_CP_INPUT, &s, 0, 0);"
        ]
    },
    {
        "name":"_CP_insert",
        "Syntax":[
            "Syntax",
            "int _CP_insert(CPSTR** result, CPSTR* string1, int ac.expression, int vc.expression,\nint sc.expression, CPSTR* string2)\n"
        ],
        "description":[
            "Description",
            "_CP_insert is equivalent to the result = insert(string1, ac.expression, vc.expression, sc.expression, string2) BASIC statement.",
            "This function returns -1 if an error occurs. The error code is contained in _CP_errno."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "\/* Prints \"a^b^c\". *\/\n\u00a0\nCPSTR * s = _CP_mkstr(\"a\\376b\");\nCPSTR * t = _CP_mkstr(\"c\");\n\u00a0\n_CP_insert(&s,s,3,0,0,t);\n_CP_print(s);"
        ]
    },
    {
        "name":"_CP_interrupt",
        "Syntax":[
            "Syntax",
            "int _CP_interrupt;\n"
        ],
        "description":[
            "_CP_interrupt is a global C integer which contains the last D3 interrupt that occurred. This value is the same as that returned by the BASIC function system(37). It is available when linking with the D3 libraries."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "\/* Stops looping when some sort of interrupt occurs (like a break or a message). *\/\n\u00a0\n_CP_unix_env();\nwhile (!_CP_interrupt) sleep(1); \/* wait for something *\/\nprintf(\"I woke up!!!!\\n\");"
        ]
    },
    {
        "name":"_CP_is_",
        "Syntax":[
            "Syntax",
            "CPSTR * _CP_is_(int number)\n"
        ],
        "description":[
            "_CP_is_ converts an integer into a CPSTR."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "Displays 1.",
            "CPSTR * s = _CP_is_(1.123);\n_CP_print(s);"
        ]
    },
    {
        "name":"_CP_key",
        "Syntax":[
            "Syntax",
            "int _CP_key(CPSTR* string1, int expression, CPSTR** string2, CPSTR** string3,\nint* value)\n"
        ],
        "description":[
            "Description",
            "_CP_key is equivalent to the key(string1, expression, string2, string3) BASIC statement.",
            "An additional parameter, value, is available from C that returns the current value of the key if it is MultiValued. This function returns -1 if an error occurs. The error code is contained in _CP_errno. If the key operator is invalid, _CP_errno will contain PE_ILL_KEY. If the root pointer is invalid, _CP_errno will contain PE_NOTROOT."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "\/* Gets the first item-ID which contains \"a\" as attribute 1. *\/\n\u00a0\nCPSTR * n = _CP_mkstr(\"myfile\");\nCPSTR * a = _CP_mkstr(\"a1\");\nCPSTR * op = _CP_mkstr(\"n\");\nCPSTR * k = _CP_mkstr(\"a\");\nCPSTR * i = _CP_str_null;\nint r,dummy;\n\u00a0\n_CP_root(n,a,&r);\n_CP_key(op,r,&k,&i,&dummy);"
        ]
    },
    {
        "name":"_CP_load",
        "Syntax":[
            "Syntax",
            "int _CP_load(int* number, CPSTR* name)\n"
        ],
        "description":[
            "_CP_load is an optional function for preloading BASIC subroutines, before they are needed."
        ],
        "parameter":[
            "Parameter(s)",
            "numberMust be a pointer to an integer. This integermustcontain\n-1 when loading a new subroutine. Upon successful load, this location\nwill contain an index number which should be passed down to succeeding_CP_callsto the same subroutine. This index allows the\nsystem to jump directly into the subroutine code without having to\nlook up the name in the master dictionary.nameShould be a CPSTR* pointing to the subroutine name. The subroutine\nto be calledmustbe previously compiled with FlashBASIC\nand be cataloged in the current master dictionary.This function\nreturns -1 if an error occurs. The error code is contained in_CP_errno, including:PE_LOAD_ERRwhich\nindicates that the system could not load the subroutine. The subroutinemustbe cataloged, andmustbe compiled with the current\nversion of FlashBASIC.",
            "Note:All subroutines calledmusthave been previously\ncompiled with the current version of FlashBASIC."
        ],
        "example":[
            "Example(s)",
            "\/* call a user-written routine *\/\n\u00a0\nCPSTR * s = _CP_mkstr(\"hi\");\nint i = -1;\n\u00a0\nr = _CP_load(&i,s);\nif (r < 0)\n{\n_CP_logoff();\nexit(-1);\n}\n\/* Now that the subroutine is loaded, it can be called *\/\n\/* very efficiently *\/\n\u00a0\nfor (j=1; j < 100; j++) _CP_call(&i,s,0);"
        ]
    },
    {
        "name":"_CP_locate",
        "Syntax":[
            "Syntax",
            "int _CP_locate(int* result, CPSTR* string1, CPSTR* string2, int ac.expression,\nint vc.expression,int start.expression, int * position.variable, CPSTR* string3)\n"
        ],
        "description":[
            "Description",
            "_CP_locate is equivalent to the following BASIC statement:",
            "This function returns -1 if an error occurs. The error code is contained in _CP_errno."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "\/* Prints \"1 2\". *\/\n\u00a0\nCPSTR * s = _CP_mkstr(\"a\\376b\");\nCPSTR * t = _CP_mkstr(\"b\");\nint r,l;\n\u00a0\n_CP_locate(&r,t,s,0,0,0,&l,_CP_str_null);\n_CP_unix_env();\nprintf(\"%d %d\\n\", r, l);"
        ]
    },
    {
        "name":"_CP_lock",
        "Syntax":[
            "Syntax",
            "int _CP_lock(int type, int expression)\n"
        ],
        "description":[
            "Description",
            "_CP_lock is equivalent to the lock BASIC statement.",
            "The variant of lock used depends upon the  type parameter:",
            "This function returns -1 if an error occurs. The error code is contained in _CP_errno."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "\/* Sets basic lock 1. *\/\n_CP_lock(_CP_LOCK,1);"
        ]
    },
    {
        "name":"_CP_logon",
        "Syntax":[
            "Syntax",
            "int _CP_logon(CPSTR* machine, CPSTR* user, CPSTR* u_passwd, CPSTR* md,\nCPSTR* md_passwd, int pib, int flags);\n"
        ],
        "description":[
            "_CP_logon logs in to D3 from a C main program. This function must be called prior to any other function. This function returns -1 if an error occurs. The error code is contained in _CP_errno."
        ],
        "parameter":[
            "Parameter(s)",
            "machineD3 virtual machine.userD3 user.u_passwdD3 user password.mdD3 master dictionary.md_passwdD3 master dictionary password.pibRequested PIB or -1 for first available.flagsReserved field - always pass a 0."
        ],
        "example":[
            "Example(s)",
            "The example above logs in to\nD3 as the dm user in the dm account. It assumes that no passwords\nare present.",
            "CPSTR * machine = _CP_mkstr(\"pick0\");\nCPSTR * user = _CP_mkstr(\"dm\");\nCPSTR * md = _CP_mkstr(\"dm\");\nint r;\n\u00a0\nr=_CP_logon(machine,user,_CP_str_null,md,_CP_str_null,-1,0);"
        ]
    },
    {
        "name":"_CP_match",
        "Syntax":[
            "Syntax",
            "int _CP_match(int* result, CPSTR* string1, CPSTR* string2)\n"
        ],
        "description":[
            "Description",
            "_CP_match is equivalent to the result =  string1 match string2 BASIC statement.",
            "This function returns -1 if an error occurs. The error code is contained in _CP_errno."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "\/* Prints \"1\". *\/\n\u00a0\nCPSTR * s = _CP_mkstr(\"a1c\");\nCPSTR * t = _CP_mkstr(\"1a1n1a\");\nint i;\n\u00a0\n_CP_match(&i,s,t);\n_CP_unix_env();\nprintf(\"%d\\n\", i);"
        ]
    },
    {
        "name":"_CP_mkstr",
        "Syntax":[
            "Syntax",
            "CPSTR* _CP_mkstr(char* cstring)\n"
        ],
        "description":[
            "_CP_mkstr dynamically allocates a CPSTR* and fills it with a copy of  cstring."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "CPSTR * s = _CP_mkstr(\"This is a string\");"
        ]
    },
    {
        "name":"_CP_mkstrl",
        "Syntax":[
            "Syntax",
            "CPSTR* _CP_mkstrl(char* cstring, int expression)\n"
        ],
        "description":[
            "_CP_mkstrl dynamically allocates a CPSTR* of length  expression and fills it with a copy of  cstring."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "CPSTR * s = _CP_mkstr(\"Hi\",2);"
        ]
    },
    {
        "name":"_CP_num",
        "Syntax":[
            "Syntax",
            "int _CP_num(int* result, CPSTR* string)\n"
        ],
        "description":[
            "Description",
            "_CP_num is equivalent to the result = num(string) BASIC function.",
            "This function returns -1 if an error occurs. The error code is contained in _CP_errno."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "\/* is \"1\" alphabetic? *\/\n\u00a0\nCPSTR * s = _CP_mkstr(\"1\");\nint i;\n\u00a0\n_CP_num(&i,s);\n_CP_unix_env();\nprintf(\"%d\\n\", i);"
        ]
    },
    {
        "name":"_CP_occurs",
        "Syntax":[
            "Syntax",
            "int _CP_occurs(CPSTR** result, CPSTR* string, int expression)\n"
        ],
        "description":[
            "Description",
            "_CP_occurs is equivalent to the result = occurs(string, expression) BASIC function.",
            "This function returns -1 if an error occurs. The error code is contained in _CP_errno."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "\/* Prints \"a\". *\/\n\u00a0\nCPSTR * s = _CP_mkstr(\"a\\376a\");\n\u00a0\n_CP_occurs(&s,s,2);\n_CP_print(s);"
        ]
    },
    {
        "name":"_CP_oconv",
        "Syntax":[
            "Syntax",
            "int _CP_oconv(CPSTR** result, CPSTR* string1, CPSTR* string2)\n"
        ],
        "description":[
            "Description",
            "_CP_oconv is equivalent to the result = oconv(string1, string2) BASIC statement.",
            "This function returns -1 if an error occurs. The error code is contained in _CP_errno."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "CPSTR * s = _CP_mkstr(\"a2\");\nCPSTR * t = _CP_mkstr(\"mca\");\n\u00a0\n_CP_oconv(&s,s,t);\n_CP_print(s);\nPrints \"a\"."
        ]
    },
    {
        "name":"_CP_open",
        "Syntax":[
            "Syntax",
            "int _CP_open(int* fd, CPSTR* string1, CPSTR* string2)\n"
        ],
        "description":[
            "Description",
            "_CP_open is equivalent to the open string1,string2 to fd BASIC statement.",
            "This function returns -1 if an error occurs. The error code is contained in _CP_errno."
        ],
        "parameter":[
            "Parameter(s)",
            "string1Should bedictordata, or can be passed as_CP_str_null.string2Should be the file name."
        ],
        "example":[
            "Example(s)",
            "CPSTR * s = _CP_mkstr(\"myfile\");\nint f;\n\u00a0\n_CP_open(&f,_CP_str_null,s);\n_CP_clearfile(f);\n_CP_close(f);"
        ]
    },
    {
        "name":"_CP_out",
        "Syntax":[
            "Syntax",
            "int _CP_out(int expression)\n"
        ],
        "description":[
            "Description",
            "_CP_out is equivalent to the out BASIC statement.",
            "This function returns -1 if an error occurs. The error code is contained in _CP_errno."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "\/* Prints a space. *\/\n_CP_out(0x20);"
        ]
    },
    {
        "name":"_CP_out_msg",
        "Syntax":[
            "Syntax",
            "int _CP_out_msg()\n"
        ],
        "description":[
            "_CP_out_msg outputs an error message which has been previously queued by _CP_build_msg. See _CP_build_msg for a coding example."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"_CP_ovfly_subs",
        "Syntax":[
            "Syntax",
            "int _CP_ovly_subs(CPSTR** result, CPSTR* string1, int expression1, int expression2)\n"
        ],
        "description":[
            "Description",
            "_CP_ovfly_subs is equivalent to the result[expression1, expression2] = string1 BASIC statement.",
            "This function returns -1 if an error occurs. The error code is contained in _CP_errno."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "\/* Prints \"hicdef\" *\/\n\u00a0\nCPSTR * s = _CP_mkstr(\"abcdef\");\nCPSTR * u = _CP_mkstr(\"hi\");\n\u00a0\n_CP_ovly_subs(&s,u,2,1);\n_CP_print(s);"
        ]
    },
    {
        "name":"_CP_page",
        "Syntax":[
            "Syntax",
            "int _CP_page()\n"
        ],
        "description":[
            "Description",
            "_CP_page is equivalent to the page BASIC statement.",
            "This function returns -1 if an error occurs. The error code is contained in _CP_errno."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "_CP_page();"
        ]
    },
    {
        "name":"_CP_page_n",
        "Syntax":[
            "Syntax",
            "int _CP_page_n(int expression)\n"
        ],
        "description":[
            "Description",
            "_CP_page_n is equivalent to the page expression BASIC statement.",
            "This function returns -1 if an error occurs. The error code is contained in _CP_errno."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "_CP_page_n();"
        ]
    },
    {
        "name":"_CP_pick_break",
        "Syntax":[
            "Syntax",
            "int _CP_pick_break()\n"
        ],
        "description":[
            "Description",
            "_CP_pick_break causes all subsequent breaks to push a level or drop into the debugger as is standard in D3.",
            "This function returns -1 if an error occurs. The error code is contained in _CP_errno.",
            "Turning the BREAK key off with the _CP_break call disables breaks."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "_CP_pick_break();"
        ]
    },
    {
        "name":"_CP_pick_env",
        "Syntax":[
            "Syntax",
            "int _CP_pick_env()\n"
        ],
        "description":[
            "Description",
            "_CP_pick_env sets the application to a standard D3 environment. When using this setting, all terminal input and output must be done via D3 routines only (execute, print, crt). The default environment after logging on to D3 is _CP_pick_env.",
            "This function returns -1 if an error occurs. The error code is contained in _CP_errno.",
            "This function requires considerable amounts of CPU."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "_CP_pick_env();"
        ]
    },
    {
        "name":"_CP_precision",
        "Syntax":[
            "Syntax",
            "void _CP_precision(int number)\n"
        ],
        "description":[
            "Description",
            "_CP_precision is equivalent to the precision number BASIC statement.",
            "This function affects the precision of the _CP_rs_ and the _CP_sr_ functions."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "This example displays\"1.12\"since the conversion is truncated to the precision\nof 2.",
            "CPSTR * s = _CP_mkstr(\"1.12345\");\ndouble r;\n_CP_precision(2);\nr = _CP_sr_(s);\n_CP_unix_env();\nprintf(\"%g\\n\", r);\n_CP_str_free(s);"
        ]
    },
    {
        "name":"_CP_print",
        "Syntax":[
            "Syntax",
            "int _CP_print(CPSTR* string)\n"
        ],
        "description":[
            "Description",
            "_CP_print is equivalent to the print string BASIC statement.",
            "This function returns -1 if an error occurs. The error code is contained in _CP_errno."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "CPSTR * t = _CP_mkstr(\"b\");\n_CP_print(t);"
        ]
    },
    {
        "name":"_CP_print_n",
        "Syntax":[
            "Syntax",
            "int _CP_print_n(CPSTR* string)\n"
        ],
        "description":[
            "Description",
            "_CP_print_n is equivalent to the print string BASIC statement.",
            "This function returns -1 if an error occurs. The error code is contained in _CP_errno."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "CPSTR * t = _CP_mkstr(\"b\");\n_CP_print_n(t);"
        ]
    },
    {
        "name":"_CP_print_on",
        "Syntax":[
            "Syntax",
            "int _CP_print_on(int expression)\n"
        ],
        "description":[
            "Description",
            "_CP_print_on is equivalent to the print on expression BASIC statement.",
            "This function returns -1 if an error occurs. The error code is contained in _CP_errno."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "\/* Prints \"hi\" to print job 1. *\/\n\u00a0\nCPSTR * s = _CP_mkstr(\"hi\");\n\u00a0\n_CP_print_on(1);\n_CP_print(s);"
        ]
    },
    {
        "name":"_CP_printer",
        "Syntax":[
            "Syntax",
            "int _CP_printer(int expression)\n"
        ],
        "description":[
            "Description",
            "_CP_printer is equivalent to the printer expression BASIC statement.",
            "This function returns -1 if an error occurs. The error code is contained in _CP_errno."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "\/* Prints \"hi\" to the printer.*\/\n\u00a0\nCPSTR * s = _CP_mkstr(\"hi\");\n\u00a0\n_CP_printer(1);\n_CP_print(s);\n_CP_printer(0);\n_CP_printer(-1);"
        ]
    },
    {
        "name":"_CP_prompt",
        "Syntax":[
            "Syntax",
            "int _CP_prompt(CPSTR* string)\n"
        ],
        "description":[
            "Description",
            "_CP_prompt is equivalent to the prompt BASIC statement.",
            "This function returns -1 if an error occurs. The error code is contained in _CP_errno."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "Sets the prompt to\">\".",
            "CPSTR * s = _CP_mkstr(\">\");\n_CP_prompt(s);"
        ]
    },
    {
        "name":"_CP_read",
        "Syntax":[
            "Syntax",
            "int _CP_read(int type, CPSTR** result, int expression, CPSTR* string, int* value)\n"
        ],
        "description":[
            "Description",
            "_CP_read is equivalent to the read, readu and readu locked BASIC statements (depending upon type):",
            "If value is not needed, the user can pass (int*) 0.",
            "This function returns -1 if an error occurs. The error code is contained in _CP_errno."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "\/* Reads the item \"myid\"from \"myfile\". *\/\n\u00a0\nCPSTR * s = _CP_mkstr(\"myfile\");\nCPSTR * id = _CP_mkstr(\"myid\");\nCPSTR * xx = _CP_str_null;\nint f;\n\u00a0\n_CP_open(&f,_CP_str_null,s);\n_CP_read(_CP_READ, &xx, f, id, 0);"
        ]
    },
    {
        "name":"_CP_readfields",
        "Syntax":[
            "Syntax",
            " _CP_readfields(int type, CPSTR ** buffer, CPSTR ** returnset, CPSTR ** statusset, \n int dictfd, int datafd, CPSTR * filename, CPSTR * itemidlist, int * lockedresult, \n CPSTR * fieldnames)"
        ],
        "description":[
            "Description",
            "_CP_readfields supports reading a set of named fields. "
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "Example 1",
            "This example demonstrates the use of the_CP_readfieldsfunction with the\n    D3mvdemo,orders,file in Python.",
            "import d3py\n def run():\n         d3py.logon('localhost', 'dm', '', 'mvdemo')\n         f = d3py.File('mvdemo,orders,')\n         list = d3py.List(1, f)\n         fields = d3py.DynArray(['orderid', 'orderdate', 'shipname', \n 'shipaddress'])\n         while True:\n          id = list.next()\n          if len(id.to_list()) == 0:\n                  print('End of File')\n                  break\n          else:\n                  print(id)\n                  print(f.readnamedfields(id, fields))",
            "Example 2",
            "C Programming example:",
            "\/*\n Reads items '12', '15', '57', and '55' from \"mvdemo,orders,\" and\n applies the correlatives from 'orderid', 'orderdate', 'shipname', 'shipaddress' to each.\n *\/\n CPSTR * dict = _CP_mkstr(\"dict\");\n CPSTR * filename = _CP_mkstr(\"mvdemo,orders,\");\n CPSTR * itemidlist = _CP_mkstr(\"12\" \"\\xfe\" \"15\" \"\\xfe\" \"57\" \"\\xfe\" \"55\");\n CPSTR * fieldnames = _CP_mkstr(\"orderid\" \"\\xfe\" \"orderdate\" \"\\xfe\" \"shipname\" \"\\xfe\" \"shipaddress\");\n int lockedresult = 0;\n CPSTR * results = _CP_str_null;\n CPSTR * returnset = _CP_str_null; \n CPSTR * statusset = _CP_str_null;\n int datafd, dictfd;\n \n _CP_open(&datafd, _CP_str_null, filename);\n _CP_open(&dictfd, dict, filename);\n _CP_readfields(_CP_READ, &results, &returnset, &statusset, dictfd, datafd, filename, itemidlist, \n     &lockedresult, fieldnames);\n _CP_print(results);\n \n _CP_str_free(statusset);\n _CP_str_free(returnset);\n _CP_str_free(results);\n _CP_str_free(fieldnames);\n _CP_str_free(itemidlist);\n _CP_str_free(filename);\n _CP_str_free(dict);"
        ]
    },
    {
        "name":"_CP_readnext",
        "Syntax":[
            "Syntax",
            " int _CP_readnext(CPSTR** result, int* list, int* value, int expression)\n"
        ],
        "description":[
            "Description",
            "_CP_readnext is equivalent to the readnext result,value from list BASIC statement.",
            "This function returns -1 if an error occurs. The error code is contained in      _CP_errno. This situation occurs when there are no more items in the list.     In this case, _CP_errno will contain PE_END_LIST."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "\/* Prints the first file name in the current account. *\/\n\u00a0\n CPSTR * s = _CP_mkstr(\"select md with a1 \\\"d]\\\" sampling 1\");\n CPSTR * id = _CP_str_null;\n int sl = -1;\n \u00a0\n _CP_execute(_CP_EXECUTE, s, (CPSTR**) 0, (CPSTR**) 0);\n _CP_readnext(&id, &sl, (int*) 0, 0);\n _CP_print(id);\n \u00a0\n \/* The following example prints the item names in \"myfile\". *\/\n \u00a0\n CPSTR * n = _CP_mkstr(\"myfile\");\n CPSTR * id = _CP_str_null;\n int sl = -1;\n int f = -1;\n \u00a0\n _CP_open(&f, _CP_str_null, n);\n _CP_select(f, &sl, 0);\n while (_CP_readnext(&id, &sl, (int*) 0, 0) >= 0)\n _CP_print(id);"
        ]
    },
    {
        "name":"_CP_readt",
        "Syntax":[
            "Syntax",
            "int _CP_readt(int type, CPSTR** result)\n"
        ],
        "description":[
            "Description",
            "_CP_readt is equivalent to the readt BASIC statement.",
            "Which flavor of readt is dependent upon the command type:",
            "This function returns -1 if an error occurs. The error code is contained in _CP_errno. PE_TAPE indicates a tape error."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "\/* Prints the next tape block. *\/\n\u00a0\nCPSTR * xx = _CP_str_null;\n\u00a0\n_CP_readt(_CP_READT_ELSE, xx);\n_CP_print(xx);"
        ]
    },
    {
        "name":"_CP_readv",
        "Syntax":[
            "Syntax",
            "int _CP_readv(int type, CPSTR** result, int expression1, CPSTR* string,\nint expression2, int* value)\n"
        ],
        "description":[
            "Description",
            "_CP_readv is equivalent to the readv BASIC statement.",
            "Depending upon type, _CP_read acts as these BASIC commands:",
            "This function returns -1 if an error occurs. The error code is contained in _CP_errno. If the attribute number is bad, then _CP_errno will contain PE_BADATTR."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "\/* Reads the first attribute of the item \"myid\" from \"myfile\". *\/\n\u00a0\nCPSTR * s = _CP_mkstr(\"myfile\");\nCPSTR * id = _CP_mkstr(\"myid\");\nCPSTR * xx = _CP_str_null;\nint f;\n\u00a0\n_CP_open(&f,_CP_str_null,s);\n_CP_readv(_CP_READV, xx, f, id, 1, 0);"
        ]
    },
    {
        "name":"_CP_release",
        "Syntax":[
            "Syntax",
            "int _CP_release(int expression, CPSTR* string)\n"
        ],
        "description":[
            "Description",
            "_CP_release is equivalent to the release expression,string BASIC statement.",
            "This function returns -1 if an error occurs. The error code is contained in _CP_errno."
        ],
        "parameter":[
            "Parameter(s)",
            "expressionShould be an integer file descriptor returned by the_CP_opencall."
        ],
        "example":[
            "Example(s)",
            "\/* Releases a previously set item lock on item \"1\" in \"myfile\". *\/\n\u00a0\nCPSTR * s = _CP_mkstr(\"myfile\");\nCPSTR * t = _CP_mkstr(\"1\");\nint f;\n\u00a0\n_CP_open(&f,_CP_str_null,s);\n_CP_release(f,t);"
        ]
    },
    {
        "name":"_CP_release_all",
        "Syntax":[
            "Syntax",
            "int _CP_release_all()\n"
        ],
        "description":[
            "Description",
            "_CP_release_all is equivalent to the release BASIC statement.",
            "This function returns -1 if an error occurs. The error code is contained in _CP_errno."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "\/* Releases all previously set item locks.*\/\n_CP_release_all();"
        ]
    },
    {
        "name":"_CP_replace",
        "Syntax":[
            "Syntax",
            "int _CP_replace(CPSTR** result, CPSTR* string1, int ac.expression,\nint vc.expression, int sc.expression, CPSTR* string2)\n"
        ],
        "description":[
            "Description",
            "_CP_replace is equivalent to the result = replace(string1, ac.expression, vc.expression, sc.expression, string2) BASIC statement.",
            "This function returns -1 if an error occurs. The error code is contained in _CP_errno."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "\/* Prints \"c^b\". *\/\n\u00a0\nCPSTR * s = _CP_mkstr(\"a\\376b\");\nCPSTR * t = _CP_mkstr(\"c\");\n\u00a0\n_CP_replace(&s,s,1,0,0,t);\n_CP_print(s);"
        ]
    },
    {
        "name":"_CP_replace_bridge",
        "Syntax":[
            "Syntax",
            "int _CP_replace_bridge(int expression, CPSTR* string1, CPSTR* string2)\n"
        ],
        "description":[
            "Description",
            "_CP_replace_bridge is equivalent to the replace expression,string1 with string2 BASIC statement.",
            "This function returns -1 if an error occurs. The error code is contained in _CP_errno."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"_CP_rewind",
        "Syntax":[
            "Syntax",
            "int _CP_rewind(int type)\n"
        ],
        "description":[
            "Description",
            "_CP_rewind is equivalent to the rewind BASIC statement.",
            "This function returns -1 if an error occurs. The error code is contained in _CP_errno. PE_TAPE indicates a tape error."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "\/* Rewinds the tape. *\/\n_CP_rewind(_CP_REWIND_ELSE);"
        ]
    },
    {
        "name":"_CP_root",
        "Syntax":[
            "Syntax",
            "int _CP_root(CPSTR* string1, CPSTR* string2, int* result)\n"
        ],
        "description":[
            "Description",
            "_CP_root is equivalent to the root string1, string2 to result BASIC statement.",
            "This function returns -1 if an error occurs. The error code is contained in _CP_errno."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "\/* Gets the first item-ID which contains \"a\" as attribute 1. *\/\n\u00a0\nCPSTR * n = _CP_mkstr(\"myfile\");\nCPSTR * a = _CP_mkstr(\"a1\");\nCPSTR * op = _CP_mkstr(\"n\");\nCPSTR * k = _CP_mkstr(\"a\");\nCPSTR * i = _CP_str_null;\nint r,dummy;\n\u00a0\n_CP_root(n,a,&r);\n_CP_key(op,r,&k,&i,&dummy);"
        ]
    },
    {
        "name":"_CP_rs_",
        "Syntax":[
            "Syntax",
            "CPSTR * _CP_rs_(double number)\n"
        ],
        "description":[
            "_CP_rs converts a double floating point number into a CPSTR. The precision of this function can be changed using the _CP_precision function."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "\/* Displays 1.123. *\/\nCPSTR * s = _CP_rs_(1.123);\n_CP_print(s);"
        ]
    },
    {
        "name":"_CP_SADDR",
        "Syntax":[
            "Syntax",
            "char* _CP_SADDR(CPSTR* string)\n"
        ],
        "description":[
            "_CP_SADDR returns a standard char* pointing to the first character of the string buffer within a CPSTR structure. Because _CP_SADDR is a macro, it can be used either to the left or right side of an assignment operator."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "CPSTR * s = _CP_mkstr(\"hi\");\n_CP_SADDR(s)[1] = \u2019o\u2019; \u00a0\u00a0\u00a0\/* replace 2nd character *\/\n_CP_unix_env(); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/* UNIX print environment *\/\n_CP_TERM(s); \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\/* null terminate *\/\nprintf(\"%s\\n\",_CP_SADDR(s));"
        ]
    },
    {
        "name":"_CP_select",
        "Syntax":[
            "Syntax",
            "int _CP_select(int expression1, int* list, int expression2)\n"
        ],
        "description":[
            "Description",
            "_CP_select is equivalent to the select expression1 to list BASIC statement.",
            "This function returns -1 if an error occurs. The error code is contained in _CP_errno."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "\/* Prints the item names in \"myfile\". *\/\n\u00a0\nCPSTR * n = _CP_mkstr(\"myfile\");\nCPSTR * id = _CP_str_null;\nint sl = -1;\nint f = -1;\n\u00a0\n_CP_open(&f, _CP_str_null, n);\n_CP_select(f, &sl, 0);\nwhile (_CP_readnext(&id,&sl,(int*)0,0)>=0)\n_CP_print(id);",
            "The example below demonstrates how an external select\nlist overrides the file variable passed asexpression1. Here,\"myfile\"is passed to the select, but thereadnextreturns items from the master dictionary.",
            "CPSTR * n = _CP_mkstr(\"myfile\");\nCPSTR * s = _CP_mkstr(\"select md sampling 3\");\nCPSTR * id = _CP_str_null;\nint sl = -1;\n\u00a0\nint f = -1;\n_CP_execute(_CP_EXECUTE, s, (CPSTR**) 0, (CPSTR**) 0);\n_CP_open(&f, _CP_str_null, n);\n_CP_select(f, &sl, 0);\nwhile (_CP_readnext(&id, &sl, (int*) 0, 0) >= 0)\n_CP_print(id);"
        ]
    },
    {
        "name":"_CP_send",
        "Syntax":[
            "Syntax",
            "int _CP_send(int type, CPSTR* string, int port.number)\n"
        ],
        "description":[
            "Description",
            "_CP_send is equivalent to the send{x} string{:} to port.number BASIC statement.",
            "This function returns -1 if an error occurs. The error code is contained in _CP_errno."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "\/* Sends \"hi\" to port 1. *\/\n\u00a0\nCPSTR * s = _CP_mkstr(\"dev-att 1\");\nCPSTR * t = _CP_mkstr(\"hi\");\nCPSTR * c = _CP_str_null;\nCPSTR * r = _CP_str_null;\n\u00a0\n_CP_execute(_CP_EXECUTE_C,s,&c,&r);\n_CP_send(0, t, 1);"
        ]
    },
    {
        "name":"_CP_si_",
        "Syntax":[
            "Syntax",
            "int _CP_si_(CPSTR * string)\n"
        ],
        "description":[
            "_CP_si_ converts a CPSTR into an integer."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "\/* Displays \"3\". *\/\n\u00a0\nCPSTR * s = _CP_mkstr(\"3.12345\");\nint i;\ni = _CP_si_(s);\n_CP_unix_env();\n\u00a0\nprintf(\"%d\\n\", i);\n_CP_str_free(s);"
        ]
    },
    {
        "name":"_CP_sleep",
        "Syntax":[
            "Syntax",
            "int _CP_sleep(CPSTR* string)\n"
        ],
        "description":[
            "Description",
            "_CP_sleep is equivalent to the sleep(string) BASIC statement.",
            "This function returns -1 if an error occurs. The error code is contained in _CP_errno."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "\/* sleep 5 seconds *\/\n\u00a0\nCPSTR * s = _CP_mkstr(\"5\");\n_CP_sleep(s);\n_CP_str_free(s);"
        ]
    },
    {
        "name":"_CP_SLEN",
        "Syntax":[
            "Syntax",
            "int _CP_SLEN(CPSTR* string)\n"
        ],
        "description":[
            "_CP_SLEN returns the length of the CPSTR*, string."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "CPSTR * s = _CP_mkstr(\"hi\");\nint i = _CP_SLEN(s);"
        ]
    },
    {
        "name":"_CP_sort",
        "Syntax":[
            "Syntax",
            "int _CP_sort(CPSTR** result, CPSTR* string)\n"
        ],
        "description":[
            "Description",
            "_CP_sort is equivalent to the result = sort(string) BASIC statement.",
            "This function returns -1 if an error occurs. The error code is contained in _CP_errno."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "\/* Prints \"a^b\". *\/\n\u00a0\nCPSTR * s = _CP_mkstr(\"b\\376a\");\n\u00a0\n_CP_sort(&s,s);\n_CP_print(s);"
        ]
    },
    {
        "name":"_CP_soundex",
        "Syntax":[
            "Syntax",
            "int _CP_soundex(CPSTR** result, CPSTR* string, int type)\n"
        ],
        "description":[
            "Description",
            "_CP_soundex is equivalent to the result = soundex(string, type) BASIC statement.",
            "This function returns -1 if an error occurs. The error code is contained in _CP_errno."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "\/* Prints \"H000\". *\/\n\u00a0\nCPSTR * s = _CP_mkstr(\"hi\");\n\u00a0\n_CP_soundex(&s,s,0);\n_CP_print(s);"
        ]
    },
    {
        "name":"_CP_space",
        "Syntax":[
            "Syntax",
            "int _CP_space(CPSTR** result, int expression)\n"
        ],
        "description":[
            "Description",
            "_CP_space is equivalent to the result = space(expression) BASIC statement.",
            "This function returns -1 if an error occurs. The error code is contained in _CP_errno."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "\/* Prints \" \". *\/\n\u00a0\nCPSTR * s = _CP_str_null;\n\u00a0\n_CP_space(&s,3);\n_CP_print(s);"
        ]
    },
    {
        "name":"_CP_sr_",
        "Syntax":[
            "Syntax",
            "double _CP_sr_(CPSTR * string)\n"
        ],
        "description":[
            "_CP_sr_ converts a CPSTR into a double-float number. The precision of the conversion can be changed with the _CP_precision() function."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "\/* Displays \"1.12\" since the conversion is truncated to the precision of 2. *\/\n\u00a0\nCPSTR * s = _CP_mkstr(\"1.12345\");\ndouble r;\n\u00a0\n_CP_precision(2);\nr = _CP_sr_(s);\n_CP_unix_env();\nprintf(\"%g\\n\", r);\n_CP_str_free(s);"
        ]
    },
    {
        "name":"_CP_str",
        "Syntax":[
            "Syntax",
            "int _CP_str(CPSTR** result, CPSTR* string, int expression)\n"
        ],
        "description":[
            "Description",
            "_CP_str is equivalent to the result = str(string, expression) BASIC statement.",
            "This function returns -1 if an error occurs. The error code is contained in _CP_errno."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "\/* Prints \"aaa\". *\/\n\u00a0\nCPSTR * s = _CP_mkstr(\"a\");\n\u00a0\n_CP_str(&s,s,3);\n_CP_print(s);"
        ]
    },
    {
        "name":"_CP_str_alloc",
        "Syntax":[
            "Syntax",
            "CPSTR* _CP_str_alloc(int expression)\n"
        ],
        "description":[
            "_CP_str_alloc allocates space for a CPSTR. It is the equivalent of malloc(), but returns a CPSTR*. The expression should contain the length of the string buffer to allocate. A 0 is returned if a failure occurs."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"_CP_str_copy",
        "Syntax":[
            "Syntax",
            "CPSTR * _CP_str_copy(CPSTR * string)\n"
        ],
        "description":[
            "_CP_str_copy makes a copy of a CPSTR. The actual contents of the  string are copied rather than just the pointer."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "This example assigns the string\"Null value\"to all the elements of the arraya. Note that copies are necessary so that each element can be modified\nwithout affecting the others.",
            "CPSTR * s = _CP_mkstr(\"Null value\");\nCPSTR * a[20];\nint i;\n\u00a0\nfor (i = 0; i < 20; i++)\na[i] = _CP_str_copy(s);"
        ]
    },
    {
        "name":"_CP_str_free",
        "Syntax":[
            "Syntax",
            "_CP_str_free(CPSTR* string)\n"
        ],
        "description":[
            "_CP_str_free releases the CPSTR* string back to the string pool to be allocated at a later time. All CPSTR*s must eventually be released with _CP_str_free."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"_CP_str_null",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "CPSTR * s = _CP_str_null;"
        ]
    },
    {
        "name":"_CP_str_realloc",
        "Syntax":[
            "Syntax",
            "CPSTR* _CP_str_realloc(CPSTR* old, int expression)\n"
        ],
        "description":[
            "_CP_str_realloc reallocates a CPSTR* to a new length."
        ],
        "parameter":[
            "Parameter(s)",
            "oldPoints to the string to reallocate.expressionNew length desired.",
            "If the request is for a smaller length than the current\none, or if the request is for a larger length, but the system senses\nthat the internal buffer size of the old CPSTR* is sufficient to handle\nthe extra length, then the routine changes the size and returns a\npointer equal toold. If the requested size is\ntoo big for the internal buffer, then a new pointer is created, the\nold data copied to the new one, and the old string released. Any new\nbuffer space not filled in by the old copy is undefined.",
            "Note:The pointer allocated by_CP_str_reallocmust\neventually be released by calling_CP_str_free,\nnotfree()."
        ],
        "example":[
            "Example(s)",
            "CPSTR * s = _CP_mkstr(\"hi\");\ns = _CP_str_realloc(s, 3);\n_CP_SADDR(s)[2] = \u2019!\u2019;"
        ]
    },
    {
        "name":"_CP_str0",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "CPSTR * s = _CP_str0;"
        ]
    },
    {
        "name":"_CP_substr",
        "Syntax":[
            "Syntax",
            "int _CP_substr(CPSTR** result, CPSTR* string, int beg.pos.expression,\nint len.expression)\n"
        ],
        "description":[
            "Description",
            "_CP_substr is equivalent to the result = string[beg.pos.expression, len.expression] BASIC statement.",
            "This function returns -1 if an error occurs. The error code is contained in _CP_errno."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "\/* Prints \"h\". *\/\n\u00a0\nCPSTR * s = _CP_mkstr(\"hi\");\n\u00a0\n_CP_substr(&s,s,1,1);\n_CP_print(s);"
        ]
    },
    {
        "name":"_CP_sum",
        "Syntax":[
            "Syntax",
            "int _CP_sum(CPSTR** result, CPSTR* string)\n"
        ],
        "description":[
            "Description",
            "_CP_sum is equivalent to the result = sum(string) BASIC statement.",
            "This function returns -1 if an error occurs. The error code is contained in _CP_errno."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "\/* Prints \"3\". *\/\n\u00a0\nCPSTR * s = _CP_mkstr(\"1\\3762\");\n\u00a0\n_CP_sum(&s,s);\n_CP_print(s);"
        ]
    },
    {
        "name":"_CP_system",
        "Syntax":[
            "Syntax",
            " int _CP_system(CPSTR** result, int expression, int pib)\n"
        ],
        "description":[
            "Description",
            "The _CP_system function is equivalent to the     result = system(expression) BASIC   statement.",
            "This function returns -1 if an error occurs. The error code is contained in _CP_errno."
        ],
        "parameter":[
            "Parameter(s)",
            "resultThe return contents of the system function.expressionThe system function number to perform.See the BASICsystem() functiontopic for the detailed\n                  list of values.pibThe line number of the pib from which to return data.To return data for your own\n                  line, -1 can be used."
        ],
        "example":[
            "Example(s)",
            "\/* Get a unique item-ID in s *\/\n CPSTR * s = _CP_str_null;\n _CP_system(&s, 19, -1);"
        ]
    },
    {
        "name":"_CP_TERM",
        "Syntax":[
            "Syntax",
            "_CP_TERM(CPSTR* string)\n"
        ],
        "description":[
            "_CP_TERM terminates a CPSTR* string with a null character."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "*\/ Creates a string and terminates it with a 0, so that \u2019printf\u2019 can be used. *\/\n\u00a0\nCPSTR *s= _CP_mkstr( \"Enter name \" );\n_CP_TERM( s );\nprintf( _CP_ADDR( s ) );"
        ]
    },
    {
        "name":"_CP_time",
        "Syntax":[
            "Syntax",
            " int _CP_time(int* result)\n"
        ],
        "description":[
            "Description",
            "The _CP_time function is equivalent to the     result = time() BASIC statement.",
            "This function returns -1 if an error occurs. The error code is contained in _CP_errno."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "\/* Prints the numeric time. *\/\n\u00a0\n int i;\n\u00a0\n _CP_time(&i);\n _CP_unix_env();\n printf(\"%d\\n\",i);"
        ]
    },
    {
        "name":"_CP_timedate",
        "Syntax":[
            "Syntax",
            "int _CP_timedate(CPSTR** result)\n"
        ],
        "description":[
            "Description",
            "_CP_timedate is equivalent to the result = timedate() BASIC statement.",
            "This function returns -1 if an error occurs. The error code is contained in _CP_errno."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "\/* Prints the date and time. *\/\nCPSTR * s = _CP_str_null;\n_CP_timedate(&s);\n_CP_print(s);"
        ]
    },
    {
        "name":"_CP_trans",
        "Syntax":[
            "Syntax",
            "int _CP_trans(int op, int exp, CPSTR * str)\n"
        ],
        "description":[
            "Description",
            "_CP_trans is equivalent to one of several BASIC transaction processing statements depending on the op parameter. Valid values of  op are:",
            "This function returns -1 if an error occurs. The error code is contained in _CP_errno and is always PE_ACCESS."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"_CP_trim",
        "Syntax":[
            "Syntax",
            "int _CP_trim(CPSTR** result, CPSTR* string)\n"
        ],
        "description":[
            "Description",
            "_CP_trim is equivalent to the result = trim(string) BASIC statement.",
            "This function returns -1 if an error occurs. The error code is contained in _CP_errno."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "\/* Prints \"3\". *\/\n\u00a0\nCPSTR * s = _CP_mkstr(\" 3 \");\n\u00a0\n_CP_trim(&s,s);\n_CP_print(s);"
        ]
    },
    {
        "name":"_CP_unix_break",
        "Syntax":[
            "Syntax",
            "int _CP_unix_break()\n"
        ],
        "description":[
            "Description",
            "_CP_unix_break causes all subsequent breaks to terminate the process as is standard in UNIX applications.",
            "This function returns -1 if an error occurs. The error code is contained in _CP_errno."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "_CP_unix_break();"
        ]
    },
    {
        "name":"_CP_unix_env",
        "Syntax":[
            "Syntax",
            "int _CP_unix_env()\n"
        ],
        "description":[
            "Description",
            "_CP_unix_env sets the application to a standard UNIX environment. When using this setting, all terminal input and output must be done via standard UNIX routines only (system, printf, scanf).",
            "This function returns -1 if an error occurs. The error code is contained in _CP_errno."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"_CP_unlock",
        "Syntax":[
            "Syntax",
            "int _CP_unlock(int expression)\n"
        ],
        "description":[
            "Description",
            "_CP_unlock is equivalent to the unlock expression BASIC statement.",
            "This function returns -1 if an error occurs. The error code is contained in _CP_errno."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "_CP_unlock(1);"
        ]
    },
    {
        "name":"_CP_unlock_all",
        "Syntax":[
            "Syntax",
            "int _CP_unlock_all()\n"
        ],
        "description":[
            "Description",
            "_CP_unlock_all is equivalent to the unlock BASIC statement.",
            "This function returns -1 if an error occurs. The error code is contained in _CP_errno."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "\/* Releases all basic locks owned by the current process. *\/\n_CP_unlock_all();"
        ]
    },
    {
        "name":"_CP_weof",
        "Syntax":[
            "Syntax",
            " int _CP_weof(int type)\n"
        ],
        "description":[
            "Description",
            "_CP_weof is equivalent to the weof BASIC statement.",
            "This function returns -1 if an error occurs. The error code usually returned in system(0) is contained in _CP_errno. PE_TAPE indicates a tape error."
        ],
        "parameter":[
            "Parameter(s)",
            "TypeBASIC Statement_CP_WEOF_ELSEweof else return -1_CP_WEOF_ONERRweof onerr return -1"
        ],
        "example":[
            "Example(s)",
            "\/* Writes an eof on the tape. *\/\n _CP_weof(_CP_WEOF_ELSE);"
        ]
    },
    {
        "name":"_CP_write",
        "Syntax":[
            "Syntax",
            "int _CP_write(int type, CPSTR* string1, int expression, CPSTR* string2)\n"
        ],
        "description":[
            "_CP_write is equivalent to the write or writeu BASIC statements.",
            "The equivalency is dependent upon the type parameter.",
            "The expression should be an integer file descriptor returned by the _CP_open call. This function returns -1 if an error occurs. The error code is contained in _CP_errno."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "\/* Writes \"hi\" in item \"myid\" in \"myfile\". *\/\n\u00a0\nCPSTR * s = _CP_mkstr(\"myfile\");\nCPSTR * t = _CP_mkstr(\"hi\");\nCPSTR * id = _CP_mkstr(\"myid\");\nint f;\n\u00a0\n_CP_open(&f,_CP_str_null,s);\n_CP_write(_CP_WRITE, t, f, id);"
        ]
    },
    {
        "name":"_CP_writefields",
        "Syntax":[
            "Syntax",
            " _CP_writefields(int type, SDATA ** returnset, SDATA ** statusset, int dictfd, \n int datafd, SDATA * itemidlist, SDATA * item, int * lockedresult, SDATA * fieldnames)"
        ],
        "description":[
            "Description",
            "_CP_writefields supports writing a set of named fields. ",
            "This        occurs if the output conversion or correlative is an MD,        MR, or D code.",
            "This function returns -1 if an error occurs and the error code is contained in      _CP_errno."
        ],
        "parameter":[
            "Parameter(s)",
            "typeOne of the values from the table in_CP_readfields().It\n         affects how the item is read while preparing to update the fields listed infieldnames.See_CP_readfieldsfor more information.returnsetA segment mark delimited list of return values corresponding to each item processed\n        and written from theitemidlist.It will contain a 0 for each item\n         successfully processed and written. This call stops on error so there will be no other\n         value besides 0 in the list. Seeitemidlist.statussetA segment mark delimited list of status values corresponding to each item processed\n        and written from theitemidlist.It will contain a 0 for each item\n         successfully processed and written. This call stops on error so there will be no other\n         value besides 0 in the list. Seeitemidlist.dictfdThe handle, returned by_CP_open(), to the dictionary level of the\n        file containing the ADIs.datafdThe handle, returned by_CP_open(), to the data level of the file\n        containing the items referenced byitemidlist.itemidlistAn attribute mark delimited list of the item-ids used to write items todatafd.If any item cannot be written (for example, it is locked) or\n         any ADI cannot be read (for example, it does not exist), then the call stops processing the\n         list and returns an error.No further items in the list will be processed or\n         written. Items previously processed and written up to that point remain.itemA segment mark delimited list of items.There is one entry for each item to be\n         processed. Each item has one attribute for each attribute listed infieldnames.lockedresultThe lock status of the last item read.fieldnamesAn attribute mark delimited list of the named fields (aka ADIs) to process and write\n        for each item initemidlist.If any of the ADIs cannot be accessed,\n         then the call fails. The conversion and correlative only support MD\/MR\/D codes. If they are\n         not any of those, then that attribute is not written."
        ],
        "example":[
            "Example(s)",
            "Example 1",
            "This example demonstrates the use of the_CP_writefieldsfunction with the\n    D3mvdemo,orders,file in Python.",
            "Copyright (C) Rocket Software 1993-2020\n import d3py\n def run():\n        d3py.logon('localhost', 'dm', '', 'mvdemo')\n        f = d3py.File('mvdemo,orders,')\n        fields = d3py.DynArray(['orderdate','shipdate','unitprice','saleprice'])\n        f.writenamedfields('1001',fields,d3py.DynArray(['6\/10\/2020','6\/9\/2020','150','2500']))",
            "Example 2",
            "C Programming example:",
            "\/*\n Writes items \"2001\" and \"2002\" on \"mvdemo,orders,\" and applies the output conversions from \n   \"orderdate\", \"shipdate\", \"unitprice\", and \"saleprice\" to each.\n *\/\n CPSTR * SM = _CP_mkstrl(\"\\xff\", 1);\n CPSTR * dict = _CP_mkstr(\"dict\");\n CPSTR * filename = _CP_mkstr(\"mvdemo,orders,\");\n CPSTR * returnset = _CP_str_null;\n CPSTR * statusset = _CP_str_null;\n int dictfd, datafd;\n CPSTR * itemidlist = _CP_mkstr(\"2001\" \"\\xfe\" \"2002\");\n CPSTR * items = _CP_str_null;\n int lockedresult = 0;\n CPSTR * fieldnames = _CP_mkstr(\"orderdate\" \"\\xfe\" \"shipdate\" \"\\xfe\" \"unitprice\" \"\\xfe\" \"saleprice\");\n CPSTR * item1 = _CP_mkstr(\"6\/10\/2020\" \"\\xfe\" \"6\/9\/2020\" \"\\xfe\" \"150\" \"\\xfe\" \"2500\");\n CPSTR * item2 = _CP_mkstr(\"9\/03\/2021\" \"\\xfe\" \"9\/06\/2021\" \"\\xfe\" \"32000\" \"\\xfe\" \"30000\");\n \n _CP_open(&datafd, _CP_str_null, filename);\n _CP_open(&dictfd, dict, filename);\n _CP_cat(&items, item1, SM);\n _CP_cat(&items, items, item2);\n _CP_writefields(_CP_READ, &returnset, &statusset, dictfd, datafd, itemidlist, items, \n     &lockedresult, fieldnames);\n\n _CP_str_free(statusset);\n _CP_str_free(returnset);\n _CP_str_free(fieldnames);\n _CP_str_free(itemidlist);\n _CP_str_free(filename);"
        ]
    },
    {
        "name":"_CP_writet",
        "Syntax":[
            "Syntax",
            "int _CP_writet(int type, CPSTR* string)\n"
        ],
        "description":[
            "Description",
            "_CP_writet is equivalent to the writet BASIC statement.",
            "This function returns -1 if an error occurs. The error code is contained in _CP_errno. PE_TAPE indicates a tape error."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "\/* Writes the next tape block. *\/\nCPSTR * xx = _CP_mkstrl(\"data\",4);\n_CP_writet(_CP_WRITET_ELSE, xx);"
        ]
    },
    {
        "name":"_CP_writev",
        "Syntax":[
            "Syntax",
            "int _CP_writev(int type, CPSTR* string1, int expression1, CPSTR* string2,\nexpression2)\n"
        ],
        "description":[
            "Description",
            "_CP_writev is equivalent to the writev and writevu BASIC statements.",
            "expression1 should be an integer file descriptor returned by the _CP_open call.",
            "This function returns -1 if an error occurs. The error code is contained in _CP_errno."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "\/* Writes \"hi\" into attribute 1 of item \"myid\" in \"myfile\". *\/\n\u00a0\nCPSTR * s = _CP_mkstr(\"myfile\");\nCPSTR * t = _CP_mkstr(\"hi\");\nCPSTR * id = _CP_mkstr(\"myid\");\nint f;\n\u00a0\n_CP_open(&f,_CP_str_null,s);\n_CP_writev(_CP_WRITE, t, f, id, 1);"
        ]
    },
    {
        "name":"_CP_xtd",
        "Syntax":[
            "Syntax",
            "int _CP_xtd(double* result, CPSTR* string)\n"
        ],
        "description":[
            "Description",
            "_CP_xtd is equivalent to the result = xtd(string) BASIC statement.",
            "This function returns -1 if an error occurs. The error code is contained in _CP_errno."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "\/* Prints 15. *\/\n\u00a0\nCPSTR * s = _CP_mkstr(\"F\");\ndouble f;\n\u00a0\n_CP_xtd(&f,s);\n_CP_unix_env();\n\u00a0\nprintf(\"%f\\n\",f);"
        ]
    },
    {
        "name":"Editor processor",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Editor overview",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Using the Enter key",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "013 crt \" enter response \" :\n.\n014 input response\n015+print \"hello\"\n016+\n..."
        ]
    },
    {
        "name":"Error messages",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "The most common error message\nis theseqn?message. It indicates that a change is\nbeing attempted to a lineabovea line that a change has been\nmade. To correct this, use thefcommand, then\ntry the same operation that previously failed.",
            "014 print customer-ID.i print\n.12012 print curr.bal.iseqn?"
        ]
    },
    {
        "name":"Wildcards",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "Replaces the first 3 characters\n(wildcards, or^) of the current line with null,\n(that is, deletes the first three characters).",
            "r\/^^^\/\/",
            "Replaces the first occurrence of the string,abc, with an attribute mark (control shift^), terminating\nthe line prior to the string,abc.",
            "r\/abc\/^",
            "Replaces all characters on the current attribute withnull, leaving the current attribute intact, but empty.",
            "ru\/^\/\/"
        ]
    },
    {
        "name":"Editor commands",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"^ command",
        "Syntax":[
            "Syntax",
            " ^\n"
        ],
        "description":[
            "The ^ command toggles the function of the wildcard search character used in the l\u00a0and r commands. Initially, this function is on. When toggled off, the ^ is treated as any other character. This allows the r command to look for a literal ^, rather than treating ^ as a wildcard."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"? command (Editor processor)",
        "Syntax":[
            "Syntax",
            " ?\n"
        ],
        "description":[
            "The ? (question mark) command displays the current file name and item-ID of the item currently being edited and the line number where the line pointer is positioned."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "Indicates the current item is\nfrom the file namebp, the item-ID isenter.invoiceand the line pointer is positioned on line 14.",
            ".?bp enter.invoice L 014\n."
        ]
    },
    {
        "name":"a command (Editor processor)",
        "Syntax":[
            "Syntax",
            " a\n"
        ],
        "description":[
            "The a command repeats the last l command issued in the line Editor."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "The line pointer in this example\nis left at line 20.",
            "l\/print014 print customer-ID.a020 print"
        ]
    },
    {
        "name":"ap command (Editor processor)",
        "Syntax":[
            "Syntax",
            " ap [n] \/string\/"
        ],
        "description":[
            "The ap command appends a string of characters to the end of one line,   or to the ends of all consecutive lines within a range."
        ],
        "parameter":[
            "Parameter(s)",
            "nNumber of lines starting with the current line. Ifnis not\n        included,stringis appended to the current line only.stringString of characters to append to the lines.\/Commonly used as the delimiter, but any non-numeric character may be used as long as\n        it is not included in the string. The second delimiter is not needed unless spaces are to be\n        appended at the end of the line.",
            "Theapcommand displays all lines to which it appendsstring, and moves the line pointer to the last line in the range indicated\n    byn.",
            "Thexcommand cancels anapcommand, provided theapcommand was the last command to modify a line."
        ],
        "example":[
            "Example(s)",
            "This example appends the string (SALES=1,MARKETING=2) + to the current line:",
            "002 OENTER YOUR DEPT. NUMBER\n .AP\/(SALES=1, MARKETING=2)+\n 002 OENTER YOUR DEPT. NUMBER(SALES=1,MARKETING=2)+ \n ."
        ]
    },
    {
        "name":"as command",
        "Syntax":[
            "Syntax",
            " as\n"
        ],
        "description":[
            "The as command toggles the assembly format on or off. It is used         exclusively on D3 assembler source listings to format the instructions and operands into a         more readable format. ",
            "The four fields are:"
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"b command (Editor processor)",
        "Syntax":[
            "Syntax",
            " b\n"
        ],
        "description":[
            "The b command positions the line pointer to the end (bottom, or last line) of the current item."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "The end of this example occurs\nat line 167. If a new line is entered, it becomes 168.",
            "067 * Process next value\n.b\neoi 167"
        ]
    },
    {
        "name":"c command (Editor processor)",
        "Syntax":[
            "Syntax",
            " c\n"
        ],
        "description":[
            "The c command displays a column position guide to indicate the actual positions of characters on the screen for use with the l and r commands."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "To display terminal columnar\npositions:",
            "c1              2              3\n123456789012345678901234567890123456789...",
            "The column numbers extend to the 75th column position."
        ]
    },
    {
        "name":"de command (Editor processor)",
        "Syntax":[
            "Syntax",
            " de{#lines{\/string{\/start.col-end.col}}}\n"
        ],
        "description":[
            "The de command deletes one or more lines from the current item, starting at the current line number position. If a string is specified, only the lines containing the string are deleted. Lines are not actually deleted until the item is filed with an f\u00a0command. See x command to cancel the de."
        ],
        "parameter":[
            "Parameter(s)",
            "start.colSpecifies the beginning column ranges in which string comparisons\nare made.end.colSpecifies the ending column ranges in which string comparisons\nare made."
        ],
        "example":[
            "Example(s)",
            "Deletes the current line.",
            "de",
            "Deletes the current line and the next nine lines.",
            "de10",
            "Deletes and displays the current and next nine lines.",
            "de10\/",
            "Deletes lines containing the string,abc, in the current and next nine lines. Any lines not containing this\nstring arenotdeleted.",
            "de10\/abc",
            "Deletes and displays the lines containing the string,abc, in column ranges 5 through 9, in the current and next\nnine lines. Any lines not containing this string, starting at column\nposition 5, are not deleted.",
            "de10\/abc\/5-9"
        ]
    },
    {
        "name":"ex command",
        "Syntax":[
            "Syntax",
            " ex\n"
        ],
        "description":[
            "The ex command exits the current item without saving changes. Control returns to TCL, or to the next item in the list if more than one item was requested.",
            "If the item has changed since the Editor was invoked and the ex command is issued, the message item changed, exit it (y\/n=cr) ? displays. Pressing y exits the item without saving changes. To save the item, see fi command or fs command."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "ed bp *first.program\ntop.ex\u2019first.program\u2019 exited.\nsecond.program\ntop.ex\u2019second.program\u2019 exited."
        ]
    },
    {
        "name":"exk command",
        "Syntax":[
            "Syntax",
            " exk\n"
        ],
        "description":[
            "The exk command exits the current item without saving changes and returns control directly to TCL, abandoning any active list, if present."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "ed bp *first.program\ntop.exk\u2019first.program\u2019 exited."
        ]
    },
    {
        "name":"f command (Editor processor)",
        "Syntax":[
            "Syntax",
            " f\n"
        ],
        "description":[
            "Description",
            "The f command files the dual Editor buffers so that additional changes may be made to an item, or to review previous changes. After filing, the line pointer is positioned to the beginning (top) of the item. Changes to items must be made from the top down. This means that changes may not be made to any line above a line that a change has already been made without previously using the f command.",
            "As a general rule, use the f command whenever changes are required above the last line that a change was made, or upon receiving a seqn? error message."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "The most common error message\nis theseqn?message. It indicates that a change is\nbeing attempted to a lineabovea line that a change has been\nmade. To correct this, use thefcommand, then\ntry the same operation that previously failed.",
            "014 print customer-ID.i print\nf.12\n012 print curr.bal.iseqn?"
        ]
    },
    {
        "name":"fd command",
        "Syntax":[
            "Syntax",
            " fd\n"
        ],
        "description":[
            "Description",
            "The fd command deletes the current item. Control returns to TCL, or to the next item in the list, if more than one item was requested. The default behavior of the fd command unconditionally prompts for confirmation of the deletion.",
            "To recover the item, use the TCL recover-fd command. This command must immediately follow the fd command."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "ed bp print.invoices.baktop.fd\u2019print.invoices.bak\u2019 deleted."
        ]
    },
    {
        "name":"fdk command",
        "Syntax":[
            "Syntax",
            " fdk\n"
        ],
        "description":[
            "The fdk command deletes the current item and abandons an active list, if present. Control returns directly to TCL."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "ed bp *first.program\ntop.fdk\u2019first.program\u2019 deleted."
        ]
    },
    {
        "name":"fi command",
        "Syntax":[
            "Syntax",
            " fi{options}{(file.reference}{item-ID}\n"
        ],
        "description":[
            "Description",
            "The fi command files the current item, saving all changes made. Control returns to TCL or to the next item in the active list.",
            "A different file reference and\/or item-ID may be specified prior to filing the item."
        ],
        "parameter":[
            "Parameter(s)",
            "optionskCancels any select list and returns to TCL after the item\nis filed.oOverwrites any existing item with the same name on a specified\nfile.file.referenceName of the file to write to.item-IDName of the item saved."
        ],
        "example":[
            "Example(s)",
            "Files the item, with any changes\nmade, over the original item.",
            "ed bp program1top.fi\u2019program1\u2019 filed.",
            "Files the item, with any changes made, under a different\nitem-ID. The original item remains unchanged.",
            "ed bp program1\ntop.fi new.program1\u2019new.program1\u2019 filed.",
            "Any changes made toprogram1in this\nexample are saved inprogram2only. No changes are\nsaved toprogram1.",
            "ed bp program1top.fi program2\u2019program2\u2019 filed.",
            "This means that the item,new.program1, was already on file.",
            "ed bp program1top.fi new.program1item is already on file",
            "It can be overwritten as:",
            ".fio new.program1\u2019new.program1\u2019 filed."
        ]
    },
    {
        "name":"fs command",
        "Syntax":[
            "Syntax",
            " fs{(file.reference}{item-ID}\n"
        ],
        "description":[
            "The fs command saves a copy of the current item and remains in the Editor within the current item. It is essentially the same as the fi command, but does not exit the item. When editing large items, periodically issue an fs command to ensure an update to the file. A different file reference and\/or item-ID may be specified prior to saving the item.",
            "See fso command for writing over pre-existing items."
        ],
        "parameter":[
            "Parameter(s)",
            "item-IDName of the item saved.file.referenceName of the file to write to."
        ],
        "example":[
            "Example(s)",
            "Writes a copy of the item back\nto the file from which it was originally retrieved.",
            "ed bp main.programtop.fs",
            "Makes a backup copy ofmain.program,\ncalling the new copymain.program.original. This\nis useful in making historical copies or saving originals under different\nnames prior to making changes without leaving the Editor.",
            "ed bp main.programtop.fs main.program.original"
        ]
    },
    {
        "name":"fso command",
        "Syntax":[
            "Syntax",
            " fso{(file.reference}{item-ID}\n"
        ],
        "description":[
            "The fso command saves the current item and overwrites the item when a duplicate item-ID already exists on file. This form is used when specifying an item-ID other than the one originally requested."
        ],
        "parameter":[
            "Parameter(s)",
            "item-IDName of the item saved.file.referenceName of the file to write to."
        ],
        "example":[
            "Example(s)",
            "This does not mean that the command\nwas invalid. Rather, it means that the item,main.program.original, was already on file.",
            "ed bp main.programtop.fs main.program.originalcmnd?",
            "It can be overwritten as:",
            ".fso main.program.original"
        ]
    },
    {
        "name":"g command (Editor processor)",
        "Syntax":[
            "Syntax",
            " {g}line.number\n"
        ],
        "description":[
            "The g command positions the line pointer to a specific line. The attribute number (line number) may be entered without the g command."
        ],
        "parameter":[
            "Parameter(s)",
            "line.numberLine number (attribute number) to position the line pointer."
        ],
        "example":[
            "Example(s)",
            "g25"
        ]
    },
    {
        "name":"h command (Editor processor)",
        "Syntax":[
            "Syntax",
            " h"
        ],
        "description":[
            "The h command toggles the display between ASCII and   hexadecimal-encoded ASCII."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "While editing an item, type thehcommand to toggle the display for the\n    current line and any subsequent line displays until thehcommand is typed\n    again.",
            "Example 1",
            ":ed customers 1\n top\n 001 Comp Products\n 002 10 Executive Dr\n 003 Farmington\n .h\n hex display on\n 004 436F6E6E65637469637574\n 005 3036303332\n 006 526F62657274205065746572736F6E\n .h\n hex display off\n 007 Operations Manager\n 008 203\/665-0353\n 009 203\/665-1254\n .",
            "Note:This is display-only. When using thelcommand to search or thercommand to replace (or other similar Editor commands) ASCII is\n    assumed.",
            "Example 2",
            "001 Comp Products\n .h\n hex display on\n .1\n 001 436F6D702050726F6475637473\n .r\/C\/D\n 001 446F6D702050726F6475637473\n .h\n hex display off\n .f\n top\n .1\n 001 Domp Products\n ."
        ]
    },
    {
        "name":"i command",
        "Syntax":[
            "Syntax",
            " i{string}\n"
        ],
        "description":[
            "The i command places the Editor into insert mode to enter one or more   lines. Pressing Enter at the first position of a line while in insert mode returns control to   command mode."
        ],
        "parameter":[
            "Parameter(s)",
            "stringText to be inserted in the attribute."
        ],
        "example":[
            "Example(s)",
            "Inserting a single line:",
            "i string",
            "-or-",
            "i\nnnn+string\nnnn+",
            "Inserting a null line:",
            "i",
            "Inserting multiple lines with each textstring(new line) delimited with an\n        attribute mark (control shift^):",
            "i newline1^newline2^newline3"
        ]
    },
    {
        "name":"l command (Editor processor)",
        "Syntax":[
            "Syntax",
            " l{}{#lines}{delimiter string{start.col{-end.col}}}\n"
        ],
        "description":[
            "Description",
            "The l command lists a specified number of lines that contain a search string and increments the line pointer to the last line listed. The l command locates one or more occurrences of a text string within a specified range of line (attribute) numbers.",
            "The p (or p0) command defaults to l22 (list 22 lines) each time the Editor is invoked. The line pointer is incremented to the last line listed. The colon is a special delimiter that indicates a column-dependent correspondence."
        ],
        "parameter":[
            "Parameter(s)",
            "#linesSpecifies the number of lines containing a search string.\nIf no line numbers are entered, the next occurrence is located and\ndisplayed.delimiterAny non-numeric character that indicates a column dependent\ncorrespondence.stringSpecifies the search string. The^is used\nas a wildcard search character within the string parameter for locating\nor replacing variable strings within strings. It matches any character.start.colSpecifies the beginning column range in which strings are\neligible for matching.end.colSpecifies the ending column range in which strings are eligible\nfor matching."
        ],
        "example":[

        ]
    },
    {
        "name":"m command (Editor processor)",
        "Syntax":[
            "Syntax",
            " m\n"
        ],
        "description":[
            "The m command is used exclusively on D3 assembler source listings to expand included macros into a more readable format."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"me command",
        "Syntax":[
            "Syntax",
            " me{#lines}\/{item-ID}{\/{start.attr}}\n me{#lines}(file.reference {item-ID})start.attr}}\n"
        ],
        "description":[
            "Description",
            "The me command merges one or more lines from the current item, another item in the current file, or another item in a different file.",
            "The me command merges lines beginning with the starting attribute (line) number in an item-ID. Any delimiter, except a left parenthesis, specifies that the following parameter is an item-ID."
        ],
        "parameter":[
            "Parameter(s)",
            "#linesSpecifies the number of lines to merge. If not specified,\nonly one line is merged.item-IDSpecifies the item-ID. If not specified, item-ID uses the\ncurrent item-ID.start.attrSpecifies the starting attribute (line) number. If not specified,\nthe starting attribute (line) number merges from the first line.file.referenceSpecifies the file where the item change resides. A left parenthesis\nspecifies a different file reference. No item-ID following the file\nreference means the current item-ID."
        ],
        "example":[
            "Example(s)",
            "Merges10lines\nfrom the current item, beginning with line number 1.",
            "me10\/\/",
            "Merges10lines from the item calledabc, beginning with line number3.",
            "me10\/abc\/3",
            "Merges22lines from the item calledprog.doc, that resides in the fileappdoc, beginning with line number10.",
            "me22(appdoc prog.doc)10"
        ]
    },
    {
        "name":"n command (Editor processor)",
        "Syntax":[
            "Syntax",
            " n{number.lines}\n"
        ],
        "description":[
            "Description",
            "The n command positions the line pointer down a specified number of lines from the current position. Followed by pressing ENTER, the n command redisplays the current line.",
            "n1 is the same as pressing ENTER in Editor."
        ],
        "parameter":[
            "Parameter(s)",
            "number.linesSpecifies the number of lines from the current position the\nline pointer is positioned."
        ],
        "example":[
            "Example(s)",
            "n014 print customer-ID.n4018 print"
        ]
    },
    {
        "name":"o command (Editor processor)",
        "Syntax":[
            "Syntax",
            " o\n",
            " o\n s\n\n"
        ],
        "description":[
            "The o command sets object assembly mode in the Editor."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"p command (Editor processor)",
        "Syntax":[
            "Syntax",
            " p{{number}editor.command{[editor.command...}}\n"
        ],
        "description":[
            "The p command either defines or executes a pre-stored command;    p by itself assumes p0 (zero)."
        ],
        "parameter":[
            "Parameter(s)",
            "numberDefines the pre-stored buffer.editor.commandAny valid Editor command.[(Control) value mark."
        ],
        "example":[
            "Example(s)",
            "p1 b[u22[l22",
            "Defines pre-stored commandp1with the command sequence:",
            "Go to the bottom of the item.Move the line pointer up 22 lines.List 22 lines.",
            "Each time thep1command is issued, thelast22 lines of the item display.",
            "p2 ru9999.abc.xyz[fi[p2",
            "Defines pre-stored commandp2as:",
            "Replace, in the next 9999 lines, all occurrences of abc with xyz.File the item.Repeat the process on the next item (by calling thep2command), or, if all\n     items have been processed, the process falls out to TCL.",
            "Note:The[displayed inbothexamples is the character echoed to the\n    screen when Esc is pressed. This further assumes that the Esc key isnotcurrently\n    programmed topusha level."
        ]
    },
    {
        "name":"pd command",
        "Syntax":[
            "Syntax",
            " pd\n"
        ],
        "description":[
            "Description",
            "The pd command displays any prestored command.",
            "Pre-stored commands are defined using the p command and are lost each time the     Editor returns to TCL. See p command (Editor processor)."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "ed bp print.invoicestop.pdP0 L22"
        ]
    },
    {
        "name":"r command (Editor processor)",
        "Syntax":[
            "Syntax",
            " r{u}{#lines}\/old.string\/new.string{\/{start.col{-end.col}}}\n"
        ],
        "description":[
            "Description",
            "The r command replaces the current line, replaces a string of characters within the current line, or replaces a string of characters within a specific range of lines.",
            "Only the first occurrence of the old string is replaced with the new string. The      ru form replaces all (universal) occurrences. If the number of lines is     specified, the line pointer is incremented accordingly.",
            "An r command, followed by pressing Enter, allows the replacement of an entire     line. Pressing ENTER at the first position of the line returns control to the Editor command     prompt and the line remains unchanged.",
            "Multiple replacements may be performed on a line without filing the data with the f\u00a0command.",
            "The ^ represents an attribute mark in the Editor. Used with the      r command, it has the effect of terminating the line. See the following      .r\/abc\/^ example."
        ],
        "parameter":[
            "Parameter(s)",
            "uIndicates universal replace.#linesSpecifies the number of lines to be replaced.\/(forward-slash) Delimiter that can be any nonnumeric character.old.stringIf null, a new string is inserted at the beginning of the\nline.new.stringIf null, and the old string is found, the old string is deleted\nfrom the line.start.colSpecifies the beginning column range in which strings are\neligible for replacement.end.colSpecifies the ending column range in which strings are eligible\nfor replacement."
        ],
        "example":[
            "Example(s)",
            "Positions cursor at the beginning\nof linennnfor replacement of the entire line. A\nsubsequent Enter leaves the line intact.",
            "r\n nnn _",
            "Positions cursor at the beginning of each of the next\nten lines for entire line replacement.",
            "r10",
            "Replaces the first 3 characters (wildcards or^) of the current line with null.\n    That is, deletes the first three characters.",
            "r\/^^^\/\/",
            "Replaces the first occurrence of the string,abc, with an attribute mark (^), terminating the line\nprior to the string,abc.",
            "r\/abc\/^",
            "Places the string,abc, at the beginning of the next ten lines.",
            "r10\/\/abc",
            "Replaces the first occurrence of the string,abc, with the stringxyzin the current and the next\nnine lines.",
            "r10\/abc\/xyz",
            "Replaces all occurrences of the string,abc, with the string,xyz, in the current and next\nnine lines.",
            "ru10\/abc\/xyz",
            "Replaces the first occurrence of the string,abc, with the stringxyzin the current and next nine lines when the string is found in column\n    positions 5 through 9.",
            "r10\/abc\/xyz\/5-9",
            "Replaces all characters on the current attribute withnull, leaving the current attribute intact, but empty.",
            "ru\/^\/\/",
            "Replaces every occurrence of two spaces with one space,\nfrom the current line through the end of the item.",
            "ru999\/ \/ \/"
        ]
    },
    {
        "name":"s command (Editor processor)",
        "Syntax":[
            "Syntax",
            " s\n"
        ],
        "description":[
            "The s command toggles the display of Editor line numbers in normal   Editor mode, and suppresses the display of object code when the assembly formatter is   on."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "s014 print customer-ID.ssuppress on.l3print customer.name\n print customer.address\n print customer.city.ssuppress off.l2018 print customer.state\n 019 print customer.zip"
        ]
    },
    {
        "name":"s? command",
        "Syntax":[
            "Syntax",
            " s?\n"
        ],
        "description":[
            "The s? command displays the size of the current item in   bytes."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "s?Items size is 3187 bytes"
        ]
    },
    {
        "name":"sl command",
        "Syntax":[
            "Syntax",
            " sl {number.lines}\n"
        ],
        "description":[
            "The sl command sets the number of lines, rather than attributes, to display by the default p (prestored) command, p0 (zero)."
        ],
        "parameter":[
            "Parameter(s)",
            "number.linesNumber of lines to display."
        ],
        "example":[
            "Example(s)",
            "Sets the display to22lines.",
            "sl 22"
        ]
    },
    {
        "name":"t command (Editor processor)",
        "Syntax":[
            "Syntax",
            " t\n"
        ],
        "description":[
            "The t command positions the line pointer to the beginning (top) of the item, without filing the data. The f command also positions to the top of the item. Any lines inserted at the top of the program are placed before line 1 of the item."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "t014 print customer-ID.ttop\n ."
        ]
    },
    {
        "name":"tb command",
        "Syntax":[
            "Syntax",
            " tb tabstop{tabstop...}\n"
        ],
        "description":[
            "Description",
            "The tb command defines tab stops for use by subsequent uses of the TAB key.",
            "Pressing Tab embeds a specific number of spaces in the current item. Each argument is separated     by a space. The maximum is 16 tab stops.",
            "Pressing Tab (or Ctrl+I) while in Insert mode positions the cursor to the next defined tab stop.     The Tab key has no effect when positioned beyond the last tab stop. See tabs command in     Terminal Control Language."
        ],
        "parameter":[
            "Parameter(s)",
            "tabstopIndicates tab positions."
        ],
        "example":[
            "Example(s)",
            "tb 3 6 9 12 15 18 21"
        ]
    },
    {
        "name":"u command (Editor processor)",
        "Syntax":[
            "Syntax",
            " unumber.lines\n"
        ],
        "description":[
            "Description",
            "The u command moves the line pointer up a specific number of lines from the current position.",
            "The u command, followed by pressing Enter, re-displays the current line."
        ],
        "parameter":[
            "Parameter(s)",
            "number.linesNumber of lines to move up."
        ],
        "example":[
            "Example(s)",
            "014 print customer-ID.u3011 \u2018\u2018 begin main logic"
        ]
    },
    {
        "name":"x command (Editor processor)",
        "Syntax":[
            "Syntax",
            " x\n"
        ],
        "description":[
            "Description",
            "The x command cancels the effect of the last i     (insert), ap (append), de (delete), me     (merge), or r (replace) command. "
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"xf command",
        "Syntax":[
            "Syntax",
            " xf\n"
        ],
        "description":[
            "The xf command cancels the effect of all commands executed since the   last f command was issued."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"z command (Editor processor)",
        "Syntax":[
            "Syntax",
            " z {start.col-end.col}\n"
        ],
        "description":[
            "Description",
            "The z command defines zone display limits.",
            "The zone display is limited to only the data between the specified beginning and ending column ranges. If both parameters are omitted, the zone function is reset to display the entire line."
        ],
        "parameter":[
            "Parameter(s)",
            "start.colSpecifies the beginning column range.end.colSpecifies the ending column range."
        ],
        "example":[
            "Example(s)",
            "014 print customer-ID.z 3-8",
            "Establishes zone limits.",
            ".14",
            "Go to line14and display.",
            "014 int cu.z",
            "Cancels zone limits.",
            ".14",
            "Go to line14and display.",
            "014 print customer-ID"
        ]
    },
    {
        "name":"Output processor",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Output processor overview",
        "Syntax":[
            "Syntax",
            "op file.reference {item.list} {(options)}\n"
        ],
        "description":[
            "The Output processor formats and prints text from commands embedded in the textual data.",
            "Utilizing the Output processor capabilities, data can be extracted directly from files within the database, formatted, and incorporated in the text of a document without special manipulation.",
            "Other capabilities supported by the Output processor include:",
            "Proportional spacing (both horizontal and vertical)",
            "Text formatting",
            "Font control",
            "Automatic index and table of contents generation",
            "Boldfacing",
            "Underlining",
            "Headings and footings",
            "Automatic numbering of chapters, sections, figures, and tables",
            "The Output processor treats each attribute in an item as a paragraph. Commands can be embedded anywhere in the text or data.",
            "Several Output processor commands are used to select the characteristics of the printer. To use these commands effectively, you must be familiar with the features and limitations of the printer. Before using the Output processor, the printer must be described as an item in the devices file. The information in the item includes the sequences for underlining, boldfacing, tabbing, font selection, and other printer parameters. In addition, if the printer has multiple font capabilities, up to fifteen generic fonts can be described. The Output processor makes it easy to use the printer's font capabilities. Fonts may be changed anywhere in a line and as many times in a document as needed. To set up a form queue with fonts for a printer device, use the assignfq command.",
            "Throughout this document, the values for all commands that measure horizontal space are specified in tenths of an inch; therefore, when a command is described as inserting n spaces, it is actually inserting n\/10 inches. For example, if the command .lm 10 is entered to set the margin 10 spaces, the margin is being set to 10\/10 of an inch or 1 inch."
        ],
        "parameter":[
            "Parameter(s)",
            "optionsn{-m}To print a single page, enter the page number.To print a range of consecutive pages, enter the beginning\npage number, a dash or a period, and then the ending page number.cSuppresses chain and reads the commands.dDouble-spaces document.fSuppresses footings.hSuppresses headings.jSuppresses highlights.kSuppresses legends.nDoes not pause when output to terminal.pSends document to printer.sSuppresses boldface, underline, and fonts.tTriple-spaces document.xCounts word usage into WSYM file, formatword:page number:line\nnumber."
        ],
        "example":[
            "Example(s)",
            "op doc test.item (pfh"
        ]
    },
    {
        "name":"Output processor commands",
        "Syntax":[
            "Syntax",
            ".opcommand[|{.}opcommand)]\n"
        ],
        "description":[
            "An Output processor command is preceded by a space and a period (the period is part of the command) followed by the characters that make up the command. The Output processor command ends with a space, another Output processor command, or an attribute mark. The Output processor commands are not shown in the formatted and printed text.",
            "Most Output processor commands have a shortcut syntax. The shortcut is referenced with each command."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"* comment command",
        "Syntax":[
            "Syntax",
            "* {text}\n"
        ],
        "description":[
            "The * command treats the entire line following the asterisk as a remark. Any text following the command is ignored by the Output processor."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            ".*This is comment text."
        ]
    },
    {
        "name":".appendix command",
        "Syntax":[
            "Syntax",
            ".appendix title\n"
        ],
        "description":[
            "The .appendix command alphabetically assigns letters to appendix titles and creates entries in the table of contents."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "Prints two appendixes and a table\nof contents.",
            ".appendix ASCII codes\n.appendix Device Types\n.ptoc"
        ]
    },
    {
        "name":".begin page command (Output processor)",
        "Syntax":[
            "Syntax",
            ".begin page\n"
        ],
        "description":[
            "The .begin page command forces a page break. A page break terminates the current page, prints the optional footing, ejects a page, increments the page counter, and prints the optional heading. The text immediately following the .begin page command is printed on the next page."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "OutputsThis is page\ntwo.on the second page andThis is page three.on the third page.",
            "This is page one.\n.begin page\nThis is page two.\n.begin page\nThis is page three."
        ]
    },
    {
        "name":".block center command",
        "Syntax":[
            "Syntax",
            ".block center\n"
        ],
        "description":[
            "The .block center command centers all of the attributes following the command until an .xblock center command is issued."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "CausesHeading OneandHeading Twoto be centered, andSummary\nof pointsnot to be centered.",
            ".block center\nHeading One\nHeading Two\n.xblock center\nSummary of points."
        ]
    },
    {
        "name":".boldface command",
        "Syntax":[
            "Syntax",
            ".boldface\n"
        ],
        "description":[
            "The .boldface command prints text in boldface until an .xboldface command is encountered. If the printer does not have a boldface font, the text is double struck. On terminals boldfaced text is often displayed as reverse-video."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "Causes the wordprimaryto be output in the boldface mode.",
            ".boldface primary\n.xboldface"
        ]
    },
    {
        "name":".box command (Output processor)",
        "Syntax":[
            "Syntax",
            ".box {(pos1,pos2{(,pos3,pos4)})}\n"
        ],
        "description":[
            "Description",
            "The .box command draws a box at the column positions specified in the command and overwrites anything that occupies those positions.",
            "The starting column position is calculated using the current left margin as the starting point. If position 3 and position 4 are specified, a second box is drawn from column position 3 to column position 4 (position 3 must be greater than position 1, and position 4 must be greater than position 2).",
            "If no parameters are specified, the width of the box is determined by the left and right margins. The box is drawn on the margin and the text margins are reduced to fit inside the box.",
            "If position 1 is entered, but position 2 is not, the right-side of the box defaults to the right margin. If position 3 is entered but position 4 is not, the right-side of the box defaults to the right margin.",
            "All text is boxed until an .xbox command is encountered.",
            "If two .box commands are specified without an .xbox command in between, the second .box command terminates the first box and begins a new box."
        ],
        "parameter":[
            "Parameter(s)",
            "pos1Specifies the number of characters to offset from the left\nmargin.pos2Specifies the number of characters to offset from the right\nmargin.pos3Specifies the number of characters to offset from the left\nmargin.pos4Specifies the number of characters to offset from the right\nmargin."
        ],
        "example":[
            "Example(s)",
            "The wordsExample Aare enclosed in a box.",
            ".nofill\n.box 6,16\nNote: Example A is shown on page n1.\n.xbox",
            "The wordsExample AandExample\nBare enclosed in boxes.",
            ".box 6,16,43,53\nNote: Example A is shown on page n2 and Example B is shown on page n3.\n.xbox"
        ]
    },
    {
        "name":".break command (Output processor)",
        "Syntax":[
            "Syntax",
            ".break\n"
        ],
        "description":[
            "The .break command creates a new paragraph, is surrounded by at least one space, and can be placed anywhere in the text."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "This is text .break Example",
            "Produces this output:",
            "This is text\nExample"
        ]
    },
    {
        "name":".cap sentences command",
        "Syntax":[
            "Syntax",
            ".cap sentences\n"
        ],
        "description":[
            "Description",
            "The .cap sentences command capitalizes the first letter of each sentence or attribute.",
            "The beginning of a sentence is considered to be the first letter of each attribute. The first letter after a period, question mark, or exclamation point is also considered the beginning of a sentence, and is therefore capitalized. If the first word of a sentence is already capitalized, it remains capitalized.",
            "Sentences are capitalized until an .xcap sentences command is encountered."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            ".cap sentences\nthis is the first sentence. this is the second. and, this is the third.",
            "Produces this output:",
            "This is the first sentence. This is the second. And, this is the third."
        ]
    },
    {
        "name":".center command (Output processor)",
        "Syntax":[
            "Syntax",
            ".center\n"
        ],
        "description":[
            "The .center command centers the single line of text that follows the command, can be anywhere in the text, and does not need to be turned off. This command also causes a break (new paragraph) to occur."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "The following example:",
            "center Heading A",
            "produces this output:",
            "Heading A",
            "The following example:",
            "Phone number : .center 714 261-7425",
            "produces this output:",
            "Phone number : \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\n                    714 261-7425"
        ]
    },
    {
        "name":".chain command (Output processor)",
        "Syntax":[
            "Syntax",
            ".chain {dict} {file.reference} item-ID\n"
        ],
        "description":[
            "Description",
            "The .chain command passes control to a specified item-ID in the same (current) file or in a different (file reference) file.",
            "This command proves particularly useful for generating form letters. It is possible to insert the name and address of each recipient of the letter from a separate file.",
            "A sselect statement is used to extract the relevant data from the file and save it in a list. A series of readnext statements inserts the data into the text of the letter. At the end of the letter, a .chain command is used to restart the next letter. When the list is exhausted, the Output processor stops."
        ],
        "parameter":[
            "Parameter(s)",
            "dictSpecifies the dictionary where the file change resides. This\nparameter is optional. If not specified, the data section of the file\nis assumed.file.referenceSpecifies the file where the item change resides. This parameter\nis optional. If not specified, the item is read from the same file\nas the item being processed.item-IDSpecifies the item to transfer control to."
        ],
        "example":[
            "Example(s)",
            "The item letter is reprocessed\nuntil all stack data is exhausted.",
            "u document letter\nDear .readnext\nYou may have won one million ($1,000,000) dollars.\n\u00a0\nSincerely,\nJohn Doe\n.chain letter"
        ]
    },
    {
        "name":".chapter command (Output processor)",
        "Syntax":[
            "Syntax",
            ".chapter {text}\n"
        ],
        "description":[
            "The .chapter command starts a new chapter.",
            "Chapters start on new pages and the chapter counter is incremented. The literal, Chapter, followed by the optional text, is printed centered between the current margins.",
            "The chapter, page number, and text are accumulated for the table of contents."
        ],
        "parameter":[
            "Parameter(s)",
            "textWords or phrases following the chapter to be printed."
        ],
        "example":[
            "Example(s)",
            ".chapter\nUpdate processor\n.chapter\nOutput processor\n.chapter",
            "Produces this output:",
            "Chapter 1\nUpdate processor\n(page eject)\nChapter 2\nOutput processor\n(page eject)\nChapter 3"
        ]
    },
    {
        "name":".char command",
        "Syntax":[
            "Syntax",
            ".char {delimiter} character{s}{delimiter}\n"
        ],
        "description":[
            "Description",
            "The .char command sends a raw string of characters to the printer or terminal without translation.",
            "Since neither a carriage return nor a line feed (CR\/LF) is printed, the .char\u00a0command can be included in a sentence as a separate attribute without breaking the paragraph.",
            "To specify nonprintable characters, enter a value mark (CTRL+V), followed by the decimal representation.",
            "For example, to specify the control character sequence Esc, P, where the decimal representation of Esc is 27, the sequence is CTRL+V, 27 P."
        ],
        "parameter":[
            "Parameter(s)",
            "delimiterSpecifies the character used to indicate the boundaries of\nthe string of characters or character specified. The space character\nis the default.Note:A forced delimiter occurs at the end of the\nattribute.characterSpecifies a string of characters or character marked off by\nthe delimiter."
        ],
        "example":[
            "Example(s)",
            ".char \/]27(s1010p0s3T\/"
        ]
    },
    {
        "name":".col command",
        "Syntax":[
            "Syntax",
            ".col number text {.col number+1 text} {...}\n"
        ],
        "description":[
            "The .col command uses the column headings and spacing specified with the last .columns set or .variable columns command to determine the position of the specified column number. If the column number is less than the previous column number, the columns are printed and a new paragraph begins. A maximum of seven columns are available."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "01 .columns set Name,10,5;Phone,10,1\n02 .col1 Fred .col2 555-1212\n03 .col1 Bart .col2 555-2121",
            "Produces this output:",
            "Name Phone\nFred 555-1212\nBart 555-2121"
        ]
    },
    {
        "name":".columns set command",
        "Syntax":[
            "Syntax",
            ".columns {set} heading1,width1,space1\n;heading2,width2,space2{;...}\n;heading7,width7,space7\n"
        ],
        "description":[
            "Description",
            "The .columns set command specifies the column heading, column width, and column spacing.",
            "The columns are turned off by using the Output processor .xcolumns command. The headings can contain Output processor commands and are output at the start of the columns and at the top of each subsequent page until columns are turned off.",
            "The .col command uses the column headings and spacing specified with the last .columns set or .variable columns command to determine the position of the specified column number. If the column number is less than the previous column number, the columns are printed and a new paragraph begins. A maximum of seven columns are available."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            ".columns set heading1,10,5;heading2,10,1\n.col1 one .col2 two"
        ]
    },
    {
        "name":".crt command (Output processor)",
        "Syntax":[
            "Syntax",
            ".crt\n"
        ],
        "description":[
            "The .crt command directs the output from the Output processor to the terminal, overriding the p option specified at TCL."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            ".crt This message prints on the terminal.",
            "Even if the text was output using thepoption, the text following the.crtcommand is\noutput to the screen."
        ]
    },
    {
        "name":".cursor command",
        "Syntax":[
            "Syntax",
            ".cursor {column}{,row}\n"
        ],
        "description":[
            "Description",
            "The .cursor command outputs the text on the column and row specified.",
            "If the column or row is not specified with subsequent .cursor commands, the last specified value is used.",
            "The Output processor does not take into account any line or column position changes made by the .cursor command. This may affect line wrapping and end of page processing."
        ],
        "parameter":[
            "Parameter(s)",
            "columnSpecifies row position.rowSpecifies column position."
        ],
        "example":[
            "Example(s)",
            "Prints at column 30 and row 15.",
            ".cursor 30,15"
        ]
    },
    {
        "name":".date command",
        "Syntax":[
            "Syntax",
            ".date\n"
        ],
        "description":[
            "The .date command outputs the current system date in the form month day, year."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "Outputs the current date, such\nas January 1, 2003.",
            ".date"
        ]
    },
    {
        "name":".default command",
        "Syntax":[
            "Syntax",
            ".default\n"
        ],
        "description":[
            "The .default command sends the device a control code to select the default font.",
            "Most laser printers have a reset or default code. This code is supplied to the Output processor by the cursor control block (CCB) using the assignfq spooler command."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":".em command",
        "Syntax":[
            "Syntax",
            ".em number.spaces\n"
        ],
        "description":[
            "The .em command inserts spaces in output text and is dependent on the printer type."
        ],
        "parameter":[
            "Parameter(s)",
            "number.spacesSpecifies the number of spaces to be inserted. A spacial insertion\nparameter, which has set possible values (for example, 0,1, 2 and\nso on). This is used for exact spatial alignment on laser printers."
        ],
        "example":[

        ]
    },
    {
        "name":".end case command (Output processor)",
        "Syntax":[
            "Syntax",
            ".end case\n"
        ],
        "description":[
            "The .end case command disables any previous .upper case or .lower case commands."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            ".upper case\nthis is the first sentence.\nthis is the second.\n.end case"
        ]
    },
    {
        "name":".figure command",
        "Syntax":[
            "Syntax",
            ".figure text\n"
        ],
        "description":[
            "Description",
            "The .figure command numbers the figures sequentially using the current chapter number followed by a dash and the sequence number within the chapter.",
            "The descriptive text and the sequential number are recorded in the table of contents under the figure headings.",
            "If chapter numbers are suppressed, figures are numbered sequentially with a single number, that is, figure 1, figure 2, and so on."
        ],
        "parameter":[
            "Parameter(s)",
            "textDescriptive word or phrase to display next to the sequential\nnumber of the figure."
        ],
        "example":[

        ]
    },
    {
        "name":".font command",
        "Syntax":[
            "Syntax",
            ".font number\n.font orientation, symbolset, spacing, pointsize, pitch, style, strokeweight, typeface\n"
        ],
        "description":[
            "The .font command selects the font defined in the device item or specifies fonts that are not predefined in the printer item. If the device does not support the fonts or the device item has not been configured, this command has no affect."
        ],
        "parameter":[
            "Parameter(s)",
            "numberSelects the corresponding font number defined in the device\nitem.orientationCan be either portrait or landscape.symbolsetCan be either ASCII, legal, roman8, or linedraw.spacingCan be either proportional or fixed.pointsizeSpecifies the point size.pitchSpecifies the pitch.styleCan be either upright, italic, or reverse.strokeweightCan be light, lightmedium, mediumlight, medium, mediumbold,\nboldmedium, or bold.typefaceCan be any of the valid types defined in the corresponding\nitem in the devices file for the printer being used."
        ],
        "example":[
            "Example(s)",
            ".font portrait,legal,fixed,10,12,upright,medium,courier"
        ]
    },
    {
        "name":".footing command (Output processor)",
        "Syntax":[
            "Syntax",
            ".footing {{text} {\u2019options\u2019}...}\n"
        ],
        "description":[
            "The .footing command designates a text string composed of literals and special options to output at the bottom of each page. If the line following the .footing command is null, the footing is suppressed."
        ],
        "parameter":[
            "Parameter(s)",
            "textText string to display in footing.options''Outputs a single quotation mark.'attr.name'Inserts the value of the attribute name. Processes any conversion\ncodes, but not correlatives in the attribute-defining item.bInserts the attribute name causing the break if theboption has been specified with theroll-oncommand.cCenters the output line.dRetrieves the current date (dd mmm yyyy format).f{n}Inserts the file name in a field ofnspaces.jRight-aligns the rest of the line.lIssues a CR\/LF.nPrevents the pause at the end of each page (such as thenopagemodifier).pRetrieves the current page number, right-justified in a field\nof four spaces.p{n}Retrieves the page number, right-justified in a field ofnspaces. (Defaultn=4).rRetrieves the Roman numeral page number.sToggles on italics mode.tRetrieves the current time and date (hh:mm:ss dd mmm yyyy\nformat).uToggles on underline mode.vToggles on boldface mode.xcUsed withcto center a segment. Thexcdelimits the end of the segment.xsToggles off italics mode.xuToggles off underline mode.xvToggles off boldface mode."
        ],
        "example":[
            "Example(s)",
            ".footing \"\u2019lc\u2019page \u2019pn\u2019 printed at \u2019tlc\u2019\""
        ]
    },
    {
        "name":".gohanging tab command",
        "Syntax":[
            "Syntax",
            ".gohanging tab\n"
        ],
        "description":[
            "The .gohanging tab command indents the text to the column set by the previous .ht command."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "Alpha .hangingtab Designation for the first site to receive a new release\nof the software.\nBeta .gohangingtab Designation for the multiple test sites to receive a test copy\nof a new release.",
            "Produces this output:",
            "Alpha Designation for the first site to receive a new release of the software.\nBeta Designation for the multiple test sites to receive a test copy of a new release"
        ]
    },
    {
        "name":".hanging tab command",
        "Syntax":[
            "Syntax",
            ".hanging tab {number}\n"
        ],
        "description":[
            "Description",
            "The .hanging tab command sets a tab stop at the column in the text where it is entered.",
            "To reset the margin, place a .hanging tab at the appropriate column position. A number parameter may be entered with the .hanging tab command to set the hanging tab."
        ],
        "parameter":[
            "Parameter(s)",
            "numberSpecifies the column number that the hanging tab is set to.\nThis number can contain up to two decimal places. If there areXnumber of spaces specified prior to the.hanging\ntabcommand, text is printed thatXnumber\nof spaces plus one from the left margin. Any text that wraps is also\nprinted thatXnumber of spaces plus one from\nthe left margin."
        ],
        "example":[
            "Example(s)",
            "The following example:",
            ".hanging tab 10\nNow .gohangingtab is the time for all good men to come to the aid of their country.",
            "produces this output:",
            "Now \u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0is the time for all good men to come to the aid of their country.",
            "The following example:",
            ".hanging tab 10\n.gohangingtab Now is the time for all good men to come to the aid of their country.",
            "produces this output:",
            "Now is the time for all good men to come to the aid of their country."
        ]
    },
    {
        "name":".heading command (Output processor)",
        "Syntax":[
            "Syntax",
            ".heading {{text} {\u2019options\u2019}...}\n"
        ],
        "description":[
            "The .heading command designates a text string composed of literals and special options to output at the top of each page. If the line following the .heading command is null, the heading is suppressed."
        ],
        "parameter":[
            "Parameter(s)",
            "textText string to display in heading.options''Outputs a single quotation mark.'attr.name'Inserts the value of the attribute name. Processes any conversion\ncodes, but not correlatives in the attribute-defining item.bInserts the attribute name causing the break if theboption has been specified with theroll-oncommand.cCenters the output line.dRetrieves the current date (dd mmm yyyy format).f{n}Inserts the file name in a field ofnspaces.jRight-aligns the rest of the line.lIssues a CR\/LF.nPrevents the pause at the end of each page (such as thenopagemodifier).pRetrieves the current page number, right-justified in a field\nof four spaces.p{n}Retrieves the page number, right-justified in a field ofnspaces. (Defaultn=4).rRetrieves the Roman numeral page number.sToggles on italics mode.tRetrieves the current time and date (hh:mm:ss dd mmm yyyy\nformat).uToggles on underline mode.vToggles on boldface mode.xcUsed withcto center a segment. Thexcdelimits the end of the segment.xsToggles off italics mode.xuToggles off underline mode.xvToggles off boldface mode."
        ],
        "example":[

        ]
    },
    {
        "name":".hilite command (Output processor)",
        "Syntax":[
            "Syntax",
            ".hilite character\n"
        ],
        "description":[
            "The .hilite command prints a single character on the right margin and is in effect until an .xhilite command is issued."
        ],
        "parameter":[
            "Parameter(s)",
            "characterSpecifies the character to print. Any character, other than\na period, can be specified as the highlight character."
        ],
        "example":[
            "Example(s)",
            "Produces an*character on the right margin.",
            ".hilite *"
        ]
    },
    {
        "name":".indent command (Output processor)",
        "Syntax":[
            "Syntax",
            ".indent {-}number.spaces\n"
        ],
        "description":[
            "The .indent command indents the text following the command a specified number spaces from the left margin."
        ],
        "parameter":[
            "Parameter(s)",
            "number.spacesSpecifies the number of spaces to indent. If not specified,\nthe default is 1. If the command is in the middle of an attribute,\nthe preceding text is output and the next word begins a new paragraph\nthat is indented the specified number of spaces.If negative, the\nline begins to the left of the previously set left margin."
        ],
        "example":[
            "Example(s)",
            ".indent 10\nThis line indents 10 characters from the left margin.\nThis line will print on the left margin.",
            "Produces this output:",
            "This line begins 10 characters from the left margin.\nThis line will print on the left margin."
        ]
    },
    {
        "name":".indent margin command (Output processor)",
        "Syntax":[
            "Syntax",
            ".indent margin {-}number.spaces\n"
        ],
        "description":[
            "The .indent margin command adjusts the left margin a specified number of spaces. If the command is in the middle of an attribute, the preceding text is output and the next word begins a new paragraph that is indented number of spaces.",
            "The command stays in effect until the margin is changed."
        ],
        "parameter":[
            "Parameter(s)",
            "number.spacesSpecifies the number of spaces incremented from the left margin.\nIf negative, the left margin moves farther to the left. If not specified,\nthe default is 1."
        ],
        "example":[
            "Example(s)",
            ".nofill\n.indent 10\ntest\n.indent -5\nline five"
        ]
    },
    {
        "name":".indent rmargin command",
        "Syntax":[
            "Syntax",
            ".indent rmargin {-}number.spaces\n"
        ],
        "description":[
            "The .indent rmargin command adjusts the right margin a specified number of spaces. If the command is in the middle of an attribute, the preceding text is output and the next word begins a new paragraph with a right margin of the specified number of spaces."
        ],
        "parameter":[
            "Parameter(s)",
            "number.spacesSpecifies the number of spaces incremented from the right\nmargin. If positive, the right margin moves to the left. If negative,\nthe right margin moves farther to the right."
        ],
        "example":[

        ]
    },
    {
        "name":".index command (Output processor)",
        "Syntax":[
            "Syntax",
            ".index \u2019phrase\u2019\n.index: \u2019main.heading\u2019 \u2019phrase\u2019 {\u2019phrase\u2019...}\n"
        ],
        "description":[
            "The .index command inserts a phrase and the current page number into the index. The .index command may be embedded in text, in which case the end of the index text must be indicated by the .xindex command."
        ],
        "parameter":[
            "Parameter(s)",
            "phraseSubheading or phrase inserted into the index. A subheading\nis specified by appending a colon to the.indexcommand.main.headingPhrase following the colon is inserted as the main heading\ninto the index. All subsequent phrases are inserted as subheadings\ninto the index. If the main heading or phrase consists of multiple\nwords, the words must be enclosed in quotation marks.",
            "Note:The index can be saved in an item with the.save indexcommand, and can be printed with the.print indexcommand."
        ],
        "example":[
            "Example(s)",
            ".index \u2019Schedule\u2019\n.xindex",
            "Produces the index entry:",
            "Schedule . . . 13",
            ".index: \u2019Schedule\u2019 \u2019production\u2019\n.xindex",
            "Produces the index entry:",
            "Schedule\nproduction . . . 13"
        ]
    },
    {
        "name":".index heading command",
        "Syntax":[
            "Syntax",
            ".index heading text\n"
        ],
        "description":[
            "The .index heading command substitutes the heading text as the header for index pages. The heading text is output on the top of each index page."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            ".index heading Topics covered\n.index \u2019Topic 1\u2019 \u2019Topic 2\u2019\n.index \u2019Topic 3\u2019\n.index \u2019Topic 4\u2019\n.xindex\n.print index",
            "Produces this output:",
            "Topics covered\nTopic 1,1\nTopic 2,1\nTopic 3,1\nTopic 4,1"
        ]
    },
    {
        "name":".input command (Output processor)",
        "Syntax":[
            "Syntax",
            ".input\n"
        ],
        "description":[
            "The .input command accepts and processes text input from the terminal."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "The Output processor pauses,\nprompts the user, and resumes processing inserting the data in lieu\nof the.inputstatement.",
            "Dear .input,\nPlease find attached..."
        ]
    },
    {
        "name":".italics command",
        "Syntax":[
            "Syntax",
            ".italics\n"
        ],
        "description":[
            "The .italics command causes the text following the command to be output in italics. If the printer does not support italics, this command has no affect.",
            "The italics mode is terminated with an .x or an .xitalics command."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "The wordexampleis printed in italics.",
            "In this example, the word .it example .x is italicized."
        ]
    },
    {
        "name":".justify command (Output processor)",
        "Syntax":[
            "Syntax",
            ".justify\n"
        ],
        "description":[
            "The .justify command right-aligns each line of text with the right margin by adding spaces in each line to pad to the end of the line. This command stays in affect until an .xjustify command is executed."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":".left margin command (Output processor)",
        "Syntax":[
            "Syntax",
            ".left margin margin.setting\n"
        ],
        "description":[
            "The .left margin command sets the left margin at a specific number of spaces from the left edge of the paper and remains in affect until an .im, .left margin, or .standard command is issued."
        ],
        "parameter":[
            "Parameter(s)",
            "margin.settingSpecifies the margin from the left edge of the paper. If not\nspecified, the default is 5."
        ],
        "example":[
            "Example(s)",
            ".left margin 10"
        ]
    },
    {
        "name":".line length command (Output processor)",
        "Syntax":[
            "Syntax",
            ".line length number.characters\n"
        ],
        "description":[
            "The .line length command sets the line length a specified number of characters from the left margin and remains in affect until changed by another .line length command."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":".line printer command",
        "Syntax":[
            "Syntax",
            ".line printer\n"
        ],
        "description":[
            "The .line printer command sends all subsequent output to the currently assigned printer."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":".lower case command (Output processor)",
        "Syntax":[
            "Syntax",
            ".lower case\n"
        ],
        "description":[
            "The .lower case command outputs text in lowercase characters. The .end case command terminates this command."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            ".lower case\nTHIS TEXT WILL BE PRINTED IN LOWERCASE LETTERS.",
            "Produces:",
            "this text will be printed in lowercase letters."
        ]
    },
    {
        "name":".lpi command",
        "Syntax":[
            "Syntax",
            ".lpi number.lines\n"
        ],
        "description":[
            "The .lpi command sets the number of lines per inch for output. If the printer does not support the specified number of lines per inch, this command has no affect."
        ],
        "parameter":[
            "Parameter(s)",
            "number.linesSpecifies the number of lines per inch. The default is 6."
        ],
        "example":[

        ]
    },
    {
        "name":".macro file command",
        "Syntax":[
            "Syntax",
            ".macro file file.reference\n"
        ],
        "description":[
            "The .macro file command defines the file name that contains the Output processor macro items. Macros may contain multiple Output processor commands and text.",
            "A macro is an item in a given file reference with an item-ID of the format .macroid. The item-ID of the macro must begin with a period.",
            "Items from the macro file are included in the Output processor documents by entering the item-ID of the macro in the document. Any string preceded by a period that is not a standard Output processor command is treated as a macro.",
            "A macro can reside in the file being edited, or another file. If a macro file name has not been declared, the Output processor looks for the macro in the current file. After the macro has been processed, control returns to the original document item."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "The item to process resides in\nthe templates file, with an item-ID of.fax.",
            "u document letter\n01 This letter is to inform you of the following information.\n02 .macro file templates\n03 .fax\n04\n05 Sincerely yours,\n06\n07 Your Name Here",
            "The item to process resides in the dm account in the templates\nfile with an item-ID of.fax.",
            "u document letter\n01 This letter is to inform you of the following information.\n02 .macro file dm,templates,\n03 .fax\n04\n05 Sincerely yours,\n06\n07 Your Name Here",
            "The item to process resides on the current account and\nsame file (document) with an item-ID of.fax.",
            "u document letter\n01 This letter is to inform you of the following information.\n02\n03 .fax\n04\n05 Sincerely yours,\n06\n07 Your Name Here"
        ]
    },
    {
        "name":".nofill command (Output processor)",
        "Syntax":[
            "Syntax",
            ".nofill\n"
        ],
        "description":[
            "The .nofill command resets both the justify and fill modes. When using this command, there is no removal of extra spaces, end-of-line marks are not stripped from input, output lines are not filled, and the right margins are not justified. This command creates a break (new paragraph)."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":".over char command",
        "Syntax":[
            "Syntax",
            ".over char character\n"
        ],
        "description":[
            "The .over char command treats all characters that follow it as text."
        ],
        "parameter":[
            "Parameter(s)",
            "characterOverride character allows the Output processor commands to\nbe printed as text. The override character can be used with spaces\nor hyphens to prevent wordwrap. The default override character is\nan underscore.Note:The override character cannot be displayed."
        ],
        "example":[

        ]
    },
    {
        "name":".page length command",
        "Syntax":[
            "Syntax",
            ".page length number.lines\n"
        ],
        "description":[
            "The .page length command sets the page length to the number of lines specified. The physical page length, in terms of inches, can be calculated by the .vmi height of each of the printed lines multiplied by 1\/48 of an inch. The length (in inches) of each page can vary as the vertical motion index is changed."
        ],
        "parameter":[
            "Parameter(s)",
            "number.linesSpecifies the number of lines the page length will be set."
        ],
        "example":[

        ]
    },
    {
        "name":".page number command (Output processor)",
        "Syntax":[
            "Syntax",
            ".page number page.number\n"
        ],
        "description":[
            "The .page number command sets the default page number to a specified integer number."
        ],
        "parameter":[
            "Parameter(s)",
            "page.numberSpecifies the page number."
        ],
        "example":[
            "Example(s)",
            "After printing text on page 5,\nthe page number changes to 10, and then prints more text.",
            ".ft \"Page \u2019p5\u2019\"\n{text...\n.page number 10\n{more text..."
        ]
    },
    {
        "name":".paging command",
        "Syntax":[
            "Syntax",
            ".paging\n"
        ],
        "description":[
            "The .paging command pauses at the end of each page when the output is sent to the terminal. At the end of a page of terminal output, any key can be pressed to advance to the next page.",
            "The .xpaging command turns off the paging option, causing the output to scroll."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":".paragraph command (Output processor)",
        "Syntax":[
            "Syntax",
            ".paragraph {-} number.spaces\n"
        ],
        "description":[
            "Description",
            "The .paragraph command specifies the number of spaces to indent the first line of a paragraph.",
            "To utilize this command, begin each paragraph with exactly one space. This affects an output with an indent of a specified number of spaces, and a blank line between each paragraph.",
            "Only the first line of the paragraph is indented. Subsequent lines are output at the left margin.",
            "The .xparagraph command terminates the paragraph mode."
        ],
        "parameter":[
            "Parameter(s)",
            "number.spacesSpecifies the number of spaces to indent. When the number\nof spaces to indent is negative, the first line of the paragraph is\noutput that many spaces relative to the left of the left margin."
        ],
        "example":[

        ]
    },
    {
        "name":".preface command",
        "Syntax":"",
        "description":[

        ],
        "parameter":[
            "Parameter(s)",
            "textPreface heading. The heading text is centered at the top of\nthe next page and begins a separate page numbering scheme."
        ],
        "example":[

        ]
    },
    {
        "name":".prefix page command",
        "Syntax":[
            "Syntax",
            ".prefix page\n"
        ],
        "description":[
            "Description",
            "The .prefix page command turns on the prefix page numbering mode, which starts numbering each chapter at page 1.",
            "The current chapter number is used as a prefix for the page number. For example, the fourth page of the third chapter prints as 3-4.",
            "The command .xprefix page turns off .prefix page."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            ".prefix page\n.chapter 1\n.footing \"page \u2019p\u2019\"\nThis is page one of chapter 1.\n.bp\n2nd page of chapter 1.\n.chapter 2\n1st page of chapter 2.\n.bp\n2nd page chapter 2."
        ]
    },
    {
        "name":".print index command (Output processor)",
        "Syntax":[
            "Syntax",
            ".print index\n"
        ],
        "description":[
            "The .print index command prints the index, changes the tab settings, and begins a new page. The index is sorted in alphabetical order and printed in two columns per page. After the index is printed, it is cleared. To save the index in an item for editing, use the .save index command."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":".print ptoc command",
        "Syntax":[
            "Syntax",
            ".print ptoc\n"
        ],
        "description":[
            "The .print ptoc command prints a partial table of contents. This includes topics made by these commands encountered since the last .print ptoc command:",
            "To print the complete table of contents, including preface topics, use the .ptoc command."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":".print toc",
        "Syntax":[
            "Syntax",
            ".print toc\n"
        ],
        "description":[
            "The .print toc command prints the complete table of contents. ",
            "This includes topics made with these commands:"
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":".prompt command",
        "Syntax":[
            "Syntax",
            ".prompt\n"
        ],
        "description":[
            "The .prompt command outputs the text on the following line to the terminal. This command is often used with the .input command to prompt for user input."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            ".prompt\nEnter the name:\nDear .input,\nEnclosed is the additional product information that you requested.\n\u00a0\nSincerely,\nBrian"
        ]
    },
    {
        "name":".read command (Output processor)",
        "Syntax":[
            "Syntax",
            ".read file.reference item-ID\n"
        ],
        "description":[
            "The .read command reads an (Output processor) item and outputs the item as part of the current text. At the end of the item, the Output processor continues with the next line following the .read command."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            ".read chapter1\n.read chapter2"
        ]
    },
    {
        "name":".readnext command (Output processor)",
        "Syntax":[
            "Syntax",
            ".readnext\n"
        ],
        "description":[
            "Description",
            "The .readnext command reads data, one value at a time from an active list. It has an affect only if prior to entering the Output processor a select, sselect, qselect, or get-list statement has been executed.",
            "Each .readnext command in the Output processor extracts the next value from the active list and places it in the text stream.",
            "If there is no preselected list, or when the list is exhausted, the .readnext command terminates the Output processor and returns to the calling process."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "Dear .readnext\nYou are the only one for me.\nLove,\nPat\n.chain love.letter"
        ]
    },
    {
        "name":".readnext null command",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":".reset command",
        "Syntax":[
            "Syntax",
            ".reset\n"
        ],
        "description":[
            "The .reset command resets the printer to its initial state. If the printer does not support reset, this command has no affect."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":".right margin command",
        "Syntax":[
            "Syntax",
            ".right margin number.spaces\n"
        ],
        "description":[
            "The .right margin command sets the right margin at a specific number of spaces from the right edge of the paper and remains in affect until an .indent rmargin, .right margin or .standard command is issued."
        ],
        "parameter":[
            "Parameter(s)",
            "number.spacesSpecifies the margin from the right edge of the paper. If\nnot specified, the default is 0."
        ],
        "example":[

        ]
    },
    {
        "name":".save contents command",
        "Syntax":[
            "Syntax",
            ".save contents item-ID\n"
        ],
        "description":[
            "The .save contents command saves the table of contents to a defined item-ID. The item is saved in the same file as the current document. After saving, the item can be formatted and edited to create a customized table of contents."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            ".chapter\n.save contents"
        ]
    },
    {
        "name":".save index command (Output processor)",
        "Syntax":[
            "Syntax",
            ".save index item-ID\n"
        ],
        "description":[
            "Description",
            "The .save index command saves the index to a defined item-ID in the same file where the Output processor document resides.",
            "The .save index command is placed in the text item itself and must precede the .index commands. Only the indexed data that has been preceded by the .save index command is saved in the specified file.",
            "The saved index is formatted in one column. The item can then be formatted and edited to create a custom index format."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            ".save index indexbody\n.index: \u2019topic one\u2019 \u2019subtopic one\u2019 \u2019subtopic two\u2019 .xix\n.bp\n.index \u2019topic two\u2019 .xix\n.pi",
            "Results in index body:",
            "topic one\nsubtopic one, 1\nsubtopic two, 1\ntopic two, 1"
        ]
    },
    {
        "name":".section command (Output processor)",
        "Syntax":[
            "Syntax",
            "section {sec.number} title.text\n"
        ],
        "description":[
            "The .section command produces automatic section numbering and formatting."
        ],
        "parameter":[
            "Parameter(s)",
            "sec.numberIndicates the section number. If not specified, the default\nis 1. Section numbers are sequentially incremented within levels.title.textTitle of the section.",
            "When a section number is encountered, the section number\nand title text are output. The section number and title text are recorded\nin the table of contents.",
            "Note:Section numbering can be suppressed\nusing the.set sectioncommand."
        ],
        "example":[

        ]
    },
    {
        "name":".set chapter command",
        "Syntax":[
            "Syntax",
            ".set chapter {options}\n"
        ],
        "description":[
            "The .set chapter sets the options for chapter headings. This command must precede any .chapter commands."
        ],
        "parameter":[
            "Parameter(s)",
            "optionsbBoldface.iItalics.uUnderline.sSuppresses section numbers. Thesoption\nalso suppresses the wordChapterfollowed by the\nchapter number from being output above the chapter heading. The chapters\nare still numbered internally, so the.prefix pagecommand can still be used.rRoman numeral chapter numbers.",
            "Note:Options should be entered one after the other, and\nnot separated with commas or spaces. Any combination of options may\nbe used. However, some printers do not accept a combination of boldface,\nitalics, and underline."
        ],
        "example":[

        ]
    },
    {
        "name":".set section",
        "Syntax":[
            "Syntax",
            ".set section {options}\n"
        ],
        "description":[
            "The .set section command defines the options for the section headings. This command must precede any .section commands."
        ],
        "parameter":[
            "Parameter(s)",
            "nInteger number of lines to skip.bBoldface.iItalics.uUnderline.sSuppresses section numbers.",
            "The options are entered one after the other, and are not\nseparated by commas or spaces. Any combination of options may be used.\nHowever, some printers do not accept a combination of boldface, italics,\nand underline."
        ],
        "example":[

        ]
    },
    {
        "name":".skip command (Output processor)",
        "Syntax":[
            "Syntax",
            ".skip {number.lines}\n"
        ],
        "description":[
            "The .skip command outputs a specific number of blank lines using the current line spacing. The line spacing can be set either by the  .spacing command or as part of the statement that invokes the Output processor. If the current line spacing is 2, a .skip command skips four lines.",
            "To skip lines based on a single-line spacing, instead of the current line spacing use the .space command."
        ],
        "parameter":[
            "Parameter(s)",
            "number.linesSpecifies the number of blank lines to output. If not specified,\nthe default is 1."
        ],
        "example":[
            "Example(s)",
            ".spacing 4\n{text\n.skip 2\n{more text"
        ]
    },
    {
        "name":".space command (Output processor)",
        "Syntax":[
            "Syntax",
            ".space number.lines\n"
        ],
        "description":[
            "The .space command outputs a specific number of blank lines using single-line spacing. This command is independent of the line spacing. To skip lines based on line spacing, use the .skip command."
        ],
        "parameter":[
            "Parameter(s)",
            "number.linesSpecifies the number of blank lines to output."
        ],
        "example":[
            "Example(s)",
            "Sentence one on line one.\n.space 3\nSentence two on line 5."
        ]
    },
    {
        "name":".spacing command (Output processor)",
        "Syntax":[
            "Syntax",
            ".spacing number.lines\n"
        ],
        "description":[
            "The .spacing command sets the line spacing to a specific number of lines. This command causes blank lines to be printed in between each line of text."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            ".spacing 3"
        ]
    },
    {
        "name":".standard command (Output processor)",
        "Syntax":[
            "Syntax",
            ".standard\n"
        ],
        "description":[
            "Description",
            "The .standard command defines the default parameter and mode settings for the Output processor text.",
            "The .standard command resets the Output processor to the default parameters and modes. These settings are:"
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":".subscript command",
        "Syntax":[
            "Syntax",
            ".subscript\n"
        ],
        "description":[
            "The .subscript command moves text down one-half line. Text remains in this position until an .xsubscript command is issued. If the printer cannot move in half lines, this command has no affect."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":".superscript command",
        "Syntax":[
            "Syntax",
            ".superscript\n"
        ],
        "description":[
            "The .superscript command moves text up one-half line. If the printer cannot move in half lines, this command has no affect. To move the text back down one-half line, use the .xsuperscript command."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":".tab fill command",
        "Syntax":[
            "Syntax",
            ".tab fill {\"}pattern{\"}\n"
        ],
        "description":[
            "The .tab fill command defines a pattern, which is repeated to fill the line from the current position to the next tab stop. Tab stops must be set prior to using this command (see .tab set command)."
        ],
        "parameter":[
            "Parameter(s)",
            "patternSpecifies the line pattern to fill the tab."
        ],
        "example":[
            "Example(s)",
            ".tab set 50\n.tab fill\"*\""
        ]
    },
    {
        "name":".tab left command",
        "Syntax":[
            "Syntax",
            ".tab left {\"}phrase{\"}\n"
        ],
        "description":[
            "The .tab left command moves the word or specified phrase following the command to the next tab position and left-aligns the last character of the word or phrase at the tab position."
        ],
        "parameter":[
            "Parameter(s)",
            "phraseSpecifies the word or phrase to move to the next tab position."
        ],
        "example":[
            "Example(s)",
            ".tab set 10,20\n.tab left text1 .tab left text2"
        ]
    },
    {
        "name":".tab right command",
        "Syntax":[
            "Syntax",
            ".tab right {\"}phrase{\"}\n"
        ],
        "description":[
            "Description",
            "The .tab right command moves the word or delimited phrase following the command to the next tab position and right-aligns the last character of the word or phrase at the tab position.",
            "To right tab a phrase, delimit the phrase with double quotation marks. To use single quotation marks in the phrase, enter two single quotation marks, which outputs a quotation mark in a right-tabbed phrase."
        ],
        "parameter":[
            "Parameter(s)",
            "phraseSpecifies the word or phrase to move to the next tab position."
        ],
        "example":[

        ]
    },
    {
        "name":".tab rightm command",
        "Syntax":[
            "Syntax",
            ".tab rightm {\"phrase\"}\n"
        ],
        "description":[
            "The .tab rightm command right-aligns the optional text with the right margin."
        ],
        "parameter":[
            "Parameter(s)",
            "phraseSpecifies the word or phrase to right-align."
        ],
        "example":[

        ]
    },
    {
        "name":".tab set command",
        "Syntax":[
            "Syntax",
            ".tab set tab.stop1,tab.stop2,tab.stop3,...\n"
        ],
        "description":[
            "The .tab set command defines the location of tab stops. To move the text to these tabs, use the .tl and the .tr commands. Do not use the TAB key."
        ],
        "parameter":[
            "Parameter(s)",
            "tab.stop1, tab.stop2, tab.stop3,...Tab stops must be greater than 0 and in increasing order.\nThe tab stop position is relative to the left margin, which includes\nany indent margin (.im) settings.A tab must be less than the current line length.There may be a maximum of 20 tab stops per command.A tab position can contain up to two decimal places. This\nis useful when using proportional pitch fonts and printers with horizontal\nmovement capabilities."
        ],
        "example":[
            "Example(s)",
            ".tab set 5,10,15"
        ]
    },
    {
        "name":".table command",
        "Syntax":[
            "Syntax",
            ".table text\n"
        ],
        "description":[
            "The .table command provides automatic table numbering with sequential numbers in the form of a chapter number."
        ],
        "parameter":[
            "Parameter(s)",
            "textDescriptive text and sequential table numbers display. Both\nthe text and table number are recorded in the table of contents under\nthe heading tables."
        ],
        "example":[

        ]
    },
    {
        "name":".tc heading command",
        "Syntax":[
            "Syntax",
            ".tc heading \"{{text} {\u2019options\u2019}...}\"\n"
        ],
        "description":[
            "The .tc heading command substitutes the heading text as the header for the table of contents pages."
        ],
        "parameter":[
            "Parameter(s)",
            "textText to display the header in\nthe table of contents.options''Outputs a single quotation mark.'attr.name'Inserts the value of attribute name. Processes any conversion\ncodes, but not correlatives in the ADI.bInserts the attribute name causing the break if theboption has been specified with theroll-oncommand.cCenters the output line.dRetrieves the current date (dd mmm yyyy format).f{n}Inserts the file name in a field ofnspaces.jRight-aligns the rest of the line.lIssues a CR\/LF.nPrevents the pause at the end of each page (such as thenopagemodifier).pRetrieves the current page number, right-aligned in a field\nof four spaces.p{n}Retrieves the page number, right-aligned in a field ofnspaces. (Defaultn=4).rRetrieves the Roman numeral page number.sToggles on italics mode.tRetrieves the current time and date (hh:mm:ss dd mmm yyyy\nformat).uToggles on underline mode.vToggles on boldface mode.xcUsed with thecoption to center a segment.\nThexcdelimits the end of the segment.xsToggles off italics mode.xuToggles off underline mode.xvToggles off boldface mode."
        ],
        "example":[
            "Example(s)",
            ".tc heading \"\u2019lc\u2019The D3 Encyclopedia\u2019l\u2019\""
        ]
    },
    {
        "name":".tcl box command",
        "Syntax":[
            "Syntax",
            ".tcl box tcl.command\n"
        ],
        "description":[
            "The .tcl box command executes the specified TCL command as part of the output and draws a box around it. This command is similar to the .box command, except that the box parameters cannot be specified. The width of the box is determined by the left and right margins."
        ],
        "parameter":[
            "Parameter(s)",
            "tcl.commandSpecifies the TCL command to be output with a box."
        ],
        "example":[
            "Example(s)",
            "Thewhocommand\nis used to show the current user-ID and account name.",
            ".tcl box who"
        ]
    },
    {
        "name":".tcl command",
        "Syntax":[
            "Syntax",
            ".tcl tcl.command\n"
        ],
        "description":[
            "The .tcl command executes the specified TCL command and inserts the output in the Output processor document. When the TCL command completes, control returns to the document and continues processing on the following line."
        ],
        "parameter":[
            "Parameter(s)",
            "tcl.commandSpecifies the TCL command to be output."
        ],
        "example":[
            "Example(s)",
            "Thelist-users commandTCL command is used to show the users currently logged on\nto the system.",
            ".tcl list-users"
        ]
    },
    {
        "name":".test page command (Output processor)",
        "Syntax":[
            "Syntax",
            ".test page {number.lines}\n"
        ],
        "description":[
            "The .test page command tests the number of lines left on the current page and determines whether the text is output on the current or next page."
        ],
        "parameter":[
            "Parameter(s)",
            "number.linesIf the number of lines specified is less than the count returned,\nthe text following is output on the current page. Otherwise, a page\nis ejected and the text is output on the new page. This prevents blocks\nof text from being split across a page boundary."
        ],
        "example":[
            "Example(s)",
            "Tests to determine if there are\nat least 10 print lines remaining on the current output page. If there\nare, the text following is printed on the same page, otherwise, a\nform feed is issued and the text prints on the next page.",
            ".test page 10"
        ]
    },
    {
        "name":".underline command",
        "Syntax":[
            "Syntax",
            ".underline\n"
        ],
        "description":[
            "The .underline command underlines the text following until an .xul or .x command is encountered. This command underlines spaces as well a words, and works on printers and terminals that support the underline function."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            ".underline D3 .xul\nD3"
        ]
    },
    {
        "name":".underline words Commands",
        "Syntax":[
            "Syntax",
            ".underline words\n"
        ],
        "description":[
            "The .underline words command underlines all words until an .xuw command is issued."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":".upper case command (Output processor)",
        "Syntax":[
            "Syntax",
            ".upper case\n"
        ],
        "description":[
            "The .upper case command outputs text in uppercase characters, unless specifically altered by the \\ lowercase special control function. The .end case command terminates the .upper case command."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            ".upper case\nTHIS IS THE FIRST SENTENCE.\nTHIS IS THE SECOND.\n.end case"
        ]
    },
    {
        "name":".variable columns command",
        "Syntax":[
            "Syntax",
            ".variable columns space,divisions,heading1,width1{;heading2,width2{;...; heading7,width7}}\n"
        ],
        "description":[
            "Description",
            "The .variable columns command specifies parameters for formatting in variable-width multiple columns.",
            "The .variable columns command is designed to be used when the actual line length is unknown. For example, if the document is to be printed with a variety of different printers or fonts, each with a different number of characters that are printed on a line, the .variable columns command guarantees that columnar material fills in the entire page width."
        ],
        "parameter":[
            "Parameter(s)",
            "spaceSpecifies the number of spaces between columns.divisionsSpecifies the number of sections into which the current line\nlength is to be divided. This parameter should be equal to or greater\nthan the sum of the width parameters or the command is ignored.headingSpecifies the headings for each column. The headings are output\nat the current location and at the top of each page.widthSpecifies the number of divisions to be included in the width\nof each column.",
            "These parameters above are used by subsequent.columns setcommands."
        ],
        "example":[

        ]
    },
    {
        "name":".vmi command",
        "Syntax":[
            "Syntax",
            ".vmi number.lines\n"
        ],
        "description":[
            "The .vmi command specifies the amount of vertical space each line uses. The .vmi spacing is allocated in 2.08-inch increments, and is essentially the flip side of the .lpi command. For example, if the .lpi is set to 6, the equivalent .vmi setting is 8."
        ],
        "parameter":[
            "Parameter(s)",
            "number.linesSpecifies the number of lines per inch. The default is 8.",
            "CAUTION:",
            "If the printer does not support vertical\nmotion, this command has no affect."
        ],
        "example":[
            "Example(s)",
            "Sets the.vmito approximately four lines per inch. This specifies an actual line\nspacing of .25-inch per line.",
            ".vmi 12"
        ]
    },
    {
        "name":".x command",
        "Syntax":[
            "Syntax",
            ".x\n"
        ],
        "description":[
            "The .x command turns off the boldface, underline word, underline, and italic modes."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":".xblock center command",
        "Syntax":[
            "Syntax",
            ".xblock center\n"
        ],
        "description":[
            "The .xblock center command turns the block center mode off."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":".xboldface command",
        "Syntax":[
            "Syntax",
            ".xboldface\n"
        ],
        "description":[
            "The .xboldface command turns the boldface mode off."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":".xbox command",
        "Syntax":[
            "Syntax",
            ".xbox\n"
        ],
        "description":[
            "The .xbox command turns off the .box command and draws the bottom line of the box."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":".xcap sentences command",
        "Syntax":[
            "Syntax",
            ".xcap sentences\n"
        ],
        "description":[
            "The .xcap sentences command turns off the cap sentences mode."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":".xcolumns command",
        "Syntax":[
            "Syntax",
            ".xcolumns\n"
        ],
        "description":[
            "The .xcolumns command turns off the column heading, width, and spacing set by the .columns or .columns set commands."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":".xhilite command",
        "Syntax":[
            "Syntax",
            ".xhilite\n"
        ],
        "description":[
            "The .xhilite command turns off the .hilite or .hi commands."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":".xindex command",
        "Syntax":[
            "Syntax",
            ".xindex\n"
        ],
        "description":[
            "The .xindex command designates the end of an index topic for a topic embedded in text."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":".xitalics command",
        "Syntax":[
            "Syntax",
            ".xitalics\n"
        ],
        "description":[
            "The .xitalics command turns off the italics mode."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":".xjustify command",
        "Syntax":[
            "Syntax",
            ".xjustify\n"
        ],
        "description":[
            "The .xjustify command turns off the justify mode."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":".xpaging command",
        "Syntax":[
            "Syntax",
            ".xpaging\n"
        ],
        "description":[
            "The .xpaging command turns off the paging option and causes the output to scroll down the terminal."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":".xparagraph",
        "Syntax":[
            "Syntax",
            ".xparagraph\n"
        ],
        "description":[
            "The .xparagraph command turns off the paragraph mode."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":".xpreface command",
        "Syntax":[
            "Syntax",
            ".xpreface\n"
        ],
        "description":[
            "The .xpreface command turns off the preface mode."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":".xprefix page command",
        "Syntax":[
            "Syntax",
            ".xprefix page\n"
        ],
        "description":[
            "The .xprefix page command turns off the prefix page mode."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":".xsubscript command",
        "Syntax":[
            "Syntax",
            ".xsubscript\n"
        ],
        "description":[
            "The .xsubscript command turns off the subscript mode."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":".xsuperscript command",
        "Syntax":[
            "Syntax",
            ".xsuperscript\n"
        ],
        "description":[
            "The .xsuperscript command turns the superscript mode off."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":".xul command",
        "Syntax":[
            "Syntax",
            ".xul\n"
        ],
        "description":[
            "The .xul command turns off the underline mode."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":".xuw command",
        "Syntax":[
            "Syntax",
            ".xuw\n"
        ],
        "description":[
            "The .xuw command turns off the .underline words command."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"PROC processor",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"PROC processor overview",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Linkages",
        "Syntax":[
            "Syntax",
            "({dict} file.name {item-ID})\n({dict} file.name {item-ID}) {label}\n[{dict} {file.name} {item-ID}]\n[{dict} file.name{}] {label}\n"
        ],
        "description":[
            "Linkages are the means by which Procs either pass control one way to another Proc, or call another Proc as an external subroutine. The type of linkage is determined by the character used in the syntax. For example:",
            "Brackets can be used as an internal subroutine call when both the file name and item-ID are omitted, and a statement label is included. The internal subroutine returns to the next line after the call when it encounters an x command."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "Transfers control toexample1in theprocsfile. Control\nreturns to the next line in the current Proc upon completion.",
            "[procs example1]",
            "Transfers control toexample2in theprocsfile, and begins execution at statement label 25.\nControl returns to the next line in the current Proc upon completion.",
            "[procs example2] 25",
            "Transfers control to statement label150in the current Proc and begins execution.",
            "[] 150",
            "Transfers control to theprocsfile,\nusing the item-ID indicated in the input buffer.",
            "(procs)"
        ]
    },
    {
        "name":"Logon procs and macros",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"pq dictionary code",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"PROC buffers",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"PROC processor commands",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"+ command",
        "Syntax":[
            "Syntax",
            "+number\n"
        ],
        "description":[
            "Description",
            "The + command adds the specified integer number to the current value of the currently active input buffer.",
            "This command has no effect when:",
            "the current value is not an integer.",
            "the input buffer pointer is at the end of the input buffer."
        ],
        "parameter":[
            "Parameter(s)",
            "numberSpecifies the integer number to add."
        ],
        "example":[

        ]
    },
    {
        "name":"- command",
        "Syntax":[
            "Syntax",
            "-number\n"
        ],
        "description":[
            "Description",
            "The - command subtracts the specified integer number from the current value of the currently active input buffer.",
            "This command has no effect when:",
            "the current value is not an integer.",
            "the input buffer pointer is at the end of the input buffer."
        ],
        "parameter":[
            "Parameter(s)",
            "numberSpecifies integer number."
        ],
        "example":[

        ]
    },
    {
        "name":"a command (PROC processor)",
        "Syntax":[
            "Syntax",
            "a{surround.char}{param.num, num.chars|(start.pos, num.chars)}\n"
        ],
        "description":[
            "Description",
            "The a command appends the string in the specified input buffer position to the currently active output buffer.",
            "The surround.char, param.num, and num.chars parameters are mutually independent and may be used in any combination to achieve the desired result.",
            "Multiple parameters may be moved to the currently active output buffer using a single a command if these parameters are separated by semicolons in the input buffer. The parameters are moved to the active output buffer with the semicolons deleted, separated by spaces, or, if a surround character is specified, enclosed in the specified character. After the a command is executed, the currently active input buffer pointer points to the very next character after the string that was moved."
        ],
        "parameter":[
            "Parameter(s)",
            "surround.charSpecifies the character to place before and after the string\nafter it is moved. Can be any nonnumeric character except the left\nparenthesis. If a backslash is specified, the parameter is moved without\nany surrounding spaces. This allows picking up item-IDs and values\nthat require double quotes for processing by the AQL processor.Note:Specifying a surround character has no affect when moving parameters\nto the secondary output buffer.param.numSpecifies the position in the currently active input buffer.\nNumbering starts at 1, which is the Proc command. Leading spaces are\ndeleted from the string. If no position is specified, then the current\nposition of the buffer pointer is used. If the position does not exist,\nthe command does nothing.num.charsSpecifies the number of characters to move.start.posSpecifies the starting position in the string to move to the\noutput buffer."
        ],
        "example":[
            "Example(s)",
            "Appends the contents of input\nbuffer one to the currently active output buffer, string will be surrounded\nby double quotation marks.",
            "a\"1",
            "Appends the second through 999th (or whenever it runs\nout of characters) to the currently active output buffer.",
            "a(2,999)",
            "Appends the contents of parameter 2 to the currently active\noutput buffer.",
            "s2\na"
        ]
    },
    {
        "name":"b command (PROC processor)",
        "Syntax":[
            "Syntax",
            "b\n"
        ],
        "description":[
            "The b command decrements (moves the pointer back) the currently active input buffer pointer by one \u2019word\u2019 position."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"c command (PROC processor)",
        "Syntax":[
            "Syntax",
            "c {text}\n"
        ],
        "description":[
            "Description",
            "The c command indicates a remark command. All text that follows on the same line is ignored by the PROC interpreter.",
            "Use this command to insert text that adds clarity and readability to a Proc. Keep in mind that since a Proc is an interpreted command, excessive comments slow down execution."
        ],
        "parameter":[
            "Parameter(s)",
            "textRemarks."
        ],
        "example":[
            "Example(s)",
            "pq\nc This Proc runs the month-end processing"
        ]
    },
    {
        "name":"d command (PROC processor)",
        "Syntax":[
            "Syntax",
            "d{param.num, num.chars|(start.pos, num.chars)}{+}\n"
        ],
        "description":[
            "The d command displays either a specific position from the currently active input buffer, or all the positions."
        ],
        "parameter":[
            "Parameter(s)",
            "param.numSpecifies the position number in the currently active input\nbuffer. Numbering starts at 1, which is the Proc command. Leading\nspaces are deleted from the parameter.If zero is specified, thenallpositions in the buffer display.If no position number\nis specified, then the current position of the buffer pointer is used.\nIf there is no such position, then this command does nothing.num.charsSpecifies the number of characters to move.start.posSpecifies the starting character in the parameter to display.+Suppress the carriage return at the end of the display line."
        ],
        "example":[
            "Example(s)",
            "Active Input BufferCommandData Displayedlist company assets^d2companylist company assets^d0list company assetslist company assets^d3,4asselist company assets^d3,4+asse"
        ]
    },
    {
        "name":"f command (PROC processor)",
        "Syntax":[
            "Syntax",
            "f\n"
        ],
        "description":[
            "The f command increments (moves the pointer forward) the currently active input buffer pointer by 1. If the pointer is at the end of the buffer, this command has no effect."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"go command",
        "Syntax":[
            "Syntax",
            "go statement.label|aparam.num\n"
        ],
        "description":[
            "Description",
            "The go command transfers program control to another Proc statement which starts with a statement label. The second form is an indirect transfer, according to the value of the label, as extracted from a parameter in the input buffer.",
            "If the statement label is not unique, the go command goes to the first occurrence of the statement label as it scans from the top. If the label does not exist, the go command is not executed."
        ],
        "parameter":[
            "Parameter(s)",
            "statement.labelSpecifies the statement label to which control is transferred.\nstatement labels must be numeric.aparam.numSpecifies an indirect transfer, according to the value of\nthe label, as extracted from a parameter in the currently active input\nbuffer. Theais a literal."
        ],
        "example":[
            "Example(s)",
            "Transfers control to the Proc\nstatement with label 99.",
            "go 99",
            "Transfers control to the Proc label that matches the value\nin the fourth position of the currently active input buffer.",
            "go a4"
        ]
    },
    {
        "name":"h command",
        "Syntax":[
            "Syntax",
            "h{string}{<}\n"
        ],
        "description":[
            "Description",
            "The h command moves a literal string of characters to the currently active output buffer.",
            "Several h commands can be used to build suitable text. It does not actually output until a carriage return is placed into the buffer."
        ],
        "parameter":[
            "Parameter(s)",
            "stringThe text for the output buffer. All characters immediately\nafter thehare placed in the active output buffer\nat the current position of the pointer, including leading and trailing\nspaces.<Place a carriage return in the output buffer andmustfollow each discrete parameter when moving multiple\nparameters to the secondary output buffer (following thestoncommand)."
        ],
        "example":[
            "Example(s)",
            "Thehcommands\nmove the strings following them to the end of the currently active\noutput buffer.",
            "hlist entity\nh name address phone\np",
            "The<characters in the example are\nrequired to separate orstackthe strings to execute after\nthe list is retrieved.",
            "hget-list invoices\nston\nhlist-label invoices cust.name cust.addr custcsz (cip<\nh1,3,1,0,30,0,c\np"
        ]
    },
    {
        "name":"if command",
        "Syntax":[
            "Syntax",
            "if {#} e {operator message.num} command\nif {#} s command\nif {#} a{param.num}{,n} {operator{\u2019string\u2019|(pattern.match)}} command\n"
        ],
        "description":[
            "Description",
            "The if command performs a conditional expression.",
            "Comparisons are performed one character at a time from left to right. For the purposes of comparison, letters are converted to uppercase\u2014so uppercase and lowercase letters are equal.",
            "If no unequal characters are found, the two strings are considered equal. If the two strings are of unequal length, but the shorter string is otherwise identical to the longer string, the longer string is greater than the shorter string. If the two strings are unequal, then the comparative ASCII values of the two characters decide which string is greater than and which is less than.",
            "The if commands can be nested, forming a logical and condition:"
        ],
        "parameter":[
            "Parameter(s)",
            "#Thenot equalto operator\nreverses the sense of the condition.operatorThe relational operators available\nare:=Equal to#Not equal to<Less than>Greater than[Less than or equal to]Greater than or equal tomessage.numThe error number returned, if\nany. Error numbers are the item-IDs in the errmsg file. If no message\nnumber is specified, then any message number causes this to be true.commandThe Proc command to be executed\nif the condition is met; otherwise, this proc command is skipped.a{param.num}{,n}Specifies that anacommand be used as the test condition. The parameters are not moved\nto the active output buffer. However, the buffer pointer is repositioned\nas specified by theacommand. Seea command (PROC processor)for more information.stringA literal string.pattern.matchThe character pattern to match.\nThe pattern must be enclosed in parentheses. Thenspecifies the length of the match operator field.A length specification\nof 0 allows variable length input, but tests as true only if all characters\nmatch the character type (numeric\/alphabetical\/alphanumeric).The\nfollowing pattern forms are:naAcceptsnalphabetical characters only.nnAcceptsnnumerical characters only.nxAcceptsnof any characters.\u2019string\u2019Accepts literal string. The string must be surrounded by single\nquotation marks (\u2019)."
        ],
        "example":[
            "Example(s)",
            "Checks for error message 401\nand stops\/returns if present.",
            "if e = 401 xno items were selected...",
            "Checks for 3 numbers, a dash, 2 numbers, a dash, and 4\nmore numbers.",
            "if a # (3n\u2019-\u20192n\u2019-\u20194n) oinvalid ss#.",
            "Checks the currently active input buffer location for\nthe presence of the letterx.",
            "if a = x xdone.",
            "Checks the currently active input buffer location for\nthe presence of 0 or more numbers.",
            "if a = (0n) go 10",
            "Checks the first character of the currently active input\nbuffer location for the presence of the letterq.",
            "if a1,1 = q x proc terminated voluntarily",
            "Checks for the absence of a value in the first position\nof the currently active input buffer.",
            "if # a1 go 10"
        ]
    },
    {
        "name":"ih command",
        "Syntax":[
            "Syntax",
            "ih\\\nih \\\nih string\n"
        ],
        "description":[
            "The ih command removes the current parameter from the currently active input buffer and replaces it with a null value or the specified string."
        ],
        "parameter":[
            "Parameter(s)",
            "\\Inserts a new null parameter in the current position of the\ncurrently active input buffer. If the pointer is in the middle of\na position, the position is truncated starting at the current position\nand a new null parameter is added after the truncation.stringInputs the specified string, including all leading and trailing\nspaces, into the active input buffer at the current pointer position."
        ],
        "example":[
            "Example(s)",
            "Storesninto\nthe input buffer location, giving the operator two ways to say no.",
            "s1\no print (y\/n=<return>) +\nihn\nip:"
        ]
    },
    {
        "name":"in command",
        "Syntax":[
            "Syntax",
            "in{c}\n"
        ],
        "description":[
            "The in command prompts for input from the terminal and places it in the secondary input buffer. Contents of the secondary input buffer are destroyed and the buffer pointer is set to the beginning, prior to placing data in the buffer. Leading and trailing blanks are removed and embedded blanks are replaced with a single attribute mark."
        ],
        "parameter":[
            "Parameter(s)",
            "cPrompt character that remains in effect until reset with a\nnewinoripcommand. (Default\nis the last prompt character used or a colon, if no other is specified.)",
            "Note:Because the secondary input buffer has fallen into\ndisuse, the use of theincommand in general programming\nis not recommended. Compare with theipcommand."
        ],
        "example":[

        ]
    },
    {
        "name":"ip command",
        "Syntax":[
            "Syntax",
            "ip{prompt.character}\n"
        ],
        "description":[
            "Description",
            "The ip command stops execution of the Proc and awaits a response from the keyboard.",
            "The input data is placed into the currently active location of the active input buffer, which is determined by previous s, b, or f commands. Any existing data at that location is overwritten. If the pointer is already at the end of the buffer, the input is appended to the end. The colon is the default prompt character."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "The input received from the keyboard\nis placed into the first location of the active input buffer.",
            "o enter response +\ns1\nip"
        ]
    },
    {
        "name":"is command",
        "Syntax":[
            "Syntax",
            "is{prompt.character}\n"
        ],
        "description":[
            "The is command temporarily stops execution of the Proc until a response is provided from the keyboard. Input is placed into the secondary input buffer. Any existing data at that location is overwritten. If the pointer is already at the end of the buffer, the input is appended to the end. The colon is the default prompt character."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"it command",
        "Syntax":[
            "Syntax",
            "it\n"
        ],
        "description":[
            "The it command inputs data from the tape label of the currently attached magnetic media directly into the primary input buffer. The input buffer is cleared before the label is copied into it. If there is no label, the input buffer is cleared anyway. Note that the tape device must be attached."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "100 :\n101 ss\n102 it\n103 d0",
            "Reads the label and displays the following:",
            "L 01F4 17:08:28 16 Jan 1903 FILE-SAVE .......... ^01"
        ]
    },
    {
        "name":"o command (PROC processor)",
        "Syntax":[
            "Syntax",
            "o {text}{+}\n"
        ],
        "description":[
            "The o command outputs literal text to the terminal at the next available line."
        ],
        "parameter":[
            "Parameter(s)",
            "textText to output to the terminal including all leading and trailing\nspaces.+Suppresses the usual carriage return at the end of the text."
        ],
        "example":[
            "Example(s)",
            "o\no This reports takes a while to run...\no Please sit by...\no"
        ]
    },
    {
        "name":"p command (PROC processor)",
        "Syntax":[
            "Syntax",
            "p{option}\n"
        ],
        "description":[
            "Description",
            "The p command processes the commands in the currently active output buffers. The primary output buffer is processed first, followed by the secondary output buffer. Both the primary and secondary output buffers are automatically reset after the p\u00a0command, and the active buffer pointer is reset to point to the primary output buffer.",
            "The p command submits the contents of the primary output buffer to TCL for processing. The contents of the secondary output buffer are used as input for other interactive processors. If the secondary output buffer or stack contains any data and the last character is not a carriage return, the system appends a carriage return to the stack.",
            "After the TCL command completes, the Proc resumes at the next statement after the p command. The input buffers are unchanged. The output buffers are cleared and their pointers are reset."
        ],
        "parameter":[
            "Parameter(s)",
            "optionType of additional options to\nperform:hSuppress output to the terminal.pDisplay the contents of both\noutput buffers.wDisplay the contents of both\noutput buffers, then wait for response from the terminal. Valid responses\nare:gor pressing ENTERProceeds with the process.sSkip to the next command in the Proc.xornAbort the Proc.xAfter the TCL command has been\nprocessed, abort the rest of the Proc, if any, and return to TCL."
        ],
        "example":[
            "Example(s)",
            "hlist entity\nh name address\np\no report completed at +\nhtime\np",
            "The firstpcommand in this example\nprocesses the AQL sentence, list entity name address. The secondpcommand processes the TCLtimecommand.",
            "hselect entity by name\nston\nhsave-list entity.by.name\np",
            "Thepcommand in this example processes\nthe commands in both output buffers.",
            "hsselect entity by name\nston\nhsave-list entity.list\npx\noEND OF PROC"
        ]
    },
    {
        "name":"ri command",
        "Syntax":[
            "Syntax",
            "ri{start.parameter}\n"
        ],
        "description":[
            "The ri command resets either the entire Proc input buffer, or all of the locations following a specified location, and resets both input buffers to null."
        ],
        "parameter":[
            "Parameter(s)",
            "start.parameterIndicates thestartingposition to reset. All parameters\nfollowing the specified parameter and the entire secondary input buffer\nare cleared."
        ],
        "example":[
            "Example(s)",
            "Clears both input buffers.",
            "ri",
            "Clears only the secondary input buffer.",
            "ss\nri\nsp"
        ]
    },
    {
        "name":"ro command",
        "Syntax":[
            "Syntax",
            "ro\n"
        ],
        "description":[
            "The ro command resets both of the output buffers. There is rarely a case where this is ever required."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"s command (PROC processor)",
        "Syntax":[
            "Syntax",
            "s{parameter.number}\n"
        ],
        "description":[
            "The s command sets the input pointer to a specified position number, activating the specified parameter number as the currently active input buffer location."
        ],
        "parameter":[
            "Parameter(s)",
            "parameter.numberSpecifies the position number."
        ],
        "example":[
            "Example(s)",
            "s1\nip:"
        ]
    },
    {
        "name":"sp command",
        "Syntax":[
            "Syntax",
            "sp\n"
        ],
        "description":[
            "The sp command selects the primary input buffer, and positions the pointer to the beginning of the input buffer."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"ss command",
        "Syntax":[
            "Syntax",
            "ss\n"
        ],
        "description":[
            "The ss command selects the secondary input buffer and positions the pointer to the beginning of the secondary input buffer."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"st command",
        "Syntax":[
            "Syntax",
            "st [on|off]\n"
        ],
        "description":[
            "The st command selects and directs output either to the primary output buffer (turns off the stack) or to the secondary output buffer (turns on the stack). When the stack is off, all data picked up by the a command is put in the primary output buffer. When the stack is on, the data is put in the secondary output buffer."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "hsselect entity by name\nst on\nhsave-list entity.list\np"
        ]
    },
    {
        "name":"t command (PROC processor)",
        "Syntax":[
            "Syntax",
            "t {function, function,...}\n"
        ],
        "description":[
            "The t command directs output to the terminal screen and controls special terminal display functions."
        ],
        "parameter":[
            "Parameter(s)",
            "functionbRings the terminalbell.cClears the terminal screen.(column,row)Outputs the value at the column and row coordinates.inOutputs ASCII character with an integer value ofn.xnOutputs ASCII character with integer hexadecimal value ofn.\"text\"Outputs literal text. Double quotation marks are required\naround literal text.@See@() functionfor a complete listing of the@functions., (comma)Indicates that thistcommand is to be\ncontinued on the next line. Thetcommand does\nnot insert a carriage return automatically."
        ],
        "example":[
            "Example(s)",
            "Clears the screen, (-1) positions\nthe cursor at column 20, row 0, and displays the stringMain\nMenu.",
            "t (-1),(20,0),\"Main Menu\"",
            "Positions the cursor to column 10, row 10, displays the\nstring\"Chosen\"in reverse video, (-13) and (-14),\nand clears to the end of the line (-4).",
            "t (10,10),(-13),\"Chosen\",(-14),(-4)",
            "s1\nihy\nt (0,5),\"Is this OK ?\"\nd1+\nt i8,i8\nip?",
            "This set of instructions:",
            "Sets the input buffer pointer to the first position withs1.Places a y in the first input buffer position withihy.Outputs the string\"Is this OK ?\"at column\n0, row 5.Displays the contents of the first buffer position and holds\nthe cursor withd1+.Outputs two backspaces witht i8,i8.Prompts for input withip?. This displays\nthe default valuey, backs up the cursor two positions\nso that it is one character in front of theyand\nthen issues a?prompt character that places\nthe cursor directly over they.",
            "t c,i7,(10,10),b",
            "This statement clears the screen withc, rings the bell by issuing a character 7 withi7, positions the cursor at column 10, row 10, and rings the bell again\nwithb.",
            "t x1b,x8,\"exec dir\",x0",
            "This statement is typically used to control an intelligent\nMS-DOS terminal (such as ViaDuct). It sends apreamble, consisting of an escape, backspace (x1bandx8, specified in hexadecimal), then sends the\"exec\ndir\"command string followed by the end command characterx0. This statement can be written using integer references:",
            "t i27,i8,\"exec dir\",i0"
        ]
    },
    {
        "name":"x command (PROC processor)",
        "Syntax":[
            "Syntax",
            "x {text}{+}\n"
        ],
        "description":[
            "The x command serves two purposes:",
            "In a mainline (PROC) routine, the x command functions as a stop command and halts the PROC.",
            "In a subroutine, the x command acts as a return statement, and returns control to the next executable line after the one that invoked it."
        ],
        "parameter":[
            "Parameter(s)",
            "textText to display to the terminal before exiting.+Suppresses the usual carriage return at the end of the text."
        ],
        "example":[

        ]
    },
    {
        "name":"PROC processor user exits",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"u0032 user exit",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"u0070 user exit",
        "Syntax":[
            "Syntax",
            "u0070, d1, d2\n"
        ],
        "description":[
            "User exit u0070 performs a correlated match on a MultiValue set."
        ],
        "parameter":[
            "Parameter(s)",
            "d1Value to match.d2Data to display."
        ],
        "example":[

        ]
    },
    {
        "name":"u0191 user exit",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "PQ\nU0191\nXUnable to lock at present...\nOHere we go..."
        ]
    },
    {
        "name":"u0192 user exit",
        "Syntax":[
            "Syntax",
            "u0192\nformat.spec\n:\n-> t\n"
        ],
        "description":[
            "User exit u0192 is for general output formatting. Output values can be literals, attribute values, or converted attribute values."
        ],
        "parameter":[
            "Parameter(s)",
            "format.spech{nn}stringPlaces string in the output buffer. Ifnnis specified, the value is output starting at output columnnn. Ifnnis omitted, the value is output\nat the current column position in the output buffer.h{nn} %mmPlaces the value located at themmposition\nof the primary input buffer into the current output buffer. Ifnnis specified, the value is output starting at columnnn. Ifnnis omitted, then the value\nis output at the current column position in the output buffer.h{nn} #mmPlaces the value located at themmposition\nof the primary output buffer into the current output buffer. Ifnnis specified, the value is output starting at output\ncolumnnn. Ifnnis omitted,\nthe value is output at the current column position in the output buffer.lReroutes output to the printer instead of the terminal. The\nterminal is reselected for output at the end of the user exit.p{nn}Page-ejects\u2014the value,nn, placesnnform feeds in the current output buffer. Ifnnis omitted, it is assumed to be 1.s{nn}Vertical spacing\u2014the value,nn, placesnnCR\/LFs in the current output buffer. Ifnnis omitted, it is assumed to be 1.v{nn}file.referenceitem.reference attribute.mark.countRetrieves a specific value from an attribute in an item. Ifnnis specified, the value is output starting at output\ncolumnnn. Ifnnis omitted,\nthe value is output at the current column position in the output buffer.x{nn}Horizontal spacing\u2014the value,nn, placesnnspaces in the current output line. Ifnnis omitted, it is assumed to be 0.*{nn}file.reference item.reference\nattribute.referenceRetrieves the specified value of an attribute in an item.\nIfnnis specified, the value is output starting\nat output columnnn. Ifnnis\nomitted, the value is output at the current column position in the\noutput buffer. This is similar to thevformat specification,\nwith these important exceptions:Value is referenced by the attribute name instead of the attribute\nnumber.Conversion is performed as specified by the dictionary entry\nv\/conv, before output.-> t{+}Format specification terminator. A space is required between->andt. Thetmay optionally\nbe followed by+to suppress the final CR\/LF."
        ],
        "example":[

        ]
    },
    {
        "name":"u0193 user exit",
        "Syntax":[
            "Syntax",
            "u0193\nsource destination\n"
        ],
        "description":[
            "User exit u0193 moves a parameter from the source buffer to the destination buffer."
        ],
        "parameter":[
            "Parameter(s)",
            "source%nIndicates the primary input buffer.#nIndicates the active output buffer.destination%nIndicates the primary input buffer.#nIndicates the active output buffer."
        ],
        "example":[

        ]
    },
    {
        "name":"u0195 user exit",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"u01a2 user exit",
        "Syntax":[
            "Syntax",
            "u01a2\nindex arg1... argn\njump here if index = arg1)\n:\n(jump here if index = argn)\n(continue here if no arguments match)\n"
        ],
        "description":[
            "User exit u01a2 executes a computed goto branch based on the value in the current output buffer."
        ],
        "parameter":[
            "Parameter(s)",
            "indexValue to compare against one or more arguments.arg1...argnValues to compare against the index. If a match is made, control\npasses to then+1 line below the user exit call."
        ],
        "example":[
            "Example(s)",
            "001\npq\n002\no Demonstration of the computed-goto\n003\no Enter: YES, NO, or MAYBE\n004\nst on\n005\nh1\n006\nin\n007\na\n008\nh3\n009\nu01a2\n010\n2 YES NO MAYBE\n011\ng 100\n012\ng 200\n013\ng 300\n014\nx Sorry, only a YES, NO, or MAYBE may be entered.\n015\n100 x You entered a YES\n016\n200 x You entered a NO\n017\n300 x You entered a MAYBE"
        ]
    },
    {
        "name":"u01a6 user exit",
        "Syntax":[
            "Syntax",
            "u01a6\ncontrol.code{,control.code,}...\n"
        ],
        "description":[
            "User exit u01a6 performs cursor control functions. Nearly all the functionality of this user exit is available through the t PROC command, which should be preferred to this user exit."
        ],
        "parameter":[
            "Parameter(s)",
            "control.code(col,row)Positions the cursor at the specified column and row.bRings thebell.cClears the screen.inOutputs ASCII character with an integer value ofn.xnOutputs ASCII character with integer hexadecimal value ofn.\"text\"Outputs literal text."
        ],
        "example":[
            "Example(s)",
            "U01A6\nc",
            "Clears the screen, and is the equivalent to:",
            "t c"
        ]
    },
    {
        "name":"u01ad user exit",
        "Syntax":[
            "Syntax",
            "u01ad\nfile.name item-ID attribute.ref code.number\n"
        ],
        "description":[
            "Description",
            "User exit u01ad retrieves a value from an attribute of an item in a file. The next line of the Proc specifies the file information.",
            "This function allows indirect references to values from the input and output buffers by using these special symbols:"
        ],
        "parameter":[
            "Parameter(s)",
            "file.nameName of the file. If the file\nname is prefixed with an asterisk, the dictionary portion of the file\nis accessed.item-IDItem name.attribute.refAttribute name (or number).code.numberaOutputs to the alternative output buffer.pOutputs to the primary input buffer.sOutputs to the current output buffer.tOutputs to the terminal.vVerifies that the file exists.vaVerifies that the attribute exists."
        ],
        "example":[
            "Example(s)",
            "Direct Referencepqu01ad control-file co.name\n1 sxcan\u2019t findco.nameorcontrol.fileReads attribute 1 of the item calledco.namein the file named control-file and places it in the current output\nbuffer.Indirect Referencepqu01ad %2 %3 %4 pxsomething went wrong...d0Reads the attribute number as defined in the fourth location\nof the input buffer, using the item-ID from the third location and\nthe file name from the second location."
        ]
    },
    {
        "name":"u01b8 user exit",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"u1191 user exit",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"u1193 user exit",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"u1195 user exit",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"u11a2 user exit",
        "Syntax":[
            "Syntax",
            "u11a2\nnumber.of.digits\n"
        ],
        "description":[
            "User exit u11a2 pads the current input buffer with enough leading zeros to make the value in the number of digits a specific number of digits wide, and returns the resulting string to the secondary input buffer."
        ],
        "parameter":[
            "Parameter(s)",
            "number.of.digitsSets the width of the number of digits."
        ],
        "example":[
            "Example(s)",
            "Input values of 1, 01, 001, or\n0001 are all replaced by 0001.",
            "009 in\n010 u11a2\n011 4"
        ]
    },
    {
        "name":"u11ad user exit",
        "Syntax":[
            "Syntax",
            "u11ad\nfile.name item.name attribute.ref code.number\n"
        ],
        "description":[
            "User exit u11ad retrieves all MultiValue from an attribute. The following line of the Proc specifies the file information, and a code number."
        ],
        "parameter":[
            "Parameter(s)",
            "file.nameName of the file. If the file\nname is prefixed with an asterisk, the dictionary portion of the file\nis accessed.item.nameItem name.attribute.refAttribute name (or number).code.numberaOutputs to the alternative output buffer.pOutputs to the primary input buffer.sOutputs to the current output buffer.tOutputs to the terminal.vVerifies that the file exists.vaVerifies that the attribute exists."
        ],
        "example":[

        ]
    },
    {
        "name":"u11bc user exit",
        "Syntax":[
            "Syntax",
            "u11bc\nnumber.of.zeros\n"
        ],
        "description":[
            "User exit u11bc pads the value in the secondary input buffer with zeros."
        ],
        "parameter":[
            "Parameter(s)",
            "number.of.zerosNumber of zeros in the secondary input buffer."
        ],
        "example":[

        ]
    },
    {
        "name":"u20d7 user exit",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"u218d user exit",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"u2191 user exit",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"u2193 user exit",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"u21a2 user exit",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"u21ad user exit",
        "Syntax":[
            "Syntax",
            "u21ad\nfile.name item.name attribute.ref code.number\n"
        ],
        "description":[
            "User exit u21ad retrieves all values of an attribute from an item in a file, but does not advance the MultiValue counter. The following line of the Proc specifies the file information, and a code number."
        ],
        "parameter":[
            "Parameter(s)",
            "file.nameName of the file. If the file\nname is prefixed with an asterisk, the dictionary portion of the file\nis accessed.item.nameItem name.attribute.refAttribute name (or number).code.numberaOutputs to the alternative output buffer.pOutputs to the primary input buffer.sOutputs to the current output buffer.tOutputs to the terminal.vVerifies that the file exists.vaVerifies that the attribute exists."
        ],
        "example":[

        ]
    },
    {
        "name":"u219b user exit",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"u21bc user exit",
        "Syntax":[
            "Syntax",
            "u21bc\ndelete.code\n"
        ],
        "description":[
            "User exit u21bc deletes entries from the output buffer. The next line in the Proc specifies the delete code."
        ],
        "parameter":[
            "Parameter(s)",
            "delete.code0Deletes all entries.1Deletes the last entry only."
        ],
        "example":[

        ]
    },
    {
        "name":"u318d user exit",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"u3191 user exit",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"u3193 user exit",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "001     pq\n002     u0193\n003     hlist md\n004     p\n\n(all output goes to the terminal)\n\n005     u3193\n006     hlist md\n007     p\n\n(all output goes to the printer)"
        ]
    },
    {
        "name":"u31a2 user exit",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"u31ad user exit",
        "Syntax":[
            "Syntax",
            "u31ad\ncode.number\n"
        ],
        "description":[
            "User exit u31ad returns the current port number."
        ],
        "parameter":[
            "Parameter(s)",
            "code.numberWhen following the user exit,\nthe code number specifies where the value is to be placed.aOutputs to the alternative output buffer.pOutputs to the primary input buffer.sOutputs to the current output buffer.tOutputs to the terminal."
        ],
        "example":[

        ]
    },
    {
        "name":"u31bc user exit",
        "Syntax":[
            "Syntax",
            "u31bc\nfile.reference item-ID\n"
        ],
        "description":[
            "User exit u31bc implements a Proc subroutine call."
        ],
        "parameter":[
            "Parameter(s)",
            "file.referenceName of the file.item-IDSubroutine to call in the given file reference."
        ],
        "example":[

        ]
    },
    {
        "name":"u401c user exit",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"u4193 user exit",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"u419b user exit",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"u41a2 user exit",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"u41ad user exit",
        "Syntax":[
            "Syntax",
            "u41ad\nstring\n"
        ],
        "description":[
            "User exit u41ad replaces the string in the primary input buffer with a new string, placed in the next Proc line."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"u41bc user exit",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"u5193 user exit",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"u51bc user exit",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"u61a2 user exit",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "pq\nu61a2\nhsselect md\nston\nhsave-list mx<\nston\np\nu61a2"
        ]
    },
    {
        "name":"u61bc user exit",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"u713c user exit",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"u71a2 user exit",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"u8193 user exit",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"u91a2 user exit",
        "Syntax":[
            "Syntax",
            "proc\nu91a2\n"
        ],
        "description":[
            "User exit u91a2 transfers control to the specified Proc name in the primary output buffer. The primary input buffer is unaffected. Both output buffers are cleared."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "001     pq\n002     st off\n003     hnew.proc\n004     u91a2"
        ]
    },
    {
        "name":"u91bc user exit",
        "Syntax":[
            "Syntax",
            "hproc.name\nu91bc\n"
        ],
        "description":[
            "User exit u91bc transfers control (chains) to another Proc, without affecting the contents of the input buffers. The target Proc name is listed on the line above the user exit."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"ua1a2 user exit",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"ua1bc user exit",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"ud070 user exit",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "This displays the current account.",
            "001     pq\n002     ud070\n003     d0"
        ]
    },
    {
        "name":"ue070 user exit",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Processing codes",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Processing codes overview",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Processing codes commands",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"a (algebraic) processing code",
        "Syntax":[
            "Syntax",
            "a{{num.digits;}expressions...}\n"
        ],
        "description":[
            "The a processing code is a recursive algebraic function that creates algebraic formulas and relational operations consisting of operands and operators; these expressions are used by AQL as well as the B-tree indexes. The a processing codes are translated into f processing codes by the AQL compiler. The functional operators and operands for the a processing code are the same as that of the f\u00a0processing code, except as noted."
        ],
        "parameter":[
            "Parameter(s)",
            "num.digitsArgument optionally used to indicate the number of decimal\ndigits (in the range 0 through 4) to retain during calculations involving\na mixture of whole numbers and numbers with implied decimals, along\nwithm(mask) processing codes in the body of the\nfunction. The default is 0.expression{s}Expressions formed are like FlashBASIC expressions and consist\nof operands, operators, conditional statements, and special functions\ncombined together to yield a single resulting value.",
            "D3 algebraic processing uses alast-in first-outstack. Operands are pushed onto the top of the stack and all existing\nstack entries shift down. Operations operate on the top first, second,\nor third stack entries depending on the operation. Results processing,\nincluding additional conversions, take the top value off the stack."
        ],
        "example":[

        ]
    },
    {
        "name":"b (bridge) processing code",
        "Syntax":[
            "Syntax",
            "bfile.reference;attr1;attr2{;{attr3;+|-}|d}\n"
        ],
        "description":[
            "Description",
            "The b processing code maintains a horizontal relationship (bridge) between an attribute in one item and an item in another file (or the same file) on the system level.",
            "If you attempt to file or restore a bridge in an FSI file-defining item, it will be commented-out with an asterisk (*).",
            "This processing code is supported only from the VME.",
            "The advantage of a bridge correlative is that it performs a function that previously took significant FlashBASIC coding. When an item is added, changed, or deleted, all the bridge correlatives in the file-defining item of the file dictionary are processed for that item."
        ],
        "parameter":[
            "Parameter(s)",
            "file.referenceRefers to the file in which the bridge is being built.attr1Contains the attribute in the current item that contains the item-ID of the item in\n        thebridged-tofile. This attribute can be multivalue in the current\n        file. If it is multivalue, all items are updated in the bridged-to file.attr2Contains the attribute in thebridged-toitem that is referenced by the\n        bridge. Unless the optionaloperatorparameter is specified, this\n        attribute contains the item-ID of the current item as a cross-reference to the current file.If the optionaloperatorparameter is specified as an arithmetic\n         operation with an operand attribute count 3, the attribute contains the result of the\n         arithmetic operation.attr3;+|-Adds or subtracts the value of the attribute specified by attribute count 3 in the\n        current item to the value in the attribute count 2 in thebridged-toitem. The\n        inverse operation is performed on a delete. No backward pointer is maintained in the\n        bridged-to item.If the current item is deleted, the inverse operation is performed to\n         automatically return the value in attribute count 2 to its original value.dUsed as an override to delete the current item even if attribute count 1 is not null.\n        Without this option, the current item may not be deleted if the attribute specified by\n        attribute count 1 contains a value.All values of attribute count 1 in the current item\n         are processed. If a value in attribute count 1 is changed, the value of attribute count 2\n         in the original item specified by attribute count 1 is deleted, and this value is added to\n         attribute count 2 of the new item pointed to by attribute count 1."
        ],
        "example":[
            "Example(s)",
            "Example 1",
            "The following example places the item-ID of the current item into attribute 5 of the entity\n    file. Attribute 1 in the current file contains the item-ID in the entity file.",
            "bentity;1;5",
            "Example 2",
            "The following example adds the value of attribute 3 in the current item to the value in\n    attribute 4 of the bridged-to item (product file). The result of the addition is stored in\n    attribute 4 of the bridged item.",
            "bproduct;2;4;3;+"
        ]
    },
    {
        "name":"c (Concatenate) processing code",
        "Syntax":[
            "Syntax",
            "celement{;element...}\ncelement{\/*}\ncelement{xelement}{...}\n"
        ],
        "description":[
            "Description",
            "The c processing code concatenates elements for output.",
            "Each element may be delimited by a character to appear on output. If the semicolon is the element separator, it does not display on output. The elements can be:",
            "Numeric constants, enclosed in quotation marks.",
            "An attribute position, referenced by its numeric attribute count.",
            "An alphanumeric character string enclosed in quotation marks, double quotation marks, or backslashes. When delimited by semicolons, strings must be enclosed in quotation marks; otherwise, alphanumeric strings are not separated from the other entries by semicolons.",
            "The asterisk is a special character used to concatenate the resulting value from the last processing code operation. In the third form listed under Syntax, x specifies the separator to appear between the concatenated elements. The separator may be any nonnumeric character including a space or semicolon, but cannot be a system delimiter. The semicolon is a special separator that specifies the elements are to be concatenated with no separation."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "Stored ValueProcessing CodeOutput Data014 \u2018Hunter\u2019015 \u2018Rockwell\u2019c\u201dName :\u201d;14,15\u2018Name: Hunter,Rockwell\u2019001 \u2018day\u2019002 \u2018night\u2019c1\/2\u2018day\/night\u2019"
        ]
    },
    {
        "name":"c (controlling) processing code",
        "Syntax":[
            "Syntax",
            "c;ac{;ac...}\n"
        ],
        "description":[
            "Description",
            "The c processing code defines the controlling attribute in a controlling\/dependent pair of attributes when placed in attribute 4 of the ADI.",
            "A controlling\/dependent set of attributes is two or more attributes that are associated.",
            "In an AQL report, to see dependent attributes, controlling attributes must be specified.",
            "When using the Update processor, to see dependent attributes, controlling attributes must be specified. The attributes dependent upon the controlling attribute must contain a d (dependent) code in attribute 4."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "In this example,order#is the controlling attribute and controls the values in attributes\n4, 5, and 6. Each of these three controlled attributes must indicate\nin their corresponding attribute-defining items that they are dependent\nupon attribute\u00a03.",
            "id:     order#     quantity     price     ext.price\n001     a          a            a          a\n002     3          4            5          6\n003\n004     c;4;5;6    d;3          d;3        d;3"
        ]
    },
    {
        "name":"call processing code",
        "Syntax":[
            "Syntax",
            "call {file.spec} module\n"
        ],
        "description":[
            "Description",
            "The call processing code calls a BASIC or FlashBASIC subroutine from the file-defining item or an ADI. Called subroutines are Flash compiled to improve performance.",
            "If you attempt to file or restore a call in an FSI file-defining item, it will be commented-out with an asterisk (*).",
            "This processing code is supported only from the VME.",
            "The syntax for calling a subroutine does not specify any parameters, but the subroutine is passed a parameter anyway, so one parameter must be specified in the subroutine statement. However, when a subroutine is called from the file-defining item, the entire item body is passed to the subroutine. When a subroutine is called from an attribute-defining item, the value of the calling attribute is passed to the subroutine.",
            "Subroutines can be called from the correlative or input-conversion attributes for file-defining items, or the correlative, input-conversion, or output-conversion attributes for attribute-defining items.",
            "When a subroutine is called from the correlative field of the file-defining item, control passes to the subroutine at file time.",
            "When a subroutine is called from the input-conversion of the file-defining item, control passes to the subroutine before the operator gets into the file via the Update processor. That is, after the Update processor command has been executed (:u file.name) and before the user gets access to the item.",
            "Subroutines for attribute-defining items that are called from the output-conversion attribute are executed on output for redisplay after entry. Subroutines called from the correlative attribute are executed prior to processing. Subroutines called from the input-conversion attribute are executed after input.",
            "When passing a parameter value to the subroutine where the processing code is in a file-defining item, the entire item is passed to the subroutine. If the processing code is in an attribute-defining item, the current, single value is passed to the subroutine. If called from a hotkey, no parameters are passed automatically, and parameters are additionally forbidden. However, the FlashBASIC AQL function can be used in the called subroutine to obtain values from the processing code.",
            "When Basic calls (that convert single values to multiple values) are used within an attribute definition that is used as selection criteria by an access statement, an index must be utilized to ensure proper functionality.",
            "When using correlatives from the FSI during a restore, illegal or unsupported correlatives are automatically commented out (by inserting a leading asterisk (*)). For example, any correlatives intended for use within the VME whose formats would not work properly within the FSI are automatically commented out.",
            "The call processing code is not always processed on null values.",
            "Data may be interrogated and modified in the subroutine using the FlashBASIC access statement.",
            "Error conditions can be set if an inputerr statement is executed in the FlashBASIC subroutine."
        ],
        "parameter":[
            "Parameter(s)",
            "file.specFull path to the file containing the FlashBASIC code. The\nfull path database,file, must be used (for exampledm,bp,). The account name in the file path must be an FSI account.file.speccan be omitted if the module has been cataloged\nin the Domain Catalog.moduleRecord-ID of the BASIC or FlashBASIC module."
        ],
        "example":[
            "Example(s)",
            "Assume that there is an attribute-defining\nitem that contains a call to a subroutine calledst.name:",
            "subroutine st.name(st)\nstates = \"alaska,washington,oregon,california,idaho\"\ncodes = \"al,wa,or,ca,id\"\nconvert \",\" to char(254) in codes\nlocate(st,codes;x) then\nst = field(states,\",\",x)\nend else st = \"unknown\"",
            "Press ENTER. The value is passed from AQL into thestvariable. If the corresponding string is found,stis loaded with the appropriate code and control returns\nto AQL."
        ]
    },
    {
        "name":"callc (close trigger) processing code",
        "Syntax":[
            "Syntax",
            "callc file.spec module\n"
        ],
        "description":[
            "The callc (close trigger) is called before the table is closed.",
            "This processing code is supported only from the FSI."
        ],
        "parameter":[
            "Parameter(s)",
            "file.specFull path to the file containing the FlashBASIC code. The\nfull path database,file, must be used (for exampledm,bp,). The account name in the file path must be an FSI account.file.speccan be omitted if the module has been cataloged\nin the Domain Catalog.moduleRecord-ID of the FlashBASIC module.",
            "The argument of the module is the table name.",
            "The\nFlashBASICaccess()functions are set as follows:",
            "1File variable.2Currently not supported.3File name (same as the argument).10File name (same as the argument).11Supported.12Always 0.16Always 0.23Always 1."
        ],
        "example":[

        ]
    },
    {
        "name":"calld (Delete Trigger) processing code",
        "Syntax":[
            "Syntax",
            "calld file.spec module\n"
        ],
        "description":[
            "The calld (delete file trigger) is called before the file is deleted.",
            "This processing code is supported only from the FSI."
        ],
        "parameter":[
            "Parameter(s)",
            "file.specFull path to the file containing the FlashBASIC code. The\nfull path database,file, must be used (for exampledm,bp,). The account name in the file path must be an FSI account.file.speccan be omitted if the module has been cataloged\nin the Domain Catalog.moduleRecord-ID of the FlashBASIC module.",
            "The FlashBASICaccess()functions are\nset as follows:",
            "1File variable.2Currently not supported.3Undefined.10Undefined.11File name.12Undefined.16Undefined.23Always 1."
        ],
        "example":[

        ]
    },
    {
        "name":"calle (clear trigger) processing code",
        "Syntax":[
            "Syntax",
            "calle file.spec module\n"
        ],
        "description":[
            "The calle (clear file trigger) is called before the file is cleared.",
            "This processing code is supported only from the FSI."
        ],
        "parameter":[
            "Parameter(s)",
            "file.specFull path to the file containing the FlashBASIC code. The\nfull path database,file, must be used (for exampledm,bp,). The account name in the file path must be an FSI account.file.speccan be omitted if the module has been cataloged\nin the Domain Catalog.moduleRecord-ID of the FlashBASIC module.",
            "Note:If there is acalletrigger, thecallxtrigger is not called to delete each item.",
            "The FlashBASICaccess()functions are set as\nfollows:",
            "1File variable.2Currently not supported.3Undefined.10Undefined.11File name.12Undefined.16Undefined.23Returns the calling environment. It returns 0 if the function\nwas called from FlashBASIC, 1 if the function was called from acallxor from an index, 2 if the function was called from\nthe Update processor (except for acallxorindex), and 3 if the function was called from Access."
        ],
        "example":[

        ]
    },
    {
        "name":"callo (open trigger) processing code",
        "Syntax":[
            "Syntax",
            "callo file.spec module\n"
        ],
        "description":[
            "For Windows (FSI): The callo (open trigger) is called after a table has successfully been opened.",
            "For UNIX and Windows (VME): The open trigger is called before a table is opened."
        ],
        "parameter":[
            "Parameter(s)",
            "file.specFull path to the file containing the FlashBASIC code. The\nfull path database,file, must be used (for exampledm,bp,). The account name in the file path must be an FSI account.file.speccan be omitted if the module has been cataloged\nin the Domain Catalog.moduleRecord-ID of the FlashBASIC module.",
            "The argument of the module is the table name.",
            "The\nFlashBASICaccess()functions are set as follows:",
            "1File Variable.2Currently not supported.3File name (same as the argument).10File name (same as the argument).11File name (same as the argument).12Always 0.16Always 0.23Always 1."
        ],
        "example":[

        ]
    },
    {
        "name":"callr (Read Trigger) processing code",
        "Syntax":[
            "Syntax",
            "callr file.spec module\n"
        ],
        "description":[
            "The callr (read trigger) is called when a record is read from the table."
        ],
        "parameter":[
            "Parameter(s)",
            "file.specFull path to the file containing the FlashBASIC code. The\nfull path database,file, must be used (for exampledm,bp,).file.speccan be omitted if the module has\nbeen cataloged in the Domain Catalog.moduleRecord-ID of the FlashBASIC module.",
            "If the record is on file, the argument of the module is the\nrecord itself. The argument can be modified, and the application gets\nthe modified record.If the record is not on file, the argument content of the\nmodule and the value returned byaccess(3)are\nundefined.",
            "The FlashBASICaccess()functions are set\nas follows:",
            "1File variable.2Currently not supported.3Record body.10Record key.11File name.12Always 0.161 if the record is not on file.23Always 1."
        ],
        "example":[

        ]
    },
    {
        "name":"callx (write trigger) processing code",
        "Syntax":[
            "Syntax",
            "callx file.spec module\n"
        ],
        "description":[
            "The callx processing code is called when a record is updated in the table."
        ],
        "parameter":[
            "Parameter(s)",
            "file.specFull path to the file containing the FlashBASIC code. The\nfull path database,file, must be used (for exampledm,bp,). The account name in the file path must be an FSI account.file.speccan be omitted if the module has been cataloged\nin the Domain Catalog.moduleRecord-ID of the FlashBASIC module.",
            "The argument of the module is the record itself. The argument\ncan be modified and the modified record is written to the table.",
            "Subroutines invoked with thecallxprocessing\ncode are executed when an item in D3 is updated, regardless of which\nprocess does the updating. That is, the Update processor, FlashBASICwritestatement, TCLcopycommand, or\nthe AQLt-loadcommand. The entire item is passed\nto the subroutine.",
            "This processing code differs from thecallsubroutine in that it is called any time an item in\nthe file is updated, versus being called when the item is updated\nfrom the Update processor. The parameter passed is the entire item,\nwhich may be updated by the subroutine. Only the following ACCESS\nfunctions are supported within acallxsubroutine:",
            "1File variable for the data portion of the file.2File variable for the dictionary portion of the file.3Identical to the parameter upon entry to the subroutine andcannotbe updated by the subroutine.10Item-ID andcannotbe changed by the subroutine.11Dictionary and data filename.Note:If the dict and data filenames\nare the same, only the data filename will be returned.12Returns 1 if the item is deleted.16Returns 1 if the item is new.23Always 1.261 if the operation is deleting a record as part of a clearfile.\nNote thataccess(26)is writable. If set to 0,\nthe trigger will not be called anymore for each delete item operation.\nThis allows the trigger to inform the file system to do the clear\nfile quickly.27Returns the name of the account containing the D-pointer for\nthe file from which the BASIC program was called via a trigger or\na call from a correlative.50Returns 1 if the item was in UNICODE.Note:FlashBASIC does\nnot currently support UNICODE therefore the item is converted to ANSI\nand back to UNICODE after the trigger completes.",
            "Note:If a routine writes, deletes, or modifies an item in a file\nusing acallxFlashBASIC program to validate the\ndata and the validation fails, the item is not written to the file.\nThis affects commands such asclear-file,delete-file, andt-load. Since the FlashBASICwritecommand has nothen\/elseclause,\nthe programcannottrap the write failure.All item-locks locked via thecallxsubroutine\nwill be released upon exiting the subroutine.",
            "Thecallxtrigger is not called\non a clear file operation if there is a Clear File Trigger on the\nsame file.",
            "If aninputerrstatement is encountered,\nthe update does not take place. If there is a non-empty argument,\na message box displays and control is not returned until a selection\nis made."
        ],
        "example":[

        ]
    },
    {
        "name":"cu (character update) processing code",
        "Syntax":[
            "Syntax",
            "cu\n"
        ],
        "description":[
            "Description",
            "The cu processing code allows data in a defined attribute with an output-conversion (attribute 7) or correlative (attribute 8) to be changed character by character with the Update processor. The cu processing code is placed in the input-conversion (attribute 14). If cu is not specified, existing data is erased and nulled when editing is started.",
            "The cu processing code is required only when there is another conversion present in the attribute-defining item. For example, having a cu processing code within an attribute that contains a date and a corresponding d output-conversion code in its attribute-defining item allows changing part of the date field, rather than having to re-enter the entire date."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"d (date) processing code",
        "Syntax":[
            "Syntax",
            " d {yr.pos}{options|outsep}\n"
        ],
        "description":[
            "The d processing code invokes the date conversion function to convert   an external date to internal format, or more commonly, to convert an internal date to one of many   available output formats. ",
            "By convention, day 0 (in internal format) on the D3 calendar is December 31, 1967. It was     selected in 1968 and has never been changed, thereby retaining compatibility. For example, June     26, 1987, has an internal value of 7117, which is the number of days since 12\/31\/67. It follows     that 7118 is June 27, 1987. Dates before 1968 are stored as negative numbers. For example,     December 30, 1967, is -1."
        ],
        "parameter":[
            "Parameter(s)",
            "yr.posSpecifies the number of display\ndigits for the year. For example, if the internal date is 7117, d2\nreturns 26 Jun 87. Valid entries are 0, 1, 2, 3, or 4. The default\nis 4. Assume current month and year on input.optionsCharacter options are defined\nas:dNumeric day of the month (1 through 31).fFull external date with alphabetic month, day of the month,\na comma, and 4-digit year (for example, October 9, 1990). Valid when\nused with theyr.posspecification. Not valid when\nused with theoutsepspecification.iThis is a special case used when data is stored in its internal\nrepresentation. It is typically used on the correlative attribute\nto convert an external date to its internal equivalent in the preprocessing\nphase of AQL. Any legal date conversion can be specified on the output-conversion\nattribute prior to displaying the date.jJulian day of the year (1 through 366).mNumeric month (1 through 12).maAlphabetic month (January, February, and so on).qNumeric quarter (1 through 4).wNumeric day of the week (1=Monday, 2=Tuesday, 3=Wednesday,\nand so on).waAlphabetic day of week (Sunday, Monday, and so on).yYear (default is four digits). Valid when used with theyr.posspecification. Not valid when used with theoutsepspecification.outsepSpecifies the output separation\ncharacter that delimits the month, day, and year values. Popular characters\nto use are -, as in 12-23-1955, or \/, as in 1\/16\/1997.If the output\nseparation character is omitted, then a space is assumed.The\noutput order is: 2-digit day, 3-digit month abbreviation, and year.\nThe number of year digits depends on the number of display digits\nfor the year (dd mmm yyyy or dd mmm yy format).eUses european date format regardless of current system default\nsettinguUses United States date format regardless of current system\ndefault settings",
            "The following table provides the valid formats to input dates through the Update processor or\n    when using thedprocessing code in aniconvstatement:",
            "FormatDescriptionmm\/dd\/yyDefault and any separator may be used (for example, 6*26*87).mm\/ddYear is the same as the system date.mmddYear is the same as the system date (when in standard format).ddMonth and year are the same as the system date. It is necessary\nto use the dn variant to get this functionality.dd\/mm\/yyEuropean format.dd\/mmEuropean format.dddJulian date (1 through 366).yydddJulian date (five digits).yymmddMilitary date if in US mode.ddmmyyMilitary date if in European mode.",
            "If thedprocessing code is used as\nan input-conversion in the Update processor, a period (.) may be entered to duplicate the last date entered. The forward-slash\n(\/) by itself may be used to insert the current day\u2019s date.",
            "If thedprocessing code is specified as an input-conversion,\nno codes are required for input date conversion except for the Julian\nand European formats, since the format is obvious in all other cases.\nIf thencharacter is added after thed, then the user can pass the numeric day of the month, and the function\nreturns the correct internal date assuming the current month and year.",
            "When thedprocessing code is used as an output-conversion,\nit converts the internal date to an external format.",
            "Thedprocessing code with no parameters converts legal date\nformats into the internal date (number of days from 12\/31\/67).",
            "When used in a BASIC program in anoconv()statement,\nthe results may be in either all uppercase, or in mixed upper\/lowercase.\nIf casing is off, then the output will be in upper\/lowercase. If casing\nis on, then the output will be in uppercase only."
        ],
        "example":[
            "Example(s)",
            "DataCodeSample Output10594d01 Jan 199710594d2-01-01-9710594d-01-01-199710594d001 Jan10594d0-01-0110594dd11\/1\/97di1059410677dj8410594dm110594dmaJanuary10594dq110594dw310594dwaWednesday10594dy199710594d2y97-10594d429 Dec 1938",
            "CAUTION:",
            "When entering date values in the Update processor, care should be taken to\n    enter the date properly. The system converts the entry to an internal number, then converts it\n    back to a date and displays it. Sometimes the date conversion method appears to be inconsistent,\n    and displays a different value:Entered:Internal julian day:01\/01\/011205501.01.01120551\/1\/1null - invalid date entry1.1.1null - invalid date entryFor convenience of entry on input-conversions, 2-digit year entries are interpreted\n     as (19)30 to (20)29, so the dates 01\/01\/00 to 12\/31\/29 converts to the internal representation\n     for the years 2000 to 2029. To enter the years 1900 to 1929, then it is necessary to enter all\n     four digits of the year.The functionality for mask and date conversions is not intuitive when combined with selection\n     criteria in an AQL sentence. If a mask or date conversion exists in the output-conversion\n     (attribute 7), that conversion is applied to the selection criteria in an AQL statement. For\n     instance, in the sentence:select filename with attr \"90]\"where the data contains such values as 9000, 9010, 9020, and so on, the\"90]\"is converted by anmr2to\"9000]\". The logic is to convert the selection criteria once, rather than\n     converting each value that is processed by theselectcommand. Moving themr2to the correlative attribute (attribute 8) bypasses the conversion to\n     the selection criteria."
        ]
    },
    {
        "name":"d (dependent value) processing code",
        "Syntax":[
            "Syntax",
            "d;ac\n"
        ],
        "description":[
            "The d processing code defines the dependent attribute in a control\/dependent pair of correlated MultiValues; the controlling attribute must contain a c code. The attribute count specified in the attribute count parameter must contain the c code and attribute count of the controlling attribute. Note that this function belongs in attribute 4 of the item."
        ],
        "parameter":[
            "Parameter(s)",
            "acSpecifies the attribute count of the controlling attribute."
        ],
        "example":[
            "Example(s)",
            "In the example below,order#is thecontrollingattribute and controls\nthe values in attributes 4, 5, and 6. Each of these three controlled\nattributes must indicate in their corresponding attribute-defining\nitems that they are dependent upon attribute\u00a03.",
            "id:   order#   quantity   price   ext.price\n001   a        a          a       a\n002   3        4          5       6\n003\n004   c;4;5;6  d;3        d;3     d;3"
        ]
    },
    {
        "name":"encrypt processing code",
        "Syntax":[
            "Syntax",
            " encrypt attrn1,attrn2,attrn3"
        ],
        "description":[
            "Description",
            "The encrypt processing code is field-level encryption functionality   that  works with the encrypt-file and decrypt-file   commands.",
            " ",
            "For items that have        field-level encryption, there is an encrypt marker on each encrypted attribute that indicates        which attributes need to be decrypted.",
            "When an item is retrieved from the file, it will know which type of encryption is on the item     (field-level or the entire item) and will decrypt the item accordingly. ",
            "Ensure that you run the commands to change the state of the data."
        ],
        "parameter":[
            "Parameter(s)",
            "attrn1First numeric attribute number.attrn2Second numeric attribute number.attrn3Third numeric attribute number (and so on).",
            "For example:encrypt 2,5,8"
        ],
        "example":[

        ]
    },
    {
        "name":"f (f-correlative) processing code",
        "Syntax":[
            "Syntax",
            "f{;}element{;element...}\n"
        ],
        "description":[
            "The f-correlative is used in the conversion (attribute 7), correlative (attribute 8), and input-conversion (attribute 14) attributes of attribute-defining items to create and modify the associated attribute value using various mathematical and logical operations."
        ],
        "parameter":[
            "Parameter(s)",
            "elementElements in anf-correlative are operands\nand operators in reverse Polish notation separated by semicolons.Operands:as each operand is encountered scanning from\nleft to right, its value ispushedonto a stack. For example,\napush-downstack is usually compared with the spring loaded\nmechanism that loads, stores, and dispenses saucers in a restaurant.Operators:operate on the top entries in the stack.\nFor example, the+addition operator,popsand adds the top two entries in the stack together and then pushes\nthe result back onto the stack."
        ],
        "example":[

        ]
    },
    {
        "name":"g (group extract) processing code",
        "Syntax":[
            "Syntax",
            "g{skip.segments} delimiter get.segments\n"
        ],
        "description":[
            "The g processing code extracts one or more groups of contiguous character substrings delimited by the specified character."
        ],
        "parameter":[
            "Parameter(s)",
            "skip.segmentsSpecifies the number of delimited\ngroups to skip before performing the extraction. If omitted, zero\nis assumed, and extraction occurs from the beginning of the value.delimiterAny single printable character\nexcluding integers and these characters:_segment mark (SM)^attribute mark (AM)]value mark (VM)\\subvalue mark (SVM)get.segmentsSpecifies the number of contiguous\ngroups to extract from the value."
        ],
        "example":[
            "Example(s)",
            "The example below illustrates\nthe results obtained from various combinations of thegcode if the value being processed was the string:",
            "ca*92714*1000\ng*1   ca\ng0*1  ca\ng*3   ca*92714*1000\ng1*2  92714*1000\ng2*1  1000\ng2*2  1000\ng3*1  (null)"
        ]
    },
    {
        "name":"i (index) processing code",
        "Syntax":[
            "Syntax",
            "i{sub.code}{root.fid} a.code\n"
        ],
        "description":[
            "Description",
            "The i processing code is stored in the correlative (attribute 8) of the file-defining items to maintain index keys. The root FID (VME only) is inserted by the system and must not be altered.",
            "When an index is created using the create-index command, the system inserts the i code in attribute 8 of the file-defining item along with the root FID and the a\u00a0processing code.",
            "If data is present and the index processing code is added directly to the file-defining item, the pre-existing items are not added to the index until they are filed. Any new items or pre-existing items that are subsequently filed are automatically added.",
            "If data is present and the create-index command is issued, the file-defining item is automatically updated with the index processing code and added to the index. During the creation of the index, a counter displays on the screen indicating the number of items added to the index."
        ],
        "parameter":[
            "Parameter(s)",
            "sub.codeCIndicates a case-sensitive index.NIndicates a numeric index.root.fidBeginning (FID) address of the\nindex.a.codeDefines the method by which the\nindex keys are generated. It must be a validaprocessing\ncode and reference at least one attribute count within the file. Translates\nshould only be used in accordance with thes (subindex) processing code."
        ],
        "example":[

        ]
    },
    {
        "name":"i (local index) processing code",
        "Syntax":[
            "Syntax",
            "i\n"
        ],
        "description":[
            "The i processing code indicates that an index exists for the current attribute. It must be defined in the attribute-defining item that corresponds to a local B-tree index previously created with a create-index command.",
            "This processing code is supported only from the VME."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "Create an index on attribute\n1:",
            "create-index filename a1",
            "Theiprocessing code must be added\nto the input-conversion attribute of the corresponding attribute-defining\nitem before the index may be used by the Update processor.",
            "Create\nan index consisting of attribute 1 concatenated with attribute 2:",
            "create-index filename a1:2"
        ]
    },
    {
        "name":"i (remote index) processing code",
        "Syntax":[
            "Syntax",
            "Ifile.reference;a.code\n"
        ],
        "description":[
            "Description",
            "The i processing code is used as an input-conversion (attribute 14) and indicates that this attribute is based on data indexed in another file. When editing data in this attribute, the user can cruise both forward and backward through the index in the specified secondary file.",
            "Data displayed is subject to the conversion codes in the primary file dictionary. If the algebraic code is other than the item-ID of the secondary file, a translation (tfile) processing code must be specified to allow cruising through the secondary file index.",
            "This processing code is supported only from the VME.",
            "In the Update processor, the index code allows zooming (moving through a defined doorway to another file). By pressing CTRL+G when the cursor is at the end of the attribute, the user accesses the item addressed by the value of the attribute. A file exit command returns the user to the previous screen. The view displayed is subject to the processing codes in the dictionary of the secondary file. The secondary file attributes displayed when zooming can be specified in attribute 15 of the attribute-defining item of the primary file. If they are not specified, the default displays the attributes defined on the macro dictionary of the remote file-defining item.",
            "Both an i (local index) and an ifile.reference;a.code (remote index) processing code can be specified in an input-conversion. When these two processing codes are specified in the same attribute-defining item, CTRL+D and CTRL+F function differently depending on the order. If the ifile.reference;a.code code is specified before the i code, and if either CTRL+D or CTRL+F is pressed, the Update processor accesses the index specified by the first code in the secondary file and gets the previous or next attribute value for the specified index key. The Update processor uses the index in the secondary file as it would use an index in the primary file. If the i code is specified first, the index in the primary file is used when CTRL+D or CTRL+F is pressed."
        ],
        "parameter":[
            "Parameter(s)",
            "file.referenceName of the secondary file to which the primary file is indexed.a.codeIndicates the algebraic code indexed in the secondary file."
        ],
        "example":[

        ]
    },
    {
        "name":"id (item ID) processing code",
        "Syntax":[
            "Syntax",
            "id{subcode}\n"
        ],
        "description":[
            "The id processing code is used by the Update processor to create new   item-IDs. Originally implemented for the Update Processor, it was later implemented for all write   operations within the D3 Windows FSI to facilitate transaction enqueuing for FSI Hot Backup. "
        ],
        "parameter":[
            "Parameter(s)",
            "subcodea.codeUses the specifiedaprocessing code to create the item-ID. Since anaprocessing code can call a FlashBASIC program, any user-defined\n        item-ID can be created.Example:ida1creates an ID based on the first attribute of the item.n(integer number) Creates numeric item-IDs, starting withn. As a\n        protective mechanism to avoid the case ofsteppingon existing item-IDs, if the\n        item-ID already exists in the file,nis automatically incremented until\n        a unique item-ID is found. The system updates the value in the processing code with the\n        latest value.Example:id1will first create item-ID 2, then increment until the ID reaches the\n         maximum value stored in the File Control Block. Once this value is reached, the process\n         starts over at 1.Warning:If all item-IDs already exist on file, the next\n         item in line will be overwritten.n{-m}FSI Only:(integer number) Creates numeric item-IDs, starting withnand ending withmminus one. As a protective\n        mechanism to avoid the case ofsteppingon existing item-IDs, if the item-ID already\n        exists in the file,nis automatically incremented until a unique item-ID\n        is found. The system updates the value in the processing code with the latest value. Them(maximum) option restarts at the item-ID at 1 once it reaches the\n        maximum specified item-ID number.Example:id1-4will first create item-ID 2, then 3 then 1. 4 will not be\n         used.Warning:If all item-IDs already exist on file, the next item in line\n         will be overwritten.tCreates new item-IDs by concatenating the internal date with the internal time, measured in\n        seconds. If two item-IDs are assigned within the same second, an alphabetic character,\n        starting with the lettera, are appended to the item-ID to ensure that\n        each item-ID is unique (see thesystem(19)BASIC function in thesystem() functiontopic).Example:idtcallVME Only:Uses a BASIC or FlashBASIC subroutine to create the item-ID.Example:idcall dm,bp,\n         idncall.subSubroutine:subroutine idncall.sub(id)\nid=whatever\nreturn"
        ],
        "example":[

        ]
    },
    {
        "name":"if (if\/then) processing code",
        "Syntax":[
            "Syntax",
            "if condition{then a-correlative} {else a-correlative} {end}\n"
        ],
        "description":[
            "The if processing code is used in dictionary attributes 7 and 8 (conversion and correlative) to generate values based on results of evaluation of expression according to the rules of a-correlative construction.",
            "The if processing code is a stand-alone version of the if conditional allowable within an a-correlative. If the condition evaluates to true (nonzero) the a-correlative following  then is executed. If there is no then clause a null value is returned on true.",
            "If the condition evaluates to 0 (false), the else clause is taken. Multiple complex conditionals can be constructed by using end to close the current if clause and associate else with the prior if clause."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "if 2#4 then 4:\u2019**\u2019:2",
            "if 14[\"1\",\"3\"]=\u2019sco\u2019 then 17"
        ]
    },
    {
        "name":"l (length) processing code",
        "Syntax":[
            "Syntax",
            "Ln{,m}\n"
        ],
        "description":[
            "The l processing code either restricts processing to values that fall within certain length restrictions or displays the length of a given value."
        ],
        "parameter":[
            "Parameter(s)",
            "nThe value will be output only if the length of the string\nis equal to the specified length; otherwise a null is returned. If\nthe length specified is 0, the length of the data is returned. If\na maximum (m) length is specified, thennrepresents the minimum length and the value will be output\nonly if the length of the string is equal to or greater than the minimum\nvalue and equal to or less than the maximum value. Otherwise a null\nis returned.mIf specified, the value will be output only if the length\nof the string is equal to or greater than the minimum specification\n(n) and equal to or less thanm. Otherwise a null is returned."
        ],
        "example":[
            "Example(s)",
            "Returns the total field length\nof all characters in the field.",
            "L0",
            "Outputs data if the field length is exactly nine characters.",
            "L9",
            "Outputs data if the field length is greater than or equal\nto three characters and less than or equal to nine.",
            "L3,9"
        ]
    },
    {
        "name":"m (mask) processing code",
        "Syntax":[
            "Syntax",
            "m{l|r} {{precision} {scalefactor}} {z} {,} {signcode} {$} {format.mask}\n"
        ],
        "description":[
            "The m processing code is a masking conversion used for both   numeric and text string formatting. This conversion is quite complex because nearly all of the   elements available in its syntax are optional. The elements are listed in the order that the   system evaluates the expression. If an element is going to be used, it must be in the same order   shown. Each of the elements available is discussed."
        ],
        "parameter":[
            "Parameter(s)",
            "l|rIndicates the justification of\nthe string.Uselfor left justification. Left justification\nis used primarily for text stringsUserordfor right\njustification. Right justification is typically used to process decimal\nnumbers.precisionIndicates the number of decimal\npositions to print after the decimal point. It must be between 0 and\n9. When omitted, this defaults to 0. If 0 is assumed or specified,\nno decimal point is printed.scalefactorIndicates the power to which\nthe value is to be descaled. It must be between 0 and 9. There is\nno default value.When aprecisionis specified\nwithout ascalefactor, thescalefactordefaults to theprecisionvalue. (mr2is identical tomr22).z(literal) Suppresses leading\nzeros (that is, 0003 becomes 3) and thereby suppresses 0 balance fields.,Inserts commas in the thousands\nand millions position on output.signcodeAlters the normal handling of\nnegative numbers, with the exception of the d signcode. Their functions\nare:cNegative values are followed bycr.dPositive and zero values are followed bydb.eNegative values are enclosed in angle brackets;<value>. Zero values have a space preceding and following them.mNegative numbers are followed by a minus sign.nSuppresses (leading) minus sign on negative numbers.$Appends a dollar sign to the\nvalue prior to justification.format.maskCan be any combination of literals\nand specialfilloperators listed below.format.maskcan itself be enclosed within parentheses. When it is enclosed in\nparentheses, any alphabetic characters (and all punctuation characters\nexcept#,%, and*) can be specified as literal strings.nJustify data in a field ofnspaces.*nJustify data in a field ofnasterisks\n(*).%nJustify data in a field ofnzeroes (0).xnJustify data in a field ofncharacters,\nwherexis the fill character.xcan only be one of these three characters:# * %stringAny amount of nonformat mask characters may be specified in\nthe string. It is printed exactly as specified in the format mask.",
            "When masking decimal numbers, precision and scaling can\nbe used to round numbers. For example, an internally stored number\nis 56789. This number has four implied decimals. The mask,mr4, indicates that bothscalefactorandprecisionare 4. This returns a result of\n5.6789.",
            "Theprecisionandscalefactorneed not be the same. Consider the situation where this number is\nto be scaled by four places, but the result needs two decimals of\nprecision. The conversion to accomplish this is,mr24. Passing 56789 through the conversion,mr24,\nfirst scales by 4 and then rounds to two decimals resulting in the\ndecimal number, 5.68.",
            "CAUTION:",
            "The functionality for\nmask and date conversions is not intuitive when combined with selection\ncriteria in an AQL sentence. If a mask or date conversion exists in\nthe output-conversion, that conversion is applied to the selection\ncriteria in an AQL statement. For instance, in the sentence:select filename with attr \"90]\"where the data contains such values as 9000, 9010, 9020,\nand so on, the\"90]\"is converted by anmr2to\"9000]\". The logic is to convert\nthe selection criteria once, rather than converting each value that\nis processed by theselectcommand. Moving themr2to the correlative attribute bypasses the conversion\nto the selection criteria."
        ],
        "example":[
            "Example(s)",
            "This chart shows the effect of\ntaking a data value and passing it through theoconvfunction:",
            "DataConversionSample Output12345mr2123.4512345mr02123123456mr2,$$1,234.56123456mr02,$$1,2350mrz(none)0mr2,z$(none)123456mr2,e1,234.56123456mr2,d1,234.56db-123456mr2,e<1,234.56>-123456mr2,c1,234.56cr-123456mr2,m1,234.56--123456mr2,n1,234.56123456mr24,12.35123456mr02,$$1,235-123456mr2,$$-1,234.56-123456mr2,e$<$1,234.56>-123456mr2,c$$1,234.56cr123456mr2,c$$1,234.56123456mr(%10)0000123456123456mr2(%10)0001234.56123456mr(*10)****123456123456mr2(*10)***1234.56123456mr2,$*12***$1,234.567145551212ml((###)###-####)(714)555-12127145551212ml(###-###-####)714-555-12127145551212ml(#3-#3-#4)714-555-1212123456mr2$(#10)$ 1234.56123456mr2($#10)$1234.56123456mr(#3 plus #3)123 plus 456123456mr2412.35"
        ]
    },
    {
        "name":"mc (mask character) processing code",
        "Syntax":[
            "Syntax",
            "mc{\/}code\n"
        ],
        "description":[
            "The mc processing code invokes one of many available processing codes   available for special processing on numeric and alphabetic strings of characters. Multiple    mc conversions may be placed on the same attribute in an attribute-defining   item, provided that each is delimited by a value mark."
        ],
        "parameter":[
            "Parameter(s)",
            "codeStrings of characters.\/aRetrieves only the nonalphabetic characters from a given data\nvalue.\/anRetrieves only the characters that are neither alphabetical\nnor numerical from a given data value.mc\/nais\na synonym for this command.\/nRetrieves only the nonnumeric characters from a given data\nvalue.aRetrieves only the alphabetic characters from a given data\nvalue.anRetrieves only the alphabetic and numeric characters from\na given data value.mcnais a synonym for this\ncommand.dxConverts all decimal numbers in a given value to their corresponding\nhexadecimal equivalent.iInverts the characters in a given string of data.lConverts all characters in the given value to lowercase characters.nRetrieves only the numeric characters from a given data value.pConverts all nonprintable (control) characters in a given\nvalue to periods.Nonprintable characters are those between the\nhexadecimal values x\u201900\u2019-x\u20191f\u2019 and those between x\u20197f\u2019-x\u2019fb\u2019. Note\nthat the characters above x\u20197f\u2019 display, but actually have different\ncharacter meanings as their high order bit is lost.sCapitalizes the first letter in each sentence.tCapitalizes the first character after any nonalphabetic character\nin a given value.uConverts all characters in the given value to uppercase characters.xdConverts all hexadecimal numbers in a given value to their\ncorresponding decimal equivalent."
        ],
        "example":[
            "Example(s)",
            "Outputs1200(1200followed by two spaces).",
            "string = \"1200 Main Street\"\ncrt oconv(string,\"mc\/a\")",
            "This outputs as shown below, all alphanumeric characters\nhaving been stripped:",
            "string = \"1200 Main Street...\"\ncrt oconv(string,\"mc\/an\")",
            "OutputsMain Street(note the space beforeMain).",
            "...\nstring = \"1200 Main Street\"\ncrt oconv(string,\"mc\/n\")",
            "OutputsMainStreet(the numbers and embedded\nspaces are stripped).",
            "string = \"1200 Main Street\"\ncrt oconv(string,\"mca\")",
            "Outputs1200MainStreet(the spaces and\nthe periods are stripped).",
            "string = \"1200 Main Street...\"\ncrt oconv(string,\"mcan\")",
            "Displaysinternal = 16andexternal\n= A.",
            "number = 10\ncrt \"internal = \" : iconv(number,\"mcdx\")\ncrt \"external = \" : oconv(number,\"mcdx\")",
            "This returns the string\"fedcba\".",
            "oconv(\"abcdef\",\"mci\")",
            "Displaysupper and lowerin all lowercase.",
            "string = \"UPPER And lower\"\ncrt oconv(string,\"mcl\")",
            "Outputs1200(the letters and embedded\nspaces are stripped).",
            "string = \"1200 Main Street\"\ncrt oconv(string,\"mcn\")",
            "DisplaysThis is. A demo. Of the. MCS code.",
            "string = \"this is. a demo. of the. MCS code\"\ncrt oconv(string,\"mcs\")",
            "DisplaysThis Is. A Demo. Of The. Mct Code.",
            "string = \"this is. a demo. of the. MCT code\"\ncrt oconv(string,\"mct\")",
            "DisplaysUPPER AND LOWERin all uppercase.",
            "string = \"UPPER And lower\"\ncrt oconv(string,\"mcu\")",
            "Outputs6898.",
            "crt oconv(\"1AF2\",\"mcxd\")"
        ]
    },
    {
        "name":"mi (must input) processing code",
        "Syntax":[
            "Syntax",
            "mi\n"
        ],
        "description":[
            "The mi processing code is used as an input-conversion code (attribute 14) and prohibits filing an item if any attribute defined with an mi code is null."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"mp (mask packed decimal) processing code",
        "Syntax":[
            "Syntax",
            "mp\n"
        ],
        "description":[
            "The mp processing code is used for converting a value to a packed decimal value or a packed decimal value to a value."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"ms (mask alter sort) processing code",
        "Syntax":[
            "Syntax",
            "ms\n"
        ],
        "description":[
            "Description",
            "The ms processing code alters the normal sort sequence of characters.",
            "The ms processing code sorts an attribute in a sequence specified by the item called seq in the messages file. This is only used on an attribute defined as a sort key; therefore this code must be applied as a correlative (attribute 8) and is not available for use in FlashBASIC.",
            "The seq item must be manually added to the messages file using the suggested format:"
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"mt (mask time) processing code",
        "Syntax":[
            "Syntax",
            "mt{h}{s}\n"
        ],
        "description":[
            "The mt processing code invokes the time conversion function to convert external time representations to internal format or to convert internal time values to one of a variety of external time formats.",
            "The internal time format is the number of seconds from midnight. The external time format is 24-hour military format (for example, 23:25:59) or 12-hour format (for example, 11:25:59PM).",
            "For input-conversion, the time is entered with am or pm immediately following the numeric time. If none is entered, am is assumed. On output, am or pm is always printed immediately following the numeric time.",
            "When used as an input-conversion, the mt code validates the time and converts it to the internal format of seconds from midnight. When updating a field controlled by an mt conversion, the \/ character can be used to insert the current time into the attribute."
        ],
        "parameter":[
            "Parameter(s)",
            "hSpecifies a 12-hour clock. Default is (military) a 24-hour\nclock. When specifying thehparameter, the range\nof values for the internal format representation are from 0 to 86399.sIncludes seconds in output value. If omitted, seconds are\nnot listed on output."
        ],
        "example":[
            "Example(s)",
            "DataCodeSample Output3600mt01:003600mth01:00am3600mts01:00:003600mths01:00:00am46800mt13:0046800mth01:00pm3630mts01:00:3046800mths01:00:00pm"
        ]
    },
    {
        "name":"mx (mask ASCII to hexadecimal) processing code",
        "Syntax":[
            "Syntax",
            "mx\n"
        ],
        "description":[
            "The mx processing code converts all ASCII characters in a given value to their corresponding ASCII-hexadecimal equivalent. The characters are converted one at a time to 2-digit hexadecimal numbers. The my code is the inverse of the mx code."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "DataConversionSample Output123mx313233abcmx616263a dogmx6120646F67"
        ]
    },
    {
        "name":"my (mask hexadecimal to ASCII) processing code",
        "Syntax":[
            "Syntax",
            "my\n"
        ],
        "description":[
            "The my processing code converts all ASCII hexadecimal characters in a given value to their corresponding ASCII equivalent. The characters are converted two at a time to 1-digit ASCII characters. The mx code is the inverse of the my code."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "DataConversionSample Output313233my123616263myabc6120646F67mya dog"
        ]
    },
    {
        "name":"o (sort values ascending) processing code",
        "Syntax":[
            "Syntax",
            "o\n"
        ],
        "description":[
            "The o processing code sorts the values in the specified attributes in ascending order. The values are sorted when the item is filed.",
            "While this can be used in the correlative attribute of an attribute-defining item, it causes the screen to refresh with each value added. To prevent this from occurring, it is advised that this processing code be placed on the correlative attribute of the file-defining item using the format listed below."
        ],
        "parameter":[
            "Parameter(s)",
            "attribute.numberAttribute to sort in ascending order.",
            "In file-defining items, theoprocessing\ncode may only be used in the correlative attribute. The first semicolon\nis optional.",
            "If you attempt to file or restore a sort values-ascending\n(file-defining items) in an FSI file-defining item, it will be commented-out\nwith an asterisk (*).",
            "This processing code\nis supported only from the VME.",
            "When the item is filed, the\nvalue in the attributes specified by the attribute number is\/are sorted\nand replaced in ascending alphabetic (a-z) order. If an attribute\nis not already sorted, adding this processing code sorts the attribute\nthe next time the item is filed."
        ],
        "example":[

        ]
    },
    {
        "name":"p (pattern match) processing code",
        "Syntax":[
            "Syntax",
            "p(matchstring){;(matchstring...)}\n"
        ],
        "description":[
            "Description",
            "The p processing code tests a value and determines if it matches a predetermined pattern matchstring composed of alphabetic, numeric, or literal characters.",
            "The p processing code may be used as an output-conversion (attribute 7) or input-conversion (attribute 14). As an input-conversion, the p code verifies input. Multiple pattern matchstrings must be separated by semicolons.",
            "In all of the above cases that support a number, the exact number must be met or found to accept the data. Zero as the number allows for any number, including 0, to be accepted.",
            "Multiple matchstring parameters will accept the data if any of the matchstrings are met. If the data matches the pattern exactly, the data is returned. If the data does not match, null is returned."
        ],
        "parameter":[
            "Parameter(s)",
            "pattern.maskPattern of literal characters\nand codes (below) that must exactly match the data. A pattern mask\nis one of these characters (n,a, orx) preceded by a number to indicate the number\nof characters for that value. The mask must be enclosed in parentheses.\nThere may be more than one pattern code, separated by semicolons.\nAs long as the value matches at least one of the pattern codes, the\ntest is a success.mnTest formnumeric characters (0-9). The\ncharacters+ - , .are not considered numeric here.maTest formalphabetic characters (A-Z and\na-z).mxTest for anymcharacters except spaces.stringTest to match a literal string. If this is used in combination\nwith the patterns above, enclose the string in double quotes. Ifmis zero, the system tests for all characters to match\nthe specified type."
        ],
        "example":[

        ]
    },
    {
        "name":"r (range) processing code",
        "Syntax":[
            "Syntax",
            "rmin,max{;min,max...}\n"
        ],
        "description":[
            "The r processing code invokes the range function, and restricts processing to those values that fall within given minimum and maximum range restrictions. Multiple range specifications allow display of the data value if the data value falls between any of the range pair sets. In using multiple range set specifications on negative values, the ranges should be in ascending sequence, beginning with the lowest."
        ],
        "parameter":[
            "Parameter(s)",
            "min,maxSpecifies minimum and maximum range restrictions."
        ],
        "example":[

        ]
    },
    {
        "name":"s (subindex) processing code",
        "Syntax":[
            "Syntax",
            "s<File1>;<AMC>;a<n>(t<File2>;<c>;;<AMC>)\n"
        ],
        "description":[
            "The s (Subindex) processing code is used to update an index that uses a file translation if the value in the translate file changes. This processing code is set from Attribute 8 of the File Definition Item for the data section of a translate file."
        ],
        "parameter":[
            "Parameter(s)",
            "<File1>A file having the index:a<n>(t<File2>;<c>;;<AMC><AMC>The attribute in the translate item containing the translated\ndata.<n>The primary attribute number for the index.<File2>The translate file.<c>Translate subcode."
        ],
        "example":[
            "Example(s)",
            "CREATE-FILE MYMAIN 1 1\nCREATE-FILE MYTRANS 1 1\nCREATE-INDEX MYMAIN A1(TMYTRANS;X;;1)",
            "Put the subindex processing code on attribute 8 of DICT\nMYTRANS MYTRANS.",
            "sMYMAIN;1;A1(TMYTRANS;X;;1)",
            "To see it used, create two items in the MYTRANS file:",
            "1\n001 same\n\u00a0\u00a0\u00a02\n001 diff",
            "... then create several items in the MYMAIN file:",
            "a\n001 1\n\u00a0\u00a0\u00a0b\n001 2\n\u00a0\u00a0\u00a0c\n001 1\n\u00a0\u00a0\u00a0d\n001 2",
            "... then create the following program and compile it:",
            "bp subidx\n001 root \"mymain\", \"A1(TMYTRANS;X;;1)\" to rX else stop\n002 sKey=''\n003 sId=''\n004 loop\n005 \u00a0\u00a0key('n',rX,sKey,sId) else stop\n006 \u00a0\u00a0print sId\n007 repeat",
            "Traversing the index at this point, using the above program,\nthe item-id order should be \"b,d,a,c\" since \"diff\" sorts before \"same\".\nHere is the output of the program at this point:",
            ":run bp subidx\nb\nd\na\nc",
            "Change item 2 in MYTRANS from \"diff\" to \"update\", and\nthe change should be reflected in the index.",
            ":ed mytrans 2\ntop\n.\n001 diff\neoi 001\n.r\n001 update\neoi 001\n.fi\n[221] '2' filed.",
            "Now, traversing the index from the start should return\nthe item-ids in the order, \"a,c,b,d\", since \"same\" sorts before \"update\".\nHere is the output of the program now:",
            ":run bp subidx\na\nc\nb\nd\n:"
        ]
    },
    {
        "name":"s (substitution) processing code",
        "Syntax":[
            "Syntax",
            "s;attrnum1|text|*;attrnum2|text\n"
        ],
        "description":[
            "Description",
            "The s processing code substitutes either a data value from the referenced attribute or literal text when the current data value is null or zero.",
            "The s processing code returns the value defined by attribute number 2 if the value for conversion is null or 0; otherwise, the value of attribute number 1 is returned. Both attribute number 1 and attribute number 2 can be an attribute number or text string."
        ],
        "parameter":[
            "Parameter(s)",
            "attrnum1Value to substitute if the attribute value tested is not null\nor zero. Can be an attribute number or literal text enclosed in single\nquotes.attrnum2Value to substitute if the attribute value tested is null.\nCan be an attribute number or literal text enclosed in single quotes.textContains the literal text string.*Displays the original data value, if it is not null or 0;\notherwise, the second argument displays. This feature can be used\nas the first parameter of anfprocessing code\nin the form:fattrnum(s;*;\u2019text\u2019)The asterisk can also be embedded within an a processing\ncode. Substitution is used in an a (algebraic) processing code as\nan alternative to thethen\/elseconstruct."
        ],
        "example":[
            "Example(s)",
            "These a-correlatives produce\nidentical results:",
            "aif n(sales)>=\"1000000\" then \"made it\" else \"trouble\"",
            "a(n(sales)>=\"1000000\")(s;\"made it\";\"trouble\")",
            "The following checks for the existence of a shipping address\nin attribute 20. If not there, show the billing address in attribute\n10.",
            "a(20)(S;*;10)"
        ]
    },
    {
        "name":"t (text extraction) processing code",
        "Syntax":[
            "Syntax",
            "t{start.column,}length\n"
        ],
        "description":[
            "The t processing code provides a facility for extracting any number of characters from an attribute, starting at the position and length specified."
        ],
        "parameter":[
            "Parameter(s)",
            "start.columnSpecifies the position for extracting characters from an attribute.\nIf not specified, the extraction begins from the same end of the string\nas the justification attribute 9, eitherl(left)\norr(right). The start column must be numerical.lengthSpecifies the length of extracted characters.The length\nis always counted from left to right, regardless of the justification\nspecified in the attribute-defining item. The length must be a numeric."
        ],
        "example":[
            "Example(s)",
            "This extracts ten characters,\nbeginning from the third position of the string.",
            "t3,10"
        ]
    },
    {
        "name":"t (translate) processing code",
        "Syntax":[
            "Syntax",
            "t{dict}file.reference;subcode{[vc[,svc]|*]};inac;outac{;breakac}\n"
        ],
        "description":[
            "The t processing code uses the presented value as an item-ID and attempts to retrieve the corresponding item in another file to obtain a value from one of its attributes to substitute.",
            "The attribute referenced in attribute 2 of the attribute-defining item is assumed to represent an item-ID in the specified file reference, except in cases where the item-id is derived, such as in the case f;3;2;*(tabc;x;;1)."
        ],
        "parameter":[
            "Parameter(s)",
            "file.referenceName of the lookup file.subcodeDesignates how to behave if the\nrequested item is not on the lookup file. Availablesubcodeoptions are:cIf the item in the translate file does not exist or the specified\nattribute is null, the original value is used.iVerifies input only. This subcode option functions as avsubcode for input, and as acsubcode\nfor output.oVerifies output only. This subcode functions as acsubcode for input and as avsubcode\nfor output.vSpecifies that the item-id must exist in the lookup file and\nthe specified attribute must have a value; otherwise, an error message\ndisplays. This is for verification only and the item-ID is the only\ndata returned.xIf the item in the translate file does not exist or the specified\nattribute is null, a null value is returned.vcValue count is used with MultiValue\nattributes, and specifies the MultiValue position to be returned.\nFor example, if an attribute contains six MultiValues, and the value\ncount is four, the fourth MultiValue is returned. If the specified\nMultiValue contains subvalues, the subvalues are returned concatenated\nwith spaces. Alternately, an asterisk can be specified as the value\ncount, when following thecorxsubcode.If the value count is not specified, all the MultiValues\nin the attribute are returned, concatenated with spaces.svcOptional. Sub-value count is used within a MultiValue and\nspecifies the subvalue position to be returned. For example, if a\nMultiValue contains six subvalues, and the value count is four, the\nfourth subvalue is returned.Can only be specified if a value count\nis specified.*Used when translating a MultiValue\nattribute into a MultiValue attribute. For example, when processing\nthe third value of a MultiValue attribute, the third value of the\ntranslated attribute is returned. If the corresponding value does\nnot exist, a null is returned.inacInput attribute count specifies\nthe attribute number used as the item-ID in the file specified by\nthe file reference, and the translated value is retrieved from the\nattribute specified by the input attribute count. If the input attribute\ncount is not specified, no input translation takes place.outacOutput attribute count specifies\nthe attribute number used for output. When a listing is generated\nusing AQL, the attribute values specified are looked up in the file\nspecified by the file reference and the attribute specified by the\noutput attribute count is listed instead of the original value.breakacBreak attribute count, if specified,\nis used instead of the output attribute count (outac) during the listing\nof break-on and total lines."
        ],
        "example":[

        ]
    },
    {
        "name":"u (user exit) processing code",
        "Syntax":[
            "Syntax",
            "u mode.ID\n"
        ],
        "description":[
            "AQL user exits allow direct access to system functions."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"v (value limit) processing code",
        "Syntax":[
            "Syntax",
            "vnumber\n"
        ],
        "description":[
            "The v processing code specifies the maximum number of values allowed in an attribute when as an input-conversion (attribute 14). If the v processing code is not defined, there is no limit to the number of values available in an attribute."
        ],
        "parameter":[
            "Parameter(s)",
            "numberSpecifies the number of values allowed and can be any integer\nnumber. If the number is 0, data cannot be entered and any data present\nis nulled."
        ],
        "example":[
            "Example(s)",
            "Allows only three values to be\nentered in this attribute.",
            "v3"
        ]
    },
    {
        "name":"v (within) processing code",
        "Syntax":[
            "Syntax",
            "v;;n\n"
        ],
        "description":[
            "The v processing code is used by the within connective and must be placed in the correlative attribute 8 of the file-defining item (D-pointer).",
            "If you attempt to file or restore a within in an FSI file-defining item, it will be commented-out with an asterisk (*).",
            "This processing code is supported only from the VME."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "Suppose that in the dictionary\nof the hypothetical file,parts, that the correlative attribute\nof the D-pointer to parts contains the processing code,v;;1, which means to explode on attribute 1.",
            "The sentence:",
            "list within parts \u2019car\u2019",
            "Produces the output:",
            "level          Parts......\n1              car\n2              engine\n2              wheel\n3              tire\n3              rim\n2              hood\n[405] 6 items listed out of 1 items.\n\u00a0\n\u00a0\nlist parts\n\u00a0\nparts...\nwheel\ntire\nrim\nengine\nhood\ncar\n[405] 6 items listed out of 6 items.",
            "The hypothetical data could be examined with the command:",
            "ct parts car",
            "Produces the output:",
            "car\n001 engine]wheel]hood\nct parts engine\nengine\n001 flywheel]piston",
            "The flywheel and piston items do not exist in parts, so\nthey do not get exploded.",
            "ct parts wheel\nwheel\n001 tire]rim\nct parts tire rim hood\ntire          rim           hood\n001           001           001\n002 $35.00    002 $60.00    002 $70.00"
        ]
    },
    {
        "name":"x (Display Only) processing code",
        "Syntax":[
            "Syntax",
            "x\n"
        ],
        "description":[
            "The x processing code is used as an input-conversion (attribute 14) and indicates that the specified attribute is for display only. The attribute cannot be updated."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"x (update stamp) processing code",
        "Syntax":[
            "Syntax",
            "xtype ac{v}\n"
        ],
        "description":[
            "The x processing code is placed in the correlative of a file-defining item to provide an audit trail for items that are updated via the Update processor."
        ],
        "parameter":[
            "Parameter(s)",
            "typeType of stamp to use and can\nbe any of these:aPlaces the name of the user in the specified attribute when\nthe item is filed.dPlaces the current date in the specified attribute when the\nitem is filed.sAdds the total time (in seconds) the item was in the Update\nprocessor into the specified attribute. The value is cumulative. Each\ntime the item is updated, the current usage is added to the previous\ntime.tPlaces the current time in the specified attribute when the\nitem is filed.acAttribute count into which the\nstamp is to be placed.vSpecifies that each time the item\nis filed, the stamp is to be appended as a new value. If the value\nis not specified, the current stamp overwrites the previous entry.\nIf this option is placed at the end of the expression, all stamps\nwill be affected. For example,a3s5t6vproduces\nthe same results asa3vs5vt6v.Note:If it is intended\nthat only the time stamp be MultiValued, thevoption\ncannot be placed at the end of the expression as it will be applies\nto all stamps. Instead, you can reposition the time stamp in the expression\n(for example,t6va3s5).",
            "The audit stamp codes may be combined into more complex\nexpressions, such as:",
            "xa1d2t3v",
            "This example stamps attribute 1 with the user, attribute\n2 with the date, and attribute 3 with the time, adding subsequent\nstamps as MultiValues. If both the user and date stamps are specified\nwith thevoption, the system does not add another\nstamp if the user and date are the same. For example, (given a stamp\nsuch asxa3vd4v), if a stamp already exists for user\ndm on 09\/28\/94, and the same user updates the item on the same date,\nanother stamp is not added. This does not apply when specifying stamps\nseparately. For example:",
            "xa3v\nxd4v"
        ],
        "example":[
            "Example(s)",
            "Places the user-ID in attribute\n14.",
            "xa14",
            "Adds the current system date as the last value in a MultiValue\nset in attribute 15.",
            "xd15v",
            "This complex expression adds the user-ID in attribute\n3, the current date in attribute 4, and the current time in attribute\n5.",
            "xa3d4t5"
        ]
    },
    {
        "name":"xc (center) processing code",
        "Syntax":[
            "Syntax",
            "xc{column.width}\n"
        ],
        "description":[
            "The xc processing code centers the input string in a field of spaces."
        ],
        "parameter":[
            "Parameter(s)",
            "column.widthIf specified, thexccode centers the text\nwithin a field of column-width characters. If no column width is specified,\nthen the processing code looks forward to the attribute length specifier\nin the attribute-defining item.",
            "Note:If this processing code is used from BASIC or FlashBASIC,\nthen a column width specifier is required. For compatibility reasons,\na subvalue mark is allowed before the column width."
        ],
        "example":[

        ]
    },
    {
        "name":"xi (input conversion) processing code",
        "Syntax":[
            "Syntax",
            "xi\n"
        ],
        "description":[
            "The xi processing code forces any further conversions to be treated as   input-conversions."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"xo (output conversion) processing code",
        "Syntax":[
            "Syntax",
            " xo\n"
        ],
        "description":[
            "The xo processing code forces any further conversions to be treated as output-conversions."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"xr (running subtotal) processing code",
        "Syntax":[
            "Syntax",
            "xr{break.level}\n"
        ],
        "description":[
            "The xr processing code produces a running subtotal of an output column on an AQL\u00a0listing or report.",
            "The attribute definition must have xr specified as an output-conversion (attribute 7) only. In order to get a running total, the attribute containing the xr conversion code must be totaled. If not, the conversion has no effect."
        ],
        "parameter":[
            "Parameter(s)",
            "break.levelSpecifies the control break level for a running subtotal.",
            "CAUTION:",
            "This processing code is only effective\nfrom AQL. For compatibility reasons, a subvalue mark is allowed before\nthe break level."
        ],
        "example":[
            "Example(s)",
            "Assume that the processing code\nbelow was present in the output-conversions of the attribute-defining\nitem myattr:",
            "xr1",
            "This causes any AQL statements using this attribute in\natotalclause to reset the running total to 0\nafter the first and higher break levels."
        ]
    },
    {
        "name":"xt (toggle input\/output conversion) processing code",
        "Syntax":[
            "Syntax",
            "xt\n"
        ],
        "description":[
            "The xt processing code toggles the conversion direction from an input to an output-conversion or vice-versa."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"y (update stamping) processing code",
        "Syntax":[
            "Syntax",
            "y{u}{p}{t}\n"
        ],
        "description":[
            "Description",
            "The y processing code stamps user, PIB, and\/or time\/date update information into an internal item header from all processors.",
            "If you attempt to file or restore an update stamp in an FSI file-defining item, it will be commented-out with an asterisk (*).",
            "This processing code is supported only from the VME.",
            "Unlike the x code, the y code updates stamp information when an item is updated from any processor. Additionally, this stamp information is stored outside the normal item body in a special textual header.",
            "To read the stamp information generated by the y code, prefix the file name with the word hdr:. The header information can then be examined from FlashBASIC, AQL, or any other processor. Note that the stamp information cannot be written outside of the normal update mechanism.",
            "The save command saves all header information on the save tape, and the restore command automatically restores this information. However, the t-dump and t-load commands do not save\/restore the header. Instead, the t-load command generates new header information as if the items were being updated normally."
        ],
        "parameter":[
            "Parameter(s)",
            "To be effective, theycode must be followed by one or more of these letters\nto stamp information at update time:",
            "uUser-ID.pUser PIB.tTime\/Date information. The hexadecimal Time\/Date indicates\nthe number of seconds since 12\/31\/67."
        ],
        "example":[

        ]
    },
    {
        "name":"za (assembly code format) processing code",
        "Syntax":[
            "Syntax",
            "{label} opcode {arguments,,,} {comment}\n"
        ],
        "description":[
            "The za processing code displays a D3 item in a format compatible with assembly source code."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"zc (zip code) processing code",
        "Syntax":[
            "Syntax",
            "zc\n"
        ],
        "description":[
            "Description",
            "The zc processing code uses the zcf file to display the city, state, and Zip code. For international zip codes, an additional country file is used. For U.S.A. zip codes, zc displays a standard 5-digit zip code or the zip+4 code.",
            "This processing code is supported only from the VME.",
            "In order to use the zc processing code, there must be three files defined. The files used by this code are:",
            "zcf",
            "state",
            "country"
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Runoff processor",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Runoff processor overview",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"runoff command (Runoff processor)",
        "Syntax":[
            "Syntax",
            "runoff file.reference itemlist*{(options)}\n"
        ],
        "description":[
            "The runoff command invokes the output function of the Runoff processor."
        ],
        "parameter":[
            "Parameter(s)",
            "file.referenceFile that contains the items\nspecified initemlist.itemlist*Chains items to other items within\nthe same item list.optionscSuppresses the.chainand.readcommands.iOutputs the name of the next item-ID to be output.jSuppresses highlights.nPrevents pausing at page breaks when outputting to the terminal.numberSets the number of times boldface or underscore characters\nare printed.pDirects output to system printer, via the Spooler.sSuppresses boldface, underline, fonts, and default headings.uForces all output to uppercase."
        ],
        "example":[
            "Example(s)",
            "runoff doc chainletter (c",
            "runoff doc",
            "runoff doc termination.notice (ps"
        ]
    },
    {
        "name":"Control functions",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"@ function",
        "Syntax":[
            "Syntax",
            "@ character\n"
        ],
        "description":[
            "The @ function boldfaces the following  character. The character to be boldfaced must immediately follow the @ symbol. If the @ symbol is followed by a space, the @\u00a0character itself is printed."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"@^ function",
        "Syntax":[
            "Syntax",
            "@^\n"
        ],
        "description":[
            "The @^ function enables boldface mode. Runoff remains in boldface mode until a @\\\u00a0is encountered. The number of times the boldface letters are printed may be set by using the  number option of the Runoff command."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"@\\ function",
        "Syntax":[
            "Syntax",
            "@\\\n"
        ],
        "description":[
            "The @\\ function turns off boldface mode."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"& function",
        "Syntax":[
            "Syntax",
            "&x\n"
        ],
        "description":[
            "The & function underlines the following character. The character to be underlined must immediately follow the & character. If the & character is followed by a space, the & character itself is printed."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"&^ function",
        "Syntax":[
            "Syntax",
            "&^\n"
        ],
        "description":[
            "The &^ function puts Runoff in underline mode until an &\\ is encountered."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "&^Special Control Characters&\\ are needed"
        ]
    },
    {
        "name":"&\\ function",
        "Syntax":[
            "Syntax",
            "&\\\n"
        ],
        "description":[
            "The &\\ function turns off the underline mode."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"^ function",
        "Syntax":[
            "Syntax",
            "^ character\n"
        ],
        "description":[
            "The ^ function prints the following  character in uppercase. The character to be printed in uppercase must immediately follow the ^ character. If the ^ character is followed by a space, the ^ character itself is printed."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"^^ function",
        "Syntax":[
            "Syntax",
            "^^\n"
        ],
        "description":[
            "The ^^ function activates the uppercase mode and causes the text to switch to uppercase in the same way that the .upper case command causes the switch, except that ^^ may be imbedded in a line. Turning off this function requires the .end case command."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"\\ function",
        "Syntax":[
            "Syntax",
            "\\x\n"
        ],
        "description":[
            "The \\ function prints the following character in lowercase. The character to be printed in lowercase must immediately follow the \\ character. If the \\ character is followed by a space, the character itself is printed."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"\\\\ function",
        "Syntax":[
            "Syntax",
            "\\\\\n"
        ],
        "description":[
            "The \\\\ function turns off uppercase mode and causes the text to switch to lowercase in the same way that the .lower case command causes the switch, except that \\\\ may be imbedded in a line. Turning off this function requires the .end case command."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"_ function",
        "Syntax":[
            "Syntax",
            "_\n"
        ],
        "description":[
            "The _ function treats the following character as a text character, rather than as a control character."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "This prints one underscore: __."
        ]
    },
    {
        "name":"< function",
        "Syntax":[
            "Syntax",
            "<\n"
        ],
        "description":[
            "The < function causes the following word to begin at the next defined tab stop. The tab stop positions are defined using the .set tabs command. Tab characters are only in effect in the nofill mode."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"> function",
        "Syntax":[
            "Syntax",
            ">\n"
        ],
        "description":[
            "The > function causes the following word to end at the next defined tab stop. The tab stop positions are defined using the .set tabs command. Tab characters are only in effect in the nofill mode."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":".* function",
        "Syntax":[
            "Syntax",
            ".* {text}\n"
        ],
        "description":[
            "The .* function treats the entire line following the command as a remark. Any  text following the command is not output by Runoff."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "The following text is ignored. .* comments begin here."
        ]
    },
    {
        "name":"Runoff commands",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":".b command",
        "Syntax":[
            "Syntax",
            ".b\n"
        ],
        "description":[
            "The .b command outputs a partially filled line before processing the next line."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":".begin page command (Runoff)",
        "Syntax":[
            "Syntax",
            ".begin page\n"
        ],
        "description":[
            "Description",
            "The .begin page command executes a .break command followed by an advance to a new page. The page number is incremented and the page heading (if set) is printed.",
            "The .begin page command must begin in position one of the attribute. If it is in the middle of an attribute, it is ignored and printed as text. The text immediately following the .begin page command is printed on the next page.",
            "The .begin page command terminates the current page, prints the optional footing, ejects a page, increments the page counter, and prints the optional heading."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            ".nf\nThis is page one.\n.begin page\nThis is page two attribute 1.\nThis is page two attribute 2.\n.bp\nThis is page three."
        ]
    },
    {
        "name":".box command (Runoff)",
        "Syntax":[
            "Syntax",
            ".box left.margin, right.margin\n.box off\n"
        ],
        "description":[
            "The .box command defines the left and right margin boundaries for a box around the text, and encloses the following text in a box of vertical bars on the output page. The .box off command turns off the box effect previously started with a .box command."
        ],
        "parameter":[
            "Parameter(s)",
            "left.marginDefines the left margin boundary for a box around the text.right.marginDefines the right margin boundary for a box around the text."
        ],
        "example":[
            "Example(s)",
            ".nf\n.box 6,16\n:----------------------------------------:\n: Note: This is a .box command example.  :\n:----------------------------------------:\n.box off"
        ]
    },
    {
        "name":".break command (Runoff)",
        "Syntax":[
            "Syntax",
            ".break\n"
        ],
        "description":[
            "Description",
            "The .break command creates a new paragraph.",
            "The text following the .break command is output in the newly created paragraph. This is a method of flowing text, starting a new paragraph without a new attribute, or DTP (Distributed Transaction Processing) terminology. The .break command may be placed anywhere within the document."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "For graphic representation see below: .break Example A",
            "Produces the following output:",
            "For graphic representation see below:\nExample A."
        ]
    },
    {
        "name":".capitalize sentences command",
        "Syntax":[
            "Syntax",
            ".capitalize sentences\n"
        ],
        "description":[
            "The .capitalize sentences command capitalizes sentences following a period, exclamation point, question mark, colon, or a semicolon that is followed by one or more spaces. If the first word of the sentence is already capitalized, it remains capitalized. The .nocapitalize sentences command disables the .capitalize sentences command."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            ".capitalize sentences\nthis is the first sentence. this is the second. And, this is the third.",
            "The output from this example is:",
            "This is the first sentence. This is the second. And, this is the third."
        ]
    },
    {
        "name":".center command (Runoff)",
        "Syntax":[
            "Syntax",
            ".center\n"
        ],
        "description":[
            "The .center command outputs the next line of the document in nofill mode and centers it on the next line of output. This command causes a break (new paragraph) to occur."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            ".center\n               Heading A",
            "Produces this output:",
            "Heading A"
        ]
    },
    {
        "name":".chain command (Runoff)",
        "Syntax":[
            "Syntax",
            ".chain {file.reference} item-ID\n"
        ],
        "description":[
            "Description",
            "The .chain command transfers control to the specified item-ID.",
            "This command is particularly useful for generating form letters. For example, it may be necessary to insert the name and address of each recipient of the letter from a separate file.",
            "A sselect statement is used to extract the relevant data from the file and save it in a list. A series of .readnext statements inserts the data into the text of the letter. At the end of the letter, a .chain command may be used to restart the next letter. When the list is exhausted, Runoff stops."
        ],
        "parameter":[
            "Parameter(s)",
            "file.referenceSpecifies the file where the item change resides. If not specified,\nthe current file is used. Control does not return to the source item.item-IDSpecifies the item to transfer control to."
        ],
        "example":[
            "Example(s)",
            ".chain next.doc",
            "The itemnext.docis processed at the\nend of the document that called it."
        ]
    },
    {
        "name":".chapter command (Runoff)",
        "Syntax":[
            "Syntax",
            ".chapter text\n"
        ],
        "description":[
            "The .chapter command ejects a page, increments the page and chapter counters, and outputs the literal, Chapter, followed by the optional text, centered between the current margins. The chapter, page number, and text are accumulated for the table of contents."
        ],
        "parameter":[
            "Parameter(s)",
            "textAccumulated for the table of contents."
        ],
        "example":[

        ]
    },
    {
        "name":".contents command",
        "Syntax":[
            "Syntax",
            ".contents\n"
        ],
        "description":[
            "The .contents command outputs the current table of contents, as defined by the previous .chapter and .section commands."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            ".chapter\nRunoff\n.chapter\nOP\n.contents",
            "The output of this example is:",
            "Chapter 1\nRunoff\n\n(page eject)\n\nChapter 2\nOP\n\n(page eject)",
            "Table of Contents\nsection              page\n1        Runoff      1\n2        OP          2"
        ]
    },
    {
        "name":".crt command (Runoff)",
        "Syntax":[
            "Syntax",
            ".crt text\n"
        ],
        "description":[
            "The .crt command directs text unconditionally to the terminal screen."
        ],
        "parameter":[
            "Parameter(s)",
            "textSpecifies text directed to the terminal screen."
        ],
        "example":[

        ]
    },
    {
        "name":".end case command (Runoff)",
        "Syntax":[
            "Syntax",
            ".end case\n"
        ],
        "description":[
            "The .end case command disables any previous .upper case or .lower case commands."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            ".upper case\nthis is the first sentence.\nthis is the second.\n.end case"
        ]
    },
    {
        "name":".fill command",
        "Syntax":[
            "Syntax",
            ".fill\n"
        ],
        "description":[
            "Description",
            "The .fill command enters line fill mode. Words are processed until there are enough to fill a line without overflowing it. If justification mode is on, Runoff inserts spaces in the line at random to make the right margin line up.",
            "The .fill command is one of the .standard command settings and the .nofill command is used to terminate the .fill command."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            ".fill\nThis prints on line one,\nand so does this.",
            "The output displays as:",
            "This prints on line one, and so does this."
        ]
    },
    {
        "name":".footing command (Runoff)",
        "Syntax":[
            "Syntax",
            ".footing {{text} {\u2019options\u2019}...}\n"
        ],
        "description":[
            "The .footing command designates a text string composed of literals and special options to output at the bottom of each page. If the line following the .footing command is null, the footing is suppressed. The .footing command places the footing text in a buffer and is only processed during a break page, either explicitly with a .bp command or by data."
        ],
        "parameter":[
            "Parameter(s)",
            "textText string to display in footing.options''(Two single quotation marks.) Outputs (one) single quotation\nmark.'attr.name'Inserts the value ofattr.name. Processes\nany conversion codes, but not correlatives in the attribute-defining\nitem.bInserts the attribute name causing the break if theboption has been specified withroll-on.cCenters the output line.dRetrieves the current date (dd mmm yyyy format).f{n}Inserts the file name in a field ofnspaces.jRight-justifies the rest of the line.lIssues a carriage return\/line feed (CR\/LF).nPrevents the pause at the end of each page (likenopagemodifier).pRetrieves the current page number, right-justified in a field\nof four spaces.p{n}Retrieves the page number, right-justified in a field ofnspaces. (defaultn=4).rRetrieves the Roman numeral page number.sToggles on italics mode.tRetrieves the current time and date (hh:mm:ss dd mmm yyyy\nformat).uToggles on underline mode.vToggles on boldface mode.xcUsed with thecoption to center a segment.\nThexcdelimits the end of the segment.xsToggles off italics mode.xuToggles off underline mode.xvToggles off boldface mode."
        ],
        "example":[
            "Example(s)",
            ".footing \"\u2019lc\u2019page \u2019pn\u2019 printed at \u2019tlc\u2019\""
        ]
    },
    {
        "name":".heading command (Runoff)",
        "Syntax":[
            "Syntax",
            ".heading {{text} {\u2019options\u2019}...}\n"
        ],
        "description":[
            "The .heading command designates a text string composed of literals and special options to output at the top of each page. If the line following the .heading command is null, the heading is suppressed. The .heading command places the heading text in a buffer and is only processed during a break page, either explicitly with a .bp command or by data."
        ],
        "parameter":[
            "Parameter(s)",
            "textText string to display in heading.options''(Two single quotation marks.) Outputs (one) single quotation\nmark.'attr.name'Inserts the value ofattr.name. Processes\nany conversion codes, but not correlatives in the attribute-defining\nitem.bInserts the attribute name causing the break if theboption has been specified withroll-on.cCenters the output line.dRetrieves the current date (dd mmm yyyy format).f{n}Inserts the file name in a field ofnspaces.jRight-justifies the rest of the line.lIssues a carriage return\/line feed (CR\/LF).nPrevents the pause at the end of each page (likenopagemodifier).pRetrieves the current page number, right-justified in a field\nof four spaces.p{n}Retrieves the page number, right-justified in a field ofnspaces. (defaultn=4).rRetrieves the Roman numeral page number.sToggles on italics mode.tRetrieves the current time and date (hh:mm:ss dd mmm yyyy\nformat).uToggles on underline mode.vToggles on boldface mode.xcUsed with thecoption to center a segment.\nThexcdelimits the end of the segment.xsToggles off italics mode.xuToggles off underline mode.xvToggles off boldface mode."
        ],
        "example":[

        ]
    },
    {
        "name":".hilite command (Runoff)",
        "Syntax":[
            "Syntax",
            ".hilite {character}\n.hilite off\n"
        ],
        "description":[
            "The .hilite command prints the optionally-specified character along the right margin. If the character is omitted, or the word off displays after the command, the .hilite command is disabled. The .hilite off command terminates the .hilite command."
        ],
        "parameter":[
            "Parameter(s)",
            "characterSpecifies the character to print. Any character, other than\na period, may be specified as the highlight character."
        ],
        "example":[
            "Example(s)",
            "Produces an*on the right margin.",
            ".hilite *"
        ]
    },
    {
        "name":".indent command (Runoff)",
        "Syntax":[
            "Syntax",
            ".indent {-}number.spaces\n"
        ],
        "description":[
            "The .indent command indents the text following the command a specified number of spaces from the left margin."
        ],
        "parameter":[
            "Parameter(s)",
            "number.spacesSpecifies number of spaces first line of text is indented\nfrom left margin. If not specified, it defaults to 1. If the command\nis in the middle of an attribute, the preceding text is output and\nthe next word begins a new paragraph that is indented a specified\nnumber of spaces.If negative, the line begins to the left of the\npreviously set left margin."
        ],
        "example":[

        ]
    },
    {
        "name":".indent margin command (Runoff)",
        "Syntax":[
            "Syntax",
            ".indent margin {-}number.spaces\n"
        ],
        "description":[
            "The .indent margin command increments the left margin by the specified number of spaces."
        ],
        "parameter":[
            "Parameter(s)",
            "number.spacesSpecifies the number of spaces incremented from the left margin.\nIf negative, it moves the left margin farther to the left."
        ],
        "example":[

        ]
    },
    {
        "name":".index command (Runoff)",
        "Syntax":[
            "Syntax",
            ".index text\n"
        ],
        "description":[
            "The .index command places the text and the current page number into the document\u2019s index."
        ],
        "parameter":[
            "Parameter(s)",
            "textMust be enclosed in double quotation marks if it contains\nembedded spaces."
        ],
        "example":[

        ]
    },
    {
        "name":".input command (Runoff)",
        "Syntax":[
            "Syntax",
            ".input\n"
        ],
        "description":[
            "The .input command accepts and processes text input from the terminal. The text entered is output as though it had been stored in the document."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "Dear .input,\nYou are my only one.\nLove,\nPat\n.chain love.letter"
        ]
    },
    {
        "name":".justify command (Runoff)",
        "Syntax":[
            "Syntax",
            ".justify\n"
        ],
        "description":[
            "Description",
            "The .justify command enables the .fill and .justify commands. The .justify command is one of the .standard command settings. The .nojustify command terminates the .justify command.",
            "Runoff fills each output line by adding successive words from the source text until another word does not fit on the line. The line is then justified by inserting spaces between words at random until the last word in the line exactly meets the right margin."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":".left margin command (Runoff)",
        "Syntax":[
            "Syntax",
            ".left margin margin.setting\n"
        ],
        "description":[
            "The .left margin command sets the left margin at a specific number of spaces from the left edge of the paper. The left margin is automatically set to 0 in the .standard command."
        ],
        "parameter":[
            "Parameter(s)",
            "margin.settingSpecifies the margin from the left edge of the paper."
        ],
        "example":[

        ]
    },
    {
        "name":".line length command (Runoff)",
        "Syntax":[
            "Syntax",
            ".line length number.characters\n"
        ],
        "description":[
            "The .line length command sets the line length a specified number of characters from the left margin. Line length is automatically set to 70 in the .standard command."
        ],
        "parameter":[
            "Parameter(s)",
            "number.charactersSpecifies the number of characters the line length is set\nfrom the left margin. The number of characters, plus the left margin\nsetting, minus one, denotes the right margin position."
        ],
        "example":[

        ]
    },
    {
        "name":".lower case command (Runoff)",
        "Syntax":[
            "Syntax",
            ".lower case\n"
        ],
        "description":[
            "The .lower case command outputs text in lowercase characters. The .end case command terminates this command."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            ".lower case\nTHIS TEXT WILL BE PRINTED IN LOWERCASE LETTERS.",
            "Produces:",
            "this text will be printed in lowercase letters."
        ]
    },
    {
        "name":".lptr command",
        "Syntax":[
            "Syntax",
            ".lptr\n"
        ],
        "description":[
            "The .lptr command directs output to the system printer, via the Spooler."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":".lx command",
        "Syntax":[
            "Syntax",
            ".lx column.number\n"
        ],
        "description":[
            "The .lx command sets the auto-tab to a specified column number."
        ],
        "parameter":[
            "Parameter(s)",
            "column.numberSpecifies the column number auto-tab is set."
        ],
        "example":[

        ]
    },
    {
        "name":".nocapitalize sentences command",
        "Syntax":[
            "Syntax",
            ".nocapitalize sentences\n"
        ],
        "description":[
            "The .nocapitalize sentences command deactivates the automatic capitalization of sentences mode."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            ".capitalize sentences\nthis is the first sentence. this is the second. And, this is the third.\n.nocapitalize sentences\nthis is the final sentence.",
            "Produces:",
            "This is the first sentence. This is the second. And, this is the third. this is the\nfinal sentence."
        ]
    },
    {
        "name":".nofill command (Runoff)",
        "Syntax":[
            "Syntax",
            ".nofill\n"
        ],
        "description":[
            "The .nofill command resets both the justify and fill modes. Removal of extra spaces does not take place, and end-of-lines are not stripped from the input. Output lines are not filled nor are right margins justified. The .nofill command causes a break (new paragraph)."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":".nojustify command",
        "Syntax":[
            "Syntax",
            ".nojustify\n"
        ],
        "description":[
            "The .nojustify command disables the justification mode. The fill mode remains in effect."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":".noparagraph command",
        "Syntax":[
            "Syntax",
            ".noparagraph\n"
        ],
        "description":[
            "The .noparagraph command turns off the .paragraph command."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":".page number command (Runoff)",
        "Syntax":[
            "Syntax",
            ".page number page.number\n"
        ],
        "description":[
            "The .page number command sets the current page number to a specified number."
        ],
        "parameter":[
            "Parameter(s)",
            "page.numberSpecifies the page number assigned. If the page number is\nomitted, 1 is assumed."
        ],
        "example":[

        ]
    },
    {
        "name":".paper length command",
        "Syntax":[
            "Syntax",
            ".paper length paper.length\n"
        ],
        "description":[
            "The .paper length command specifies the maximum number of print lines per output page."
        ],
        "parameter":[
            "Parameter(s)",
            "paper.lengthSpecifies the maximum number of print lines per output page."
        ],
        "example":[

        ]
    },
    {
        "name":".paragraph command (Runoff)",
        "Syntax":[
            "Syntax",
            ".paragraph {-}number.spaces\n"
        ],
        "description":[
            "The .paragraph command specifies the number of spaces for paragraph indentation. Any blank line or any line beginning with a space is indented the specified number of spaces."
        ],
        "parameter":[
            "Parameter(s)",
            "number.spacesSpecifies the number of spaces the paragraph is indented.\nIf negative, this causes the paragraph tooutdent."
        ],
        "example":[

        ]
    },
    {
        "name":".pfile command",
        "Syntax":[
            "Syntax",
            ".pfile print.file.number"
        ],
        "description":[
            "The .pfile command creates a separate Spooler entry containing the table of contents created with the .contents command. The .pfile command directs subsequent output to the specified print file number, just like the print on statement in FlashBASIC."
        ],
        "parameter":[
            "Parameter(s)",
            "print.file.numberSpecifies the print file number output is directed to."
        ],
        "example":[

        ]
    },
    {
        "name":".print command",
        "Syntax":[
            "Syntax",
            ".print\n"
        ],
        "description":[
            "The .print command prints the next line of text on the terminal. This command is used in conjunction with the .input command."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            ".print\nEnter the subjects name:\n.input"
        ]
    },
    {
        "name":".print index command (Runoff)",
        "Syntax":[
            "Syntax",
            ".print index\n"
        ],
        "description":[
            "The .print index command prints the sorted index of words and page numbers. The index is sorted in alphabetical order, and printed two columns per page. The .print index command changes the tab settings, and issues a .begin page command."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":".read command (Runoff)",
        "Syntax":[
            "Syntax",
            ".read {file.reference} item-ID\n"
        ],
        "description":[
            "Description",
            "The .read command transfers control to the specified Runoff item for output and returns control upon completion.",
            "The .read command causes Runoff to read the item-ID indicated. If no file reference is specified, the item is read from the same file as the item being processed. The text input from this item is processed and output without any parameter or mode changes. After processing this item, Runoff resumes input with the next line of the current source of input. This command does not cause a break.",
            "The .read command scans the string following the command, looking for an item-ID or a file name. The legal delimiter for the item-ID or the file reference is a space or a period. If there is more than one delimited field following the .read command, the next-to-the-last field is taken to be the file name, and that file is opened. The last delimited field is considered the item-ID, and it is retrieved by the Runoff processor to be executed next.",
            "If the statement is a .read, the processor eventually returns to the current item and continues processing at the beginning of the next line in the item. No statements occurring after the .read statement in the line are executed. A comment statement may be included after the .read command. The line is considered exhausted when the processor encounters an end-of-line mark, or when it encounters a period preceded by a space."
        ],
        "parameter":[
            "Parameter(s)",
            "file.referenceSpecifies file that contains the item to which control is\ntransferred. If not specified, the item is read from the same file\nas the item being processeditem-IDSpecifies item for output."
        ],
        "example":[

        ]
    },
    {
        "name":".readnext command (Runoff)",
        "Syntax":[
            "Syntax",
            ".readnext\n"
        ],
        "description":[
            "Description",
            "The .readnext command extracts the top entry of an active list created by one of the list-generating commands prior to output and inserts the value into the text of the item.",
            "The .readnext command is used to read data from an active list. It has an effect only if, prior to entering Runoff, a select, sselect, qselect or get-list statement has been entered, which selects a list of values. Each .readnext command in Runoff extracts the next value from the active list and places it in the text stream.",
            "This command does not cause a break. If there is no active list, or when the list is exhausted, the .readnext command causes a termination of Runoff, and a return to TCL."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":".save index command (Runoff)",
        "Syntax":[
            "Syntax",
            ".save index file.reference\n"
        ],
        "description":[
            "The .save index command saves entries defined in previous .index commands in the specified file reference, using the item-ID of the current Runoff item. The file reference of the index must be different than the current file reference to avoid destroying data. This command causes chapter and page number information of indexed data in a text to be saved in a separate file. Each index entry is stored as an individual item using the index entry as the item-ID, the chapter (where that index entry is referenced) as the first attribute and the page number as the second attribute. Multiple values are stored in these attributes as multiple references to the same index entry. The resulting file may then be operated on by the AQL processor to generate listings for the chapter and page number information of all indexed data in a text. The .save index command is placed in the text item itself and must precede the .index commands. Only indexed data that has been preceded by the .save index command is saved in the specified file."
        ],
        "parameter":[
            "Parameter(s)",
            "file.referenceSpecifies the file where the chapter and page information\nresides.Warning:This must be a separate file from the\ntext file. Otherwise data in the text file will be destroyed."
        ],
        "example":[

        ]
    },
    {
        "name":".section command (Runoff)",
        "Syntax":[
            "Syntax",
            ".section sect.number text\n"
        ],
        "description":[
            "Description",
            "The .section command handles automatic chapter section numbering and formatting, in conjunction with the .chapter command.",
            "The .section command automatically starts the next section at depth sect.number, where sect.number is the range 1-5. The text is printed following the section number and a .skip occurs. The text is recorded as the section heading in the Table of Contents. If no text displays on the .section command, no .skip occurs and the section is not recorded in the Table of Contents. Section numbers are incremented automatically and the section number is printed in the form 1.2.3.4.5, with n digits printed.",
            "Conventionally, the .section command is followed by a blank line before the next paragraph starts. Since the .section command causes a paragraph break, which terminates the preceding paragraph, and since the text following the .section command is placed immediately into an output line and output prior to a consideration of the next line, the blank line after the .section command can be avoided by not indenting the first line of the next paragraph. That is, if the processor does not know that the next line starts a paragraph, it will not skip a line. It may be necessary to use an .indent margin if paragraph indentation is desired."
        ],
        "parameter":[
            "Parameter(s)",
            "sect.numberIncrements automatically in the range of 1-5.textFollows the section number, causing a skip to occur."
        ],
        "example":[

        ]
    },
    {
        "name":".set tabs command",
        "Syntax":[
            "Syntax",
            ".set tabs tabstop{,tabstop...}\n"
        ],
        "description":[
            "Description",
            "The .set tabs command clears previous tab stops and specifies tab stop locations at specified column position.",
            "Tabs are only in effect in nofill mode. The left angle bracket is the left-tab character that causes the next word to start at the next tab position. The right angle bracket is the right-tab character that causes the next word to end at the next tab position. If a tab character displays at a point in the line where no further tab stops have been set, the tab character is ignored."
        ],
        "parameter":[
            "Parameter(s)",
            "tabstop(up to 30) The tab stops must be greater than 0 and in increasing\norder. They indicate tab stop positions relative to the left margin."
        ],
        "example":[

        ]
    },
    {
        "name":".skip command (Runoff)",
        "Syntax":[
            "Syntax",
            ".skip number.lines\n"
        ],
        "description":[
            "The .skip command outputs a specific number of blank lines on a page, taking into account any previously specified .spacing commands."
        ],
        "parameter":[
            "Parameter(s)",
            "number.linesSpecifies the number of blank lines output on a page. If omitted,\nthe number of lines defaults to 1."
        ],
        "example":[

        ]
    },
    {
        "name":".space command (Runoff)",
        "Syntax":[
            "Syntax",
            ".space number.lines\n"
        ],
        "description":[
            "The .space command outputs a specific number of blank lines on a page, regardless of any previously specified .spacing commands."
        ],
        "parameter":[
            "Parameter(s)",
            "number.linesSpecifies the number of blank lines output on a page. If omitted,\nthe number of lines skip defaults to 1."
        ],
        "example":[

        ]
    },
    {
        "name":".spacing command (Runoff)",
        "Syntax":[
            "Syntax",
            ".spacing number.lines\n"
        ],
        "description":[
            "The .spacing command specifies interline spacing to the specified number of lines."
        ],
        "parameter":[
            "Parameter(s)",
            "number.linesSpecifies the number of lines of interline spacing."
        ],
        "example":[
            "Example(s)",
            ".spacing 2"
        ]
    },
    {
        "name":".standard command (Runoff)",
        "Syntax":[
            "Syntax",
            ".standard\n",
            ".capitalize sentences\n.crt\n.fill\n.footing (null)\n.heading (null)\n.justify\n.left margin 0\n.line length 70\n.paragraph 5\n.upper case\n"
        ],
        "description":[
            "The .standard command defines the default parameter and mode settings for Runoff text."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":".test page command (Runoff)",
        "Syntax":[
            "Syntax",
            ".test page number.lines\n"
        ],
        "description":[
            "The .test page command tests the number of lines left on the current page and determines whether text is output on the current or next page."
        ],
        "parameter":[
            "Parameter(s)",
            "number.linesIf the number of lines specified is less than the count returned,\nthe following text is output on the current page. Otherwise, a page\nis ejected and the text is output on the new page. This prevents blocks\nof text from being split across a page boundary."
        ],
        "example":[

        ]
    },
    {
        "name":".upper case command (Runoff)",
        "Syntax":[
            "Syntax",
            ".upper case\n"
        ],
        "description":[
            "The .upper case command outputs text in uppercase characters, unless specifically altered by the \\ lowercase special control function. The .end case command terminates the .upper case command."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            ".upper case\nTHIS IS THE FIRST SENTENCE.\nTHIS IS THE SECOND.\n.end case"
        ]
    },
    {
        "name":"System files",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"abs file",
        "Syntax":"",
        "description":[
            "Description",
            "The dictionary of this file contains a binary item %ABS% that contains the actual code. In the account dm, the %ABS% item is an empty regular item, to indicate that the code associated to that file is in fact the boot ABS. The boot ABS is not actually part of the file system."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"accounts file",
        "Syntax":"",
        "description":[
            "Description",
            "To capture accounting data for a specific user, add the character a to the options attribute (9) in the users file.",
            "An item exists in the accounts file for each user. The item-ID from the users file is the item-ID in the accounts file.",
            "Accounting may be suppressed system-wide by removing the accounts file. Accounting information is gathered from the pibs file when the user logs off.",
            "The attributes in the accounts file are:"
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"backgrounds file",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Binary files (system files)",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "The following example displays\nthe textual portion of some BASIC object code.",
            "ct dict binary:bp test\n001 ............]}..............:. B..B..who._.. u0.P..E._..\ntest.]9885.[38516.]7.]bh\/]brad.]6.2.0.M0.A2.D2.F5.].^._.\n......................................................",
            "The following example copies a binary image from an MS-DOS\nmachine (via an NFS link) into a standard D3 item. Note that the standard\nD3 item isnota binary item since any binary information\nrepresenting escape character sequences is processed as escape character\nsequences (whether they are or not) when the data is transferred from\nMS-DOS to D3. The second command copies this item into a true D3 binary\nitem. The data in this binary item corresponds exactly to the data\nin the original MS-DOS image.",
            "copy \/dos PIC001.GIF\n      to: (pictures\n      1 PIC001.GIF",
            "copy pictures PIC001.GIF\n      to: (bin:pictures2\n      1 PIC001.GIF"
        ]
    },
    {
        "name":"block-convert file",
        "Syntax":"",
        "description":[
            "Description",
            "Each master dictionary has a Q-pointer to the block-convert file that is created when the account is created."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"bp file",
        "Syntax":"",
        "description":[
            "Description",
            "Commands in the newac file that are cataloged FlashBASIC programs point to this file."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"bulletin file",
        "Syntax":"",
        "description":[
            "Description",
            "The attributes for the bulletin file are:"
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"cap-file File",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"captcl file",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"clashes file",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"country file",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"devices file",
        "Syntax":"",
        "description":[
            "Description",
            "The item-IDs are device codes (for example, WY-100 is the WYSE WY-100 terminal). The define-terminal command defines additional terminals and printers.",
            "The attributes in the devices file for terminals are:",
            "The attributes in the devices file for printers are:"
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "Show all the devices defined.",
            "sort only devices"
        ]
    },
    {
        "name":"devs file",
        "Syntax":"",
        "description":[
            "Description",
            "This file, located on the dm account, has two data levels:",
            "The init data level contains static information that can be changed by the System Administrator to set up the various entities in the system. For example, the initial baud rate of the serial ports, whether tandem is allowed on the D3 ports or not, can be specified in this data level. It contains an item for all possible elements in the system, even if they are not physically present.",
            "The devs data level contains dynamic information. The TCL command reset-async, normally runs at boot time in the system-coldstart macro, clears the devs,devs, file and copies the information from devs,init into devs,devs. Only the physically present system elements are represented in this file. Writing an item into this data level programs the device.",
            "For UNIX: Items in this file may be added or removed with the dev-make or dev-remov TCL commands.",
            "For Windows: Not supported.",
            "The item-IDs in this file are the entity-IDs, which are composed of a one letter code p for D3 ports, s for serial device, e for Ethernet, and so on), followed by the entity number in decimal (the D3 port number, the serial device number, the TCP\/IP connection-ID, and so on).",
            "Both data levels can be examined using AQL or the Update processor. The structure of an item in these files is described in the include dm,bp,includes qcb.inc."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "Examines the characteristics\nof serial device 12, opens the Update processor, and allows changing\nthe initial setting of the serial device. Filing this item does not\nactually change the setting. It is changed the next time thereset-asynccommand is run (normally at boot time) or by\nrunning thereset-async s12command.",
            "u devs,init s12",
            "Examines the characteristics of D3 port 0. The only element\nthan can be changed is the tandem flag, which controls whether or\nnottandemis allowed on port 0, and whether the\ntarget process should be notified about thetandem on\/off.",
            "u devs p0",
            "Show the current status of all serial ports.",
            "sort devs = \"s]\""
        ]
    },
    {
        "name":"dm-bp pointer",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"errmsg pointer",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"errors file",
        "Syntax":"",
        "description":[
            "Description",
            "The item-IDs are 13-digit date\/time stamps (5-digit date, plus 5-digit time), plus an alphabetical character for multiple creations within a second.",
            "The specific types of errors that generate messages are:",
            "The attributes for the errors file are:",
            "or",
            "OSFI error information. Includes:"
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"File-of-files file (VME)",
        "Syntax":"",
        "description":[
            "Description",
            "Items are created in the file-of-files file when a file is restored or created.",
            "The item-IDs are sequential file numbers assigned when the file is created.",
            "The numbers of the files are determined by the order in which they are restored or created.",
            "When a file or account is restored, the files are recreated in the order in which they were saved on the file-save media.",
            "The file-of-files file is also used to locate files on the disk during restores from incremental and transaction-log tapes.",
            "File number one is always the VME file-of-files file and file number two is always the mds file.",
            "The item restored, contained in the dictionary of the file-of-files file, contains the time in attribute 1 and the date of the last full restore in attribute 2. This item should not be deleted or modified.",
            "The attributes in the file-of-files file are:"
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"FileOfFiles file (FSI)",
        "Syntax":"",
        "description":[
            "Description",
            "Items are created in the FileOfFiles file when a file is restored or created.",
            "The item-IDs are sequential file numbers assigned when the file is created.",
            "The numbers of the files are determined by the order in which they are restored or created.",
            "When a file or account is restored, the files are recreated in the order in which they were saved on the file-save media.",
            "The item restored, contained in the dictionary of the FileOfFiles file, contains the time in attribute 1 and the date of the last full restore in attribute 2. This item should not be deleted or modified.",
            "The attributes in the FileOfFiles file are:"
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"fonts file",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"funckeys file",
        "Syntax":"",
        "description":[
            "Description",
            "Function keys can also be part of a keyboard definition item in the keyboards file, selected by using the set-kbrd command."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"gsym file",
        "Syntax":"",
        "description":[
            "Description",
            "Global symbols are used to reference the system-wide set of global variables."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Host operating system files",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "Create a Q-pointer to a FlashBASIC program file located on\nUNIX:pgm001Q002003unix:\/home\/dev\/bpt4Use the default conversion along with tab expansion.Create a UNIX Q-pointer to a UNIX directory to be saved as\npart of the regular D3 file save:bob001Q002003unix:\/home\/bobaUse theaoption to keep an additional\nattribute mark on the D3 data (which is stripped when written back\nto UNIX). This extra attribute mark ensures that all data can be saved\nand restored without corruption due to translation."
        ]
    },
    {
        "name":"hosts file",
        "Syntax":"",
        "description":[
            "Description",
            "The hosts file is used when accessing super Q-pointers to locate the     appropriate OSFI driver and any options that should be passed to that driver.",
            " This option is          absolutely necessary when saving and\/or copying between different files, or to backup          media. Without this option, non-textual items might have an extra new-line appended to them          when added to the final destination. ",
            "Enables accessing a file without specifying the MS-DOS drive in the file name.           x specifies the MS-DOS drive letter where the file is stored.          ",
            "For example: To access a file located in MS-DOS drive A:, use the           la option.",
            "By default, when          writing a D3 item, the attribute marks are converted to make the text easy to edit. A          trailing attribute mark is added at the end of the file when it is written with this option          unless the A option is specified. ",
            "Cannot be specified with the A or           T options. ",
            "If a character 255 (segment mark) is read from a file,          it is converted into an underscore character. ",
            "File names and item-IDs are converted to          lowercase and makes them case-insensitive. "
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "data \"(binx:hextest\"\n execute \\copy nt_bin:c:\/temp test.txt\\\n open 'binx:hextest' to file\n read item from file,\"test.txt\"\n *Manipulate item here.\n *This example replaces string for brevity.\n item = \"6261FFFEFF6766\"\n write item on file,\"test.txt\"\n data \"(nt_bin:c:\/temp\"\n execute \\copy binx:hextest test.txt\\"
        ]
    },
    {
        "name":"hotkey.all file",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"iomap-file file",
        "Syntax":"",
        "description":[
            "Description",
            "The data section of the file contains items that define the character translation. The dictionary level contains binary items that are compiled by the set-iomap command when used with the c option. The items in the dictionary have the same item-IDs as the corresponding items in the data section, except that the (dictionary) items are preceded and followed by a % (percent sign).",
            "Each item in the data section contains up to 33 attributes. Attribute 1 is used for comments. Attributes 2 through 33 contain data for the actual character translation. Each attribute consists of 8 characters (32 x 8 = 256, the number of characters in the ASCII set). ASCII characters 0 through 7 (in hexadecimal) are stored in attribute 2. Characters 8 through 16 are stored in attribute 3, and so on. The set-iomap command reads a specified item from the iomap-file file and converts the ASCII characters into binary equivalents, and then writes the item to the dictionary level of the iomap-file."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "set-iomap 1234 (c",
            "Assume that there is an item in theiomap-filefile that contains the following:",
            "Item-ID: 1234\n1 This is just a comment.\n2 0001020304050607\n3 08090a0b0c0d0e0f\n.\n.\n.\n9 6061626364656667\n10 68696a6b6c6d6e6f\n11 7071727374757677\n12 78797a7b7c7d7e7f\n.\n.\n.\n33 f8f9fafbfcfdfeff",
            "This translates the characters A through Z into a through\nz. All other characters remain the same. The resulting item, %1234%\nis written to the dictionary of theiomap-filefile."
        ]
    },
    {
        "name":"jobs file",
        "Syntax":"",
        "description":[
            "Description",
            "The item-IDs is a date-time stamp. If more than one item is filed at the same time, an alphabetical character beginning with the letter a is appended to the item-ID.",
            "The attributes in the jobs file are:",
            "The phantom scheduler keeps two queues in the dictionary of the jobs file:",
            "The dictionary of the jobs file also contains an item called %P that consists of a list of phantom PIB status bytes."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"kb.fk File",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"kb.pc file",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"keyboards file",
        "Syntax":"",
        "description":[
            "Description",
            "The keyboards file contains two types of items:",
            "Alternative keyboard definitions, including British, French, German, Italian, Spanish, and USA for PC-type systems, for the TCL command set-kbrd.",
            "Keyboard input translation items for the TCL command  set-imap.",
            "The format of the keyboard input translation for set-imap is:",
            "Attribute one must contain the keyword IMAP, optionally followed by one or more modifiers, separated by spaces. Valid modifiers are:",
            "Each line defines a translation where the input sequence and the converted sequence are separated by a : (colon). If the converted string is null, then the input sequence corresponds to a key that is ignored.",
            "\"input sequence\" : \"converted sequence\"",
            "The following items are ignored:",
            "Text after an * (asterisk), except when enclosed in quotes",
            "Spaces, except when enclosed in quotes",
            "Empty lines",
            "Each element in the input sequence or the converted string is separated by commas.",
            "Characters and strings are represented by c\u2019abc...\u2019 or c\"abc...\".",
            "c\u2019]\u2019",
            "c\u2019]A\u2019",
            "Hexadecimal values and strings are represented by x\u2019NN\u2019 or x\u2019NNNNNN...\u2019, where each pair of hexadecimal digits are assembled into one byte.",
            "x\u2019ff\u2019",
            "x\u201927ff\u2019",
            "Decimal values are represented normally.",
            "Control characters are specified by a ^ (caret) followed by the corresponding letter, in uppercase or lowercase.",
            "^a",
            "These keywords can be used anywhere to represent the usual ASCII codes:",
            "Each keyboard item may have an alternate translation table as well. It is specified using the keyword #alternate in the item. All lines following define the alternate table instead of the primary table. Use the keywords ALT and ALT_ONE in the converted sequence to specify a key sequence to switch to the alternate table then use the same key sequence to switch back. The ALT_ONE keyword denotes that the alternate table should be used for the next set of keystrokes only.",
            "Some keyboards (for example, ATT605BCT) generate 8-bit characters. Use the xcs-on modifier.",
            "The number of the translation sequences is limited. The number depends on the actual data, but, converting all specials keys on an IBM3151, most of them generating two-character sequences into a two-character output sequence, takes about one fourth of the capacity of the filter."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "The following example illustrates\nthe IBM 3151 keyboard input definition to use special keys in the\nUpdate processor.",
            "IMAP timeout 50 esc-data* IBM 3151\n\n* Cursor movement\nESC,c\u2019D\u2019          : ^J           * <-\nESC,c\u2019C\u2019          : ^K           * ->\nESC,c\u2019B\u2019          : ^N           * down arrow\nESC,c\u2019A\u2019          : ^B           * up arrow\n\n* Editing keys  \u00a0  \u00a0  \nESC,c\u2019Q\u2019          : ^l           * delete\nESC,c\u2019P \u2019,BS      : ^w           * insert\n\n* function keys F1 - F12\nESC,c\u2019a\u2019,13       : ^x,c\u20191\u2019      * F1 : Hot key 1\nESC,c\u2019b\u2019,x\u20190d\u2019    : ^x,c\u20192\u2019      * F2 : Hot key 2\n\n* function keys F13 - F24\nESC,c\u2019!a\u2019,CR      : c\u2019off\u2019,CR    * F13 : OFF\nESC,c\u2019!b\u2019,CR      : c\u2019end\u2019,CR    * F14 : END\n\n* One key functions\nDEL               : ^l           * Del\n\n* Ignored keys\nESC,c\u2019\"A\u2019         :              * Num Lock"
        ]
    },
    {
        "name":"logoffs file",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Master dictionary file",
        "Syntax":"",
        "description":[
            "Description",
            "There is one master dictionary file for each account. When a new account is created, a standard set of vocabulary items are copied into the new account\u2019s master dictionary. File-defining items (D-pointers) and synonym-defining items (Q-pointers) are two types of file pointers found in a master dictionary. File-defining items point to files within the current account. Synonym-defining items can point to files either within the current account or within other accounts.",
            "Attributes 2 and 3 of file-defining items in an account master dictionary contain the base FID and modulo respectively of the file dictionary to which the item points.",
            "The usage and definition of the attributes in the master dictionary file-defining item are described in File-defining items.",
            "The Update processor displays the contents of attributes 1 through 10 (with default values in place for new accounts). To add to the contents of attribute 13, move the cursor to the end of attribute 10, press ENTER three times and add the new modulo surrounded by parentheses to resize the master dictionary file in attribute 13."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"mds file",
        "Syntax":"",
        "description":[
            "Description",
            "The mds file contains pointers to all master dictionary accounts on the system. The real account pointers are those that are defined by D-pointers.",
            "There are synonym definition items in the system file that essentially define alternate names for existing accounts.",
            "A few system-level files may also be found in the mds file. These are files only, meaning that they contain no commands. An example of this is the restore-errors file."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"messages file",
        "Syntax":"",
        "description":[
            "Description",
            "The item-IDs are the message numbers referenced by system processors."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "The following example:",
            "1202\n001 HNeeds to start printers.",
            "outputs:",
            "Needs to start printers.",
            "The following example:",
            "781\n001 H\u2019\n002 A\n003 H\u2019 added",
            "outputs:",
            "bob\u00a0\u00a0added",
            "wherebobis passed into the error message\nhandler by the process that triggers this message.",
            "The following\nexample:",
            "B156\nE Line\nA\nH illegal to ENTER a subroutine.",
            "outputs:",
            "[B156] Line\u00a0(\u00a0number\u00a0)\u00a0illegal\u00a0to\u00a0ENTER\u00a0a\u00a0subroutine.",
            "where(\u00a0number\u00a0)is the actual\nprogram line number where the error occurred. Additional internal\ncomments are not output."
        ]
    },
    {
        "name":"newac file",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"object.queue file",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"peqs file",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"pibs file",
        "Syntax":"",
        "description":[
            "Description",
            "A pibs item is required for each process executing on the system.",
            "The items in the pibs file define the memory resident hooks of the process workspaces. The pibs file also defines the physical devices connected to the system\u2019s ports, such as terminals, printers, phantoms, or communication ports. The port numbers are the item-IDs.",
            "Device control information is derived from the pibs file and the devices file. The pibs item specifies the device type and the devices item defines device characteristics and drive functions."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            ":who49 ge ba:list pibs 49Page 1 pibs 11:17:54 17 Jan 2002\npibs link-dev att-devs location device user udate utime account\n49 Jo Allen VT100 ja 01\/17 7:11 ba\n[405] 1 items listed out of 1 items"
        ]
    },
    {
        "name":"pointer-file file",
        "Syntax":"",
        "description":[
            "Description",
            "The item-ID defaults to %user-ID (percent sign concatenated with the user-ID) when not specified with the list process commands, such as save-list or edit-list.",
            "The pointer-file is a d type file that resides on the dm or sysprog account. Separate pointer-files can be created on any account. When using a pointer-file on any account other than dm, the commands associated with the file need to be modified to point to the correct account.",
            "Save lists can be saved in any file."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"resizing file",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"restore-errors file",
        "Syntax":"",
        "description":[
            "Description",
            "If the restore-errors file does not exist, it is created when the first error occurs.",
            "The D-pointer to this file is placed in the mds file, rather than in the dm account master dictionary file, since a full restore may be in progress, and the dm account may not be available. One of these errors may be generated:",
            "This indicates that either an incorrect D-pointer was found on the tape or an item with no preceding D-pointer was found on the tape. This type of message usually occurs during atypical restore sessions, such as forcing tape to get past errored blocks, starting on wrong reel numbers, overriding or continuing after bad labels, and so on.",
            "If an item is found with no preceding D-pointer, the restore must be told where it should be placed. For example, if the restore was restoring the data level (level = 3) when a block was dropped or bad, and at the beginning of the next block an item was found that did not belong to this file, the restore does not know where it goes. If 2 (dict) is chosen in the above example, the restore stops restoring items to the data level and begins restoring items to the dictionary level of this file.",
            "If a D-pointer is read from the tape and the level number is not in the range of 0\u00a0through 3, where zero is the mds file, the restore processor must be told at which level it is to be placed. If a D-pointer update is read from an incremental or transaction log tape and the file number exists in file-of-files, but it is the wrong file control block, then this message displays:",
            "If an item is read from the tape and its associated file D-pointer has not previously been read, or, if the item read does not conform to the D3 tape format, it is skipped, especially when the binary object code is not in D3 format. If an index B-tree is not in the correct format on the tape, this message may also display:",
            "This is merely a warning that the file number was not found in the file-of-files. It creates one.",
            "If the object code is not in the proper format, then blocks of it are skipped. If there is no header that details how many blocks are to follow, then all blocks are skipped.",
            "Could not find the file in the file-of-files.",
            "The restore was probably from incremental or transaction log tape. File not found in file-of-files and could not be renamed because restore does not know the path name of the old file. This is one reason why incremental saves cannot be restored from TCL (Too much reliance on file number rather than path name.). The rename-file or move-file was skipped."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"runtime-errors file",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"state file",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"tcl-stack file",
        "Syntax":"",
        "description":[
            "Description",
            "Normally, the item-ID of the 1 file is the users-ID. If a t option is included in the options attribute of the users item, the item-ID of the tcl-stack is the line number of the process logged on.",
            "A users item must be created in the users file prior to any user logging on to the system. However, tcl-stack items are created automatically when the user executes the first command from TCL.",
            "Each and every unique command typed at the : TCL prompt, is saved as an attribute in the tcl-stack file. Having unlimited item size means that there is no size limit for the items in the tcl-stack. Therefore, the file size should be monitored by the System Administrator. Because the 2 file is on the dm account, it should be saved (with t-dump) prior to an operating system upgrade."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"tv.log file",
        "Syntax":"",
        "description":[
            "Description",
            "This file is created, if necessary, by the file-save process. Each t-verify error detected is logged into tv.log, sorted by the internal date.",
            "Since this file is created on the fly, it has no attribute-defining items for creating AQL reports. The sort-item and list-item commands are useful for examining the data in the tv.log.",
            "There is no size limit for the tv.log file. Additionally, deletion of the file must be performed manually."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"upgrade.file file",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"users file",
        "Syntax":"",
        "description":[
            "Description",
            "Each user should have their own unique logon item-ID in the users file. The tcl-stack item for each user uses the same item-ID as the logon item-ID in the users file."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            ":up md,users, ja\nusers \u2019ja\u2019 size=318\nname Jo Allen\naddress Shipping & Receiving\nzip\nphone x.449\nkeys\npassword\nprivilege sys2\noptions n\nmacro logto dm\n10 set-sym gsym\n11 brk-level\n12 bulletin.board new\n13 tcl-hdr-off"
        ]
    },
    {
        "name":"var File",
        "Syntax":"",
        "description":[
            "Description",
            "The var driver (most easily used via the var file in the dm account) provides access to TCL shell variables via a file interface.",
            "A read using the variable name as the item-ID returns the shell variable\u2019s contents.",
            "A read using a TCL command surrounded by back-quotes executes the TCL command and returns the results as if those results had been stored in an item.",
            "A write using the variable name as the item-ID is identical to running a TCL set on that variable.",
            "A delete using the variable name as the item-ID is identical to running a TCL unset on that variable.",
            "A select\/readnext loop is similar to the     TCL penv command except that only the variable names are returned. Note that     only user-defined variables are returned by the select command. Pre-set and     system variables can only be queried by performing a direct read command."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "open \"var\"\n*\n* Read a shell variable\n*\nprint @user\n*\nread xx from \"user\"\nprint xx\n*\n*\n* Write a shell variable\n*\nexecute \"set myvar=abc\"\n*\nwrite \"abc\" on \"myvar\"\n*\n* Delete a shell variable\n*\nexecute \"unset myvar\"\n*\ndelete \"myvar\"\n*\n* Display a list of user variables\n*\nexecute \"penv\"\n*\nselect\nloop\nreadnext id then print id else exit\nrepeat\n*\n* Execute a TCL command\n*\nexecute \"display @\u2018who\u2018\"\n*\nread xx from \"\u2018who\u2018\"\nprint xx"
        ]
    },
    {
        "name":"vi.dump file",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"words file",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"wsym file",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"xp file",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"zcf file",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Terminal control language",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"TCL overview",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "who\ncreate-file test.file 3 7\ncopy md * (t\ncompile bp *\nsort entity by name name"
        ]
    },
    {
        "name":"Dot stack",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Dummy restore",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "Restore from Full, incremental,\ntransaction log (f\/i\/t):f file#:99999",
            "Reads every file in every\naccount on the full save tape, looking for file number 99999 and in\nthe process, reads the entire tape.",
            "sel-restore md * (n"
        ]
    },
    {
        "name":"Dummy save",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "This example is equivalent to\na full dummy save, such as afile-save.",
            "save (fd",
            "This example is the equivalent to anaccount-save(dummy).",
            "save (fdi"
        ]
    },
    {
        "name":"Editing TCL commands",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"BREAK key",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Level pushing",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Macros",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Macro statements",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"comment statement",
        "Syntax":[
            "Syntax",
            "comment (text){(text2)}{(...)}{+}\n"
        ],
        "description":[
            "The comment statement performs cursor control and screen display commands in a macro is similar to the t statement in a PROC. Its primary function is to add screen control capabilities to macro commands.",
            "Parameters are passed to the comment command as discrete units surrounded by parentheses. These types of text are supported:",
            "Several text segments may be entered on a single comment command line, but each must be surrounded by a single pair of parentheses.",
            "The optional + character at the end of a line suppresses the automatic CR\/LF (carriage return and line feed)."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "A sample logon macro to clear\nthe screen:",
            "001 n clear-screen macro\n002 comment (-1)",
            "This example of a logon macro clears the screen and displays\nthe user\u2019s name\/account, the current date and time, and the current\nterminal and printer assignment parameters.",
            "001 n logon macro\n002 comment (-1)(-13)(User Logon)(0,2)(User:)(-14)(20,2)+\n003 who\n004 comment (0,3)(-13)(Time-Date:)(-14)(20,3)+\n005 time\n006 comment (0,5)(-13)(Spooler Assignment)(-14)\n007 sp-assign ?\n008 comment (0,10)(-13)(Terminal Assignment)(-14)\n009 term"
        ]
    },
    {
        "name":"display statement",
        "Syntax":[
            "Syntax",
            "display message.text{+}\n"
        ],
        "description":[
            "The display statement outputs text on the screen in a macros or a Procs. If the message text is terminated by a +, the trailing carriage return is suppressed."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "display I am \u2018who\u2018!",
            "Displays:",
            "I am 0 joe pa!",
            "Clears the screen, displays the highlighted text, and\nsuppresses the trailing form feed.",
            "display @(-1)@(-13)main menu@(-14)+",
            "Sends the Del character.",
            "display Sending del: @(O.7F)"
        ]
    },
    {
        "name":"prompt statement",
        "Syntax":[
            "Syntax",
            "prompt {prompt.text}\n"
        ],
        "description":[
            "The prompt statement in a macro prompts the user with a specified text string. The user is then given the option to either continue (by entering c, or stopping the process (by entering q). No other characters are allowed."
        ],
        "parameter":[
            "Parameter(s)",
            "prompt.textDisplays text that requires user input.\u00a0This option has\nthe same conventions and syntax as thedisplaycommand."
        ],
        "example":[
            "Example(s)",
            "mactest\n\n001 n\n002 display Starting file save\n003 prompt Insert first reel\n004 save (fts",
            "In the example above, after displayingStarting\nfile save, the user is prompted with:",
            "Insert first reel -- Quit\/Continue (q\/c)?",
            "If acis entered, thesavecommand is executed. The macro stops immediately if\naqis provided.",
            "Note:Onlycorqare accepted by thepromptcommand."
        ]
    },
    {
        "name":"rem statement",
        "Syntax":[
            "Syntax",
            "rem text\n"
        ],
        "description":[
            "The rem statement, used in a macro, designates a remark statement and all text which follows on the same line is ignored.",
            "The remark statement is used to explain or document the macro. It is provided for compatibility and readability."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Menus",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Options (TCL)",
        "Syntax":[
            "Syntax",
            "tcl.commands...(n\ntcl.commands...(p\n"
        ],
        "description":[
            "The print (p and no pause (n options are the only standard options available to every TCL command.",
            "Options always display at the end of a TCL command and must be preceded by a left parenthesis. Commas (,) are optional between the parameters. This rule does not, however, apply to spooler, dump, and where commands."
        ],
        "parameter":[
            "Parameter(s)",
            "optionsnActivates thenopausefunction on output\nto the terminal.pDirects output to the system printer via the spooler."
        ],
        "example":[
            "Example(s)",
            "copy dm,bp, term-type (p\nblock-print this is a test (n"
        ]
    },
    {
        "name":"Paragraph",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Looping",
        "Syntax":[
            "Syntax",
            "loop\ntcl.commands\nrepeat\n"
        ],
        "description":[
            "Paragraphs allow simple loops by starting a block of commands with the loop command and ending that block with the repeat command. The loop command indicates the beginning of a loop in a paragraph."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Data stacking",
        "Syntax":[
            "Syntax",
            "data string\n"
        ],
        "description":[
            "As in a macro, paragraphs can stack data by adding a second value after a command. Also, a separate line can display with the syntax:",
            "This works in a similar fashion to the BASIC data statement.",
            "The data statement stacks the data string from within a paragraph."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Screen input\/output",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Branching",
        "Syntax":[
            "Syntax",
            "if {\"|\u2019}string1{\"|\u2019} [<|l|=|e|>|g] {\"|\u2019}string2{\"|\u2019} then go label\nif [constant|<<input.prompt>>] [conditional]\n[constant|<<input.prompt>>]then go label\n",
            "<<cnumber>>\n<<inumber,prompt.text>>\n<<f(file.name,item.name{,attribute{,value}}),prompt.text>>\n<<{options}{,@([x,y|bell|clr])},prompt.text{,mask}>>\n"
        ],
        "description":[
            "For conditional branching, the if-then-go construct is     used.",
            "The if statement is a conditional branch statement in a paragraph or         PROC."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "PA\nif <<Input a number between 1 and 10:>> > 5 then go greater\ndisplay Less than or equal to 5\nGo done\ngreater: display Greater than 5\ndone: * There must be a space after the colon",
            "The previous example asks the user for a number, and then prints a result based on the\n        value of this number."
        ]
    },
    {
        "name":"Comments",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Line continuation",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "This paragraph extracts the file\nname from the second word of the original TCL statement. If the parameter\nis not present, then the paragraph prompts for the name. Next, the\nlineFile={file.name}displays. After that, the user\nis prompted for items in{file.name}(return\nto terminate)>.",
            "The<<enter file>>prompt is repeated, but the paragraph processor substitutes the\nexisting file name since it has already been entered. At theItems...prompt, the user may type several item names followed\nby pressing ENTER. After terminating the input by entering a null\nentry, the paragraph displays a listing of those items in the desired\nfile.",
            "paragraph\ndisplay file = <<i2,enter file>>\nlist <<enter file>> _\n<<r,items in <<enter file>> (return to terminate)>> a1 a3 a3",
            "This paragraph lists the default file of bp if no file\nis specified. When listing the file, it first prompts for the options.",
            "paragraph\n\n* List a default file if not specified\nif <<c2>> = \"\" then go default\nlist <<c2>> (<<Input options>>\nif 1 = 1 then go done\ndefault: list bp (<<Input options>>\ndone: * Done with paragraph"
        ]
    },
    {
        "name":"@ shell variable",
        "Syntax":[
            "Syntax",
            "@[{]}variable.name[}]|@[{]$variable.name[}]\n@\u2018tcl.command\u2018\n",
            "account.name1,account.name2,account.name3...\n",
            "prefix,prompt1,prompt2\n"
        ],
        "description":[
            "The @ character indicates a D3 shell variable."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "The sequence of commands below\nshow the typical interaction from TCL:",
            "set prompt=prod,>,?\nprod>set myfile=\"dm,bp,\"\nprod>who\n70 john ba\nprod>penv\nprompt=prod,>,?\nmyfile=dm,bp,\nprod>select @$myfile sampling 5\n[4042] 5 items selected out of 5 sampling items\nprod?list @$myfile heading \"report from @logname\"\nreport from ba\ndm,bp,........\ncolor\npick\nset-imap\nshp-kill\nrestore-accounts\n[405] 5 items listed out of 5 items\nprod>display @system.return.code\n5\nprod>display @who|\u2019@who\u2019|@{time}xxx|@date|@dateabc\njohn|\u2019@who\u2019|15:27:12xxx|17 Feb 2003|@dateabc\nprod>display @\u2018time\u2018\n15:27:14 17 Feb 2003 Monday\nprod>unset prompt\npenv\nmyfile=dm,bp,",
            "Note:This feature requires the use of single backward quotation\nmarks.",
            "Shell variables can also be accessed from conversions.\nAssume that a file called junk has the following attribute-defining\nitem:",
            "dict junk 'myattr' size = 45\ndictionary-code a\nattribute-count 1\nsubstitute-header\nstructure\noutput-conversion @$mycv\ncorrelative\nattribute-type L\ncolumn-width 10\n...",
            "Assume that the file contains one item called 1 that contains\nthe text abc123. Notice how the conversion can be modified without\nchanging the attribute definition:",
            "set mycv=mcu\nlist junk myattr\n\u00a0\npage 1 junk\njunk...... myattr.......\n1 ABC123\n[405] 1 items listed out of 1 items.\n\u00a0\nset mycv=mca\nlist junk myattr\n\u00a0\npage 1 junk\njunk...... myattr.......\n1 abc\n[405] 1 items listed out of 1 items.",
            "Multilingual systems are facilitated by use of the@$messagesvariable. Assume that a system exists with 30\nEnglish speaking users, and 20 French speaking users. Assume that\nthe standard English messages are stored indm,messages(the default), and that the French are indm,messages,french. By default, all users get their messages from thedm,messages,file. To cause French speaking users to use French error messages,\nit is a matter of inserting the following line as the first thing\nin each French users' user macro:",
            "set messages=dm,messages,French,"
        ]
    },
    {
        "name":"Spooler overview",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Spooler account",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Locks (Spooler)",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Options (Spooler)",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"peqs",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "list peqs\n Page 1 Peqs 10:57:12 12 Feb 2003\n peqs\n 1\n 2\n 3\n [405] 3 items listed out of 3 items.\n u peqs 3 (r\n peqs \u20193\u2019 size = 167\n 01 .:list md md (p\n 02 Page 1 md 10:57:59 12 Feb 2003\n 03\n 04 md...................\n 05\n 06 md\n 07\n 08 [405] 1 items listed out of 1 items.\n 09\n peqs \u20193\u2019 size = 167 filed"
        ]
    },
    {
        "name":"Windows printer interface",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Configuring a Windows printer for the Windows GDI driver",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Windows GDI printing typeface management",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Default font management",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Tape devices overview",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"TCL stack",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"TCL commands",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"TCL command categories",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"A",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"! command",
        "Syntax":[
            "Syntax",
            "!{unix.command}\n"
        ],
        "description":[
            "Description",
            "The ! command creates a UNIX shell and executes any UNIX command.",
            "The UNIX command parameter is any UNIX command. A shell is created and the command submitted to it. If the UNIX command parameter is omitted, a shell is pushed. D3 messages are held until the UNIX command is complete. If more than one message is received, only the last one displays when returning to TCL.",
            "Each time the ! or sh command is invoked, a new shell is pushed on top of TCL. Control is transferred to this shell. Pressing CTRL+D returns control to TCL.",
            "Macros in the master dictionary make almost all UNIX commands available from D3. Listed below are two useful tips on using this facility:",
            "Avoid creating an intermediate shell process.",
            "The sh command uses the system UNIX library call to execute the UNIX command. This command creates a new process, which executes the default shell \/bin\/sh and passes the string to this new shell. In turn, this new process creates another shell process, which does an exec of the UNIX command. The intermediate process, the one created by the system, is normally useless. The macro structure below avoids the creation of a third process:",
            "The exec shell command replaces the second process.",
            "Changing and setting environment variables.",
            "After a shell is created, it inherits environment variables from the D3 process. It is possible to change any variable in the macro itself. For example, consider this example:",
            "This macro changes the default directory, sets a new (UNIX) terminal type and finally executes a shell. By typing env in this new shell, the new setting is shown. To permanently set environment variables, use the TCL environ."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"abs-dump command",
        "Syntax":[
            "Syntax",
            "abs-dump file.reference {(options)}\n"
        ],
        "description":[
            "The abs-dump BASIC program dumps the abs file to magnetic media, creating a bootable tape.",
            "For Windows: Not Supported"
        ],
        "parameter":[
            "Parameter(s)",
            "optionsaDrive 0 (default)bDrive 1fForces link field to bottom of frame.nHigh density (1.2 mb, 1.4 mb)iSuppresses display of the frame counter.lZero link field.qSCT driverAllows respecification of destination ABS frame size.sStandard density (360k, 720k)vDump to pre-attached devicewSwaps header field sizes.",
            "Warning:When dumping to a floppy disk or pseudo\nfloppy disk, it is necessary to first do at-att 512. Failure to do this can generate an abort."
        ],
        "example":[

        ]
    },
    {
        "name":"abs.fid command",
        "Syntax":[
            "Syntax",
            "abs.fid {file.reference}\n"
        ],
        "description":[
            "The abs.fid command displays the ABS information."
        ],
        "parameter":[
            "Parameter(s)",
            "file.referenceName of anabsfile. If not specified,\nthe boot ABSdm,abs,is implicitly used. The\nABS base FID, release date, implementation, and release title display."
        ],
        "example":[
            "Example(s)",
            "abs.fidabs           abs   abs   abs     abs          abs     abs   abs\nfilename      fid   size  usage   date         implem  lvl   revision\n---------     ---   ----  -----   ----         ------  ---   --------\nabs           18    1438  1332    23 Feb 2003  RS6000  2     5.2.0.A3\nitem 000=>    18                  23 Feb 2003  RS6000  2     5.2.0.A3"
        ]
    },
    {
        "name":"account-coldstart macro",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"account-maint command",
        "Syntax":[
            "Syntax",
            "account-maint\n"
        ],
        "description":[
            "The account-maint command invokes a menu to create, modify, or delete user accounts.",
            "The account definition item, located in the mds file, can also be updated or deleted using the Update processor. This requires a sys2 privilege level."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "account maintenance workscreen\n1   Account name             -Lasalle\n2   Synonym account\/Modulo   -19\n3   Privilege level          -SYS0\n4   Password                 -none\n5   Accounting update        -L\n6   Retrieval codes\n7   Update lock codes\nEnter line number to update\nor functions ex-exit fi-file fd-delete"
        ]
    },
    {
        "name":"account-restore command",
        "Syntax":[
            "Syntax",
            "account-restore account.name{(options)}\n"
        ],
        "description":[
            "The account-restore BASIC program restores an account from an account-save, file-save, or md-save magnetic media or pseudo tape.",
            "The account master dictionary is not restored if it already exists in the mds file.",
            "The system prompts for the account name on tape. It only has to be entered if the account name on tape is different than the account name stated in the command line.",
            "Additional changes saved on a transaction log and\/or incremental save tape may also be applied, once the account\/master dictionary has been restored. The default settings prompt for both of these.",
            "An account-restore may be started from any tape of a multitape file-save.",
            "To save time in searching a tape, the list-file-stats listing may be consulted to determine the reel on which the data for the master dictionary starts. The listing is only generated if the s option is chosen while doing a save.",
            "After the restore is complete, the system creates indexes for files having an index specified in the file-defining item, except in the case where indexes are saved to tape and the account-restore b option is not used",
            "The appropriate media\/device must be attached prior to issuing this command.",
            "After performing an account-restore on FSI files, the nt_indexer command is run automatically to create indexes on FSI files."
        ],
        "parameter":[
            "Parameter(s)",
            "optionsframe.sizeInteger number that designates the frame size of the source\nsystem that createdsavemedia. Specifying a frame size automatically\nenables thefoption, which has the effect of disabling\nfast restores. This option automatically affects modulos, which are\neither divided or multiplied by the specified number, according to\nthe data frame size on the target machine. If the target frame size\nis bigger than the source frame size, all modulos are divided by the\nratio (target\/source = ratio). For example, if the target system has\n2 KB data frames and the source system had 500-byte frames, the modulos\nwould all be divided by 4. This file resizing operation occurs after\nthe reallocation parameter has been checked, unless file resizing\nhas been disabled during the initial boot process.aIndicates that the tape is already positioned at the data\nsection of the correct account. This means that it is positioned past\nthe label, right at the beginning of the data. For example, if thet-fwdcommand was executed to position to the right spot\non the tape, at-rdlblcommand would have to be\nexecuted to be positioned at the beginning of the data.bIgnores any indexes saved on tape.cCompatible tape. This is used on tapes produced on licensee\nsystems. The restore process runs noticeably slower.dData-sensitive files. All files except the master dictionary\nare restored as ds-type files and are case-sensitive.fDisables fast restores. This option is required if the data\nbeing restored needs to be logged by hot-backup or transaction logging.gSuppresses the generation of indexes in cases where indexes\nare not saved to tape.mMicrodata, McDonnell Douglas compatibility. This option is\nrequired if you are restoring from anaccount-savethat saved multiple accounts (for example,account-save\nacc1 acc2 acc3) and you want to restore any of the accounts\n(other than the first account). For example:account-restore\nacc1restoresacc1and does not require\nthemoption.account-restore acc2 (mrestoresacc2and it requires themoption since the account being restored is not the first account\nin theaccount-save.nDisables file reallocation process.sSuppresses messages on transaction log tapes.wAllows restoring a tape made on a byte-swapped machine (for\nexample, Windows and Linux) to a nonbyte-swapped machine (for example,\nAIX).zBypasses prompts for restore from incremental or transaction\nlogs.",
            "Warning:If incremental saves and\/or the transaction\nlogger is being used, the restore process may not be complete until\nthose tapes have been restored as well."
        ],
        "example":[
            "Example(s)",
            "Restores the production account\nfrom tape and calls it production.",
            "account-restore productionaccount name on tape:Enter",
            "Restores the the production account from a VME tape to the FSI.",
            "account-restore FSI:productionaccount name on tape:Enter",
            "Restores the dm account from the tape and calls it dm.old.",
            "account-restore dm.oldaccount name on tape:dm",
            "This example is an account created on a system with 500-byte\ndata frames. If the target were to have a data frame size of 2 KB,\nfor example, all new modulos are divided by 4 to prevent files from\nbeing drastically oversized.",
            "account-restore old.d3.prod (500account name on tape:prod"
        ]
    },
    {
        "name":"account-save command",
        "Syntax":[
            "Syntax",
            "account-save {account.name} {account.name...} {(options)}\nfile-save tape label = {tape.label}\naccount name = account.name\n"
        ],
        "description":[
            "The account-save BASIC program saves individual accounts to the currently attached peripheral storage device. File statistics are built with each save, including an account-save and a dummy save, contrary to VME file statistics. The s option is no longer necessary."
        ],
        "parameter":[
            "Parameter(s)",
            "account.nameIndicates the name of the account\nto save. If more than one account is specified, each must be separated\nby a space. If not specified, the system prompts for the account name.\nThe accounts to be saved can be specified in a select list.tape.labelOptional 48-character string\nthat is written into the tape label area at the beginning of eachreelof thesave.aSuppresses the added information (including all update stamps\nand binary item sizes).bSaves the B-tree indexes. After afull-restore, this prevents having to regenerate indexes.dPrevents the clearing of dirty bits.Note:This option should\nonly be used when performing a save in preparation for a full restore.eSaves external QS-pointers. QS-pointers are special Q-pointers,\nwhich point to an OSFI data source.Note:Only the spooler and UNIX\nOSFI drivers support the save functionality at this point.gDisplays file inconsistency errors when found, but skips the\ngroup and continues the save. Errors are logged in the dm,errors,\nfile in attributes 14, 15, and 16 of the error item. Attribute 14\nis the save date, 15 is the primary group FID, and 16 is the account\n> dictionary > data display information. At the end of the save, a\nmessage displays indicating the total number of file inconsistency\nerrors encountered, if at least one was found. If used with theboption, index corruptions are also skipped.hSuppresses clearing the transaction log queue.jSuppresses the dirty bit counter display.kReorganizes all file of files file numbers sequentially on\nthe tape.lEach file may have a list of specific item-IDs within the\nfile to save. This option saves only the list of item-IDs provided\nin the associated item for the given file, located in thedm,file of files,file, beginning at attribute 25. Any\nnumber of item-IDs may follow in attributes 26 and beyond. An asterisk\nin attribute 25 saves all items in the file. If there is no list,\nonly the file-defining item is saved, as if the file had adydictionary code. In addition, theloption\ndoes notunmark(clear dirty bits) items that have changed.\nThese items are saved on subsequent incrementalfile-savecommands oraccount-savecommands. This is similar\nto thevoption for the fullfile-save.mSame as theloption, but it additionallyunmarksorclearsthe dirty bits.pDirects console listing to the printer, via the spooler.qChanges the terminal display from hierarchical format to indented\nformat.rSame as thelandmoptions,\nexcept the list is also saved with the file as a separate item in\nthedm,file of files,file.sAn item is stored indm,file of files,file for each file saved. Thesoption generates\nadditional statistics, which can be reviewed withlist-file-stats.uUnconditional resizing.Note:Unless theuoption is specified, the system does a completeaccount-save. However,account-savedoes not save a file with\ndx in attribute 1 of its file-defining item. Althoughaccount-savedoes save a file withdyin attribute 1 of its\nfile-defining item, none of the items in the file are saved.xSaves files with a D-pointer type ofdx.ySaves files with a D-pointer type ofdy.",
            "In order for theincrementalaccount save to work,\nthe system marks any item that is changed. This mark is normally cleared\nby a completefile-save; however, when usingaccount-save, the marks indicating changed items are not\ncleared.",
            "If a file has adxordycode and an item in it is updated, that item is not marked as changed\nwhen it is filed; therefore, even if thexoryis removed before theaccount-saveis\nrun, that item is not saved by anincrementalaccount save.",
            "Theaccount-saveprocessor locks groups as\nit saves them. While the group is locked, no process can access any\nitem in that group. Locking groups prevents spurious file inconsistency\nerror messages that would occur if another process changed an item\nwhile it was being saved. Up to four groups can be locked at one time.\nThese groups are the ones containing:",
            "the mds dictionary pointer.the md pointer.the file dictionary pointer.the group for the data currently being saved.",
            "If a SCT is being saved, an explicit end-of-data (EOD) sequence\nmust be written since SCT cannot back up. Use eithert-weoffrom TCL or the BASICweofstatement to write\nthe second EOD needed to indicate the end of the file (EOF). Otherwise,account-restoreorsel-restorefails\nto see the end of the tape.",
            "Theaccount-savecommand is a BASIC program, which issues thesavecommand with thef,t,vandioptions. Any options available\nto thesavecommand may be added to the command\nline."
        ],
        "example":[
            "Example(s)",
            "account-save\nfile-save tape label = thursday\naccount name = dm\n\u00a01 35 > dm\n\u00a01 36 > dm > newac\n\u00a01 37 > dm > newac > newac\n\u00a0...",
            "The process displays the files being saved in the form:",
            "Reel#,File#, > ,account.name, > ,dict.name, > ,data.name",
            "In all multireel operations, if the save detects end of\nmedia before completing the save, it prompts with the message:",
            "load volume # nand type \u2019c\u2019\nlabel 08:00:00 16 Feb 2003 data...#_",
            "When the nextreelis inserted or mounted,ccontinues the process, orqstops\nit and returns control to TCL. The system does not check to determine\nif a different volume was inserted or mounted."
        ]
    },
    {
        "name":"add command",
        "Syntax":[
            "Syntax",
            "add number number\n"
        ],
        "description":[
            "The add command adds two integer numbers together and displays the result as an integer number."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"addbi command",
        "Syntax":[
            "Syntax",
            "addbi {function1{function2}...}\n"
        ],
        "description":[
            "Description",
            "The addbi command extends the functionality of the D3 monitor by making new C\u00a0functions available to FlashBASIC.",
            "The addbi command adds the user-defined built-in functions defined in the given function to the monitor. These added functions can be called directly from BASIC.",
            "Built-in functions are defined in the user.builtin item in the dm,messages, file. The addbi command updates the user.builtin item and creates in the current directory the C module px_user.c, which is compiled and linked with the default Generic Monitor libraries to create a customized monitor."
        ],
        "parameter":[
            "Parameter(s)",
            "function1Specifies the first user-defined built-in function that is\nadded to the monitor. If a list of functions is omitted from the command\nline, then a list is presumed active. If no list is active, the User\nGeneric Monitor Library (libgmu.a) is rebuilt to match the list of\nbuilt-in functions.Note:Up to 128 user-defined functions can be\nadded to the monitor.function2Specifies the optional second user-defined built-in function\nthat is added to the monitor."
        ],
        "example":[

        ]
    },
    {
        "name":"addx command",
        "Syntax":[
            "Syntax",
            "addx hex.number hex.number\n"
        ],
        "description":[
            "The addx command adds two hexadecimal numbers and displays the result as a hexadecimal number."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "addx 1F 3352"
        ]
    },
    {
        "name":"admin utility",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"admin.files utility",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"admin.maint utility",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"admin.status utility",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"admin.tape utility",
        "Syntax":[
            "Syntax",
            "admin.tape\n"
        ],
        "description":[
            "The admin.tape menu contains options to list the devices as well as commands to set up tape devices for usage."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"admin.tape.setup utility",
        "Syntax":[
            "Syntax",
            "admin.tape.setup\n"
        ],
        "description":[
            "The admin.tape.setup menu assigns the various tape devices for use."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"alarm command",
        "Syntax":[
            "Syntax",
            "alarm {delay|hh:mm{:ss}{,date|*}{command}}{(options}\n"
        ],
        "description":[
            "The alarm BASIC program schedules a task at a given time, or after a given delay in seconds, at a given date.",
            "For Windows: Not Supported"
        ],
        "parameter":[
            "Parameter(s)",
            "dateDefaults to current date if no\ndate is specified. If an asterisk is used as a date, the command executes\nevery day at the specified timecommandIf the command is not specified, options apply to thealarmcommand itself.If the command is specified, the options are part of the command.If the command starts with an asterisk, it is assumed to be\ntext, which displays on the user\u2019s terminal when the alarm expires.If no option or command is specified, the Update processor\nis entered to add, change, or review alarms.optionscCancels all currently scheduled tasks for the user.lLists the currently scheduled tasks for the user.sSets the current alarms. This option rearms the alarm. It\nshould be included in every user macro to start the alarm every time\na user logs on.",
            "Warning:Beforealarmcan\nbe used,alarm (smust be run on the dm account,\nto create the filealarm.file. This file is created\nas a dx-type D-pointer, and is not saved on anysave-classbackup.",
            "The alarm signal handler must be set touseralarmby thetrapcommand.",
            "If an input with time out is done after the alarm has been set, the\nalarm is suspended for the duration of the wait and restarted for\nwhatever remaining time. Any command which should have been executed\nduring the wait is postponed until the input with time out is done.",
            "The alarm is run by the current process. If an event should have\nbeen executed while the process executes a TCLsleepcommand, it is cancelled. If an alarm occurs while the user is logged\noff, it is discarded.",
            "The alarm can run as long as the process\nis not disconnected. To be sure, however, thealarm (scommand, without any argument, should be included in the user macro\nto restart the alarm every time the user logs in.",
            "If the alarm\nhandler is not set properly, the alarm will not run. For example:",
            "alarm 5 whichNext event at 14:28:00, 01\/09\/03 \"which\"\nalarm: Alarm signal handler is not set. Use \u2019trap alrm useralarm\u2019 to set it.",
            "The trap handler can be set by the command:",
            "trap alrm run dm,bp, useralarm"
        ],
        "example":[
            "Example(s)",
            "Sets an alarm for 18:00 (6:00\nPM) today. At this time, if the process is still logged on, the messageFile save is startingdisplays on the user\u2019s terminal.",
            "alarm 18:00 * file save is starting",
            "In 120 seconds, the process logs off. This command can\nbe included in a Proc, to make sure an input screen does not wait\nfor an input. When the input is complete,alarm (cclears the time out.",
            "alarm 120 off",
            "At 9 o\u2019clock, on December 3,meeting timedisplays.",
            "alarm 09:00,12\/03 display meeting time",
            "Every day, at 17:00, themessagecommand\nexecutes.",
            "alarm 17:00,* msg * file save in 30 minutes",
            "Enters the Update processor to edit the user alarm item.",
            "alarm",
            "Lists the currently scheduled events.",
            "alarm (l",
            "Displays the next scheduled event, and starts the alarm.\nThis command should be included in the users\u2019 macros, so that the\nalarm is refreshed every time a user logs on.",
            "alarm (s"
        ]
    },
    {
        "name":"archive-accounts command",
        "Syntax":[
            "Syntax",
            "archive-accounts {<purge_date>} {(d}"
        ],
        "description":[
            "The archive-accounts command moves entries from the accounts data   level to an archive data level, or optionally deletes them."
        ],
        "parameter":[
            "Parameter(s)",
            "<purge_date>Specifies the date for which all entries created on or before the date will be\n        archived.The date can be expressed in external form (for example, 2\/2\/22) or in internal\n        form (for example, 19757). If no <purge_date> is provided, then it\n        defaults to the current date and all entries in the accounts data level will be\n        archived.(dThe(doption specifies that all entries resulting from the\n        specified <purge_date> will not be archived and instead will be\n        deleted.",
            "This command helps manage the accounts file. Given the potential importance of tracking which\n    users were on a system and when, the default behavior is to archive, not delete, entries.CAUTION:This utility briefly locks the each item in thedm,accounts,file as it\u2019s processed. Each item corresponds to a user-id\n     from thedm,users,file. During this time, any users logged on with that\n     user-id will not be able to logoff from the system or or logto another account."
        ],
        "example":[
            "Example(s)",
            "The following example archives all entries indm,accounts,todm,accounts,<internal date>",
            "archive-accounts",
            "Both of the following examples archive all entries on or before 2\/2\/22 todm,accounts,19757.",
            "archive-accounts 2\/2\/22",
            "archive-accounts 19757",
            "Thedm,bp, archive-accountsprogram itself is an example of using thearchiveAccountsSub()subroutine."
        ]
    },
    {
        "name":"assignfq (UNIX) command",
        "Syntax":[
            "Syntax",
            "assignfq form.queue{-n},device.name{(unix.command)}\n{,form.queue,device.name{(unix.command)} {,...}} {(options}\u00a0\nassignfq ?\n"
        ],
        "description":[
            "The assignfq command assigns a printer device driver to a spooler form queue. This printer driver is then used by the Output processor, or by FlashBASIC @()\u00a0functions to generate special formatting commands such as boldface, cursor positioning, or underlining, when output is directed to the spooler.",
            "Using a ? as a parameter produces abbreviated TCL help. Multiple form queues can be updated in the command, but each queue must have an associated device name. Printer drivers are located in the dm,devices, file. The current driver assignments may be displayed with the listabs command. A printer may have more than one form queue attached to it.",
            "On UNIX-based implementations, the spooler has the ability to transfer data directly from the D3 process to a UNIX-based operation such as a spooler, file, communications link, hardware device, and so on.",
            "The relationship between D3 and the UNIX process is established by the assignfq command. Place the UNIX command string in parentheses immediately after the device name field. The assignfq command recognizes the parentheses to mean a UNIX process and sets up the proper linkages."
        ],
        "parameter":[
            "Parameter(s)",
            "form.queueSpooler form queue to which the\nspecified device driver is being assigned.device.nameName of the device to assign\nto the specified form queue. If \"null\" is specified, unassigns a device\nfrom the specified form queue.optionsc(optional) Compiles the devices file item into the printer\ncontrol block.",
            "The printer control block is a binary item, (similar to\na system-level dynamic array) that contains the codes and control\nstrings pertinent to the device in question. Each system function\n(@(-n)) has its own array position, and the system\ncursor function searches this item for control strings such as clear-screen,\nclear to end of screen, and so on.",
            "Warning:The changes\ncreated by anassignfqfunction do not take effect\nfor a given line until ansp-assigncommand is\nexecuted on that line. It is recommended that allassignfqcommands be incorporated into the system\u2019s coldstart macros so that\nthey are automatically set up when the machine boots. Direct-to-UNIX\nspooling is only available on UNIX systems. The BREAK key must not\nbe pressed while spooling a job directly to a UNIX process as the\nUNIX child process will receive a SIGKILL, causing termination of\nthe spool output. Since direct-to-UNIX spooling goes directly out\nto a UNIX command, thesp-assignoptionso,h,i,d,candtare ignored. Theaandsoptions still work in this situation.\nWhen printing to UNIX, all output is buffered through UNIX pipes.\nOutput may not actually enter the UNIX command until the D3 process\nhas closed the job or returned to TCL, at which time D3 closes the\npipe, forcing UNIX to flush the buffer."
        ],
        "example":[
            "Example(s)",
            "assignfq 3,hp-lzrii",
            "The example above assigns driver hp-lzrii to form queue\n3.",
            "assignfq 3,hp-lzrii(cat>\/file1)sp-assign f3?Line#   Status   Copies   Form#   Device\n7       p        1        3       hp-lzrii(cat>\/file1)list only md (p",
            "The aboveassignfqcommand establishes a relationship between the D3 spooler form queue\n3 and the UNIX process cat > \/file1. Then, thesp-assigncommand tells the system to attach to form queue 3. Note that thesp-assignis necessary even if the line is already assigned\nto form queue 3 so that the process is informed that form queue 3\nshould now output to a UNIX command. Finally, thelistcommand creates the UNIX file \/file1 with an image of the listing.",
            "The FlashBASIC program below creates a UNIX file containing the\ntext line 1.",
            "execute \"assignfq 0,ibm3151(cat>\/file1)\"\nexecute \"sp-assign f0\"\nexecute \"!rm \/file1\"; * Clear old one out\nprinter on; * Start printer output\nprint \"line 1\"\nexecute \"!ls -l \/file1\"\nprinter close; * Close output\nexecute \"!ls -l \/file1\"\nexecute \"!cat \/file1\"",
            "The output of the program is:",
            "Assigned form queue device 0, IBM3151(cat>\/file1)\n-rw-rw---- 1 pick pick 0 Apr 23 11:15 \/file1\n-rw-rw---- 1 pick pick 7 Apr 23 11:15 \/file1\nline 1",
            "Special attention must be paid to the size of the UNIX\nfile. Note the size printed on the UNIX ls command (0 and then 7).\nEven after the line 1 text has been printed, the UNIX file size is\nstill 0. Only after the print file has been closed does the output\ndisplay in that file (as shown by the new size of 7). Because of this\nbuffering effect, printer jobs must be closed before examining the\nUNIX output."
        ]
    },
    {
        "name":"assignfq (Windows) command",
        "Syntax":[
            "Syntax",
            "assignfq form.queue{-n},device.name{,form.queue{-n} ,device.name{,...}}{(options}\u00a0\n"
        ],
        "description":[
            "The assignfq command assigns a printer device driver to a spooler form queue. This printer driver is then used by the Output processor, or by FlashBASIC @()\u00a0functions to generate special formatting commands such as boldface, cursor positioning, or underlining, when output is directed to the spooler."
        ],
        "parameter":[
            "Parameter(s)",
            "form.queue{-n}Multiple form queues can be updated\nin the command, but each queue must have an associated device name.device.nameName of the device to assign\nto the specified form queue. If \"null\" is specified, unassigns a device\nfrom the specified form queue.Warning:Thedevice.nameis limited to a maximum of 12 characters.optionscCompiles the devices file item into the printer control block.",
            "Using a?as a parameter produces abbreviated\nTCL help.",
            "Printer drivers are located in thedm,devices,file. The current driver assignments may be displayed with thelistabscommand. A printer may have more than one form\nqueue attached to it.",
            "The printer control block is a binary\nitem, (similar to a system-level dynamic array) that contains the\ncodes and control strings pertinent to the device in question. Each\nsystem function (@(-n)) has its own array position,\nand the system cursor function searches this item for control strings\nsuch as clear-screen, clear to end of screen, and so on.",
            "Warning:The changes created by anassignfqfunction do not take effect for a given line until ansp-assigncommand is executed on that line. It is recommended that allassignfqcommands be incorporated into the system\u2019s coldstart\nmacros so that they are automatically set up when the machine boots."
        ],
        "example":[

        ]
    },
    {
        "name":"auto-disconnect command",
        "Syntax":[
            "Syntax",
            "auto-disconnect [(n[-m])] {delay time} {(C"
        ],
        "description":[
            "Description",
            "The auto-disconnect command  allows certain clients the capability to   disconnect from the server with a custom delay, reserving the line for reconnect.",
            "The delay you define with the auto-disconnect command allows clients who         want to reserve their connection (line) to do so while they are logged off. ",
            "The client disconnects at the specified time, reserving the line, and releasing the license         consumed by the client. Using the delayed disconnect feature allows the license to be         available to other clients. This allows a larger number of users to connect to a server over         a period of time than are licensed to do so.",
            "To resume the client connection, connect via normal methods. If a license is available for         consumption, the client immediately commences connection on the associated line(s) and         process(es)."
        ],
        "parameter":[
            "Parameter(s)",
            "nIndicates the PIB number of the process from which you want to log off.n-mSpecifies a range of PIB numbers of the processes from which to log off.delay timeSpecifies the number of minutes to reserve the line associated with the process (or\n        processes). The maximum delay time is 32,767 minutes (approximately 22 days, 18\n        hours).(CIf you specify the C (Clear) option, the feature is disabled for the specified process\n         (or processes). The process remains connected when the client is at the Logon Please:\n         prompt.",
            "If there is only one parameter, then:If you are using the C option, the first parameter is the PIB number.If you are not using the C option, the first parameter is delay time set on the current PIB\n      number.",
            "Note:With the current implementation, theauto-disconnectcommand only allows\n    you to specify one range or lines. It does not support multiple comma-delimited ranges. For\n    example: 1-5,10-13."
        ],
        "example":[
            "Example(s)",
            "This example disconnects line 1 after 10 minutes at the Logon Please: prompt.",
            "auto-disconnect 1 10",
            "This example disconnects lines 2 through 4 after 5 minutes at the Logon Please: prompt.",
            "auto-disconnect 2-4 5",
            "This example clears theauto-disconnectcommand settings for line 1.",
            "auto-disconnect 1 (C",
            "This example clears theauto-disconnectcommand settings for lines 2\n        through 4.",
            "auto-disconnect 2-4 (C"
        ]
    },
    {
        "name":"auto-logoff command",
        "Syntax":[
            "Syntax",
            " auto-logoff target [seconds] [(options)]"
        ],
        "description":[
            "Description",
            "The auto-logoff command automatically logs off a specified process     after either a designated period of inactivity or the loss of an incoming DTR     signal.",
            "The auto-logoff command is used to automatically log off processes after         they have been idle for a certain period of time, or when a modem line is disconnected. ",
            "If neither seconds nor options are specified, the current auto-logoff         settings for the specified processes display.",
            "The                 auto-logoff command only takes effect after the process has been               logged off and logged back on again."
        ],
        "parameter":[
            "Parameter(s)",
            "targetIncludes any of these:accountSpecifies any process where the account is logged on.nSpecifies a process number.n-mSpecifies a range of process numbers.secondsNumber of seconds of CPU inactivity before the process\n                is automatically logged off.optionsThe following options are supported. Options must be\n                enclosed in parentheses.CTurns off automatic logoff for the specified process or processes.DMonitors the incoming DTR signal for the specified process and performs an\n                automatic logoff if none is detected.UAllows timeouts to be set that are associated with a user name."
        ],
        "example":[
            "Example(s)",
            "Example 1",
            "This example specifies that process number 9 will be automatically logged off after 600\n        seconds (10 minutes) of CPU inactivity:",
            ">auto-logoff 9 600",
            "Example 2",
            "This example specifies that the orders account be automatically logged off after 1200\n        seconds (twenty minutes) of CPU inactivity:",
            ">auto-logoff orders 1200",
            "Example 3",
            "This example logs off line 1 after 10 seconds of inactivity:",
            ">auto-logoff 1 10",
            "Example 4",
            "This example  logs off lines 2 through 4 after 5 seconds of inactivity:",
            ">auto-logoff 2-4 5",
            "Example 5",
            "This example logs off line 1 if it becomes disconnected:",
            ">auto-logoff 1 (D",
            "Example 6",
            "This example logs off lines 2 through 4 if they become disconnected:",
            ">auto-logoff 2-4 (D",
            "Example 7",
            "This example clears theauto-logoffcommand settings for line 1:",
            ">auto-logoff 1(C",
            "Example 8",
            "This example clears theauto-logoffcommand settings for lines 2 through\n        4:",
            ">auto-logoff 2-4 (C",
            "Example 9",
            "This example displays theauto-logoffcommand settings for line 1:",
            ">auto-logoff 1",
            "Example 10",
            "This example displays theauto-logoffcommand settings for lines 2\n        through 4:",
            ">auto-logoff 2-4"
        ]
    },
    {
        "name":"auto-restart command",
        "Syntax":[
            "Syntax",
            "AUTO-RESTART [ UPDATE.USER | [n[-m]] | PERMANENT ]\n{ command | CLEAR }"
        ],
        "description":[
            "Description",
            "The auto-restart command allows the user to specify or clear a   command that is executed whenever a D3 process is attempting to go to TCL.",
            " Attribute 9 of the system users file also contains the command to be     executed when a process attempts to go to TCL. The implementation of the      auto-restart command still supports the capability of attribute 9 of the     system users file and adds further functionality associated with executing     a command when going to TCL. This includes the immediate setting of the command on D3 processes     (instead of setting the command when a process logs into D3) and the support of the     SECURITY-CONTROL file for setting the command when a process logs into D3.",
            "Unless the n option is specified, all changes enacted by the      auto-restart command take effect on the next log on of the specified process     (or processes).",
            "When a user logs in, the command to load the SECURITY-CONTROL file settings will include the     execution of the auto-restart command for loading in the auto-restart     specifications."
        ],
        "parameter":[
            "Parameter(s)",
            "n{-m}Specifies the process, or range of processes, to which this\n        command applies.If the line number (or range of line numbers) is specified without the\n         UPDATE.USER or PERMANENT keywords, the specified lines will be immediately set to theauto-restartcommand specifications.commandIf specified, the command is set.The command may contain\n         spaces and\/or options and may be surrounded by double quotation marks.CLEARIf specified, the command is cleared.UPDATE.USERThe auto-restart specifications will be written to the USERS\n        file (for example, the TCL command for attribute 9) and the current user will be immediately\n        set to the auto-restart specifications.PERMANENTThe auto-restart specifications will be written to the\n        SECURITY-CONTROL file for the line number (or range of line numbers) specified, and the\n        specified lines will be immediately set to the auto-restart specifications."
        ],
        "example":[
            "Example(s)",
            "Defines TCLPROC as the MD entry that process 1 should execute rather than going to the TCL\n    prompt.",
            "AUTO-RESTART 1 TCLPROC",
            "Defines TCLPROC as the MD entry to execute for processes 1 through 10.",
            "AUTO-RESTART 1-10 TCLPROC",
            "Clears the TCL RESTART command for processes 5 through 8.",
            "AUTO-RESTART 5-8 (C"
        ]
    },
    {
        "name":"aux-off command",
        "Syntax":[
            "Syntax",
            "aux [off]"
        ],
        "description":[
            "Description",
            "For mvBase users: The aux-off TCL command disables spooling   previously defined by the aux-on TCL command.",
            "The aux-on TCL command selects the auxiliary printer as the output device     for all printer output until the aux-off command is issued."
        ],
        "parameter":[
            "Parameter(s)",
            "offReverses the effect of the last executedaux-oncommand. Auxiliary port printing is turned off, and the previous\n        status of the p and h flags of the current TCL sp-assign status is restored."
        ],
        "example":[

        ]
    },
    {
        "name":"aux-on command",
        "Syntax":[
            "Syntax",
            "aux [on]"
        ],
        "description":[
            "Description",
            "For mvBase users: mvBase supports auxiliary printers defined via the    aux-on TCL command.",
            "Output that is directed to a system printer can be routed to the terminal\u2019s AUX port. SPOOLER     hold files can also be directed to the terminal\u2019s AUX port instead of one of the system or     network printers.",
            "The terminal must have a printer connected to its AUX port in such a manner that the printer     can indicate to the terminal, and from there to the system, that its print buffer is full. This     can be done by using the xonoff command or CTS\/RTS handshaking, depending on     the printer, terminal, and cabling involved.",
            " ",
            "For an AUX port to work correctly, a correct terminal definition in the system cursor file     must be set up for the control codes that switch the terminal\u2019s AUX port on and off. For more     information, refer to the define-cursor command topic      (define-terminal command). ",
            "The aux-on TCL command selects the auxiliary printer as the output device     for all printer output until the aux-off command is issued.",
            "Output can also be directed to the auxiliary port of your terminal as one of the options of     the sp-assign with option a command. sp-assign (option a)     directs the output to your AUX port, and is functionally equivalent to an      aux-on command. For more information, refer to the sp-assign command topic."
        ],
        "parameter":[
            "Parameter(s)",
            "onEnables spooling to the auxiliary port, and saves the p and h\n        flags of the current TCL sp-assign status."
        ],
        "example":[

        ]
    },
    {
        "name":"B",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"b\/list command",
        "Syntax":[
            "Syntax",
            "b\/list file.reference itemlist* {(options}\n"
        ],
        "description":[
            "The b\/list BASIC program formats and outputs BASIC source code listings. It can also be used to format a BASIC source program and write it back to the file from which it came."
        ],
        "parameter":[
            "Parameter(s)",
            "optionsbExpands lines containing one exclamation point to a string\nof asterisks. This only works if the exclamation point is all by itself\non the line.cDoes not indent comment lines.fWrites the formatted program back to the file in which it\nwas found.iUses internal defaults for formatting instead of*blistdefaults in the messages file.lSuppresses display of line (attribute) numbers.mDouble-spaces listing.nNo pause option suppresses pause at end of page on terminal\ndisplay.oOverwrites an existing item (when used with thefoption); otherwise, it creates a new item-ID ofID.blist, whereIDis the original\nprogram name, followed by.blist.pOutputs to printer; does not update file.rForces all indentations to 0.sDraws vertical structure lines and connects statements that\nare nested. For example,forstatements are connected\nto their correspondingnextstatements with vertical\nlines composed of pipe characters.tOutputs to screen, unless anfoption is\nincluded.uUpdates item with unresolved format structure.",
            "The table below lists the*blistattributes\nin themessagesfile.",
            "AttributeDescriptionDefault1left margin indent02code indent23comment left margin04comment indent0"
        ],
        "example":[

        ]
    },
    {
        "name":"basic command",
        "Syntax":[
            "Syntax",
            "basic file.reference itemlist* {(options)}\n"
        ],
        "description":[
            "The basic BASIC program invokes the BASIC and\/or FlashBASIC compiler, which translates the specified source code into executable object code with case-sensitivity in effect. This causes the compiler to only accept uppercase keywords."
        ],
        "parameter":[
            "Parameter(s)",
            "optionsaDisplays object code generated by the FlashBASIC compiler.bTurns on array bounds checking when used with the o option\nlevel 1-9. Without this option in effect, situations such as array\nsubscripts out of range, which result in a fatal BASIC debugger abort,\nignores the condition, possibly resulting in a monitor halt. This\noption is not necessary when using theooption level\n0 (the default), or when not using theooption at\nall.cCompresses the object by suppressing the end-of-line (EOL)\nopcodes from the object code item. This option is designed to be used\nwith debugged and cataloged programs. Because the EOL opcodes are\nused to count lines for error messages, any run-time error message\nin a program compiled with thecoption indicates\nthe error is on line 0. Additionally, thecoption\nremoves the ability to single-step with the BASIC debugger.dPrevents the run-timedoption from entering\nthe debugger.eLists only error lines encountered during the compilation\nof the program. The listing indicates line number in the source code\nitem, the source line itself, and a description of the error associated\nwith the line.fWhen used with theooption, generates floating\npoint arithmetic.hHides FlashBASIC object code from other users. In other words,\nthe code is not shared.iLists lines from any included program as part of the listing.\nIf used with theloption, the source program listing,\nthe included lines are indicated by a plus sign after the line number.kKeeps a shared FlashBASIC module loaded.lGenerates a line-by-line listing of the source program during\ncompilation. Error lines with associated error messages are indicated.\nWhen theloption is used, the asterisk does not\ndisplay. Each line of the listing takes place at the asterisk.mGenerates a program map of the descriptor table and correlates\nsource code lines to generated object code frames. Each variable in\nthe program is listed along with its decimal offset.oProduces FlashBASIC optimized code.Note:If any module in\na program is compiled with the 0 option, than all modules in that\nprogram must also have been compiled with theooption.pRoutes all output generated by the compilation, except the\ncross-reference listing, to the printer, via the spooler.sSuppresses generation of a symbol table. The symbol table\nis used exclusively by the FlashBASIC debugger for reference; therefore,\nit needs to be kept only if the user uses the debugger.xCreates a cross-reference of all the labels and variables\nused in the FlashBASIC program and stores this information in the\nbsym file, which must exist before using. Thexoption\nfirst clears data in the bsym file, then creates an item for every\nvariable and label used in the program, using the variable or label\nname as the item-ID. After creating the cross-reference items, attribute\none contains the line numbers where the variable or label is referenced;\neach line number is a value. The line number where a label is defined,\nor where the value of the variable is changed is preceded by an asterisk.\nIf\u00a0the variable names and labels are in both uppercase and lowercase,\nthe D-pointer for the bsym file-defining item should not have thesoption.wOptimizes without source when used with theooption. This allows optimizing programs without source code.Note:The normal dictionary object statistics are not updated when this\noption is used.yAllows multiple FlashBASIC compiles concurrently. Normally,\neach FlashBASIC compile attempts to set BASIC lock 49 to keep multiple\ncompiles from dramatically slowing down the machine. Theyoption avoids this logic.",
            "Note:The program, which results from abasiccommand, isnotnecessarily case sensitive. This is a run-time\noption that can be set in the program with acasing onor at TCL with acase-on.",
            "Thecompilecommand allows keywords to be in uppercase or lowercase.\nFor example, with case sensitivity in effect, the variables TOTAL\nand total are treated as two separate variables."
        ],
        "example":[
            "Example(s)",
            "Compiles the program testprog\nin thebpfile. The object code is placed in\nthe dictionary ofbp.",
            "basic bp testprog"
        ]
    },
    {
        "name":"basic-prot command",
        "Syntax":[
            "Syntax",
            "basic-prot {on|off}\n"
        ],
        "description":[
            "The basic-prot command toggles or displays the status of the FlashBASIC object protection scheme.",
            "For Windows: Is not required for FlashBASIC code. Works the same as D3 UNIX for non-Flashed."
        ],
        "parameter":[
            "Parameter(s)",
            "onToggles object protection on.offToggles object protection off.",
            "When enabled, this feature is global, thus it affects the\nentire system.",
            "D3 shares FlashBASIC object code between all\nprocesses running a given program. While this vastly decreases memory\nrequirements, it also opens the possibility of one user compiling\na program while another user is concurrently running that same routine.\nThis circumstance tends to produce random, unexplainable aborts that\ncan be difficult to track on large systems. The protection scheme\ninvolves insulating running object code from updates caused by recompilation.",
            "When protection is enabled, all previous revisions of FlashBASIC\nobject code are kept in the same dictionary group, but are marked\nas deleted. These deleted items are automatically cleared during thesaveprocess. This allows compiling programs while they\nare currently being executed. Users running a given program when that\nprogram is compiled continues to run the old version. If a user drops\nout of the program, to TCL, for example, and re-executes the program,\nthe system executes the newest object version.",
            "Old BASIC object\ncode is moved to thedm,object.queue,file where\nit is eventually deleted. By default, object code remains in this\nfile until 1000 subsequent compiles (of any program) are performed.\nTo increase this number, usebasic-prot##, where##is the new queue\nsize. To make the number infinite (or virtually infinite), use 0.\nWhen this number of compiles is performed, a message is logged to\nthe errors file.",
            "CAUTION:",
            "Enabling the object protection\nscheme can require significant amounts of temporary overflow, as space\nis required for every single update. This overflow space is returned\nafter a full save. The object protection mechanism is disabled during\nthe save because it must remove old revisions. The object protection\nscheme is cleared when D3 is booted. To enable it each time the system\nis rebooted, place thebasic-prot-oncommand in\ntheuser-coldstartmacro. This command doesnotapply to FlashBASIC object code, which is implicitly shared\namong all users and automatically protected against recompilation\nof a program executed by other processes."
        ],
        "example":[

        ]
    },
    {
        "name":"bformat command",
        "Syntax":[
            "Syntax",
            "bformat file.name{{item.list}|{*}} {(options}\n"
        ],
        "description":[
            "The bformat command formats a BASIC source program and updates the source file with the formatted item."
        ],
        "parameter":[
            "Parameter(s)",
            "file.nameAny BASIC source file.{item.list}|{*}Lists of program names, or an\nasterisk for all items, or null if there is a select list active.optionsrRenumbers statement labels and all references to the labels\n(goto,gosub,return\nto).n1-n2Used with theroption,n1 specifies the new beginning statement label number,n2 specifies the increment between statement labels.\nBothn1 andn2 default\nto 10.",
            "The action ofbformatis identical toblist, except that the output is not printed, but is filed\ninto the source file overwriting the original source program.",
            "Thebformatcommand is table driven, like theblistcommand. The table is stored in themessagesfile. The item-ID of the control table is bf, followed by a four-character\nhexadecimal number. The table number is contained in line 5 of the\ncommand definition. The default table number is 0, thus the default\ntable item-ID is bf0000. The structure of the table is identical with\nthe blist control table. The only default options arerfor renumber,cfor comment indent inhibit, and\nthe numeric options for specifying the starting statement label number\nand increment. It is possible to specify the numeric options in the\ncontrol table, and leave theroption as a run-time\noption. In this case, the numeric options need not be specified at\nrun-time.",
            "Theroption is useful for renumbering\na source program to make it easier to follow. If theroption is used, then a line containing only an exclamation point\nand a statement label may be used to change the current new statement\nlabel number to the label specified on that line. This is true as\nlong as the current statement label number is greater than what would\nbe the next number (previous label number plus increment). This is\nuseful when specific labels make the program easier to follow, such\nas at the beginning of subroutines, and so on.",
            "Note:Certain forms\nof thegoto,gosub, andreturn tostatements are not renumbered. This occurs when\nthere is no space between the keyword and the destination label. \u00a0For\nexample,goto20is not renumbered, butgoto 20is renumbered. Also, a mixture of numeric and alphanumeric\nstatement labels, following anon gotooron gosubcommand, fails to renumber any numeric labels\npast the first alphanumeric label."
        ],
        "example":[

        ]
    },
    {
        "name":"blist command",
        "Syntax":[
            "Syntax",
            "blist file.reference itemlist* {(options}\n"
        ],
        "description":[
            "The blist command formats and outputs BASIC source code listings, according to the options chosen. It can also be used to format a BASIC source program and write it back to the file from which it came."
        ],
        "parameter":[
            "Parameter(s)",
            "optionsbExpands lines containing only an ! into a line of asterisks.cDoes not indent comment lines.dDouble-spaces the listing.lSuppresses the editor line number.nDoes not wait at the end of the page (on screen listings).pOutputs to the spooler.sDraws vertical structure lines. If thesoption\nis specified, then vertical lines are drawn between the beginning\nof a structured construct and the end of the construct. This option\nis useful when constructs span pages or are nested many levels deep.tOutputs to the terminal. If a line is too long to fit into\nthe page width (as setup with thetermcommand),\nan attempt is made to fold the line at spaces, commas, or other delimiters.\nThe folded portion of the line is indented to the same level as the\noriginal line. Any control characters encountered display as ellipses.Warning:Thetoption is intended for use\nwhen thepoption has been included in the default\noptions. Thetoption overrides thepoption and should never be included in the default options\n(or output to the spooler is impossible).",
            "The D3 version ofblistcan be customized.\nTheblistcommand is table driven. The table is\nstored in themessagesfile. The item-ID of the\ncontrol table is bl followed by a four-character hexadecimal number.\nThe table number is contained in line 4 of the command definition.\nThe default table number is 0, thus the default table item-ID is bl0000.",
            "Line one of the control table defines the left margin, number\nof spaces to indent for each construct, and the default options. Each\nof these is separated by a comma. The default control table contains\n7,3,(bs) on line 1, designating a left margin of 7 (statement label\narea), 3 spaces to indent for each construct, and the optionsbandsare used by default.",
            "Line\ntwo of the control table defines the keywords used at the beginning\nof a statement, which may begin or end a construct or which may begin\na comment. Each value on this line contains the keyword followed by\na subvalue mark, followed by a type character (for example, an asterisk\nfor comment or semicolon for statement), and two digits. The first\ndigit specifies the number of outdents for the statement, the second\ndigit specifies the number of indents for the statement.",
            "Note:Some statements may contain a value in each digit (such aswhile, which outdents the statement containing thewhilecommand, and then indents the following statements).",
            "Line three of the control table defines the keywords used at the\nend of a statement that can begin or end a construct."
        ],
        "example":[

        ]
    },
    {
        "name":"blkio command",
        "Syntax":[
            "Syntax",
            "blkio {[factor|off]} {(options}\n"
        ],
        "description":[
            "The blkio BASIC program displays or sets the I\/O blocking factor, or number of frames read in one disk access during sequential file accesses. The setting is global for the whole system, and can be changed at any time.",
            "For Windows: Not Supported"
        ],
        "parameter":[
            "Parameter(s)",
            "factorTurns the blocking factor off\nand on.optionsqQuiet option does not display anything while setting the blocking\nfactor.",
            "Theblkiocommand controls how many\nframes are read in one disk access by processes doing sequential file\naccesses, such as save or AQL processors. Without any argument, the\ncurrent setting displays. If the mechanism is active, this message\ndisplays:",
            "IO blocking factor set to n frames.",
            "This indicates that sequential access readsnframes at each disk access. If the mechanism is disabled, this message\ndisplays:",
            "IO blocking disabled.",
            "This indicates that the I\/O blocking mechanism is not\nactive, and that frames are read one at a time.",
            "The argument\nfactor is the number of frames to be read at each disk access. The\nvalue of 1 or off disables the grouping of reads. The maximum number\nof frames that can be read is 64. For a complete description of the\nI\/O blocking mechanism.",
            "The blocking factor can also be set\nby adding this statement in the virtual machine configuration file:",
            "blkio n",
            "wherenis the blocking factor.",
            "The TCLbufferscommand allows monitoring the\neffect of blocking I\/O, by theframe-faultscounter."
        ],
        "example":[
            "Example(s)",
            "Displays the current setting.",
            "blkioIO blocking factor set to 2 frames.",
            "Sets the blocking factor to four frames, and suppresses\nthe message.",
            "blkio 4 (q",
            "Disables the mechanism.",
            "blkio offIO blocking disabled."
        ]
    },
    {
        "name":"block-print command",
        "Syntax":[
            "Syntax",
            "block-print text{(options}\n"
        ],
        "description":[
            "The block-print command produces a banner by converting characters to a large block format, made up of rows and columns of the character itself.",
            "A character definition must consist of exactly nine attributes. For example:",
            "where the raster is either:",
            "or",
            "such that:",
            "New items can be edited into the block-convert file to create new languages, or even typefaces (such as script or italics). However, the height must remain at nine characters (attributes).",
            "Each word or passage is centered on the output line according to the width of the device to which it is being output. The device width is determined by the most recently executed term command."
        ],
        "parameter":[
            "Parameter(s)",
            "textText entered. If the text contains\ntoo many characters, the text string is wrapped at a word boundary,\nif possible; otherwise, the text is wrapped after nine characters.Text enclosed within quotation marks attempts to print on the same\nline without breaking on the spaces between the words. The characters\nin the text string are defined in thedm,block-convert,file.optionsnNo pause (nopage) option suppresses pause\nat end of page on terminal display.pDirects output to system printer via the spooler.uUppercase option. If the banner character is lowercase, the\nblock character is made up of the equivalent uppercase character."
        ],
        "example":[
            "Example(s)",
            "block-print \"Eat At Joe\u2019s\" Bar & Grill (p",
            "Note:Without the double quotation marks around the first\npart of the banner, this command would fail with anuneven\nnumber of delimitersmessages. Also, the quotation marks around\"Eat At Joe\u2019s\"passage forces the passage to display on\nthe same output line, side-by-side. Without the quotation marks around\na passage, each word displays by itself on the line.",
            "block-print HiHH   HH      ii\nHH   HH\nHH   HH      iii\nHHHHHHH      ii\nHH   HH      ii\nHH   HH      ii\nHH   HH      iiii"
        ]
    },
    {
        "name":"bootstrap command",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"break-key command",
        "Syntax":[
            "Syntax",
            "break-key {pib.no}{(options}\n"
        ],
        "description":[
            "The break-key command toggles the availability of the BREAK key, or displays its present status when issued without options. If the PIB number is specified, the BREAK key status displays or is modified for the PIB number requested."
        ],
        "parameter":[
            "Parameter(s)",
            "optionsfDisables the BREAK key.nEnables the BREAK key.sSuppresses the display of the status message."
        ],
        "example":[
            "Example(s)",
            "break-key (f[1323] Break key disabled.",
            "break-key (n[1322] Break key enabled.",
            "break-key 35 (n[1346] Break key enabled for pib 35."
        ]
    },
    {
        "name":"break-key-off macro",
        "Syntax":[
            "Syntax",
            "break-key-off {pib.no}\n"
        ],
        "description":[
            "Description",
            "The break-key-off macro disables the BREAK key on the current port.   If the PIB number is specified, the BREAK key is disabled on the requested PIB number.",
            "By default, the debugger is enabled for all processes. This security feature can be used for     end-user applications.",
            "If you disable the debugger for an account, users cannot break out of a process."
        ],
        "parameter":[
            "Parameter(s)",
            "pib.noProcess Identification Block (PIB) number. Default is the\n        current process."
        ],
        "example":[
            "Example(s)",
            "Example 1",
            "break-key-off[1323] Break key disabled.",
            "To confirm that the debugger is disabled, try to break into the debugger by pressing the BREAK\n     key.Note:If there is no BREAK key on your keyboard, you can use Fn + B or Fn + Ctrl + B for\n     the same result.",
            "Example 2",
            "break-key-off 35[1347] Break key disabled for pib 35."
        ]
    },
    {
        "name":"break-key-on macro",
        "Syntax":[
            "Syntax",
            "break-key-on {pib.no}\n"
        ],
        "description":[
            "Description",
            "The break-key-on macro enables the BREAK key on the current port. If the PIB number is specified, the BREAK key is enabled on the requested port.",
            "By default, the debugger is enabled for all processes. This security feature can be used for     end-user applications.",
            "If you disable the debugger for an account, users cannot break out of a process."
        ],
        "parameter":[
            "Parameter(s)",
            "pib.noProcess Identification Block (PIB) number. Default is the\n        current process."
        ],
        "example":[
            "Example(s)",
            "break-key-on[1322] Break key enabled.",
            "break-key-on 35[1346] break key enabled for pib 35."
        ]
    },
    {
        "name":"brk-debug command",
        "Syntax":[
            "Syntax",
            "break-debug {pib.no}\n"
        ],
        "description":[
            "The brk-debug command indicates that the BREAK key invokes the debugger on subsequent uses.",
            "If the current process is a BASIC program, the BASIC debugger is invoked. In all other cases, the system (virtual) debugger is invoked. If the BREAK key is set to push a level, the debugger may be entered with the debug or de command.",
            "On some systems, when the BREAK key is set to push a level, it is not possible to push a level while in the debugger. To push a level while in the debugger, type : and press ENTER."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"brk-level command",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"buf-map command",
        "Syntax":[
            "Syntax",
            "buf-map {minfid-maxfid} {(options)}\n"
        ],
        "description":[
            "The buf-map BASIC program displays a visual map of the file system, indicating which frames are currently being held in the RAM buffer area, and updates the display every few seconds.",
            "For Windows: Not Supported",
            "The buffer map is laid out as a grid of frame addresses for the entire system (bottom left-hand corner is  minfid and top right-hand corner is  maxfid), and displays which FIDs are currently active in the buffers.",
            "The buffer displays a number between 0 through 7, which indicates the buffer\u2019s state. The values are shown in the upper right-hand corner as a reminder."
        ],
        "parameter":[
            "Parameter(s)",
            "minfidLowest FID number to be included\nin the result.maxfidHighest FID number to be included\nin the result.optionssSamples about 10% of the memory, rather than reading all buffers\nin memory. This option provides a quick snapshot of the memory usage,\nbut is less accurate."
        ],
        "example":[
            "Example(s)",
            "buf-map1-358398. fid loaded : 8740. 8742 buffers. Type H for help.\n- - - - - - - - - - - - - - - - - - - - - - -\n1     :                5      :     R                          2265\n2     :        W       6      :     RW\n3     :        B       7      :     RB               6\n4     :        BW      8      :     RCW              6\n- - - - - - - - - - - - - - - - - - - -\n5                                                    6         1700\n5                                                    5\n5                                                    5\n5                                                    5\n5   - - - - - - - - - - - - - - - - - -              5         1135\n5\n5\n5\n5\u00a0\n5   - - - - - - - - - - - - - - - - - -              5         -570\n5                                                    56\n5                                         1     5    56\n5                                         11    5    16\n5                                         5111       15\n+- - - -+- - - -+ - - - -+ - - - - +- - - -+- - - - +\nRange 1 to 358398. Press X to stop.. 0000",
            "The diagram above displays the differentstatesof the buffers in memory by a number displayed in the state table\nbelow.",
            "With thesoption, only a sample is\ntaken.",
            "Refer\u2019cd   Batch    Write-req   State\n0          0        0           1  Available\n0          0        1           2\n0          1        0           3  Available\n0          1        1           4\n1          0        0           5\n1          0        1           6\n1          1        0           7\n1          1        1           8",
            "During the sampling, enter one of these options:",
            "hDisplays this screen.sStops sampling and display results.xExits the process."
        ]
    },
    {
        "name":"buffers command",
        "Syntax":[
            "Syntax",
            "buffers {(options}\n"
        ],
        "description":[
            "The buffers BASIC program displays a single snapshot of the status of memory-resident buffers. The loop (l) option repeats the display until voluntarily stopped. ",
            "For Windows: Not Supported",
            "These elements listed are monitored by the buffers command:",
            "For UNIX: Not Supported",
            "For UNIX: Not Supported"
        ],
        "parameter":[
            "Parameter(s)",
            "optionsnumberInteger number that sets the delay between snapshots. Default\nis .2 seconds.cClears history log before starting process. If not present,\nthe history file is created as adxfile, meaning\nthat it is not being saved by afile-saveoraccount-save. This process appends to thebuffers.loghistory file, unless thecoption is specified.hCreates a history file called buffers.log, where statistical\ndata about system performance may be stored.sDisplays system counters.lLoops continuously. operator is prompted to enter anxto stop or anrto redraw the\nscreen. The default delay between activations is five seconds.",
            "For UNIX:The number of process activations does\nnot reflect the actual process scheduling, which is controlled by\nUNIX. This number roughly measures the occurrences when a process\nvoluntarily relinquishes CPU control (sleeps)."
        ],
        "example":[

        ]
    },
    {
        "name":"buffers.g command",
        "Syntax":[
            "Syntax",
            "buffers.g counter{start.day{-end.day} {step {start.time-{end.time}}} {(options}\n"
        ],
        "description":[
            "Used in conjunction with the buffers BASIC program, the buffers.g command produces a graphic histogram of buffer usage for a range of dates and times.",
            "For Windows: Not Supported"
        ],
        "parameter":[
            "Parameter(s)",
            "counterAttribute name in thedm,buffers.log,file to examine.start.dayBeginning day-of-the-week for\nthe graph results. The available values are: Sunday\u2013Saturday or 0\u20136.end.dayEnding day-of-the-week for the\ngraph results. The available values are: Sunday\u2013Saturday or 0\u20136.*Spans the entire week.start.timeBeginning time-of-day for the\ngraph results. The valid values are: 00:00:00\u201323:59:59.end.timeEnding time-of-day for the graph\nresults. The valid values are: 00:00:00\u201323:59:59.optionsgDisplays a graph, rather than a histogram. With this option,\nthestepis automatically calculated. The results\nare averaged in an attempt to make the curve smoother.pDirects output to printer.",
            "The reports are histogram averages of the buffer values\nsampled over a period of time (from thebufferscommand). These reports can give the system administrator a better\nidea of the workload of the D3 system, and identify possible bottlenecks\nin the system\u2019s performance.",
            "The activity log is stored in the\nfile buffers.log with a data level per weekday (buffer.log, Monday,\nbuffer.log, Tuesday, and so on). The file is created automatically\nwhen thebufferscommand, with thehoption, is used for the first time. Each data level is cleared when\nchanging the day, so that the file records a whole week of activity\nautomatically. The item-ID is the internal time.",
            "Thebufferscommand also creates automatically the dictionary\nattributes corresponding to the various counters, as shown in the\nnext table. The attributetimedisplays the sampling time and\nthe attributedescription, in the D-pointers Monday, Tuesday\nand so on, contains the date. The file is created with adxattribute.",
            "The available attribute names\ninclude:",
            "0timeTimes.1activActivations.2idleIdle time.3ffltFrame faults.4writesDisk writes.5bfailBuffer search fails.6fqfullRead queue full.7wqfullWrite queue full.8dskerrDisk errors.9elapsdElapsed time.21wwWrite required.22iobusyI\/O busy.23mlockMemory locked.24refReferenced.25wqEnqueued writes (write queues).26tophshTop-of-hash.27availNumber of available buffers.28batchBatch.",
            "Additional attributes available on a hosted UNIX system\ninclude:",
            "10dblsrcDouble-source.11breuseBuffers reused.12bsleepBuffers sleeping.13semSemaphores."
        ],
        "example":[
            "Example(s)",
            "buffers.g sem 60 1 2 3 4 5 6...\n+------+------+------+------+------+------+---\n16:52:05\n16:52:11\n16:52:18 **************\n16:52:25\n16:52:31\n16:52:38 *******\n16:52:45 *********************\n16:52:51\n16:52:58\n16:53:05 *******\n16:53:12 *******\n16:53:18\nNumber of samples : 13\nTotal : 14\nAverage per period : 0.0002 \/ sec.\nMax value : 4\nMax value \/s : 0.2857\nPeak time : 16:52:45",
            "buffers.g writes tuesday (g49.0 *\n46.3 | *\n43.5 | * **\n40.8 | *** * * ***\n38.1 | * *** *\u00a0\u00a0\u00a0**\u00a0\u00a0\u00a0**\n35.4 | *\u00a0\u00a0\u00a0*\u00a0\u00a0\u00a0**\u00a0\u00a0\u00a0*\u00a0\u00a0\u00a0***\u00a0\u00a0\u00a0*\u00a0\u00a0\u00a0**\n32.7 |*\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0*\u00a0\u00a0\u00a0***\u00a0\u00a0\u00a0**\u00a0\u00a0\u00a0*\n29.9 | **\n27.2 | **\n24.5 |\n21.8 |\n19.0 |\n16.3 |\n13.6 |\n10.9 |\n8.2 |\n5.4 |\n2.7 |\n0\/s +------+------+------+------+------+------+------\n\u00a0\u00a0\u00a009:09:26\u00a0\u00a0\u00a009:11:46\u00a0\u00a0\u00a009:14:06\u00a0\u00a0\u00a009:16:26",
            "buffers.g fflt * 01:00:00",
            "Lists the number of frames faults (disk reads), for the\nwhole week, by step of one hour. In the example below, no history\nwas recorded before Wednesday.",
            "No log for Sunday\nNo log for Monday\nNo log for Tuesday\n20Feb2003; Wednesday; Ctr=fflt, Step=01:00:00, Range=00:00:00-23:59:59\n\u00a0\u00a0\u00a00\u00a0\u00a0\u00a08848\u00a0\u00a0\u00a017696\u00a0\u00a0\u00a026544\u00a0\u00a0\u00a035392\u00a0\u00a0\u00a044240\u00a0\u00a0\u00a053088\u00a0\u00a0\u00a061936\n\u00a0\u00a0\u00a0+------+------+------+------+------+------+------+------+----\n10:59:28 *************************\n11:59:54 ***********************************************************\n13:00:25 **********************************************************\n14:00:52 ************************************\n15:01:18 ***************************\n16:01:49 ********************************************************\n17:02:22 ***************************************\n18:02:55 ******\n19:03:32 ***********************************************\n20:04:08 *************************************************\n21:04:43\n22:05:21 ***************************************************\n23:05:55 *************\nNumber of samples\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0: 155\nTotal \u00a0\u00a0\u00a0\u00a0\u00a0: 622070\nAverage per period\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0: 7.1999 \/ sec.\nMax value\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0: 88481\nPeak time\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0: 13:00:25\nbuffers.g ww monday-friday 00:30 08:00-17:30 (p",
            "Lists the percentage of write-required buffers, for the\nweekdays only, during business hours, by steps of 30 minutes."
        ]
    },
    {
        "name":"bulletin.board command",
        "Syntax":[
            "Syntax",
            "bulletin.board {new}\n"
        ],
        "description":[
            "The bulletin.board BASIC program prints bulletins from the bulletin file located in the dm account.",
            "This may be included in the user logon macro list to automatically execute each time the user logs on.",
            "The optional new parameter retrieves items that have not been previously read."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "bulletin.board new\nrocket bulletin board\ndate: 02\/28\/2003\nre\u00a0\u00a0\u00a0: company picnic\nfrom: pat davis\nThe Company picnic will be held this Saturday in the company warehouse due to the\nimpending thunderstorms. Unless the weather changes, the volleyball game will be\nchanged to shuffleboard.\npress any key to continue"
        ]
    },
    {
        "name":"D3 Reference Manual overview",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"cal macro",
        "Syntax":[
            "Syntax",
            "cal {{month} year}\n"
        ],
        "description":[
            "The UNIX cal macro executes the UNIX cal command.",
            "For Windows: Not Supported"
        ],
        "parameter":[
            "Parameter(s)",
            "monthMonth of the year, and must be a number between 1 and 12,\ninclusive. If a month is specified, only the calendar for the given\nmonth displays.yearYear for the calendar, in either two or four digits."
        ],
        "example":[
            "Example(s)",
            "calFebruary 2003\nSu   Mo   Tu   We   Th   Fr   Sa\n                              1\n2    3    4    5    6    7    8\n9    10   11   12   13   14   15\n16   17   18   19   20   21   22\n23   24   25   26   27   28"
        ]
    },
    {
        "name":"callx-off command",
        "Syntax":[
            "Syntax",
            "callx-off\n"
        ],
        "description":[
            "The callx-off command disables callx triggers. This command is only available from the DM account."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"callx-on command",
        "Syntax":[
            "Syntax",
            "callx-on\n"
        ],
        "description":[
            "The callx-on command enables callx triggers. This command is only available from the DM account."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"capt command",
        "Syntax":[
            "Syntax",
            "capt {(options}\n"
        ],
        "description":[
            "The capt command enables or disables the capturing of every TCL command issued. When enabled, TCL commands are placed in the captcl file using the item-ID user-ID*port.number.",
            "The capt command is invoked by the capture-on and                                         capture-off commands."
        ],
        "parameter":[
            "Parameter(s)",
            "optionsoTurns capturing off.nDeletes item after disabling and is only valid with theooption."
        ],
        "example":[
            "Example(s)",
            "Turns on TCL command capturing.",
            "capt",
            "Turns off TCL command capturing.",
            "capt (o",
            "Turns off capturing and deletes item from thecaptclfile.",
            "capt (on"
        ]
    },
    {
        "name":"capture-off command",
        "Syntax":"",
        "description":[

        ],
        "parameter":[
            "Parameter(s)",
            "optionssSilent operation option suppresses the message output.xDoes not delete the item from thecaptclfile."
        ],
        "example":[
            "Example(s)",
            "capture-offcapturing turned off at 15:01:48 01 February 2003 on pib# 22"
        ]
    },
    {
        "name":"capture-on command",
        "Syntax":"",
        "description":[

        ],
        "parameter":[
            "Parameter(s)",
            "optionssSilent operation option suppresses message output."
        ],
        "example":[
            "Example(s)",
            "The following example illustrates how a series of TCL commands can be trapped to a file:",
            "capture-onCapturing started on 14:53:11 01 February 2003 on pib# 22\nterm ,,,,,,79,52\nsp-assign hs f11\nsselect d3.doc by category\nsave-list d3.doc.by.category\nget-list d3.doc.by.category\nlist d3.doc category token (p\ncapture-off (x\ncapturing turned off on 14:56:18 01 February 2003 on pib# 22",
            "The sequence of the previous commands is trapped in the item, dm*22 in thecaptclfile:",
            "list-items captclPage 1 captcl 17:58:21 01 Feb 2003\ndm*22\n001 term ,,,,,,79,52\n002 sp-assign hs f11\n003 sselect ad by category\n004 save-list d3.doc.by.category\n005 get-list d3.doc.by.category\n006 list d3.doc token category (p\n007 capture-off (x\n[405] 1 items listed out of 1 items."
        ]
    },
    {
        "name":"case command",
        "Syntax":[
            "Syntax",
            "case {(options}\n"
        ],
        "description":[
            "The case command toggles case-sensitivity on the current port, or displays its present condition when used without options."
        ],
        "parameter":[
            "Parameter(s)",
            "optionsfToggles off case sensitivity.Note:Case insensitivity is\nthe system default.nToggles on case sensitivity.sSuppresses output of the status message.",
            "For a system to run with the ability to be case-sensitive\nand case-insensitive among different users, the entire operating system\nmust be structured so that the database remains independent of case.\nAll lookups for commands, item types, codes, so on are case-insensitive\nby default. This basically means that all dictionary lookups are case-insensitive.",
            "Two macro versions of this command,case-onandcase-off, are provided to direct comparisons\nwithin data files to be case-sensitive or case-insensitive.",
            "The type of comparisons performed on data within attributes using\nAQL are determined by the status of the case bit.",
            "The default\nis case insensitive. To remain case sensitive, add thecase-oncommand to the user logon macro."
        ],
        "example":[
            "Example(s)",
            "Displays the current state of\ncase interpretation.",
            "case[1319] Case insensitive.",
            "Toggles case sensitivity on.",
            "case (n[1318] Case sensitive.",
            "Toggles case sensitivity off.",
            "case (f[1319] Case insensitive."
        ]
    },
    {
        "name":"case-file command",
        "Syntax":[
            "Syntax",
            "case-file {file.reference}\n"
        ],
        "description":[
            "The case-file BASIC program converts the case of items to either uppercase or lowercase.",
            "This invokes the conv-case command and passes it the e, q, u, and o options.",
            "If the file reference is omitted, the process prompts for it. If it is provided, the process prompts Dictionary level?. Answering Y, causes the process to affect the dictionary of the given file.",
            "As the items are issued with the case command, the item-IDs display on the screen."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "Converts all the item-IDs in\nthe test file to uppercase.",
            "case-file testdict level file y,n?n"
        ]
    },
    {
        "name":"cat command",
        "Syntax":[
            "Syntax",
            "cat file.reference\n"
        ],
        "description":[
            "The cat BASIC program displays information about the size and location of BASIC object code."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "cat bpbinary item listing for file jesbp   17:56:00 11 Feb 2003\nbp...........................  ptr fid   length\nhelpgen                        01AF6D    0001\nlc.help                        01AF6E    0001\ncallcp                         01AF70    0001\nstartest                       01AF72    0001\nlockit                         01AF73    0001\nmatchtest                      01AF74    0001\nfix.ad                         01AF75    0001\ntest.prestore                  01AF79    0001\nform.feed                      01AF7A    0001\nline.feed                      01AF7C    0001"
        ]
    },
    {
        "name":"catalog command",
        "Syntax":[
            "Syntax",
            "catalog file.reference itemlist* {(options}\n"
        ],
        "description":[
            "The catalog BASIC program creates an entry in the master dictionary of the current account, making the specified BASIC or BASIC program executable directly from the TCL prompt."
        ],
        "parameter":[
            "Parameter(s)",
            "file.referenceNames the file containing the\nprogram to catalog. If no file is specified, it defaults tobp.itemlist*Names the previously compiled\nBASIC programs to add to the master dictionary. If not specified,\nor if an*is used, all programs in the file are\ncataloged.optionsfPlaces the full path (account,file, program) in the catalog pointer.gFor UNIX:Not SupportedFor Windows:Adds\na module to the global (domain) catalog for BASIC programs instead\nof creating an entry in the master dictionary for the current account.oOverwrites any existing items, except for file-defining items\nand Q-pointers. A cataloged BASIC program item in the master dictionary\nhas its name specified in attribute 4. If an item already exists in\nthe master dictionary that is not in BASIC command format and theooption has not been specified, an error message displays\nindicating that the item is already on file and the program is not\ncataloged.",
            "Warning:If an item exists in the master dictionary\nwith the same name as the program and it isnota cataloged program pointer item, the catalog process fails and\ndoes not write over the conflicting master dictionary item.",
            "Options may be placed on attribute 6 of the catalog pointer (command\ndefinition) for thecatalogcommand, making those\noptions the default behavior of thecatalogcommand,\nin the same manner as placing default options on attribute 6 of thecompilecommand.",
            "If the cataloged program is a mainline\nprogram (not a subroutine or function), it can be executed by issuing\nits program name at the TCL prompt.",
            "Once a program has been\ncataloged, it does not need to be cataloged again, even if it is changed\nand recompiled. Note that issuing thecatalogcommand\nfrom TCL is the same as using the CTRL+XC on a BASIC program in the\nUpdate processor.",
            "If there is currently a cataloged program\nwith the same name, it is overwritten.",
            "All external subroutines\nmust be cataloged.",
            "To activate a cataloged BASIC program, enter:",
            "program.name{(options}",
            "To activate a cataloged program, enter the program name\nat the TCL prompt character. All options available for theruncommand are allowed.",
            "Note:On all D3 platforms,\na program can be cataloged without the source being present."
        ],
        "example":[
            "Example(s)",
            "Catalogs the testprog object\nin the dictionary of file bp.",
            "catalog bp testprog[244] \u2019testprog\u2019 cataloged."
        ]
    },
    {
        "name":"cd command",
        "Syntax":[
            "Syntax",
            "cd {new.directory}\n"
        ],
        "description":[
            "The cd BASIC program changes the current working directory to the specified new directory. The new directory remains until the D3 process is disconnected (not logged off) or a new cd command is issued. If the new directory is omitted, the default home directory is selected.",
            "For Windows: Not Supported"
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "cd \/tmp"
        ]
    },
    {
        "name":"change-file command",
        "Syntax":[
            "Syntax",
            "CHANGE-FILE filename [(options)]\n\nCHANGE-FILE account-name,dict-name,data-name [(options)]\n\nCHANGE-FILE DICT filename [(options)]\n\nCHANGE-FILE DATA {filename | dict-name,data-name} [(options)]\n\nCHANGE-FILE M\/DICT account-name [(options)]\n\n"
        ],
        "description":[
            "Description",
            "The change-file command changes the File Definition Code of a   file.",
            "If the change-file command is used without an option, the default     definition code is D. The X or Z and      Y options cannot be specified together.",
            "The options are not added in this case, but they replace whatever is there."
        ],
        "parameter":[
            "Parameter(s)",
            "DICTSpecifies the file dictionary.DATASpecifies the data file.M\/DICTSpecifies the system dictionary.filenameName of the file.dict-name,data-nameFull name of the file.Use this format to change a\n         data file that is one of multiple files associated with a single dictionary.optionsThe following options are supported:AChanges the file or account and all sub-files.RChanges the definition code of a file in another account.UChanges the file to aDT-type file.XChanges the file to aDX-type file, indicating that the file will not be saved\n        during a file-save. The file will not exist following a file-restore.YChanges the file to aDY-type file, indicating that only the file sizing\n        parameters will be saved, not its data, during a file-save. The file will be empty following\n        a file-restore.ZChanges the file to aDX-type file, indicating that the file will not be saved\n        during a file-save. The file will not exist following a file-restore."
        ],
        "example":[
            "Example(s)",
            "Changing a File Definition Code",
            "The following example changes the definition code of a data file (SALES) to aDX-type file:",
            ">CHANGE-FILE DATA SALES (X"
        ]
    },
    {
        "name":"charge-to command",
        "Syntax":[
            "Syntax",
            "charge-to text.string\n"
        ],
        "description":[
            "The charge-to command changes the current accounting charges accumulation.",
            "Subsequent usage statistics are accumulated to a new accounting entity composed of the user-ID, followed by the specified charge to text string in the form:",
            "The charges are accumulated in the dm,acc, file, if the accounting flag has been set in the user or account."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "who37 dm krbcharge-to mastercard<connect time= 121 mins.; CPU= 23747 units; lptr pages= 4>who37 dm*mastercard krb",
            "connect timeNumber of minutes the account has been logged on.CPUNumber of CPU units used by the account. CPU units vary from\nsystem to system.lptr pagesNumber of pages sent to the printer (spooler)."
        ]
    },
    {
        "name":"charges command",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "charges<connect time=43 mins.; cpu=356 units; lptr pages=0>",
            "connect timeNumber of minutes the account has been logged on.CPUNumber of CPU units used by the account. CPU units vary from\nsystem to system.lptr pagesNumber of pages sent to the spooler."
        ]
    },
    {
        "name":"check-account macro",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"check-dx command",
        "Syntax":"",
        "description":[

        ],
        "parameter":[
            "Parameter(s)",
            "optionslChecks for dl-type files.xSkips dx-type files.yChecks for dy-type files."
        ],
        "example":[
            "Example(s)",
            "check-dxEnter machine type:DemoFiles on Demo With DX-type File Pointers\nDM\nfile-of-files\nfile-of-files <---- file pointer is DX\u2019ed\n1 file found with a DX file pointer."
        ]
    },
    {
        "name":"check-file command",
        "Syntax":[
            "Syntax",
            "check-file file.reference {(options}\n"
        ],
        "description":[
            "The check-file command performs a consistency check on a file similar to that performed by the save command with the f, s, and t options."
        ],
        "parameter":[
            "Parameter(s)",
            "optionsgSkips any file inconsistency errors found."
        ],
        "example":[

        ]
    },
    {
        "name":"check-files macro",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"check-resizing command",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"check-ws command",
        "Syntax":[
            "Syntax",
            "check-ws {port.number}\n"
        ],
        "description":[
            "The check-ws BASIC program validates the integrity of the workspace for a given port."
        ],
        "parameter":[
            "Parameter(s)",
            "port.numberInteger number that displays or changes settings for the port\nnumber. If it is not specified, the process prompts for it.",
            "If the process works successfully, two numbers display:",
            "0000 00",
            "where",
            "0000Workspace status.00Level",
            "The table below illustrates the workspace status tally.",
            "Note:The bits are grouped in four sets of four bits.",
            "abcd efgh ijkl mnop",
            "where",
            "achild.pcb dtally badbpcb fid badcpcb links baddscb badedcb badfdb table badgsws badhovf.stk badiibbeg fid badjFlashBASIC workspace badkfopen table badllocal group lock table badmsave.itm,list.active,list.active.2 badnavailable, not usedopbuf begfid badpavailable, unused"
        ],
        "example":[
            "Example(s)",
            "The table above can be used to\nverify the output. In this example, the workspace status tally is\n0040, which means that the basic workspace is bad. The 01 indicates\nthat this process is at level 01.",
            "check-ws 490040 01"
        ]
    },
    {
        "name":"check.pib command",
        "Syntax":[
            "Syntax",
            "check.pib {pib.number} {command} (options\n"
        ],
        "description":[
            "The check.pib command displays the PIB information, such as PIB status, virtual return stack, workspace status, any basic programs being executed, as well as locks, peqs, files, items, connections and other objects being used by that PIB."
        ],
        "parameter":[
            "Parameter(s)",
            "pib.numberPIB file number (from 0 to 273).commandOptional commands are:AllCaptures all data.SummaryCaptures summary page.LockCaptures lock page.WhereCaptures where page.CheckwsCaptures check-ws page.PibstatCaptures pibstat page.LoggedonCaptures loggedon page.SpoolerCaptures spooler page.RunningCaptures running page.optionsfCaptures information todm,check.pib.log,file when using an optional command.",
            "Thecheck.pibcommand displays PIB information\nincluding:",
            "Current tape assignment.Full virtual return stack (all levels and license information).Status of the PIB based uponPIBSTAT.Workspace status based uponCHECK-WS.Logon information, including device and connection details\nincluding client IP address\/Hostname and socket number for turnkey\nPIBs.Any locks that are being held by the PIB and any locks that\nthe PIB is waiting for.The PIBs current spooler assignment and any print jobs that\nhave been created on that PIB.Basic program name(s) running if available, including any\nsubroutines it may be calling or have called.The last file referenced (base frame number or file name if\nindex created) if available.The item-ID of the last item referenced (read or write)The last few entries of the tcl-stack for the user on the\nPIB or if theIoption set on user logged on, the\nlast few entries for the pib.",
            "Thecheck.pibcommand can alsoLOGOFFthe PIB andTANDEMto the PIB\nfrom withincheck.pib.",
            "Optionally uses index\non thefile-of-filesbased on the base frame\nID field (create-index file-of-files a4(g1*1))"
        ],
        "example":[

        ]
    },
    {
        "name":"chg-device command",
        "Syntax":[
            "Syntax",
            "chg-device device.number option= value {option= value...}{(options}\n"
        ],
        "description":[
            "The chg-device command changes a tape device. Devices that can be used as tapes are listed with the list-device command. Some characteristics can be changed to either modify the behavior of a device or to replace a device by another one. The changes made with this command are not permanent and are lost when the virtual machine is rebooted. If no option is specified, the current value is retained.",
            "For Windows: Not Supported"
        ],
        "parameter":[
            "Parameter(s)",
            "device.numberSpecifies number of device to change.name=newnameSpecifies a new device name. Since this is likely to completely\nchange the device, all other options should be specified as well.\nSpaces are not allowed. The length of the new name cannot exceed 63\ncharacters.type=[floppy|halfinch|8mm|4mm|sct|network|compressed]Specifies the type of device.density=[360K|720K|1.2M|1.44M|pseudo]Specifies the density for a floppy disk, or indicates aninfinitedensity for devices, such as a pseudo floppy.density=[1600|3200|6250]Specifies the density for a 1\/2-inch tape device. This field\nis essentially for information purposes.The density of the drive\nis encoded in the device name (as a suffix, for instance).density=[low|standard|high]Specifies the density for an SCT. This field is essentially\nfor information purposes since on most UNIX implementations, the density\nof the drive is encoded in the device name (as a suffix, for instance).label=[80|512]Specifies the label block size. The D3 label is always 80\nbytes long, and writes in a 512 byte block, other Pick implementations\nwrite in an 80 byte block. To be able to exchange a tape between systems,\nit might be necessary to change this option. Not valid for SCT or\nfloppy disk devices.blksize=default block sizeSpecifies the default block size as 512.Note:This option\nis no longer used and, as such, currently provides no functionality.\nProvided for backwards compatibility only.volsz=volume sizeSpecifies the number of 1 KB (1024 byte) blocks to write to\na compressed pseudo tape before cascading to a new file.Note:This\noption is only valid for compressed pseudo tape devices."
        ],
        "example":[
            "Example(s)",
            "Changes the name of the UNIX\nfile or pipe used as a pseudo tape.",
            "chg-device 7 name=\/tmp\/pseudotp"
        ]
    },
    {
        "name":"chksum command",
        "Syntax":[
            "Syntax",
            "chksum file.reference itemlist*{(options}\n"
        ],
        "description":[
            "The chksum command, in DM only, calculates a hexadecimal checksum for either an entire file or a list of items in the file, and outputs the results to a file.",
            "When an item list is specified, statistics are calculated only for the selected item-IDs. If not specified, the entire file is used.",
            "A new data section called checksum is created in the specified file. Each item in the checksum data section corresponds to an item in the requested file\u2019s data section and the first attribute of each item contains the hexadecimal checksum for the item."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "chksum temp[404] 7 items selected out of 7 items.\nrunoff.box\ni\/nosave\nbasic.debugger.t\nfilename.sysprog-bp\nop.col\nop.macro.file\nup.x",
            "Lists the items in the checksum data-level.",
            "list-items temp,checksum (crunoff.box\n001 3443F07\ni\/nosave\n001 65D7D2B7B21\nbasic.debugger.t\n001 644C5D32EE04\nfilename.sysprog-bp\n001 3A4D745500C\nop.col\n001 6005F7623714\nop.macro.file\n001 5BF260B60902\nup.x\n001 14CC018FF4BE\n[405] 7 items listed out of 7 items."
        ]
    },
    {
        "name":"choose.term command",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"cleanpibs command",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"clear-basic-locks macro",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"clear-file command",
        "Syntax":[
            "Syntax",
            "clear-file {(}{data} file.reference{,file.reference}) {(options}\nclear-file {(}dict file.reference){(options}\n"
        ],
        "description":[
            "The clear-file command clears the dictionary or data section of the specified file of all items and retains the primary file space area."
        ],
        "parameter":[
            "Parameter(s)",
            "optionscScrubseach frame of the file\u2019s primary space, changing\nevery byte in the frame to x'ff'.lNo logging\u2014when this option is active, no log of theclear-fileis placed in the file of files file item. This\ncan increase performance significantly on temporary files, which are\ncleared frequently.",
            "Warning:Theclear-filecommand\ndoes not require confirmation.",
            "Theclear-filecommand only clears the file, it does not delete it. The file retains\nits name, base, and modulo for both dictionary and data sections.",
            "To clear the dictionary section, the dictionary must be specified\nbefore the file reference. If the dictionary is specified, file-defining\nitems (D-pointers) are not cleared. If no level is specified, the\ndefault is data.",
            "If the file is a pointer file (D-pointer\u2019s\nattribute 1 is a dp), then the secondary file space is not returned\nto overflow until a fullsaveclears the dirty\nbits, and eliminates the deleted items. If the file is an ordinary\ndata file, then the secondary file space is returned to overflow immediately."
        ],
        "example":[
            "Example(s)",
            "Removes all items from the data\nlevel of theold.invoices.",
            "clear-file data old.invoices",
            "Removes all items except D-pointers to data sections from\nthe dictionary of theinvoice.historyfile.",
            "clear-file dict invoice.history",
            "Clears the archive data section located in the dictionary\nof theinvoicesfile.",
            "clear-file data invoices,archive"
        ]
    },
    {
        "name":"clear-group-locks command",
        "Syntax":[
            "Syntax",
            "clear-group-locks"
        ],
        "description":[
            "Description",
            "The clear-group-locks command clears the group locks in the system   group locks table.",
            "Group locks are set by the operating system. For example, by the file-save     command, and by AQL when processing a file. Group locks are typically cleared automatically when     the commands that set them have finished executing. "
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"clear-index command",
        "Syntax":[
            "Syntax",
            "clear-index file.reference attribute.defining.item{(options)}\nclear-index file.reference a.code{(options)}\nclear-index file.reference *{(options)}\n"
        ],
        "description":[
            "The clear-index command clears the specified B-tree index expression in the specified file, leaving only a null root. This command is not supported in the FSI."
        ],
        "parameter":[
            "Parameter(s)",
            "a.codeSpecifies theaprocessing code that is used in forming the keys to the index. The\nprocessing code must include an attribute number immediately after\nthea. The first attribute number in the processing\ncode is the master attribute. This attribute determines the number\nof values that an index key generates.*Clears al indexes.optionscSpecifies a case sensitive index. Default is case insensitive."
        ],
        "example":[
            "Example(s)",
            "Clears the index on attribute\n1 of the entity file.",
            "clear-index entity a1",
            "Clears all indexes from the invoices file.",
            "clear-index invoices *"
        ]
    },
    {
        "name":"clear-jobs command",
        "Syntax":[
            "Syntax",
            "clear-jobs\n"
        ],
        "description":[
            "The clear-jobs command selects items with the status logoff or completed, and deletes them from the dm,jobs, file."
        ],
        "parameter":[
            "Parameter(s)",
            "optionsaRemoves all non-running jobs, including error and aborted jobs."
        ],
        "example":[

        ]
    },
    {
        "name":"clear-locks command",
        "Syntax":[
            "Syntax",
            "clear-locks {host}{(options}\n"
        ],
        "description":[
            "Description",
            "The clear-locks BASIC program clears all locks, or specific locks,                 according to the options provided. When used with the i option, an                 optional host can be specified to release all item locks residing on a remote                 server."
        ],
        "parameter":[
            "Parameter(s)",
            "optionsaClears client Transaction Log locks only.bClears all BASIC locks.cClears server Transaction Log locks only.f{fid}Clears all group and item locks for a specific frame-ID, specified as a decimal number. Thefidvariable must be the first\n                                                  frame-ID of a group to clear all item locks in the\n                                                  group. If a FCB is specified, all item locks in\n                                                  the entire file are cleared.Note:Thefoption indicates that the\n                                                  number immediately following it is a frame-ID.\n                                                  Without thefoption, the number\n                                                  is interpreted as a port number.g{f{fid}}Clears all group locks and ignores item locks for a specific frame-ID, specified as a\n                                                  decimal number. See the note for thefoption.i{f{fid}}Clears all item locks, and ignores group locks, for a specific frame-ID, specified as a\n                                                  decimal number. See the note for thefoption.Note:Theioption will not work with a\n                                                  specific port number or thef<fid>option.mClears all phantom locks.o{f{fid}}Clears all group read-only locks for a specific frame-ID, specified as a decimal number. See\n                                                  the note for thefoption.qClears all spooler locks.r{f{fid}}Clears all group retrieval locks for a specific frame-ID, specified as a decimal number. See\n                                                  the note for thefoption.u{f{fid}}Clears all group update locks for a specific frame-ID, specified as a decimal number. See\n                                                  the note for thefoption.sClears all system locks.tClears Transaction Log locks."
        ],
        "example":[
            "Example(s)",
            "Example 1",
            "Clears all group locks for port\n3.",
            "clear-locks (g3",
            "Example 2",
            "Clears all group locks for decimal frame 12345.",
            "clear-locks (gf12345",
            "Example 3",
            "Clears all group and item locks for the group starting\nat FID 12345.",
            "clear-locks (f12345",
            "Example 4",
            "Clears all item locks for the group starting at FID 12345.",
            "clear-locks (if12345",
            "Example 5",
            "Clears all group and item locks for the group starting at FID 12345.",
            "This result is the same asclear-locks (f12345in Example 3 because both theiandgoptions are specified.",
            "clear-locks (igf12345"
        ]
    },
    {
        "name":"cls command",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"cmdu command",
        "Syntax":[
            "Syntax",
            "cmdu {(options}\n"
        ],
        "description":[
            "The cmdu command from DM produces a report of the last TCL command issued by every active user on the system."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "cmduPage   1 dm,pibs,                   10:23:40   19 Feb 2003\npib#   location.......   user.....   md...   last.cmd\n27     Dick Parr         dp          ba      lu\n60     Andy Meyers       am          qa      m\n41     Sam Smith         ss          ba      main\n33     Lisa Jones        lisa        ba      calls\n45     Steve Johnson     sj          ba      termw\n38     Fred Foote        ff          qa      to qa"
        ]
    },
    {
        "name":"coldstart command",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"coldstart-accounts command",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"coldstart.log command",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"compare command",
        "Syntax":[
            "Syntax",
            "compare file.reference itemlist* {(options)}\nwith: {(file.reference} itemlist\n"
        ],
        "description":[
            "The compare command compares items line-by-line to find which lines have been inserted, deleted or changed."
        ],
        "parameter":[
            "Parameter(s)",
            "optionsaCompares all elements on each attribute. Default is the first\nthree elements, delimited with spaces (assembler source general format).bCompares entire first value of attribute. If not specified,\nonly the first three words are compared. This option is used to compare\nassembly object code.cCombines output into one-column format, rather than two-column\nsplit-screen format.dDoes not compare object code addresses. This is intended for\ncompiled assembly language programs.fIssues a form feed between each item and starts the display\nof each item on a new page.iSuppresses the message:[409]\u00a0xxx is not on file.lCreates select list of items with differences.nActivates thenopagefunction on output\nto the terminal.oCompares entire attribute, except for the first value. This\nis used to compare assembly object code by comparing the entire attribute\nexcept for the first value and first subvalue within each value.pDirects output to system printer, via the spooler.sSuppresses display of item-IDs. This is available only with\nthezoption.zLists only lines with differences and displays item-IDs only\nof identical items.",
            "Thecomparecommand produces a comparative\nlisting of each item in the specified item list, indicating where\ndifferences occur between the source and target items."
        ],
        "example":[
            "Example(s)",
            "compare entity 12345 (zsawith:(entity,archive 12345compare bp count (a)with:count.2bp count\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0bp count.2\n1 *Count from 1-10 1 *Count from 1-10\n2 equ ten to 10 2 ten = 10\n3 for i = 1 to ten 3 for i = 1 to ten\n4 print i 4 print i\n5 next i 5 next i\n6 print 6 print\n7 end 7 end\n8 8"
        ]
    },
    {
        "name":"compare-list command",
        "Syntax":[
            "Syntax",
            "compare-list {file.reference.a}lista operator{file.reference.b} \nlistb{file.reference.c} {listc} {(options)}\n",
            "compare-list operator{listc}{(options}\n"
        ],
        "description":[
            "The compare-list BASIC program forms a single list from two lists using the intersection, union, or exclusion operators."
        ],
        "parameter":[
            "Parameter(s)",
            "file.reference.aFile that contains the list specified\ninista.listaFirst list.CAUTION:This argument will be treated as a filename first, then as a listname.\nThus, if a file with the same name as the listname (specified inlista) exists in the file specified infile.reference.a, an error will occur.file.reference.bFile that contains the list specified\ninlistb.listbSecond list.CAUTION:This argument will be treated as a filename first, then as a listname.\nThus, if a file with the same name as the listname (specified inlistb) exists in the file specified infile.reference.b, an error will occur.file.reference.cFile that contains the list specified\ninlistc.listcThird list.CAUTION:This argument will be treated as a filename first, then as a listname.\nThus, if a file with the same name as the listname (specified inlistc) exists in the file specified infile.reference.c, an error will occur.operators&Represents anandorintersection, which means that the item-IDs must exist in both lists.#Represents anotorexclusion, which\nmeans that the item\u00a0IDs must not exist in both lists.=Represents anorunion, indicating\nthat the item-IDs can exist in either list.+Concatenateslistbto the end oflista. For example:lista+listb-Removes item-IDs inlistbfromlista. For example:lista-listboptionsgPerforms aget-listonlistc. For example, makeslistcactive after the process.sGenerates and displays statistics about the items selected\nduring the process. If this option is not used, no message displays.",
            "Note:The?displays the help text on\nscreen.",
            "Thecompare-listcommand performs\nthe operation (&,#,=,+, or-) onlistaandlistband creates a new list,listc. Iflistcis not specified, it\noverwriteslista."
        ],
        "example":[
            "Example(s)",
            "Assume that these two lists below\nare already created and reside in thepointer-filefile.",
            "list1list2001 cat001 banana002 dog002 apple003 banana003 orange",
            "Since nolistcwas specified,list1is overwritten and contains banana, cat, dog, apple,\nbanana, and orange.",
            "compare-list list1 + list2",
            "This example is exactly the same as the first example,\nbut the list is saved aslist3.list1andlist2remain unchanged.",
            "compare-list list1 + list2 list3",
            "Creates alist3, which contains apple,\ncat, dog, and orange, since none of these display in bothlist1andlist2.list1andlist2remain unchanged.",
            "compare-list list1 # list2 list3",
            "Creates and activateslist3, which contains\napple, banana, cat, dog, and orange, or all unique strings in bothlist1andlist2.list1andlist2remain unchanged.",
            "compare-list list1 = list2 list3 (gslist2   list1   list3   Sort time - faster than a speeding second.\n3       3       5       Duty time - faster than a speeding second.\n[404] 5 items selected out of 1 items.",
            "Creates alist3, which contains cat and dog. Those strings, which\nexist inlist2(banana, in this case) are removed\nfromlist1.list1andlist2remain unchanged.",
            "compare-list list1 - list2 list3",
            "Creates alist3, which contains banana,\nsince it is the only string, which displays in bothlist1andlist2.list1andlist2remain unchanged.",
            "compare-list list1 & list2 list3"
        ]
    },
    {
        "name":"compile command",
        "Syntax":[
            "Syntax",
            "compile file.reference itemlist* {(options}\n"
        ],
        "description":[
            "The compile BASIC program invokes the BASIC compiler and translates   the specified source code into executable object code with case insensitivity."
        ],
        "parameter":[
            "Parameter(s)",
            "optionscCompresses the object by suppressing the end-of-line (EOL) opcodes from the object code\n        item. This option is designed to be used with debugged and cataloged programs. Because the\n        EOL opcodes are used to count lines for error messages, any runtime error message in a\n        program compiled with thecoption indicates the error is on line 0.\n        Additionally, thecoption removes the ability to single-step with the\n        BASIC debugger.dPrevents the runtimedoption from entering the debugger.eLists only error lines encountered during the compilation of the program.The listing\n         indicates line number in the source code item, the source line itself, and a description of\n         the error associated with the line.fGenerates floating point arithmetic when used with theooption.gFor UNIX:Not supportedFor Windows:Produces\nobject code that is stored as an MS-DOS file with the extension .D3F.hForces the module to be loaded locally and is typically for modules that are being used by\n        only one or two people at any given time.By default, the BASIC compiler attempts to\n         create native code that can be shared by all users. This option is only supported when used\n         with theooption.iLists lines from any included program as part of the listing.\nIf used with theloption, the source program listing,\nthe included lines are indicated by a plus sign after the line number.jAllows compile options to be embedded in the source code at:$OPTIONS\n          <platform> <options>kFor Windows:Not supportedFor UNIX:When used without thehoption, forces shared code to remain loaded until the machine is shut\n         down.This option should be used for those programs that are used by the majority of\n         users on the system. It reduces memory usage and load time.lGenerates a line-by-line listing of the source program during compilation.Error lines\n         with associated error messages are indicated. When theloption is used,\n         the asterisk does not display. Each line of the listing takes place at the asterisk.mGenerates a programmapof the descriptor table and\ncorrelates source code lines to generated object code frames. Each\nvariable in the program is listed along with its decimal offset.nNo pause (nopage) option: Suppresses pause at end of page on terminal\n        display.oProduces a FlashBASIC optimized code.Note:If any module in a program is compiled with theooption, then all modules in that program\n                                    must also have been compiled with theooption.pRoutes all output generated by the compilation, except the\ncross-reference listing, to the printer, via the spooler.qPrevents messages from scrolling past on terminalsSuppresses generation of a symbol table. The symbol table\nis used exclusively by the BASIC\/FlashBASIC debugger for reference;\ntherefore, it needs to be kept only if the user uses the debugger.xCreates a cross-reference of all the labels and variables\nused in the BASIC program and stores this information in thebsymfile, which must exist before using. Thexoption first clears data in thebsymfile, then creates an item for every variable and label used in\nthe program, using the variable or label name as the item-ID.After\ncreating the cross-reference items, attribute one contains the line\nnumbers where the variable or label is referenced; each line number\nis a value. The line number where a label is defined, or where the\nvalue of the variable is changed is preceded by an asterisk. If\u00a0the\nvariable names and labels are in both uppercase and lowercase, the\nD-pointer for thebsymfile-defining item should\nnot have thesoption.wOptimizes without source when used with theooption. This allows optimizing programs without source code.Note:The normal dictionary object statistics are not updated when this\noption is used.yAllows multiple FlashBASIC or BASIC compiles concurrently.\nNormally, each BASIC or FlashBASIC compile attempts to set BASIC lock\n49 to keep multiple compiles from dramatically slowing down the machine.\nTheyoption avoids this logic.",
            "Case insensitivity means that the variablesTOTAL,Total,\n    andtotalall represent the same symbol. A case-sensitive state would treat\n    these as three separate variables.",
            "Each line of the source\nprogram is scanned for syntax errors during compilation, even after\nan error has been detected.",
            "A period displays for every 10 lines\nof code.",
            "If an error is encountered, the line with the error\nand the error message displays; no object code is produced.",
            "If theooption is used, FlashBASIC is invoked after\nthe first stage of compilation is complete. When all stages are completed,\nand if no errors are found, the compiled form is saved and can be\nexecuted using theruncommand. The program may\nalso be cataloged with thecatalogcommand.",
            "Theitemlist*consists of one or more source program names, separated by\n    spaces. If a name is not specified, or if the * (asterisk) is used, all programs in the file are\n    compiled.",
            "Programs can be created and modified using the Update processor.\nAdditionally, programs can be compiled when exiting the Update processor\nby using either the CTRL+XC command, which compiles and catalogs the\nprogram, or the CTRL+XR command, which compiles and runs the program.\nAny other editor can also be used.",
            "For UNIX:The default\noptions can be stored in attribute 6 of the compile item in your master\ndictionary. For example, putting anoin this attribute\nmakes all compiles in that account produce FlashBASIC code.",
            "Warning:Compilation with the(oflag might take a long time to\n                compile and tends to use a great deal of the machine\u2019s resources.",
            "An error encountered deep within nested\nlogic can produce several screens of erroneous error messages. The\nactual error is the first message listed."
        ],
        "example":[
            "Example(s)",
            "Example 1",
            "Compiles theterm-typeprogram and sends the listing to the printer.",
            "compile dm,bp, term-type (lp",
            "Example 2",
            "Creates a BASIC native object module that can be run from D3 as if it were an interpreted BASIC\n    program. Thecoption is used primarily to reduce object size and compile\n    time, both of which can be significantly greater when using BASIC.",
            "compile bp j (oc",
            "Example 3",
            "The embedded options are ignored unless the compiler is invoked with thejoption:",
            "compile bp * (j",
            "The embedded options are added to the TCL options.",
            "Example 4",
            "Creates FlashBASIC code for all the FlashBASIC object\npointers in bp.old. There is no need to have the source present.",
            "select dict bp.old[404] 114 items selected from 114 items.compile bp.old (owct       md             compile\n001      VR\n002      3]9\n003      F\n004      dm,bp,         :ccompile\n005\n006      o",
            "Notice that anowas placed in attribute 6. When this command is invoked,\n    compile programs are flashed."
        ]
    },
    {
        "name":"compile-catalog command",
        "Syntax":[
            "Syntax",
            "compile-catalog file.reference itemlist*\n"
        ],
        "description":[
            "The compile-catalog BASIC program (CTRL+XC from within the Update processor) compiles and catalogs a BASIC program."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"compile-run command",
        "Syntax":[
            "Syntax",
            "compile-run file.reference item.list*\n"
        ],
        "description":[
            "The compile-run BASIC program (CTRL+XR from within the Update processor) compiles and runs a BASIC program."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"compile.flash.all command",
        "Syntax":[
            "Syntax",
            "compile.flash.all {(options}\n"
        ],
        "description":[
            "Description",
            "The compile.flash.all command allows you to compile all BASIC programs currently compiled with FlashBASIC, either in one or all accounts on the system. The result is platform independent, optimized object code that does not require the existence of a C compiler.",
            "Upon running this command, you are prompted to specify all accounts or a specific account."
        ],
        "parameter":[
            "Parameter(s)",
            "optionsThis command can use any of the\noptions supported for thecompilecommand. Seecompile commandfor more information. Additionally, this option is available\nfor the command.zDisplays programmatic information regarding the compile process\nand the programs being compiled."
        ],
        "example":[

        ]
    },
    {
        "name":"console-blank command",
        "Syntax":[
            "Syntax",
            "console-blank option\n"
        ],
        "description":[
            "The console-blank BASIC program from the DM account sets the blank out time or turn off the blank out feature.",
            "For Windows: Not Supported"
        ],
        "parameter":[
            "Parameter(s)",
            "optionnNumber of minutes from 0 to 60 until monitor blanks.Note:Setting the number of minutes to 0 will turn off this feature."
        ],
        "example":[

        ]
    },
    {
        "name":"control-chars command",
        "Syntax":[
            "Syntax",
            "control-chars {(options}\n"
        ],
        "description":[
            "The control-chars command enables or disables the entering of control characters at input, depending on the option specified.",
            "Under default conditions, nonediting control characters are accepted by standard input commands. By doing control-chars (f, these characters are ignored.",
            "The settings of this option are sent up and down levels for the current port.",
            "The control-chars setting may be temporarily overwritten in a BASIC program with the inputctrl statement."
        ],
        "parameter":[
            "Parameter(s)",
            "optionsfDisables control character input.nEnables control character input. This is the default.sSuppresses output of status message."
        ],
        "example":[

        ]
    },
    {
        "name":"conv-case command",
        "Syntax":[
            "Syntax",
            "conv-case file.reference itemlist*{(options)}\n"
        ],
        "description":[
            "The conv-case BASIC program converts the characters within specified items plus the item-ID to uppercase or lowercase, according to the options provided.",
            "If no option is provided, all characters are converted to uppercase."
        ],
        "parameter":[
            "Parameter(s)",
            "options?Provides help on the syntax and options (below).eUsed withqoption to convert case of items\nwithin quotation marks due tochain,tcl, andexecutestatements. If theeoption is used by itself, all characters are changed to uppercase.\nIfeis used with theqoption,\nit changes everything except for strings in quotation marks that are\nnot preceded bychain,tcl,\norexecute.iSuppresses display of item-IDs.lConverts uppercase text to lowercase.oOutputs the item-IDs on the same line.qLeaves text within quotation marks unchanged.uConverts lowercase text to uppercase (default)."
        ],
        "example":[
            "Example(s)",
            "Converts all the items in the\nbp file to uppercase characters, except for literals, inside quotation\nmarks or backslash characters. Each item-ID displays on a separate\nline.",
            "conv-case bp * (equ"
        ]
    },
    {
        "name":"converse command",
        "Syntax":[
            "Syntax",
            "converse port.number{(options}\n"
        ],
        "description":[
            "The converse BASIC program links the current process to a device. The target or slave device is put into a pass-through mode, allowing data in and out in raw mode.",
            "For Windows: Supports the converse command when the D3 process is connected to the virtual machine and when it is not connected. The port must be connected but not logged on.",
            "For UNIX: If the D3 process is not connected to the virtual machine, then converse is not allowed, even if the where command with a z option displays the port as being available.",
            "The converse command stores the PIB number of the port being conversed to in attribute 17 of the dm,pibs file. This information helps track down the converse ports that have been logged off."
        ],
        "parameter":[
            "Parameter(s)",
            "optionscCaptures all output on the (slave) screen and writes it to\nan item in thedm,cap-filefile, using theitem-ID *n, wherenis the current port number.d\/hexnum{,hexnum...}Designates the sequence of characters to terminateconversemode.Each character is provided in its hexadecimal equivalent of\nits ASCII value.Each character is separated by a , (comma).Note:A\/is required after thedoption and before the first hexadecimal number. For example,d\/41,42,43,44, indicates that an \"ABCD\" disconnects the\nlink.iSame as thecoption, except that output\nfrom the master process is captured.nSuppresses capturing on converse mode. This is the default.sSuppresses the message when the process terminates.xTerminates converse mode on target device number and returns\ntarget device to logon.zUsed in conjunction withiorc, translate the nonprintable characters into a period, the carriage\nreturns into an attribute mark, and suppresses the line feeds. Without\nthis option, if a character x'ff' is captured, the item is truncated.",
            "Note:If the termination sequence contains an escape character\n(X is the default), it is not easy to send an escape by itself to\nthe target port. This is due to the fact that, since an escape starts\nthe termination sequence, the system waits for the second character.\nIf a character other than X is typed, then escape and the character\nare sent together. This can create some unexpected results. If an\nescape is to be used as a regular character, it is preferable to define\na less used character for the termination sequence, such as the DELETE\nkey. Unlike some other implementations, a break is not generated by\na special escape character sequence. Press BREAK on the master terminal\nto send a break signal to the slave device. If the slave device is\nnot a serial line, the break is interpreted accordingly. For instance,\nif the target is a telnet entity, the break generates the appropriate\ntelnet message. When capturing is in effect, the data is not stored\nin real time to thedm,cap-fileitem. There may\nbe a delay of a few seconds. This is done to reduce the number of\nfile accesses in case of heavy traffic."
        ],
        "example":[
            "Example(s)",
            "Attaches the current process\nto port 16.",
            "converse 16",
            "Attaches the current process to port 33, capturing screen\noutput from the slave process.",
            "converse 33 (c",
            "Attaches to port 3 and sets the hot key sequence to *++.",
            "converse 3 (d\/2a,2b,2b",
            "Attaches to port 42 and captures the screen output from\nthe master process, making sure all data is displayed.",
            "converse 42 (iz",
            "Terminates converse on port 42 and returns port to the\nlogon prompt.",
            "converse 42 (x"
        ]
    },
    {
        "name":"copy command",
        "Syntax":[
            "Syntax",
            "copy file.reference itemlist*{(options)}\nto: {(file.reference} {itemlist}\n"
        ],
        "description":[
            "The copy command copies items to an output device, to another item-ID, or to another file."
        ],
        "parameter":[
            "Parameter(s)",
            "file.referenceSpecifies the origination file from which information is\n        being copied and\/or the destination file to which information is being copied.itemlistSpecifies the list of items.optionsnInteger number that specifies the number of items to copy.\nTypically used for copying data for test files.aActivates assemblymlistformat.dDeletes original source item after copying. Not valid with\nthetorpoption.fOutputs a form feed between each item; only valid with thetandpoption.iSuppresses display of item-IDs when copying between files.mActivates macro (assembly) format on terminal or printer output\nonly.nActivatesnopagefunction on output to\nthe terminal; only available with thetoption.oOverwrites existing items when duplicate item-IDs exist; has\nno effect if used withtorpoption.pDirects output to system printer, via the spooler.sSuppresses display of line (attribute) numbers when used with\nthetorpoption.sSuppresses error message display when copying between files.tDirects output to the terminal.uIf the item-ID is in the destination file, the item is copied\nto a new item-ID by creating a new item-ID composed of the original\nitem-ID concatenated with a letter, starting with a lowercasea.xOutputs in hexadecimal; only available with thetandpoption.",
            "If an output device is not specified in the options (either\nto the terminal or printer), the promptto:displays\non the next line.",
            "If copying to another file, a left parenthesis\nmust precede the file name. A closing right parenthesis is not needed.\nIf the file reference is not specified at theto:prompt,\nthe items are copied to the source file.",
            "If no item list is included, the items in the destination file are given the same item-IDs as the\n    items in the source file. The absence of an item list or the use of  \"*\" (asterisk) for the item\n    list indicates that all source file items are to be copied.",
            "The file reference can refer to a dictionary level by preceding the file reference with the word,DICT, followed by a space. No item list is required when thecopyfollows aselect,sselect,get-list, orqselect(or any other list-generating\n    process).",
            "File-defining items\nareprotectedand cannot be copied with thecopycommand."
        ],
        "example":[
            "Example(s)",
            "copy dict invoices customer.name (pcopy invoices * (odto:(invoices,archive",
            "copy dict invoices sizeto:(dict sales"
        ]
    },
    {
        "name":"copy-list command",
        "Syntax":[
            "Syntax",
            "copy-list {{file.reference} {itemlist*} {(options}\nto: {(file.reference} {itemlist}\n"
        ],
        "description":[
            "The copy-list command copies a saved list to either a new item-ID, a new file reference, or to the specified output device.",
            "A file reference may be specified because any file can hold lists. Conversely, the copy command may also be used, but it does not default to the pointer-file."
        ],
        "parameter":[
            "Parameter(s)",
            "file.referenceSpecifies the items are copied\nfrom the pointer-file.itemlist*Specifies the default item-ID,%user-ID, is used.optionsdDeletes the source items from the source file after copying.nActivates thenopagefunction on output\nto the terminal.oOverwrites duplicate item-IDs.pCopies list to printer via the spooler.sSuppresses display of line numbers when used with thetorpoption, and suppresses the error\nmessage output on a file copy.tCopies list to terminal.uCopies item if the item-ID is in the destination file and\nrenames it by concatenating the current-ID with a character, starting\nwith a lowercasea.xLists output in hexadecimal, when used with thetorpoption."
        ],
        "example":[
            "Example(s)",
            "Copies a list calledtemp.listfrom thepointer-filefile\nin the dm account to thepointer-filefile in\ntheprodaccount. After copying successfully, the\nlist is deleted from thedm,pointer-file,with\nthedoption. Path names are provided in the source\nand in the destination files. This command is valid from any account.",
            "copy-list dm,pointer-file, temp.list (dto:(prod,pointer-file, cust.list"
        ]
    },
    {
        "name":"cp command",
        "Syntax":[
            "Syntax",
            "cp file.reference itemlist*{(options}\n"
        ],
        "description":[
            "The cp BASIC program copies the specified items to the printer via the spooler."
        ],
        "parameter":[
            "Parameter(s)",
            "optionsnInteger number that specifies the number of items to copy.\nThis is typically used for copying data for test files.aActivates assemblymlistformat.fOutputs a form feed between each item.sSuppresses display of line numbers.xOutputs in hexadecimal."
        ],
        "example":[
            "Example(s)",
            "cp dm,bp, term-type"
        ]
    },
    {
        "name":"create-abs command",
        "Syntax":[
            "Syntax",
            "create-abs file.reference([l|{z} number])\n"
        ],
        "description":[
            "The create-abs command sets aside a contiguous set of frames as the destination for loading the ABS code (the D3 virtual code). This space is called the ABS area.",
            "For Windows: Not Supported"
        ],
        "parameter":[
            "Parameter(s)",
            "optionsitem-sizeSpecifies the \u00a0number of frames, in decimal, to set aside\nfor the machine \u00a0code (new ABS area). The frames must be contiguous.\nIf there \u00a0are not enough contiguous frames, an error message\ndisplays.lPrompts user for source file and copies the system modes from\nthe source abs used in booting the system (boot abs) to the destination\nABS area, initializing the file for future loads. If a numeric parameter\nis not specified, it uses the ABS size of the source file to create\nthe ABS area. This option overrides thezoption.{z}numberz, followed by a number, zeroes out the frames\nin the ABS area. This option requires a numeric parameter to specify\nthe size of the ABS area, and is incompatible with theloption. The prompt below displays:Enter source data-abs file name (RTN for ABS):To run the boot ABS, enterboot.abs.To run a different ABS, enter the name of the abs.",
            "This command provides the ability to create a whole new\nexecutable ABS to avoid the risk of corrupting the existing ABS.",
            "The %abs% item (located in the dictionary of theabsfile), is a pointer to the ABS\u00a0area. The first frame in the\nABS area contains the date and implementation of the ABS.",
            "The\ndata section is used as a cross-reference file by the incremental\nloader.",
            "Thecreate-abscommand executes aclear-fileon the data section of theabsfile, then creates one item in the data section for each frame in\nthe ABS area. These items contain an f in attribute 1. The item-IDs\nare sequential numbers, starting with 000.",
            "The file reference\nindicates the file where the modes are to be loaded.",
            "If adbsymdata file for both source and destination files exists,\nthe destination is cleared and the source copied over.",
            "Warning:The%abs%file should not be\ndeleted while running under it. The filemusthave a dictionary\nand data level, and it is advised to create thedbsymdata section, as shown in the example."
        ],
        "example":[
            "Example(s)",
            "create-file abs.test 3 395create-abs abs.test (lEnter source abs file name (return for boot ABS):\n[1005] abs file creation successfully completed."
        ]
    },
    {
        "name":"create-account command",
        "Syntax":[
            "Syntax",
            "create-account {VME:} {account.name} {(options}\n"
        ],
        "description":[
            "The create-account BASIC program creates a new master dictionary, copies all the necessary items into it, and updates the mds file with the name and address.",
            "The newac file in the dm account contains the items that are placed into a new account master dictionary. Additional, application-specific items may be added to newac. For security purposes, items can be removed from newac as well. For example, dangerous commands such as delete-file and clear-file could be either removed or renamed to prevent accidental use.",
            "For a complete description of the attributes requested in create-account, see Master dictionary. If the account name is omitted from the command line, the process prompts for it."
        ],
        "parameter":[
            "Parameter(s)",
            "{VME:}(Optional)For Windows:By default, the account is created in the FSI. To create the account\nin the VME, use this optional prefix.account.nameName of account.Note:The following reserved characters are not supported for use in account\n           names:*~@,'():?\/<>\\\"|^[]optionshFor Hot-Backup purposes, suppresses updates to the new account\nfrom newac items.lFor Hot-Backup purposes, specifies that files in the account\nare logged.sCreates a case sensitive account.tFor Hot-Backup purposes, specifies that files in the account\nare not logged (applicable if logging all files).xSpecifies that files in the account are not saved during a\nregular backupandare not logged via Hot Backup.ySpecifies that files in the account are saved (but not their\ncontents) during a regular backup. Also, files are not logged via\nHot Backup."
        ],
        "example":[
            "Example(s)",
            "create-account fredmds,, \u2019fred\u2019 NEW ITEM size = 31\nmds,,\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0fred\ntype\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0D\nmodulo\u00a0\u00a0\u00a0\u00a0\u00a0\u00a037\nret-lock\nupd-lock\npassword\nsyspriv\njustification\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0L\nwidth\u00a0\u00a0\u00a0\u00a0\u00a0\u00a012\nreallocation",
            "mds,,Item-ID of the account to create.typeDescribes the type of item.D indicates this is a file-defining item. (local)DS-pointer account indicates case-sensitivity (local).R indicates this is an OSFI file-defining item (remote)moduloModulo used in creating the file for this account.retrieval codesandupdate lock codesUnique locks for limiting access to files within the account.passwordOptional logon password for this account. The password displays\nas a formula conversion in hexadecimal.sysprivUser privilege level. This can be sys0, sys1, or sys2.justificationandwidthDescribes the output specifications for the master dictionary.reallocationDescribes the reallocation modulo for the master dictionary,\nif any. This value must be enclosed in parentheses."
        ]
    },
    {
        "name":"create-file command",
        "Syntax":[
            "Syntax",
            "create-file file.reference dict.modulo data.modulo{(options)}\ncreate-file dict file.reference dict.modulo{(options)}\ncreate-file data dictionary.reference, data.reference data.modulo{(options)}\n"
        ],
        "description":[
            "The create-file BASIC program creates a new dictionary and data file, a dictionary-only file, or a new data section on an existing dictionary file; space is allocated and reserved if available."
        ],
        "parameter":[
            "Parameter(s)",
            "file.nameName of the file to be created\nin the current account.dict.nameName of a dictionary to be created\nin the current account.data.nameName of a data file to be created\nin the specified dictionary.dict.moduloIndicates the number of frames\nto reserve in the primary file space for dictionary items.data.moduloIndicates the number of frames\nto reserve in the primary file space for data items. Any file can\ncontain binary pointer items, so this code is not needed.Note:The\nmaximum allowed modulo for a file in the VME is 16777213.optionsdCreates the file in an alternate directory.eSpecifies to encrypt the data in the file being created. Seeencrypt-file commandfor more information.fSuppresses logging clear-file information in the file of files\nfile by placing acin attribute 17 of the file of\nfiles file item.lSpecifies that any updates to this file are logged to the\ntransaction logger. This option is not compatible with thexoryoptions.nNegates all update protection for the given file irrespective\nof the global update protection setting. This option is not compatible\nwith theuoption.pPrimary file space is to contain only pointer (indirect) items\nregardless of item length. Pointer-files are not supported in the\nFSI.qPrevents files from being resized. This allows sequential\ncommands (for example,count) to be used without\nhaving to update the File Control Block.Warning:Administrators\nshould not clear theqd-code and start a resize\nunless you are certain that there are no sequential operations in\nprogress on the file. \u00a0See theuoption of theresize commandfor a description of the potential problems that may occur.rAllows the creation of a file in another account. When this\noption is used, the system prompts for the account the file is to\nbe created in.sItem-IDs are case-sensitive. This option is compatible with\nall other options.tSpecifies that any updates to this file are not logged to\nthe transaction logger.uEnables update protection for the given file irrespective\nof the global update protection setting. This option is not compatible\nwith thenoption.xDoes not save the file on backups (file-save,account-save, and so on). The file does not\nexist after a file restore.yDoes not save the data in this file on backups (file-save,account-save, and so on). On a file restore,\nthe file is recreated, but empties.",
            "The options above are included as part of the dictionary\ncode in the file identification items in the master dictionary for\ndictionary files and in the file dictionary for data files.",
            "Thel,x, andyoptions can also be added or deleted from an existing dictionary\ncode by usingupdateorud.\nThescode cannot be added or deleted.",
            "Warning:D3 allows separation to be indicated, but ignores\nit.",
            "The path names to other accounts cannot be used. The\nsyntax varies according to the section of the file being created.\nFor example:",
            "First form creates a new file with both data and dictionary\nsections.Second form creates a new file with only a dictionary section.Third form creates a new data file section in an existing\ndictionary.",
            "The internal modulos actually used may be slightly higher\nto give a more optimal hashing scheme.",
            "When a dictionary-only\nfile is created, a Q-pointer (synonym-defining item) with the file\nreference as its item-ID, is automatically created in the dictionary.\nThis allows the file to be accessed without specifying dictionary."
        ],
        "example":[
            "Example(s)",
            "Creates both a new dictionary\nand data section.",
            "create-file customers 7 101",
            "Creates a dictionary-only file.",
            "create-file dict pointer-file 31",
            "Creates a new data section called archive and places a\npointer to it in the dictionary of customers. The new data section\nmay nowshareall the attribute-defining items\nin the customers dictionary.",
            "create-file data customers,archive 101"
        ]
    },
    {
        "name":"create-index command",
        "Syntax":[
            "Syntax",
            " \n create-index file.reference a.code{(options)}\n create-index file.reference attribute.defining.item{(options)}\n create-index file.reference* {(options)}\n\n"
        ],
        "description":[
            "The create-index BASIC program creates a new B-tree index in the specified file using the a (algebraic) processing code expression provided and ensures the a0 index case-sensitivity matches the item-ID case sensitivity."
        ],
        "parameter":[
            "Parameter(s)",
            "a.codeSpecifies theaprocessing code to be\n        used in forming the keys to the index.The processing code must include an attribute\n         number immediately after theaand cannot contain any named attribute\n         references. The first attribute number in the processing code is the master attribute. This\n         attribute determines the number of values that an index key generates.Note:The processing code does not require an attribute number immediately after theaon D3 Windows FSI. However, these indexes can only be used in\n           BASIC. \u00a0They will not be used by the update processor or Access.The first attribute referenced in thea.codeparameter determines\n           the number of multivalues contained in the index.Regarding the use of translates when creating indexesFor Hot Backup (Windows and UNIX):All indexes using\n         translate correlatives should contain a fully-pathed file reference. This is necessary\n         because the Hot Backup slave processes operate out of the DM or FSIDM accounts. For\n         example:create-index file1 a1(tmainaccount,file2,;x;;1))For\n          Windows:Great caution should be taken when using translates during index creation since index\n          corruption can occur.To employ translates, the file reference must contain the full\n         path to the file. For example:create-index file1 a1(tfsidm,tfile2,;x;;1))For UNIX:Use thes (subindex) processing codeto employ translates.specifier*Designates all indexes.This can be used as an alternate to a series ofcreate-indexcommands by placing theiprocessing\n         codes directly into the correlative position of file-defining item (D-pointer), and then\n         using the asterisk with thecreate-indexcommand.optionscSpecifies the keys are case sensitive. Default is case insensitive. If the*specifier is used, the index(es) will remain case insensitive.As of\n         D3 v9.0, you can create an index with a casing different than what is established by the\n         TCLcasecommand (defaults to off), but AQL will not use it unless the\n         TCLcasecommand setting matches the index casing.The BASICrootandkeystatements will use the specified index\n         that matches the TCLcasecommand setting, unless the BASICcasingstatement is used to override it.fFor Windows FSI only:Creates floating-point indexes (where the keys are\n        floating-point numbers, such as'1.234E123'. 2).Index keys might be\n         normalized (plus signs and non-significant digits are removed, and decimal points are\n         moved). For example:'+00123e12'is entered in the index as'123e12'.Tip:If the keys do not have exponents (for\n         example:'123.456'), use numeric indexes\n        instead.lLocks the file on which it is currently working to facilitate parallel access by\n        other users.Theloption forces acreate-indexto\n         lock the entire file during index creation.nCreates numeric indexes.Numeric indexes are sorted according to their numerical\n         value. For example: \"10.5\" is greater than \"9.34\" and \"9 June 1980\" is less than \"1 Aug\n         2010\"When searching for the first entry in the index, use the smallest expected\n         negative number as the first search key. The empty string \"\" is considered to be 0. For\n         example:s=-9999i=''key('n',r,s,i) then...finds -9000, but does not find -10000.Inserting non-numeric keys in the index produces unpredictable results.Because the locale is used to determine the thousands and decimal separators, it is\n          strongly recommended to store numerics in scaled internal format.That is, with no\n           decimal or thousands separators {-}n{n...}. This\n           ensures correct behavior when accessing the index from locations with different\n           locales.Note:For numeric indexes to work properly in the vme, numeric data must be stored in\n         scaled internal format. That is, with no decimal or thousands separators {-}n{n...}. This ensures correct behavior when accessing numeric\n         indexes.oRe-creates the index, overriding the previous version.sSuppresses the display of the running count of items.",
            "Warning:You cannot create an index with a translate to the same file.An index created with amultivaluedaprocessing code is not supported, whether it is created with anacode or an attribute-defining item.When you create indexes using attribute-defining items containing translate correlatives\n      (A8), the translate correlative must contain the attribute reference, not infer the attribute\n      reference from A2.Example:a1(tcustomers;x;;3)For FSI Hot Backup only: When you place the operation into the queue, it will add\n      theooption, regardless of what has been added on the primary server.Creating indexes on attributes that contain over 32767 values is not supported and may\n      result in errors."
        ],
        "example":[
            "Example(s)",
            "Example 1",
            "Creates an index on the contents of attribute 1.",
            "create-index entity a1",
            "Example 2",
            "Creates an index on the results returned from attribute 3 ofinvoices,\n    translated tocustomer.file, and returning attribute 1 from the item, if\n    found.create-index invoices a3(taccount,customer.file,;x;;1)",
            "Example 3",
            "Creates an index on attribute 1 concatenated with attribute 3.create-index sales a1:3",
            "Example 4",
            "Illustrates how a series of indexes can be built:",
            "Index references are placed in the correlative attribute (8) of the (entity) files D-pointer.\n     For example:correlative\u00a0\u00a0\u00a0Ia1\n Ia23The command is issued.create-index entity *Afterward, the correlative\n      attribute contains the root FID for each of the indexes."
        ]
    },
    {
        "name":"create-macro command",
        "Syntax":[
            "Syntax",
            "create-macro macro.name{(options}\n"
        ],
        "description":[
            "The create-macro BASIC program creates an executable macro from the last TCL command entered and places the macro in the master dictionary of the current account."
        ],
        "parameter":[
            "Parameter(s)",
            "macro.nameName of the macro. If the macro\nname already exists, a message is given.Note:Theooption allows overwriting it.optionsmCreates a pause and display type macro. When activated, the\nTCL command contained in the macro displays at the command prompt\nand can be modified before executing. Attribute 1 becomes anm.Note:This option is default if no option is specified.nCreates a nonstop macro, which executes immediately upon activation,\nwithout displaying the TCL command being issued by the macro. Attribute\n1 becomes an n.oOverwrites the macro if it already exists.",
            "The macro is stored in the master dictionary and is executed\nby entering the macro name at the TCL prompt.",
            "Anm-type is the default when usingcreate-macro.",
            "During activation of the macro, any additional parameters following\nthe macro name at the TCL prompt, are passed into the first executable\ncommand in the macro, but do not affect any other commands in the\nmacro.",
            "Any number of valid TCL commands may be placed in a macro.\nThe first value of each attribute must be a valid TCL command. Subsequent\nvalues are treated as data to the command.",
            "Note:D3 only allows\nmacros to be placed in the master dictionary of an account."
        ],
        "example":[
            "Example(s)",
            "If the last command on the stack\nwas the AQL sentence:",
            "list entity name phone",
            "and the next command is:",
            "create-macro show.entity (m",
            "Assuming that the item is not already present, the message\ndisplays:",
            "show.entity created",
            "If the show.entity macro was present, the message displays:",
            "[415] \u2019show.entity\u2019 exists on file."
        ]
    },
    {
        "name":"create-nqptrs command",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"crt-delimiters command",
        "Syntax":[
            "Syntax",
            "crt-delimiters {(options}\n"
        ],
        "description":[
            "The crt-delimiters command enables and disables the display of attribute and value marks. At boot time, the crt-delimiters command defaults to on. If the crt-delimiters command is executed without options, then it displays the current status.",
            "For Windows: Not Supported"
        ],
        "parameter":[
            "Parameter(s)",
            "optionsnDisplays the attribute mark as^and the\nvalue mark as]. When enabled, attribute and value\nmarks display as a^and]character,\nrespectively. When disabled, attribute and value marks are replaced\nwith a CR\/LF, instead.fDoes not display the attribute and value marks.",
            "Warning:The CR\/LF function takes effect only\nwhenprint-filteris set to on. Theprint-filtercommand takes precedence over this command."
        ],
        "example":[

        ]
    },
    {
        "name":"crt-device command",
        "Syntax":[
            "Syntax",
            " crt-device  {([n\\|f]}\n"
        ],
        "description":[
            "Description",
            "The crt-device command forces BASIC and FlashBASIC to use the CRT       terminal device instead of the printer device for the @ functions with the printer in the ON       state.",
            "If no option is provided, the current state is returned."
        ],
        "parameter":[
            "Parameter(s)",
            "onIf thecrt-devicestate\n                        is ON (1378), then the terminal device is used for @ functions.offIf thecrt-devicestate\n                        is OFF (1379), then:If the Printer state is ON, then the printer device is used.If the Printer state is OFF, then the terminal device is used."
        ],
        "example":[
            "Example(s)",
            "Example 1",
            "For this example, the current state is set to use the device for @ functions based on\n            the value of the BASIC printer statement:"
        ]
    },
    {
        "name":"ct command",
        "Syntax":[
            "Syntax",
            "ct file.reference itemlist* {(options)}\n"
        ],
        "description":[
            "The ct BASIC program invokes the copy command and copies the specified items to the terminal."
        ],
        "parameter":[
            "Parameter(s)",
            "optionsnInteger number that specifies the number of items to copy.\nTypically used for copying data for test files.aActivates assemblymlistformat.fOutputs a form feed between each item.iSuppresses the display of item-IDs.nActivates thenopagefunction on output.sSuppresses the display of line numbers.xOutputs in hexadecimal."
        ],
        "example":[
            "Example(s)",
            "ct dm,bp, term-type"
        ]
    },
    {
        "name":"cvtcpy utility",
        "Syntax":[
            "Syntax",
            "cvtcpy {keyword= value} {(options}\n"
        ],
        "description":[
            "The cvtcpy utility in the DM account copies a tape to another tape, including format and block conversions, and reads D3, CIE, Reality or Ultimate tape formats, with a block size up to 64 KB, and creates a D3 tape.",
            "Arguments are expressed in any order, as keyword=value, and are all optional, except if:",
            "When possible, the label logical format is determined automatically."
        ],
        "parameter":[
            "Parameter(s)",
            "optionsfDoes not write any file mark.iIgnores block size on tape label, use values set by TCL parameters.nDoes not discard the first block on the second source reel.\nBy default,cvtcpyassumes that the last block\non reel was duplicated on the following reel, and discards it when\nreading. This option keeps the first block. If a CIE end of reel label\n(_r) is recognized, this option is set automatically.pOutputs to the printer.qQuiet suppresses all messages, except the final message and\nthe error messages.sSingle reel disables the mechanism by whichcvtcpyattempts to cross reels on the source tape. Without this option,\nthree consecutive file marks are interpreted as an end of tape.uUnlabeled tape. No label is expected and none is written.\nWith this option, the block sizes must be explicitly specified.vVerbose displays more information about the process.xDumps data in hexadecimal when there is no output device (dump\nto the terminal or the printer).",
            "Warning:Multireel on the destination is not\nsupported.",
            "Since the data block sizes can be different,\nthe very last block may be padded with segment block characters (decimal\n252). This should impact D3 tapes (t-dump\/save), but may affect applications reading the tapes by\nsome other means.",
            "I\/O errors after a file mark, when trying to read the label,\nare treated as an EOD.I\/O errors are reported with the UNIX error code returned\ninerrno.Supported only on some platforms."
        ],
        "example":[
            "Example(s)",
            "Copies a half-inch tape to an\n8mm tape. All defaults apply (output block size 16\u00a0KB, no offset,\nlabel block size=512).",
            "cvtcpy if=\/dev\/rmt0.1 itype=half of=\/dev\/rmt1.1 otype=8mm",
            "Dumps a pseudo tape (UNIX file) on the terminal, in hexadecimal.",
            "cvtcpy if=\/tmp\/floppy (x",
            "Copies an 8mm tape to \/dev\/rmt0.1 (whatever it is), specifying\na label block size of 512 (the actual label data is still 80 bytes),\na physical data block size of 12000, and no offset (this means the\nattached block size is 12000-0=12000).",
            "cvtcpy if=\/dev\/rmt1.1 itype=8mm of=\/dev\/rmt0.1 ol=512 ob=12000 oo=0",
            "Copies 3 files, skipping the first file, from a half-inch\ntape to an 8mm tape.",
            "cvtcpy if=\/dev\/rmt0.1 itype=half of=\/dev\/rmt1.1 otype=8mm fwd=1 files=3"
        ]
    },
    {
        "name":"D",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"D3Tcl command (Windows)",
        "Syntax":[
            "Syntax",
            " D3Tcl {options}\n"
        ],
        "description":[
            "Description",
            "The D3Tcl command connects a remote VME with a TCL command from MS-DOS.",
            "When sending data to a console without the -t option, MS-DOS I\/O         redirection is supported.",
            "The off or exit commands close the TCL session and         return to MS-DOS."
        ],
        "parameter":[
            "Parameter(s)",
            "-a{:[c|r]}argDefines optional arguments to the TCL command processor. For\nexample-a:c abcsends the string CTRL+A, CTRL+B,\nCTRL+C to the process.If there is any space in the argument, use double quotes.There is no automatic carriage return added at the end of the command.There may be more than one -a flag.The optional modifiercconverts all alphabetic characters into a control\n          character.The optional modifierradds a Return at the end of the string.-ccmdDefines a command to be processed.When using this flag, only one command can be processed.The command is executed and control\n           is returned to MS-DOS. Note that a command that does not terminate properly may not exit\n           to MS-DOS (remaining at TCL instead).If there is any space in the command, use double quotes.If the command expects any input, use the-aswitch to specify them.If there is more than one-cswitch, the commands are executed in the specified\n          order before returning to MS-DOS.-ddatabaseDefines the database where the process will be logged.The database can be in the FSI or\n         in the VME. If not specified, the MS-DOS environment variable%D3DATABASE%is used. If the latter is not defined either, the process\n         is logged on to FSI:DM. The user name is always the Windows user name.-hShort help.-i cygwinInitializes the cygwin configuration for SSH. For example, setting up terminal\n        characteristics for proper character display.The-i cygwinoption must\n         be used in conjunction with the-soption.-nvmeDefines the name of the VME to use.This name is either a VME name (for example, pick0)\n         or a computer name where the VME is running. If not specified, the MS-DOS environment\n         variable%D3VME%is used. If the MS-DOS environment variable is not\n         defined, the default VME name is pick0.The-noption must be\n         specified with the-uoption.-ppibDefines the PIB number. Zero is valid. If not specified, the\nfirst available PIB is used.-sSpecifies an SSH connection.-tUses a Telnet Client to interact with the user as opposed to a console.The type of the\n         terminal must bej.-uuser{,password}Overrides the Windows user with the D3 user specified inuser. If the D3\n        user has a password, it must be specified.-wSpecifies the maximum delay in seconds before an attempted connection to the VME is timed\n        out.In case of a time out, an error code =5 is returned."
        ],
        "example":[
            "Example(s)",
            "Example 1",
            "The following example executes thelistcommand and sends the result.",
            "d3tcl -c \"list file\" > c:\/temp\/x",
            "Example 2",
            "The following example executes the old editor and runs the commandsde999andfi.",
            "d3tcl -c \"ed bp test\" -a:r de999 -a:r fi",
            "Example 3",
            "The following example executes the Update Processor and sends the sequence of control\n    characters^t(top),^cd(cut\/delete),^cc(end cut\/delete),\u201cA\", \"B\", and^xf(exit\/file).",
            "d3tcl -c \"u bp test\" -a:c tcdzecc -a:r \"A\" -a \"B\" a:c xf",
            "Example 4",
            "The following example enters TCL and stays at TCL. The process is logged to the accountMyAccount. A Telnet Client is used as the display device.",
            "d3tcl -d MyAccount -t",
            "Example 5",
            "The following example shows TCL userjoe, whose password isblow, overrides the current Windows user.",
            "d3tcl -u joe ,blow",
            "Example 6",
            "The following example logs on to the DM account on PIB 0 and runs the commands\"set-device 2,save (ft\"and\":files\n     (lnrz\", passing the stringFull Saveas a data argument (for thesavecommand). The output is sent to the MS-DOS filelog.txt.",
            "d3tcl -d dm -p 0 -c \"set-device 2\"-c \"save (ft\"-c \":files (lnrz\" -a:r \n \"Full Save\" > log.txt",
            "Note:It is not possible to break a process\nthat is not at input."
        ]
    },
    {
        "name":"database-pause command",
        "Syntax":[
            "Syntax",
            " database-pause {(options}"
        ],
        "description":[
            "Description",
            "The database-pause command temporarily suspends disk writes to allow   for external backups (or snapshots) of disks to be taken. ",
            " If no options are specified, the status is returned. The status indicates whether or not a         pause or wait condition is in effect.",
            "When the database is in pause mode, if a memory full condition is detected, disk writes         will automatically resume after the number of seconds specified in the           dbresumetime value configured in pick0 file. ",
            "For example: dbresumetime {seconds}). Note that when         you set this value, a system restart is required for the value to take effect.",
            "Disk writes can be resumed using the database-resume command."
        ],
        "parameter":[
            "Parameter(s)",
            "optionsnPauses the database.When adatabase-pauseis in effect, users can\n         continue to work and update files. File updates are cached in memory and once disk writes\n         are resumed, the memory will be flushed to disk.w{seconds}Specifies to wait up to one hour before pausing the database to allow all memory to be\n        flushed before disabling disk writes.The optionalsecondsspecifies\n         an alternate amount of time to wait (in seconds) for memory to be flushed.Note:This\n         option only applies when adatabase-pausecommand with thenoption is in effect ."
        ],
        "example":[

        ]
    },
    {
        "name":"database-resume command",
        "Syntax":[
            "Syntax",
            " database-resume"
        ],
        "description":[
            "The database-resume command resumes database disk writes when a database-pause condition is in effect."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"date command",
        "Syntax":[
            "Syntax",
            " date {date.parameter} {(options}\n"
        ],
        "description":[
            "The date BASIC program returns an internal, external, or Julian date derived from a date provided, or displays a calendar for the month and year of the date provided."
        ],
        "parameter":[
            "Parameter(s)",
            "date.parameterDate to convert and display.\nIt may be in external, internal, or Julian date format. If the date\nis not provided, the current system date is the default date.optionscProduces a calendar of the month containing the given date.\nThe operator is then given the choices:D = Previous Month (same\nyear)F = Next Month (same year)X = ExitY =\nPrevious Year (same month)U = Next Year (same month)jIndicates that the date parameter is a Julian number.nDisplays the calendar only when used with thecoption, and does not prompt for additional options."
        ],
        "example":[
            "Example(s)",
            "Example 1",
            "dateDecember 3, 2002; Tuesday internal: 12756 julian: 337",
            "Example 2",
            "date 2\/1\/2003February 1, 2003; Saturday internal: 12816 julian: 32",
            "Example 3",
            "date 13003August 7, 2003; Thursday internal: 13003 julian: 219",
            "Example 4",
            "date 2\/1\/03 (c"
        ]
    },
    {
        "name":"dcd command",
        "Syntax":[
            "Syntax",
            " dcd {(options}\n"
        ],
        "description":[
            "Description",
            "The dcd BASIC program toggles or displays the status of data carrier detect on the specified port.",
            "For UNIX: Options and parameters are interchangeable.",
            "For Windows: DCD is on.",
            "For UNIX: When changing the dcd status of another process, a UNIX process      must be connected to the D3 virtual machine on the specified PIB or you will see this error      message: ",
            "When activated, this protocol allows the system to sense changes in the dcd signal. When the     system senses a loss of the dcd signal on a port, it logs the port off.",
            "Without any option, you will see the status of the specified port.",
            "This command affects the argument clocal of the terminal driver when the f     option is used.",
            "When the dcd is lost, the process is interrupted by a UNIX HANGUP signal that forces it to     execute the TCL command specified by the trap command.",
            "An appropriate cable must be used to connect the system to the modem for the dcd signal to be     detected. When the n option is used, the terminal driver is changed to     clocal."
        ],
        "parameter":[
            "Parameter(s)",
            "optionsport.numberInteger number that displays or changes settings for the port number.If not specified,\n         thedcdcommand is set on the current port.fSets thedcdcommand to Off.Data carrier detect is inactive.nSets thedcdcommand to On.Data carrier detect is active.sSuppresses output of the status message.xDisplays the current carrier detect status.xis any character other thanf,n, ors."
        ],
        "example":[
            "Example(s)",
            "Example 1",
            "Tests the current state ofdcd.",
            "dcd[1311] Data carrier detect is off.",
            "Example 2",
            "dcd ?[1311] Data carrier detect is off.",
            "Example 3",
            "dcd n[1310] Data carrier detect is on.",
            "Example 4",
            "In this example, there is no output. This example turns off dcd on port 16 and suppresses the\n    output.",
            "dcd 16 fs"
        ]
    },
    {
        "name":"debug command (TCL commands)",
        "Syntax":"",
        "description":[
            "Description",
            "Even if the debug command is not available, the system still enters the     debugger with the proper privileges."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "debugI ut.go.debug:nnn\n !"
        ]
    },
    {
        "name":"decatalog command",
        "Syntax":[
            "Syntax",
            "decatalog file.reference itemlist*\n"
        ],
        "description":[
            "Description",
            "The decatalog command removes the compiled BASIC or FlashBASIC object code of the specified items from the dictionary of the specified file, and removes the corresponding command entry (or entries) from the master dictionary of the current account.",
            "A program does not have to be previously cataloged to be decataloged. If the program command     does not exist in the master dictionary, decatalog still deletes the object     code.",
            "Once a program item has compiled successfully, an object-code pointer item     is placed in the dictionary level of the file. This pointer item defines the virtual     location where the object code is actually stored. The name of the object pointer item is the     same as that of the source program itself."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "decatalog bp enter.supplier[242] \u2019enter.supplier\u2019 decataloged!"
        ]
    },
    {
        "name":"decrypt-file command",
        "Syntax":[
            "Syntax",
            " decrypt-file filename{,data-file}\n"
        ],
        "description":[
            "Description",
            "The decrypt-file command returns an encrypted file back to its original unencrypted format.",
            "If this command                         is run on a system without OpenSSL, the current process will stop and return                         to TCL. Additionally, you will see the Encryption libraries are not                             loaded message.",
            "If the encrypt processing code is on the file-defining item, then only         the specified attributes will be encrypted and available for decryption."
        ],
        "parameter":[
            "Parameter(s)",
            "filenameThe name of the file on which to remove encryption.To remove encryption, you must be\n         logged into the account in which the specified file exists.data-file(Optional)Specifies which data-file in the file to decrypt.If not specified, the\n         default data-file is decrypted."
        ],
        "example":[
            "Example(s)",
            "Example 1",
            "This example decrypts thelocationsfile.",
            "Thedictionary-codefield has the entry of D, which indicates that\n        the file is no longer encrypted.",
            ":decrypt-file locationsFile successfully decrypted.\n :ud locations\n\n DICT locations  'locations' size = 57dictionary-code    Dbase               18652\n modulo             1\n structure\n retrieval-lock\n update-lock\n output-conversion\n correlative\n attribute-type     L\n column-width       10\n input-conversion\n macro\n output-macro\n description\n reallocation\n segment-base segment-mod\n \n hotkey.all\n hotkey1\n hotkey2\n hotkey3\n hotkey4\n hotkey5\n hotkey6\n hotkey7\n hotkey8\n hotkey9\n hotkey0\n DICT locations  'locations' size = 57 exited.\n :dump 18652\n\n  fid:   18652 :   0      0      0   0  (   48DC :  0       0       0  0 )\n 000 :....c...WHSE1^Main warehouse^77 Fourth Avenue^Walt:\n 050 :ham^MA^02451^Chris Wingman^3737968345^3737961123^_:\n 100 :....g...WHSE2^Secondary warehouse^2200 Powell St.^:\n 150 :Emeryville^CA^94608^Mark Allen^6509848989^65098433:\n 200 :34^_....c...WHSE3^Tertiary Warehouse^2 Venture Pla:\n 250 :za^Irvine^CA^92618^Fred Bloggs^3335551234^33355512:\n 300 :36^__43334^__61123^__]...K^__^3737961123^__......G:\n 350 :r7..]C...tu.^_____________________________________:\n 400 :__________________________________________________:\n 450 :__________________________________________________:\n 500 :__________________________________________________:\n 550 :__________________________________________________:\n 600 :__________________________________________________:\n 650 :__________________________________________________:\n 700 :__________________________________________________:\n 750 :__________________________________________________:\n 800 :__________________________________________________:\n 850 :__________________________________________________:\n 900 :__________________________________________________:\n 950 :__________________________________________________:\n 1000 :__________________________________________________:\n 1050 :__________________________________________________:\n 1100 :__________________________________________________:\n 1150 :__________________________________________________:\n 1200 :__________________________________________________:\n 1250 :__________________________________________________:\n 1300 :__________________________________________________:\n 1350 :__________________________________________________:\n 1400 :__________________________________________________:\n 1450 :__________________________________________________:\n 1500 :__________________________________________________:\n 1550 :__________________________________________________:\n 1600 :__________________________________________________:\n 1650 :__________________________________________________:\n 1700 :__________________________________________________:\n 1750 :__________________________________________________:\n 1800 :__________________________________________________:\n 1850 :__________________________________________________:",
            "Example 2",
            "This example decrypts theaccountingfile.",
            "decrypt-file accountingFile successfully decrypted.",
            "Example 3",
            "This example decrypts only the purchases data-file of theaccountingfile.",
            "decrypt-file accounting,purchasesFile successfully decrypted."
        ]
    },
    {
        "name":"define-cursor command",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"define-terminal command",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "These terminals are defined in\nthedevicesfile.",
            "define-terminalSystem Cursor Definition utility\nTerminals marked with an asterisk are selected to be included in your system\ncursor definition.\n*A    ADDS580        G     GTC              M    MIME          *W    wy-50-link\n*A    ADM-11         *G    IBM3161          *N   WY-100        *W    wy-50132\nA     ADM3A          *G    IBM3164          *P   PERTEC        *W    wy-60\nA     CIE-ANT        *G    mn3161           *Q   QVT102        *W    wy50-132\n*B    AMPEX210       *G    mn3161-132       *R   R25           *W    WY60\nB     BEEHIVE        H     HONEYWELL        S    ansi.c        *W    WY60.1\n*B    IBM3151        I     AT.MON           *S   SOROC         x     DATAGRAPHIX\n*B    ibm3151-132    I     IBM              T    TEC           *x    xterm\n*B    mark           I     IBM3010          T    TV920         x     xterm-dim\n*B    mn3151         *I    MM-MON           *T   TV950         Z     ANSI\nC     DTC            *I    port-mon         *V   VP            Z     att605\n*c    VT-52          *J    VT100            V    VP-60         Z     att705\n*D    DATAMEDIA      J     vt100-dim        *V   VP-A2         Z     HFT\nD     dg             J     vt320            W    link          Z     rt.console\nE     EMULOG200      *K    prism            *W   link125       Z     RT.MON\nE     EX-34          *L    LSI              *W   w             Z     Z\n*F    TV910          *M    AMPEX-D80        *W   WY-50\n*G    g              *M    AMPEX.D80        *W   WY-50-132\n\n1)    Create Terminal Definition\n2)    Modify Terminal Definition\n3)    Delete Terminal Definition\n4)    Add Terminal To Selected Definitions\n5)    Delete Terminal From Selected Definitions\nEX    Exit DEFINE-TERMINAL To TCL\n\nEnter Selection (1-5) or EX :",
            "To modify your terminal, enter2.",
            "Modify Terminal\nEnter Existing Terminal Name To Be Modified ?prismTerminal:prism1.  Term Type.....................   K\n2.  Terminal Description..........   Prism-IV\n3.  Backspace and Screen Size.....   8,80,24\n4.  Cursor Address Code...........   \u00a0                               A\n5.  @(X,Y)                           Cursor Addressing..........    CHAR(11) Y CHAR(16) X\n6.  @(-1)                            Clear Screen & Home........    FF SOH\n7.  @(-2)                            Cursor Home................    SOH\n8.  @(-3)                            Clear to End of Page.......    ESC \"J\"\n9.  @(-4)                            Clear to End of Line.......    ESC \"K\"\n10. @(-5)                            Start Blink................    ESC \"B\"\n11. @(-6)                            Stop Blink.................    ETX HEX(20)\n12. @(-7)                            Start Protected Field......\n13. @(-8)                            Stop Protected Field.......\n14. @(-9)                            Cursor Back................    NAK\n15. @(-10)                           Cursor Up..................    SUB\n16. @(-11)                           Enable Protect Mode........\n17. @(-12)                           Disable Protect Mode.......\n18. @(-13)                           Start Reverse Video........    ETX \"D\"\n19. @(-14)                           Stop Reverse Video.........    ETX \" \"\n20. @(-15)                           Start Underline............    ETX \"0\"\n21. @(-16)                           Stop Underline.............    ETX \"\" \"\"\n22. @(-17)                           Slave On...................    ETX \"R\"\n23. @(-18)                           Slave Off..................    ETX \"T\"\n24. @(-19)                           Cursor Forward.............    ACK\n25. @(-20)                           Cursor Down................    LF\n26. @(-21)                           Graphics Character Set On..\n27. @(-22)                           Graphics Character Set Off.\n28. @(-23)                           Keyboard Lock..............\n29. @(-24)                           Keyboard Unlock............\n30. @(-25)                           Control Character Enable...\n31. @(-26)                           Control Character Disable..\n32. @(-27)                           Write Status Line..........    HEX(E3)\n33. @(-28)                           Erase Status Line..........    HEX(E5)\n34. @(-29)                           Initialize Terminal Mode...\n35. @(-30)                           Download function Keys.....\n36. @(-31)                           Non-embedded Stand-out On..\n37. @(-32)                           Non-embedded Stand-out Off.\n38. @(-99)                           Embedded Visual Attributes?\n39. @(-100)                          Half Intensity.............\n40. @(-101)                          Full Intensity.............\nIs table for terminal prism correct?y",
            "Terminal TypeA single letter which identifies\nthe terminal to the system. TheTerminal Typefield\nin the terminal table corresponds to the single-character value typed\nin at thetermcommand.Screen SizeSize of the display screen (in\ncolumns by rows). It is entered ascolumns,rows. If a BASICprint @()command exceeds these values,\nthe maximum allowable value is used.Cursor Address CodeA series of characters used to\ndenote cursor addressing, followed by the row and column of the position.\nSometimes the row and column are in binary, sometimes not. Sometimes\nit requires column and row. Others use an ASCII code in place of binary\nrow\/column addresses. Select the method your terminal manufacturer\nuses:Note:X is the X-axis, Y is the Y-axis.a{+}Adds type addressing:row = char(y+64)\ncol = char((int(x\/10)*6)+x)l{+}Lear-Seigler addressing:row = char(y+32)\ncol = char(x+32)t{+}TEC addressing:row = char(-(1+y))\ncol = char(1(1+x))h{+}Hazeltine addressing:row = char(x)\ncol = char(y)d{cr}{+}Decimal addressing. It outputs\na 1-3-digit binary code (each) for row and column.cspecifies the number of digits to output for the column (1-3);rspecifies the number of digits to output for the row (1-3). If used, the\n                    code forces leading zeroes.Adalone generatesfloatingdecimal\nnumbers from 1 to 3 digits.row = char(x)as 1-3 digitscol = char(y)as 1-3 digitsAll cursor addressing codes may be followed by a+, which adds one the row and column addresses before generating the\naddress codes, to take care of the terminals whose addresses starts\nat 0,0 instead of 1,1.@(x,y) Cursor\nAddressingString of control and escape\ncodes need to tell the terminal that a row and column address is coming\nup next. For example:esc \"=\" y xThis is a cursor-positioning code for a Lear-Siegler terminal.\nTheyandxis replaced by the proper\nASCII codes (and is determined by the cursor address code above).Note:@(-1)...@(-300)are explained in the topic,@() function."
        ]
    },
    {
        "name":"define-up command",
        "Syntax":[
            "Syntax",
            "define-up {terminal.name} {(options}\n"
        ],
        "description":[
            "The define-up BASIC program provides a front-end for defining a keyboard for the Update processor. It builds a keyboard item that is used by the set-imap program to translate the keyboard keys entered into Update processor commands. It automatically detects whether the keyboard needs the extended character set enabled. After filing the item in the define-up program, then execute a set-imap  terminal-name (c command to put the new translations into effect."
        ],
        "parameter":[
            "Parameter(s)",
            "terminal.nameName of the terminal.optionsqQuick update of the keyboard. Requests definitions of only\nthe most commonly used commands.",
            "Warning:In order to have the translations active\nat logon, aset-imapterminal-nameshould be executed from the user macro."
        ],
        "example":[
            "Example(s)",
            "Defines or allows modifications\nto the keyboard item calledmarks.terminal.",
            "define-up marks.terminal (q"
        ]
    },
    {
        "name":"delete command",
        "Syntax":[
            "Syntax",
            "delete file.reference {itemlist*} {selection.criteria} {(option}\n"
        ],
        "description":[
            "The delete BASIC program deletes one or more items from the given file.",
            "If dictionary is specified, the dictionary items are deleted. If dictionary is not specified, the data items are deleted.",
            "This command does not delete the file itself. To remove data from the file, active update must be on (see set-active-update command)."
        ],
        "parameter":[
            "Parameter(s)",
            "optionsiSuppresses the messageitem deleted."
        ],
        "example":[
            "Example(s)",
            "delete names smith[435] item \u2019SMITH\u2019 deleted"
        ]
    },
    {
        "name":"delete-account command",
        "Syntax":[
            "Syntax",
            "delete-account account.name{(option}\n"
        ],
        "description":[
            "The delete-account BASIC program deletes an entire account, and all the associated files, returning the space used to the overflow table and removing the account name from the mds file.",
            "The prompt Display files before deleting (<y>,n)? displays after invoking delete-account. A y response displays each file in the account.",
            "This should only be executed from the dm account with all the users logged off. After all of the files to be deleted have optionally been listed, the operator is asked if the account should still be deleted. This requires a y or n response prior to deletion."
        ],
        "parameter":[
            "Parameter(s)",
            "account.nameRequired. Account to delete.optiontDeletes all SQL tables created for files in that account.\nAdditionally, any item or Q-pointer in the SQL account that references\nthe deleted account is also deleted.zDeletes accounts without displaying any files or confirming\nthe deletion."
        ],
        "example":[
            "Example(s)",
            "delete-account old.production"
        ]
    },
    {
        "name":"delete-file command",
        "Syntax":[
            "Syntax",
            "delete-file file.reference {(option}\ndelete-file data file.reference{,file.reference} {(option}\n"
        ],
        "description":[
            "The delete-file BASIC program releases all frames used by the specified file to the overflow table, and removes the file reference from the master dictionary of the current account.",
            "Synonym-defining items (Q-pointers) cannot be deleted with this command. The account must possess the actual D-pointer to a file to be able to delete the file."
        ],
        "parameter":[
            "Parameter(s)",
            "optioniCancels the delete if a file is open when thedelete-fileattempt takes place. The system displaysfile still open,\ndelete canceled. Control returns to TCL or a calling program\nwithout prompting for input.uDeletes the file unconditionally, even if it is open at the\ntime of the delete.",
            "Warning:The dictionary level cannot be deleted without first deleting any data sections that it may have\n      pointers to.If another user is still using the file, this command prints a warning message and asks if the\n      user wants to continue. If the delete is allowed to continue and another user is actively\n      using the file, then the other user may abort and\/or experience workspace corruption. Delete\n      shared files with caution."
        ],
        "example":[
            "Example(s)",
            "Deletes the dictionary and all\ndata sections from the temp file.",
            "delete-file temp",
            "Deletes the temp data section from the temp dictionary,\nleaving the dictionary and any other data sections connected to the\ntemp dictionary intact.",
            "delete-file data temp",
            "Deletes the temp data section from the customers dictionary.",
            "delete-file customers,temp"
        ]
    },
    {
        "name":"delete-index command",
        "Syntax":[
            "Syntax",
            "delete-index file.reference[a.code|*] {(options)}\n"
        ],
        "description":[
            "The delete-index BASIC program removes either a specific B-tree index from a specified file, or all indexes if an asterisk is specified."
        ],
        "parameter":[
            "Parameter(s)",
            "a.codeSpecifies thea(algebraic) processing code of the B-tree index to delete. The processing\ncode must include an attribute number.*Specifies all indexes.optionscSpecifies a case sensitive index. Default is case insensitive."
        ],
        "example":[
            "Example(s)",
            "delete-index entity a1",
            "delete-index invoices a1(tcustomer.file;x;;1)",
            "delete-index sales a1:3",
            "delete-index entity *"
        ]
    },
    {
        "name":"delete-list command",
        "Syntax":[
            "Syntax",
            "delete-list {{file.reference} list.name}{(options}\n"
        ],
        "description":[
            "The delete-list command removes a list previously saved with a save-list command. This command deletes a list from a specified file name, otherwise it defaults to the pointer-file file. If no list name is provided, the default list name, %user-ID, is deleted."
        ],
        "parameter":[
            "Parameter(s)",
            "optionsiSuppresses the messageitem deleted."
        ],
        "example":[
            "Example(s)",
            "Deletes the specific iteminvoices.",
            "delete-list invoices[435] item \u2019invoices\u2019 deleted.",
            "Deletes all the lists in the pointer-file.",
            "delete-list *",
            "Deletes the default list for the current user.",
            "delete-list[435] Item \u2019%tom\u2019 deleted."
        ]
    },
    {
        "name":"deoptimize command",
        "Syntax":[
            "Syntax",
            "deoptimize {dict} file.reference*|{item-ID}\n"
        ],
        "description":[
            "The deoptimize command removes the flash-compiled object code from the object code item, leaving the non-flash object code. This command may be used at a select prompt to deoptimize a select group of programs."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"dev-att command",
        "Syntax":[
            "Syntax",
            "dev-att port.number{(options}\n"
        ],
        "description":[
            "The dev-att BASIC program attaches an unattached port to the current process. This command only changes ownership and is required prior to using the get or send\u00a0statements in BASIC.",
            "The user gets exclusive ownership of the attached port. No other processes are allowed to attach to the port until the owner releases the port.",
            "The port is detached by using the TCL command dev-det or by logging off.",
            "If the target port is not linked to the current process, the target port must be unlinked by the unlink-pibdev command, or use the u option to force the unlink.",
            "Attaching to a device the current process is linked to, but does not remove that link."
        ],
        "parameter":[
            "Parameter(s)",
            "optionsqQuietuUnlinks the target device if required.Note:Attachment fails\non a linked device, unless the current process is linked to it."
        ],
        "example":[
            "Example(s)",
            "Attaches port 3 to process 0.",
            "dev-att 3Device # 3: Attached to pib # 0"
        ]
    },
    {
        "name":"dev-det command",
        "Syntax":[
            "Syntax",
            "dev-det port.number{(options}\n"
        ],
        "description":[
            "The dev-det BASIC program detaches the port currently attached from the current process. The user gives up exclusive ownership of the port previously attached by the dev-att command and makes the port available to other users."
        ],
        "parameter":[
            "Parameter(s)",
            "optionsqQuiet"
        ],
        "example":[
            "Example(s)",
            "Detaches port 3 from process\n11.",
            "dev-det 3Device #3: Detached from pib # 11."
        ]
    },
    {
        "name":"dev-list command",
        "Syntax":[
            "Syntax",
            "dev-list {options}{(p} {number}\n"
        ],
        "description":[
            "The dev-list BASIC program lists all current devices on the system."
        ],
        "parameter":[
            "Parameter(s)",
            "optionsAvailable options are:?Displays the help screen.lLists only the current direct line printers.mLists only the current magnetic tape devices.nLists only the current sharable Windows printers.pSends the specified list to the printer.sLists only the current serial devices (printers and terminals).tLists only the current Telnet devices.uLists only the current unknown devices (including RPC).vLists only the current SSL devices.wSelects the Workstation Telnet line and mvTerm devices.ySelects the Workstation printer devices.zSelects the Workstation serial devices."
        ],
        "example":[
            "Example(s)",
            "Lists all devices on the system.\nThe output looks like this:",
            "dev-listSeq Typ Ref# Device-Type     Device-Desc\n=== === ==== ===========     ===========\n1   M   0    TAPE (Floppy)   \\\\.\\A\n2   M   1    TAPE (Pseudo)   C:\\Program Files\\RocketSoftware\\D3\\D3Programs\\D3Data.D3P\n3   M   2    TAPE (Pseudo)   C:\\Program Files\\RocketSoftware\\D3\\D3Virtual\\Pseudo0.D3P\n4   T   -    TELNET (SERVER) TCP port 9999 \u00a0\u00a0(Special Server)\n5   T   -    TELNET (SERVER) TCP port 23 \u00a0\u00a0(Main Server)\n6   T   1    TELNET (Client) IP addr 127.0.0.0:4050",
            "Lists any direct printers.",
            "dev-list l",
            "Lists all magnetic tape devices on the system and sends\nthe list to the printer.",
            "dev-list m (p"
        ]
    },
    {
        "name":"dev-make command (UNIX)",
        "Syntax":[
            "Syntax",
            "dev-make -t type{-n number} {-a arg{,arg}}\n"
        ],
        "description":[
            "The dev-make BASIC program adds an entity to the system. This command is normally used to add devices to the system. The most common usage is to create a serial device to be used with the BASIC get and send statements, even if there is no D3 process connected to the device."
        ],
        "parameter":[
            "Parameter(s)",
            "-ttypeEntity type:serial-nnumberEntity number. If not specified, the system allocates a number.-aargMore than one-aoption, or several arguments\ncan be specified within one-aclause, separated\nby commas. The arguments depend on the type and are optional."
        ],
        "example":[
            "Example(s)",
            "Creates the serial device s100\nassociated to the UNIX device\/dev\/tty32. The\ndevice is reprogrammed the D3 way, that is, in raw mode, no echo.\nThe hardware characteristics (baud rate and so on) are unchanged.\nWhen the device is successfully created, the newly created device\ncan be attached and used with BASICsendandgetstatements. The hardware characteristics can be changed\nwith theset-portcommand, using the full entity\nID s100, only once the device has been attached, because the device\nis not actually opened when the D3 entity is created, but only at\nattach time.",
            "dev-make -t serial -n 100 -a \"\/dev\/tty32\""
        ]
    },
    {
        "name":"dev-make command (Windows)",
        "Syntax":[
            "Syntax",
            " dev-make -t type{-n number} {-a arg{,arg}}\n"
        ],
        "description":[
            "The dev-make BASIC program creates devices connected to the VME. Devices can be removed with the dev-remov command."
        ],
        "parameter":[
            "Parameter(s)",
            "-ttypeDevice types.SerialDirect serial device. The device number is the PIB number associated to the device.PickRemoteAllows sharing dedicated printers across multiple VMEs.printerDirect Printer device. The device number is the form queue number associated to the\n        device.TelnetTelnet port. The device number is the PIB number associated, or nailed, to the Telnet\n        port.SSLSSL port. The device number is the PIB number associated to the SSL port.tapeTape device.NTPrinterShared Windows Printer process. The device number is the PIB number of the printer\n        process.-nnumberOptional device number. The meaning of the device number\n        varies depending on the device type.-aarg{,arg}Optional device arguments. The meaning of the argument\n        varies depending on the device type."
        ],
        "example":[
            "Example(s)",
            "Example 1",
            "This example illustrates creating three\n    D3 tape\n     devices:",
            "dev-make -t tape -a \"\\\\.\\tape0,d80,h\"\n (80-byte label)\n dev-make -t tape -a \"\\\\.\\tape0,d50,h\"\n (50-byte label)\n dev-make -t tape -a \"\\\\.\\tape0,d,h\"\n (defaults to 512)",
            "Example\n     2",
            "This example illustrates creating a pseudo tape on theC:\\Temp\\MyTape.D3Pfile. Note that the pseudo tape filename extension does\n    not need to be.D3P, but that the full filename, including the extension,\n    must be specified in thedev-makecommand.",
            "dev-make - t tape -a \"C:\\temp\\MyTape.D3P,p\"",
            "Example\n     3",
            "This example illustrates defining a high density quarter-inch device requiring a\n    special end of tape processing option. Note the two commas as a placeholder for the unspecified\n    block size.",
            "dev-make - t tape -a \"\\\\.\\TAPE1,q,h,,e\"",
            "Example\n    4",
            "The following two commands will start printer number 0, assigned to output queue\n    number 2, running on PIB 5, directing all output to printer port \"\\\\CDR\\HP-5L\". There will be\n    one page ejected at the end of each job andsoption will inhibit the initialpage-ejectcommand at the end of the print\n     file.",
            "dev-make - t NTPrinter -n 5 -a \"\\\\CDR\\HP-5L\"\n startptr 0,2,1,s5 (s",
            "Example\n     5",
            "This example uses thePickRemotedevice type form to send output\n    from computer1 to a printer that has been installed on computer2:",
            "Computer\n    1",
            "dev-make -t PickRemote -n 5 -a \"computer2,10,1000\"\n startptr 1,1,1,s5 (s\n sp-assign f1",
            "All\n    output assigned to form queue 1 is directed to the printerprinternameinstalled on the remote machine computer2.",
            "Computer\n    2",
            "dev-make -t NTPrinter -n 10 -a \"printername\"\n startptr 0,0,1,s10 (s",
            "or",
            "dev-make -t Serial -n 10 -a \"com2,9600,8,1,n\"\n startptr 0,0,1,s10 (s",
            "Printer\n    0 is started as usual."
        ]
    },
    {
        "name":"dev-remov command",
        "Syntax":[
            "Syntax",
            "dev-remov type{number} {(options}\n"
        ],
        "description":[
            "The dev-remov BASIC program removes a specific device from the system. This command is not allowed to remove special devices, such as the BB (byte bucket) or the CO (Console). Additionally, the dev-remov command prevents the removal of tape devices that are already attached or if a higher device number is already attached."
        ],
        "parameter":[
            "Parameter(s)",
            "deviceSpecifies the device to remove.\nIf the device has an output link, or is the destination of any link,\nor is attached, the removal fails. The device name is the concatenation\nof a one-character device type code and the device number. The valid\ndevice types are:lLine Printer. The device number is the form queue number.mMagnetic Tapes (including floppy, pseudo, DAT, 8mm, and so\non). The device number is the tape number as shown whenlist-deviceis entered at TCL.nWindows Printer Process. The device number is the PIB number\ncurrently associated to the serial printer process.pPIBrWindows Pick Remote portsSerial. The device number is the PIB number currently associated\nto the device.tTelnet. The device number is the PIB number currently associated\nto the Telnet connection.optionssRemoves a telnet server (instead of a specified Telnet client\npib). For example:This form removes Telnet client pib 23:dev-remov t23This form removes the Telnet Server at port 23:dev-remov t23 (s",
            "A device can be added with thedev-makecommand.After adev-removon a telnet or serial\nport, it may be necessary to issue areset-usercommand if the process was not at logon.A Telnet device may be removed, but Telnet devices cannot\nbe created with thedev-makecommand. They are\ncreated on demand when a client establishes a connection.When removing a devices type ofp,s,t,norr, aclear-lockscommand will be executed for the\nassociated PIB as part of the cleanup when removing the device."
        ],
        "example":[
            "Example(s)",
            "The serial device 100 is removed\nfrom the system.",
            "dev-remov s100",
            "On a Telnet connection, this command disconnects the client.",
            "dev-remov t12",
            "On a Serial connection, this command frees the serial\ndevice for use by another Windows application.",
            "dev-remov s",
            "On a Printer device, this command makes the form queue\nunavailable for printing.",
            "dev-remov l16",
            "On a magnetic device, this command removes the tape number\n3 from the device list.",
            "dev-remov m3",
            "On a Windows printer process, this command frees the PIB\nfor use by another device, but the printer should be stopped withstopptrand killed withsp-killbefore\nexecutingdev-remov.",
            "dev-remov n9",
            "Removes Telnet client pib 23.",
            "dev-remov t23",
            "Removes the Telnet Server at port 23.",
            "dev-remov t23 (s"
        ]
    },
    {
        "name":"diag command",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"dialer command",
        "Syntax":[
            "Syntax",
            "dialer {cmd} {device=name} {system=[*list|name{,name...}} {user=name}\n{subject=descr} {text=message} {account=accname} {files={-}[*|*list|name{,name,...}}\n{remacc=name,{name,,}} {(option}s\n"
        ],
        "description":[
            "The dialer BASIC program controls the dialer subsystem, which allows transferring data to remote systems over the phone in a batch mode.",
            "For Windows: Not Supported",
            "Without any argument, a menu displays. Below is a list of valid keys that can be used. When indicated, arrow keys can also be used.",
            "The screen is divided into two sections: an upper section for menu display, and a lower section for messages such as the help screen and user prompts.",
            "The first time the system is installed, the user is required to enter a local system name and the time zone the system is located into.",
            "Enter any name, up to eight characters, and press ENTER.",
            "Select the appropriate time zone, and then press ENTER.",
            "Set up the remote sites and serial devices using the setup menu.",
            "The main menu operation is used for normal operations. These options are:",
            "P)rint the message to the currently assigned form queue.",
            "D)elete message.",
            "Q)uit to leave the message.",
            "The dialer subsystem generates Notice mail messages, in case of serious problems. The messages can also be read from TCL with the mail command.",
            "The setup menu allows defining the remote systems and devices used by the dialer subsystem and performing accessory functions, such as testing the communication, purging the queue, and so on.",
            "or",
            "Select to update either All files, Select files, or a Select list of files. If the Select Files option is selected, the list of files in the account displays.",
            "Press the space bar to select the files to be changed, and then press ENTER when all the files have been selected. An asterisk displays in front of the selected files. The list is saved in a list, which can be used as input to the Select list of files option.",
            "The user can elect to post updates to both the data levels and the dictionary, to the dictionary only, or to the data level only. An option remove callx allows suppressing the posting of the updates on the entire selected account.",
            "Enter the list or remote system where the data is to be sent and the optional account name on the remote system. If an account name is not specified, the remote account is assumed to be the same as the local account name. Up to four remote systems can be entered. An remote system cannot be specified twice in the list.",
            "Confirmation is required. This option updates the D-pointers of the dictionaries and\/or data levels of the selected accounts and files to insert or remove, as appropriate, the callx correlative to perform the update posting.",
            "This menu option can be used as long as there are less than 6 target system names. Otherwise, it is more convenient to use the TCL form.",
            "This option from the main menu examines the conflict file and shows any conflict still not resolved. The first menu selects all the conflicts and shows the account, file and item-ID. The help message in the message section gives more information about the conflict. The Check conflict option requires that the system administrator has good knowledge of the database structure. Only raw data is presented. A more advanced conflict resolution requires understanding the database organization and cannot be accomplished by a general purpose tool. Conflict Data Format details the structure of the data stored in case of a conflict so that an application dependent tool can be developed.",
            "When a conflict is selected, this information displays:",
            "In this example, sys is the name of the remote system the conflicting changes is coming from, the time and date are the local time and date, the cause is a short description of the conflict, dev is the local account, tmp the file and x the item. The left side of the display shows the remote file information and the right side the local one.",
            "The screen is then divided into two columns showing the attributes that are different on the local system before and after the changes from the remote system have been applied.",
            "The user is then prompted to take an action:",
            "The conflicting data is stored in the file dialer.log,conflict. Each conflict is represented by three items:",
            "The difference string is composed of a series of commands, which describes the changes to be applied. Each command is composed of one or more attributes, and start by a one letter code. Valid commands are:",
            "Merging the changes described by a difference string into an item is accomplished by the FlashBASIC program in dm,bp,includes merge.sub. For example:",
            "dm,bp,includes sdiff2.sub\u2014combines two difference strings into one, cumulating the changes.",
            "For UNIX: The possibility to create serial devices dynamically, which are not linked to any D3 process. These devices are accessible only through BASIC get and send statements. It is convenient to create devices this way by inserting in the user coldstart macro the dev-make statements required to create these devices. For example:",
            "creates a device \u2019s120\u2019 associated to the UNIX device \u2019\/dev\/tty9\u2019.",
            "Some functions are accessible from TCL to be inserted in macros:",
            "Reads the messages. This option has these arguments:",
            "user=user.name. If user= is omitted, the current user name is used.",
            "If the q option is used, only the number of messages displays.",
            "An asterisk prompt displays. The commands are:",
            "The option:",
            "defines the account to be changed.",
            "The option:",
            "defines to which system the updates must be transmitted, where *list specifies that the list of system is in the select list, list.",
            "The option:",
            "remacc=accname{,accname,...}",
            "specifies the account name on the remote system. If this last option is not specified, if an account name in the list is missing, the account name on the remote system is identical to the local account name. There must be as many remote account names specified as there are remote system names.",
            "The option:",
            "specifies the files to be changed. If this last option is not specified, the files in the account are not changed, only the system map is affected. The hyphen specifies that the callx correlative must be removed from the specified files. If the keyword dict or data is specified, then only this element of the file is affected.",
            "The syntax:",
            "files=* specifies all files in the account.",
            "files=*list specifies that the list of files is contained in the select list, list.",
            "files=name{,name...} specifies an explicit list of file names.",
            "In case of incidents, files dialer.dump.mm\/dd\/yy are created, with the same data levels as the dialer.log file (except the permanent log). These dump files contain images of the dialer.log files at the time of the incident. An item reason in the dictionary explains the cause of the dump."
        ],
        "parameter":[
            "Parameter(s)",
            "optionsqQuiet option suppresses all messages. On themailcommand, this option displays the number of messages, if any.vVerbose option displays more information."
        ],
        "example":[
            "Example(s)",
            "Starts the dialer subsystem from\nTCL.",
            "dialer start",
            "Displays a detailed status of the queues.",
            "dialer queue (v",
            "Displays the last messages produced by the I\/O daemon\nassociated to the devices120.",
            "dialer status device=s120",
            "Stops the dialer subsystem, suppressing all messages.",
            "dialer stop (q",
            "Purges the queue to the remote system seattle.",
            "dialer purge system=seattle",
            "Queues a message for the user bob on the system dev.",
            "dialer msg system=dev user=bob subject=\"Down time\" text=\"We will shut down\ntomorrow at 12:00\"",
            "Defines the system map for the account bob. Updates are\ntransmitted to the systems dev, prod, and back. The remote accounts\non these systems are respectively, bob2, bob (same as on the source\nmachine) and bob3. All files, dictionary and data, are affected.",
            "dialer sysmap account=bob system=dev,prod,back remacc=bob2,,bob3 files=*",
            "Defines the system map for the account bob. Thecallxcorrelative is removed from all files.",
            "dialer sysmap account=bob files=-*",
            "Note:It is not necessary to specify the remote system when\nremoving thecallxcorrelative.",
            "Defines\nthe system map for the account bob. Updates are transmitted to the\nsystem dev. The remote account is the same as on the source machine.\nAll files are affected. Only the data sections are changed, not the\ndictionary.",
            "dialer sysmap account=bob system=dev files=\u2019data *\u2019",
            "Note:Quotation marks are required.",
            "Defines the\nsystem map for the account bob. Updates are transmitted to the system\ndev. The remote account is the same as on the source machine. Only\nthe data sections of the files names, address, and zip are affected.",
            "dialer sysmap account=bob system=dev files=\u2019data names, address,zip\u2019",
            "Note:Quotation marks are required.",
            "Defines the\nsystem map for the account bob. Updates are transmitted to the system\ndev. The remote account is the same as on the source machine. Only\nthe dictionary section of the files specified in the select list pointer-file\nmyfiles are affected.",
            "dialer sysmap account=bob system=dev files=\u2019dict *myfiles\u2019",
            "Defines the system map for the account bob. Updates are\ntransmitted to the system dev. The remote account is bob2. Only the\nsystem map is changed. No file is affected.",
            "dialer sysmap account=bob system=dev remacc=bob2"
        ]
    },
    {
        "name":"dialer-copy command",
        "Syntax":[
            "Syntax",
            " dialer-copy {dict} file.reference itemlist{(options}\n to: sysname{!account}\n"
        ],
        "description":[
            "Description",
            "The dialer-copy command queues one or more items for copy to a remote system through the dialer subsystem.",
            "For Windows: Not Supported",
            "The data is copied on the remote system into a file, which has the same name as the source     file. The item-IDs are identical. The copy is unconditional.",
            "The copy does not actually take place at the time this command is issued. Requests are queued     to the dialer for a batch copy at the time specified by the system administrator in the remote     system description.",
            "Without the c option, the item is left in the original file. Therefore, the     item must not be deleted after this command dev.\u2019 has been issued, or the     actual transfer operation will not find the item and will fail. The c option     copies the item to a spool file to allow deleting or modifying the item."
        ],
        "parameter":[
            "Parameter(s)",
            "sysnameRemote system name to which the\ndata is copied. The remote system must be known to the dialer subsystem.accountOptional account name on the\nremote system. If not specified, the account where the file is located\non the local machine is used.optionsbSuppresses the messagen items copied.cCopies items to a spool file.iSuppresses the item-ID display during the copy."
        ],
        "example":[
            "Example(s)",
            "Example 1",
            "Queues the item bp demo for copy\nto the remote system dev.",
            "dialer-copy bp demotosystem:dev",
            "Example 2",
            "Queues a selected list of items for copy to the remote\nsystem dev. First copying the item to a spool file, so that it can\nbe deleted or modified. The data is copied into the file bp in the\naccount dm.new on the remote system.",
            "select bp = \u2019test]\u2019\n dialer-copy bp (ctosystem:dev!dm.new"
        ]
    },
    {
        "name":"disc command",
        "Syntax":[
            "Syntax",
            "disc {(option}\n"
        ],
        "description":[
            "The disc command disconnects the current process from the D3 virtual machine.",
            "If the process was started from shell (that is, by typing d3), control is returned to shell.",
            "If the process was started automatically, in the case of a turnkey system, the user process is restarted immediately. In this case, the disc command has no action. However, a different PID is allocated to the process.",
            "If the xon\/xoff protocol was changed with the xonoff command, the new setting might be lost.",
            "When reconnecting by typing d3 at shell, the process is reconnected to the virtual machine.",
            "The exit macro executes a disc (f . Trying to shut down a system where there is one or more processes disconnected with the n option hangs. In fact, it times out after a few minutes. Before doing a shutdown, reconnect these processes and disconnect them with the f option."
        ],
        "parameter":[
            "Parameter(s)",
            "optionfLogs off before disconnecting. This option is the default.nRemains logged on to the D3 account before disconnecting.\nProcesses disconnected with thenoption remain logged\non to the D3 account and therefore show in thelist-userscommand. Processes at lower levels arenotwrapped.",
            "Note:These options cannot be used simultaneously."
        ],
        "example":[

        ]
    },
    {
        "name":"div command",
        "Syntax":[
            "Syntax",
            "div number number\n"
        ],
        "description":[
            "The div command divides the first integer number provided by the second integer number provided and displays the result as an integer quotient and remainder."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"divx command",
        "Syntax":[
            "Syntax",
            "divx hex.number hex.number\n"
        ],
        "description":[
            "The divx command divides the first hexadecimal number by the second hexadecimal number and displays the result as a hexadecimal quotient and remainder."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"dm macro",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"download command",
        "Syntax":[
            "Syntax",
            "download fonts,descr{itemlist*} {(options}\n"
        ],
        "description":[
            "The download BASIC program downloads font files to a laser printer."
        ],
        "parameter":[
            "Parameter(s)",
            "optionsnA number that specifies the font number.?Displays command usage.cDisplays output to the screen.hDisplays some help.pMakes font permanent.sSuppresses any system messages.tDisplays a sample printout of printable ASCII characters.xDisplays output in hexadecimal.zPrevents output of font prefix and suffix, just provides binary\noutput. For debugging purposes only.",
            "Thedm,fonts,descrfile contains the\nfont description items."
        ],
        "example":[

        ]
    },
    {
        "name":"dtr-off command",
        "Syntax":[
            "Syntax",
            "dtr-off {port.number}\n"
        ],
        "description":[
            "The dtr-off macro turns off data terminal ready.",
            "For Windows: Not Supported",
            "If the port is not specified, the current port is used."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"dtr-on command",
        "Syntax":[
            "Syntax",
            "dtr-on {port.number}\n"
        ],
        "description":[
            "The dtr-on command turns on data terminal ready on another port, or the current port if none is specified.",
            "For Windows: Not Supported"
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"dtx command",
        "Syntax":[
            "Syntax",
            "dtx number\n"
        ],
        "description":[
            "The dtx command converts a given decimal (integer) number to its corresponding hexadecimal equivalent."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"dump command",
        "Syntax":[
            "Syntax",
            "dump fid{-fid} {options}\n"
        ],
        "description":[
            "The dump command displays or prints the contents of one or more frames of the VME in ASCII (character), EBCDIC or hexadecimal format.",
            "The frame-IDs (FIDs) can be hexadecimal and decimal references. When preceded by a period, FIDs are considered hexadecimal references. A range of FIDs may also be specified."
        ],
        "parameter":[
            "Parameter(s)",
            "fidRequests the frame by its decimal\n(integer) address.optionsaDisplays output in EBCDIC format.gDumps entire group. Frames are traced logically forward. The\ndump terminates when the last frame in the logical chain has been\nfound.iDisplays process diagnostic information regarding the retrieval\nand return of the specified frame from overflow.lOutputs links only; no data displays.nActivatesnopagefunction on output to\nthe terminal.pDirects output to system printer via the spooler.uUpward trace; frames are traced logically backward. Thedumpterminates when the first frame in the logical chain\nhas been found.sDumps just the data bytes in a stream without side baggage\nsuch as links, offset, colon, and so on\u2014a long byte stream. Works\nwithx,g, anduoptions. This is mainly for programs wanting to examine memory in\nstraight byte sequence without having to strip out the extraneous\ninformation.xFrames are dumped in hexadecimal with corresponding ASCII\nrepresentation along the right side of the output.",
            "Note:If a FID reference is not specified, this aborts with\nthe message:referencing illegal frame."
        ],
        "example":[
            "Example(s)",
            "dump 12345 g\ndump l 12345\ndump 12345 (lp\ndump 12345-12330\ndump xp 12345-12330\ndump .3039 g(x\u20193039\u2019=d\u201912345\u2019)\ndump lu .3039"
        ]
    },
    {
        "name":"E",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"echo command",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "echo\nwho",
            "This output displays:",
            "46 rlm krb",
            "echo",
            "Re-enablesecho. This output displays:",
            "who\n46 rlm krb"
        ]
    },
    {
        "name":"edit command (TCL commands)",
        "Syntax":[
            "Syntax",
            "edit file.reference itemlist* {(options)}\n"
        ],
        "description":[
            "The edit command invokes the line editor for entry or update of any item in the system (that is, BASIC programs, Procs, data items, and so on).",
            "The line editor is fully compatible with all previous versions of D3. It has largely been replaced with the Update processor, a full screen editor with extended functionality."
        ],
        "parameter":[
            "Parameter(s)",
            "optionsaActivates the assembly formatter. Equivalent to theasEditor command.dAllows editing a D-pointer.ISets an item lock on the specified item.lSuppresses line feeds when in edit mode. When line feeds are\nsuppressed, pressing enter displays the next line in the file and\nnot an additional dot prompt (that is, the dot prompt remains at the\nbottom of the display and is not regenerated between line numbers).\nNote that for Windows, this is the default behavior.mActivates the macro expansion function. Equivalent to themEditor command.pDirects the output to the system printer, via the spooler.sSuppresses the display of line numbers, in normal edit mode,\nor suppresses object code display when the assembly formatter is on.\nEquivalent to theseditor command.zSuppresses thetopandeoimessages.",
            "The editor sees the remote D-pointer items as normal items.\nThese items come up normally, but even iffdis\nissued, the items retain their critical portions.",
            "Tip:To bypass the confirmation message when using thefdcommand within theeditcommand, change Attribute\n1 of the edit command definition from ve to ve1."
        ],
        "example":[
            "Example(s)",
            "ed dm,bp, term-type"
        ]
    },
    {
        "name":"edit-list command",
        "Syntax":[
            "Syntax",
            "edit-list {file.reference} {itemlist*} {(options)}\n"
        ],
        "description":[
            "The edit-list BASIC program retrieves a previously saved list and enters the line editor (same as ed or edit). Each element in the list is treated as a line by the line editor; all of the line editor edit commands are valid. For using the Update processor to update saved lists."
        ],
        "parameter":[
            "Parameter(s)",
            "optionsaActivates the assembly formatter. Equivalent to theaseditor command.dAllows editing a D-pointer.mActivates themacro expansionfunction.\nEquivalent to themeditor command.pDirects the output to the system printer via the spooler.sSuppresses the display of line numbers, in normal edit mode,\nor suppresses object code display when the assembly formatter is on.\nEquivalent to theseditor command.zSuppresses the top and eoi messages.",
            "Warning:On early versions of D3,edit-listinvoked the Update processor."
        ],
        "example":[
            "Example(s)",
            "edit-list invoices.past.due",
            "edit-list dict customers cust.list",
            "edit-list"
        ]
    },
    {
        "name":"encrypt-file command",
        "Syntax":[
            "Syntax",
            " encrypt-file filename{,data-file}{(options}"
        ],
        "description":[
            "Description",
            "The encrypt-file command encrypts data in a specified file.",
            "If this               command is run on a system without OpenSSL, the current process will stop and return               to TCL. Additionally, you will see the Encryption libraries are not                 loaded message.",
            "Encryption does not affect any existing file translates, indexes, bridges, triggers, and so on.         These features will continue to function as expected. However, note that read and write         operations on encrypted files are significantly slower than read and write operations on         unencrypted files.",
            "The sizes of encrypted items are approximately 1% \u00a0(plus six characters) larger than unencrypted items. Be aware that LIST commands display decrypted item sizes whereas ISTAT and similar commands display encrypted item sizes",
            "As with all files, file access is determined using file update and retrieval locks (set using      the file-access-setup command in the dm account). If you have the      appropriate user key for a file, items in that file are automatically decrypted for read      operations and encrypted for write operations.",
            "If the encrypt processing code is on the file-defining item, then only         the specified attributes will be encrypted."
        ],
        "parameter":[
            "Parameter(s)",
            "filenameThe name of the file on which to apply\n                encryption.The specified file must already exist. To enable encryption, you must\n                  be logged into the account in which the specified file exists.Note:Item-ids and index keys are not encrypted. Additionally, only the data level\n                  of the file system can be encrypted. You cannot encrypt the MD or DICT of a\n                  file.data-file(Optional)Specifies which data-file in the file to encrypt.If not\n                  specified, the default data-file is encrypted.options2Uses AES-256 encryption instead of the default AES-128."
        ],
        "example":[
            "Example(s)",
            "Example 1",
            "This example encrypts thelocationsfile.",
            "Thedictionary-codefield has the entry of DE1, which indicates that\n        the file is encrypted.",
            ":encrypt-file locationsFile successfully encrypted.\n :ud locations\n \n DICT locations  'locations' size = 59dictionary-code    DE1base               18652 \n modulo             1\n structure\n retrieval-lock\n update-lock\n output-conversion\n  correlative\n attribute-type     L\n column-width       10\n input-conversion\n macro\n output-macro\n description\n reallocation\n segment-base segment-mod\n \n hotkey.all\n hotkey1\n hotkey2\n hotkey3\n hotkey4\n hotkey5\n hotkey6\n hotkey7\n hotkey8\n hotkey9\n hotkey0\n DICT locations  'locations' size = 59 exited.\n :dump 18652\n \n   fid:   18652 :   0      0      0   0  (   48DC :  0       0       0  0 )\n 000 :....k...WHSE1^<enc1>...RZ..z..\\c.-A......X..1...m.:\n 050 :.N.2[.=....8e.Y)..r.%.9z.p%O..l. .1.......a...}C..:\n 100 :`..I.^__....o...WHSE2^<enc1>.C..........^....m....:\n 150 :.S.I.t.....=.+..,...G.y..k.........3...Cgbq^y..3.h:\n 200 :..%.[.Y..V6m..|c.^__....k...WHSE3^<enc1>..=......j:\n 250 :7j....n...n4. 4[_.\\..^...=..z1T....k&.Z...{.......:\n 300 :.p<....J.^.`....G|w.7]...K^__^3737961123^__......G:\n 350 :r7..]C...tu.^_____________________________________:\n 400 :__________________________________________________:\n 450 :__________________________________________________:",
            "Example 2",
            "This example encrypts theaccountingfile.",
            ":encrypt-file accountingFile successfully encrypted.",
            "Example 3",
            "This example encrypts only the purchases data-file of theaccountingfile.",
            ":encrypt-file accounting,purchasesFile successfully encrypted."
        ]
    },
    {
        "name":"end command (TCL commands)",
        "Syntax":[
            "Syntax",
            "end {port.number user-ID}\n"
        ],
        "description":[
            "Description",
            "The end command terminates a process on another port, or the current port if a port number is not specified.",
            "The end command stops processing at the previous level and returns to the preceding level TCL prompt. However, if there is an active list at the current level, then list is cleared, and control is returned to the previous level. The end command can also be used to stop a TCL command that was sent to another line by the tcl command, or to terminate a phantom job.",
            "The end command clears an active list and requires a sys2 privilege level.",
            "If the port number and user-ID are not specified, the end command stops the process on the current line.",
            "If the specified process is in the debugger, the end command fails with an error message."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "Ends the process at the current\nlevel.",
            "end",
            "Stops the process executing on line 16, under the user-ID,\ndm.",
            "end 16 dm",
            "This kills an active list.",
            "select dict entity[404] 276 items selected out of 276 items.\nend"
        ]
    },
    {
        "name":"enqueue-status command",
        "Syntax":[
            "Syntax",
            "enqueue-status (pib.number)\n"
        ],
        "description":[
            "The enqueue-status command displays information about the state of the local transaction logging disabled flag for either a specified line or all lines currently logged on."
        ],
        "parameter":[
            "Parameter(s)",
            "pib.numberPIB line number. If not specified, the status is shown for\nall lines currently logged on."
        ],
        "example":[

        ]
    },
    {
        "name":"environ command",
        "Syntax":[
            "Syntax",
            "environ {-x} {-n} {-c string|-f {file.reference} item-ID}\n"
        ],
        "description":[
            "Description",
            "The environ command manipulates the UNIX shell environment variables from TCL.",
            "Commands can be passed from the TCL command line or from an item. It is possible to set and test shell variables, and execute TCL commands (including UNIX\u00a0commands, prefixed by an exclamation point) under control of the shell variables.",
            "If no arguments are provided, the commands are read from the item .profile in the master dictionary of the current account.",
            "A command is a sequence of words separated by spaces. If the command starts with an asterisk, it is treated as a comment and ignored. If the first word is not one of the key words recognized by environ, the command is treated as a TCL command, which is then executed. Commands are read from either the TCL sentence or from an item. Multiple commands can be issued on the same line by separating each command with a semicolon."
        ],
        "parameter":[
            "Parameter(s)",
            "-cstringReads commands from the specified string. If the string contains\nmore than one word, it must be enclosed in single quotation marks.-f {file.reference}item-IDReads commands from the item-ID in the file reference. If\nthe file reference is omitted, then the master dictionary is assumed.-nReads commands, but does not execute them. This should be\nused with the-xflag to investigate the effect of\nanenvironprogram for debugging purposes.-vPrints commands and their arguments as they are read, whether\nthey are executed or not.-xPrints commands and their arguments as they are executed.\nThe display is prefixed by a plus sign."
        ],
        "example":[
            "Example(s)",
            "Causesenvironto begin executing the commands in the specified item-ID. If the\nfile reference is omitted, the master dictionary is assumed. Control\ndoes not return to the callingenvironprogram.",
            "chain {file.reference} item-ID",
            "Causesenvironto terminate.",
            "exit",
            "Reads one line from the terminal and assigns each word\nto the positional parameters$1,$2, and so on. Up to 32 words are moved into the positional parameters.",
            "read",
            "Sets (-) or resets (+) the specifiedenvironflags. This setting overrides\nthe flags set on the command line.",
            "set {[+|-] flags}{arguments...}",
            "These positional parameters$n+1,$n+2, and so on are renamed$1,$2, and so on. Ifnis omitted,\n1 is assumed.",
            "shift {n}"
        ]
    },
    {
        "name":"esc-data command",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"esc-level command",
        "Syntax":[
            "Syntax",
            "esc-level [decnum|.hexnum|esc|?]\n"
        ],
        "description":[
            "The esc-level BASIC program specifies that pressing ESC pushes a level. The esc-level command uses the set-esc command to enable the special escape key. Without any argument, the usual escape value (x'1B' or 27) is assigned to the level pushing function. The optional argument defines an alternate value."
        ],
        "parameter":[
            "Parameter(s)",
            ".hexnumIndicates the key to trigger a level push, designated by its\ncorresponding hexadecimal value.decnumIndicates the key to trigger a level push, designated by its\ncorresponding decimal value.escDefines escape as x'1B', the normal value for escape.?Displays command usage information without changing any existing\nsettings."
        ],
        "example":[
            "Example(s)",
            "Sets the ESC key to push a level.",
            "esc-level",
            "Sets a CTRL+Z to push a level.",
            "esc-level .1a",
            "Note:This form is not supported in Windows or Linux.",
            "Causes a CTRL+Z to push a level, but is indicated by its decimal\nvalue.",
            "esc-level 26",
            "Note:This form is not supported in Windows or Linux.",
            "Displays the help.",
            "esc-level ?",
            "Resets the ESC key to its normal definition.",
            "esc-level esc"
        ]
    },
    {
        "name":"esc-toggle command",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"estimate-count command",
        "Syntax":[
            "Syntax",
            "estimate-count {file}\n"
        ],
        "description":[
            "The estimate-count BASIC program displays a fast estimate of the number of items in a file."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"exchange command",
        "Syntax":[
            "Syntax",
            "exchange file.reference item-ID1 item-ID2\n"
        ],
        "description":[
            "The exchange BASIC program switches item-IDs of the two specified items following the file reference."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "Swaps the item-IDs for program\n1 and program 2. Afterexchangingthebodyof program\n2, it is associated with the item-ID program 1 and vice-versa.",
            "exchange bp program1 program2Item 'program1' exchanged with 'program2' in file 'bp'"
        ]
    },
    {
        "name":"exec command",
        "Syntax":[
            "Syntax",
            "exec file.reference\n"
        ],
        "description":[
            "The exec command runs the current process on the specified ABS area. This has the effect of changing the environment of the D3 Virtual operating system for this process, until log off time. At log off, the abs file is automatically reset to the dm,abs, file."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"exec-stacking-off macro",
        "Syntax":[
            "Syntax",
            "exec-stacking-off\n"
        ],
        "description":[
            "The exec-stacking-off macro disables nested executes to be performed in an atomic manner."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"exec-stacking-on macro",
        "Syntax":[
            "Syntax",
            "exec-stacking-on\n"
        ],
        "description":[
            "The exec-stacking-on macro enables nested executes to be performed in an atomic manner."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"exit command",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"export command",
        "Syntax":[
            "Syntax",
            "export file.reference {item.list} {(options}\nto : [dir|{unix.file{unix.file}...}]\n"
        ],
        "description":[
            "The export command exports D3 items to UNIX files.",
            "The attributes marks are converted to a new line (x'0a'), unless the c option is used. Other D3 delimiters (value marks and so on) are not translated."
        ],
        "parameter":[
            "Parameter(s)",
            "file.referenceSource of the D3 file name.item.listList of the source items. If\nnot specified, an active list must be present.optionscPrevents attribute marks to newline conversions.eUsed with themoption to specify the character(s)\nto be used to delimit the multiple D3 items within the single export\nitem When used, theeoption prompts:Enter hex\nvalue(s) for delimiter:0dspecifies thatchar(13)is the inter-item delimiter.0d0aspecifies thatchar(13)andchar(10)make up the inter-item delimiter.If theeoption is not used, the default inter-item delimiter ischar(10).gSpecifies the UNIX file read\/write permissions to the group.\nThis flag may be modified by the value ofumask(1)of the current process.iSuppresses display of item-IDs.lConverts the name of the UNIX file to lowercase before exporting.mAllows merging multiple D3 items into a single export file.\nItem-IDs can be specified at the command line, or with an active list\nprior to invoking theexportcommand.wSpecifies the UNIX file read\/write permissions to therest\nof the world. This flag can be modified by the value ofumask(1)of the current process.unix.fileCreated with read and write owner\npermissions only (mode 0600), unless thegand\/orwoptions are used. The UNIX file variable lists the destination\nUNIX files. Complete path names must be used if the files are not\nto be exported to the current directory. The current directory may\nbe changed with thecdcommand. If no destination\nlist is provided, the source list is used as the destination list.dirDirectory path name where the\ndestination files are to be copied. The file names are the same as\nthe item-IDs from the source list. Theloption is\nused to convert UNIX file names to lowercase."
        ],
        "example":[

        ]
    },
    {
        "name":"F",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"f.modulo command",
        "Syntax":[
            "Syntax",
            "f.modulo\n"
        ],
        "description":[
            "The f.modulo command in the DM account calculates a file modulo, based on estimated file characteristics. The f.modulo command prompts for the number of items, item-ID size, and item size.",
            "This returns a recommended modulo, taking into concern the frame size of the machine and inline\/pointer items."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"f-resize command",
        "Syntax":[
            "Syntax",
            "f-resize {(options}\n"
        ],
        "description":[
            "Description",
            "The f-resize command in the DM account examines existing file modulos (VME only) for every file found in the file-of-files file, and recalculates a new recommended modulo for each file.",
            "Files are given a new recommended size according to their statistical information and are given a new modulo based on a file 75% full. The files are not immediately resized. The recommended modulo is stored in the file\u2019s file-defining item (D-pointer) in attribute 13.",
            "If a period exists in attribute 13 of the file pointer, this data file is not resized.",
            "Do a full save so all the file names are in the file-of-files file.",
            "Perform the f-resize.",
            "Do a full save of the system (which saves the recommended modulos).",
            "Do a restore of the desired account (or of the entire system), and the system refers to the recommended modulo in recreating the files, unless file reallocation is disabled during the restore."
        ],
        "parameter":[
            "Parameter(s)",
            "optionsaResizes one account.eForces resize of empty files. As a default, empty files are\nignored by thef-resizeprogram.pDirects output to the system printer via the spooler.r{frame.size}Resizes files according to the frame size specified. If the\nframe size is not specified, the frame size of the current system\nis used.uSpecifies that no downsizing takes place.xRemoves the resize parameter from attribute 13 of the d-pointer."
        ],
        "example":[

        ]
    },
    {
        "name":"fid command",
        "Syntax":[
            "Syntax",
            "fid frame-ID{(options)}\n"
        ],
        "description":[
            "The fid BASIC program displays information about a memory-resident frame.",
            "For Windows: Not Supported"
        ],
        "parameter":[
            "Parameter(s)",
            "optionsnOutputs report without pausing at the bottom of each page.pDirects output to system printer via the spooler."
        ],
        "example":[
            "Example(s)",
            "fid 122\n I i t n b r\nw m\u00a0o o o o a e\nt l f w b p t t u\nr o r r u h i c s\ne c e i s s a h e\nq k f t y h q b d\n-----------------\n0 1 1 0 0 1 0 0 0\nA fwdhq\u00a0fwdaq\u00a0bckaq\u00a0buffid\u00a0btwa\n- ------ ------ ------ ------ -------\n0 000000 000000 000000 00007A 400CB800",
            "In thevertical columnsabove, each of the bit\nsettings for the given are descriptions of each bit. Any column with\na 0 underneath indicates that the corresponding value isoff. A nonzero indicates that the value ison.",
            "wtreqIndicates awrite-requiredstate.mlockIndicates amemory-locked(core-locked) state.frefIndicates that this frame has been referenced recently.iowritIndicates that the frame is being written, or is enqueued\nfor writing.iobusyIndicates that this frame is being read from disk.tophshIndicates that this buffer is at the top of the internal memory\nhash list.notiaqIndicates that this buffer will soon be gone.batchbIndicates that this FID was brought into memory by a batch\nprocess.reusedIndicates that the buffer is eligible for immediate reuse.AttrNumber of virtual registers attached to this buffer.fwdhq bckaq fwdaqAll pointers to an internal management list.buffidFID of the buffer.btwaIndicates the real address of the buffer."
        ]
    },
    {
        "name":"field command",
        "Syntax":[
            "Syntax",
            "field n list.of.words\n"
        ],
        "description":[
            "The field BASIC program prints out the  nth word in a list of words. This is useful when combined with the TCL shell variables."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            ":field 3 one two three fourthree",
            ":field 2 @\u2018count md\u20181635"
        ]
    },
    {
        "name":"file-access-setup command",
        "Syntax":[
            "Syntax",
            "file-access-setup\n",
            "File access lock and key setup\n  1 Retrieval and update locks\n  2 User keys\n  3 Exit\n\u00a0\nView, add, remove, or search locks that restrict access to files.\n"
        ],
        "description":[
            "The file-access-setup command in the dm account provides utilities for managing file update and retrieval locks on groups of files and users. ",
            "This command provides utilities for:",
            "adding, removing and viewing retrieval and update file locks (either globally on all files or on specified individual or sets of files)",
            "adding, removing and viewing user keys on specified users or set of users"
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":":files command",
        "Syntax":[
            "Syntax",
            " :files {(options}\n"
        ],
        "description":[
            "UNIX Only: The :files command restores the entire file system from   file-save media."
        ],
        "parameter":[
            "Parameter(s)",
            "optionsThe following options are supported:lSkips theLoad reel #1 and press returnmessage.nSkips theDo you wish to disable file reallocationmessage answeringyesso that files are NOT resized.rSkips theDo you wish to disable file reallocationmessage answeringnoso that files are resized.zSkips theIncrementalandTransaction logprompts\n        answeringnoto each which allows generating indexes to automatically take\n        place.",
            "This command initiates a full restore as an alternative to reloading from theoptionsprompt.",
            "Warning:The overflow table will be cleared, wiping out the entire file system. Ensure you have a\n      proper back-up tape by performing at-verifyon it.:fileswill not change the number of ports, regardless of the npibs\n      value in the configuration file.",
            "The proper media type must be indicated with the appropriateset-command\n    prior to using the:filescommand.",
            "Initially, the system goes into single-user mode as ifmaxusers (swas\n    entered. Then, each line is wrapped up as if ashutdowncommand was entered.\n    All workspace is released and the overflow table is cleared. The user is prompted for\n    reallocation:",
            "Do you wish to disable file reallocation (y\/<n>)?:",
            "This question can be bypassed by using either:files (nor:files\n     (r.",
            "Then, you are prompted to insert the media:",
            "Load reel #1 and press return:",
            "This prompt can be bypassed by using:files (l."
        ],
        "example":[

        ]
    },
    {
        "name":"file-save command",
        "Syntax":[
            "Syntax",
            " file-save {(options}\n"
        ],
        "description":[
            "Description",
            "The file-save command in the DM account invokes the procedure to perform a full backup of each file in the D3 file system.",
            "File statistics are built with each        save, including an account-save and a dummy        save, contrary to VME file statistics.",
            "If this occurs, type        Q to quit the file save. At TCL, type the following commands, and then       restart the file-save      procedure."
        ],
        "parameter":[
            "Parameter(s)",
            "aSuppresses the added information (including all update stamps and binary item sizes).bSaves the B-tree indexes. After a full-restore, this prevents having to regenerate\n        indexes.dPrevents the clearing of dirty bits.Note:This option should only be used when\n         performing a save in preparation for a full restore.fPrevents the process from automatically logging off.gDisplays file inconsistency errors when found, but skips the group and continues the\n        save. Errors are logged in thedm,errors,file in attributes 14, 15,\n        and 16 of the error item.Attribute 14 is the save date, 15 is the primary group FID,\n         and 16 is the account > dictionary > data display information. At the end of the save, a\n         message opens indicating the total number of file inconsistency errors encountered if at\n         least one was found. If used with theboption, index corruptions are also\n         skipped.hSuppresses clearing the transaction log queue.iSuppresses the dumping of thefile-of-filesfile and clears the\n        dirty bits.jSuppresses the dirty bit counter display.kReorganizes all file-of-files file numbers sequentially on the tape.lEach file might have a list of specific item-IDs within the file to save. This option\n        saves only the list of item-IDs provided in the associated item for the given file, located\n        in thedm,file-of-files,file, beginning at attribute 25.Any number\n         of item-IDs can follow in attributes 26 and beyond. An asterisk in attribute 25 saves all\n         items in the file. If there is no list, only the file-defining item is saved, as if the\n         file had a dy dictionary code. In addition, theloption does notunmark(that is, cleardirty bits) items that have changed. These items are\n         saved on subsequent incrementalfile-savecommands oraccount-savecommands. This is similar to thevoption\n         for the fullfile-save.mSame as theloption, but it additionallyunmarksor clears\n        thedirty bits.pDirects console listing to the printer, via the spooler.qChanges the terminal display from hierarchical format to indented format.rSame as thelandmoptions, except the list is\n        also saved with the file as a separate item in thedm,file-of-files,file.tValidates the content on tape. Must be run in conjunction with thevoption.uPerforms an incrementalfile-saveoraccount-save. This saves all file items and data items that have changed\n        since the last fullfile-saveoraccount-save.Note:You cannot perform an incremental save if full save has never been\n        performed.vVerifies the tae against disk.xSaves files with a D-pointer type of dx.ySaves files with a D-pointer type of dy."
        ],
        "example":[
            "Example(s)",
            "Example 1",
            ":to dm:set-sctTape attached block size: 16384\n [1082] Tape device is attached to quarter inch Streaming Cartridge Tape\n \u00a0\n :file-saveIs this an Incremental Save (y or <n>)? n\n Console listing to printer (y or <n>)? n\n Send statistics report to printer (y or <n>)? n\n Verify save with \u2019t-verify (te)\u2019 (y or <n>)? n\n Do you want to sleep (y or <n>)? n\n File Save Beginning at 08:00:00 16 Feb 2003\n Block size: 16384\n Block size: 16384\n [96] bot\n Block size: 16384\n 1 2 mds\n 1 3 mds > qa\n 1 4 mds > qa > lst\n 1 5 mds > qa > bp.qa\n 1 6 mds > qa > bp.qa > admin\n 1 7 mds > qa > bp.qa > bp.qa\n 1 8 mds > qa > model",
            "In the standard form of this command, the account\/dict\/file\nnames display as they are saved:",
            "Tape# file# mds > account > dictionary > data",
            "In all multi-reel operations: If the save detects end of media before completing the save, you\n    will see the following message:",
            "Load volume #2 and type \u2019C\u2019\n label 08:00:00 16 Feb 2003 DATA \"account.name\" # -",
            "Example 2",
            "When the nextreelis inserted or mounted,ccontinues the process, orqstops\nit and returns control to TCL.",
            "At the end of the save process, you will see this message:",
            "clearing dirty bits...\n 2082\n file-of-files being dumped to tape\n [802] nnn items dumped",
            "Example 3",
            "After the (full)file-savecompletes, the process scans through the files and\n    resets the dirty bits, which indicate if the file was to be saved during an incremental save or\n    not. When finished clearing the dirty bits, the file-of-files file is issued at-dumpto tape if theioption was not specified. If a file\n    statistics report was requested, it prints at this time, and you will see a spooler queue entry\n    number:",
            "Entry #1\n Block size: 16384\n [96] bot",
            "Example 4",
            "After the file stats are finished, at-rewis issued to rewind the tape. Ift-verifywas\nrequested, it begins at this time. After thefile-save(andt-verify) is completed, it automatically\nlogs the process off.",
            "file save finished at 08:00:00 16 February 2003 Wednesday\n <Connect time= 60 Mins.; CPU= 4240 Units; LPTR pages= 0>\n <logged off at 09:00:00 on 16 February 2003>"
        ]
    },
    {
        "name":"file-sizer command",
        "Syntax":[
            "Syntax",
            "file-sizer\n"
        ],
        "description":[
            "The file-sizer command displays the D3 File Sizer utility which allows automatic or manual resizing of D3 Windows or D3 UNIX files. For more information on the use of the D3 File Sizer utility, see the D3 File Sizer utility topic in the D3 System Administration Guide appropriate to your platform (either Windows, AIX or Linux)."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "The example below illustrates\nopening the D3 File Sizer utility.",
            "file-sizerMain Menu\n\u00a0\n1. Start Background Monitor\n2. Stop Background Monitor\n3. Background Monitor Status\n4. Background Monitor Options\n5. View file information\n6. Display log file\n7. Clear log file\n8. Exit\n\u00a0\nUse the arrow keys to scroll.\nPress <Enter> to select the value, or <ESC> to quit:"
        ]
    },
    {
        "name":"find command",
        "Syntax":[
            "Syntax",
            " find {file.reference} {(options}\n"
        ],
        "description":[
            "The find BASIC program searches a file for the existence of one or   more strings of characters in any attribute, and optionally creates and saves a list.",
            "The file reference can be specified on the command line. Otherwise, the program requests it. ",
            "Next, the search strings are requested by the program. Enter the strings without any enclosing     delimiters. The system repeatedly asks for additional search strings. If there are no additional     strings to add, press Enter at the search string prompt to begin the search. ",
            "The program requests a list name. If a list name is provided, the list is saved in the      pointer-file file. The item-IDs of the items containing the search strings     display on the screen."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "findsource file to search\u00a0=\u00a0bp\n string to search for\u00a0=\u00a0customer.file\n string to search for\u00a0=\u00a0invoice.file\n string to search for\u00a0=\n enter list item name\u00a0=\u00a0find.list",
            "After responding to the last prompt in this example, the find process begins searching each item\n    in thebpfile. If an item contains either of the two strings provided, the\n    item-ID is added to the list. After searching the entire file, the listfind.listis saved in thepointer-filefile.",
            "findsource file to search\u00a0=\u00a0errmsg\n string to search for\u00a0=\u00a0\u00a0bad\n string to search for\u00a0=\n enter list item name\u00a0=\u00a0errmsg.with.bad",
            "The item is saved in thedm,pointer-file,file.",
            "1539\u00a0\u00a0\u00a0: E^H Bad descriptor type found.\n B14\u00a0\u00a0\u00a0: E Line ^A^H: Bad stack descriptor.\n 69\u00a0\u00a0\u00a0: E^H BAD GROUP\n 30\u00a0\u00a0\u00a0: command definition is bad\n 1514\u00a0\u00a0\u00a0: E^H Bad MDS \u2019D\u2019 type item.\n B102\u00a0\u00a0\u00a0: E Line ^A^H: Bad statement.\n 1521\u00a0\u00a0\u00a0: E^H Bad group found.\n 1522\u00a0\u00a0\u00a0: E^H Item with bad count field found."
        ]
    },
    {
        "name":"find2 command",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"fl command",
        "Syntax":[
            "Syntax",
            " fl file.reference1 list1{operators} {file.reference2} {list2}\nfl ?\n"
        ],
        "description":[
            "The fl BASIC program forms a single list from two lists using intersection, union, or exclusion operators."
        ],
        "parameter":[
            "Parameter(s)",
            "list1First list.list2Second list.operators=Indicates an intersection. Forms list of matching items.+Indicates a union. Forms list of nonduplicate items.-Indicates an exclusion. Forms list of items not inlist2.?Displays help text on the\nscreen.",
            "Iffile.reference2is not specified,\nit is assumed to be the same asfile.reference1. Iflist2is not specified, it is assumed to\nbe the same aslist1. If neitherfile.reference2nor list 2 are specified, the effect is the same as aget-list. The created list overlayslist1infile.reference1."
        ],
        "example":[
            "Example(s)",
            "Example 1",
            "Creates a list of all sports fans from both lists:",
            "fl pointer-file football.fans + baseball.fans",
            "Example 2",
            "Creates a list of those who enjoy both sports:",
            "fl pointer-file football.fans = baseball.fans",
            "Example 3",
            "Creates a list of those who like football only:",
            "fl pointer-file football.fans - baseball.fans"
        ]
    },
    {
        "name":"flashbasic command",
        "Syntax":[
            "Syntax",
            " flashbasic (options\n"
        ],
        "description":[
            "The flashbasic command toggles FlashBASIC on and off."
        ],
        "parameter":[
            "Parameter(s)",
            "optionsAvailable options are:nToggles FlashBASIC On.fToggles FlashBASIC Off."
        ],
        "example":[

        ]
    },
    {
        "name":"flip-list command",
        "Syntax":[
            "Syntax",
            "flip-list {file.reference} list.name(options\n"
        ],
        "description":[
            "The flip-list command inverts the order of the specified select list."
        ],
        "parameter":[
            "Parameter(s)",
            "file.referenceSpecified file used to retrieve\nthe item.list.nameName of the list to flip.optionssSuppresses output messages."
        ],
        "example":[
            "Example(s)",
            "flip-list mylistFlipping\n358\/358\nFlipping complete."
        ]
    },
    {
        "name":"flush command",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"flushd command",
        "Syntax":[
            "Syntax",
            "flushd interval criteria{(options}\u00a0\n"
        ],
        "description":[
            "The flushd BASIC program creates a new flush process when available buffers go below the percentage specified in  criteria for the amount of time specified in  interval.",
            "For Windows: Not Supported"
        ],
        "parameter":[
            "Parameter(s)",
            "intervalTime in seconds to wait until\na new flush process is started. The process begins if the percentage\nof available buffers goes below the percentage specified incriteriafor the amount of time specified ininterval. The default is 10 seconds.criteriaPercentage of available buffers\nthat triggers the new flush process. The process begins if the percentage\nof available buffers goes below the percentage specified incriteriafor the amount of time specified ininterval. The default is 10 percent.optionsaAllows one flush process to be started. and executing. It\nwill ignore the internal buffer check.lLogs available buffers data to thedm,error,file.wMonitors the write required buffers instead of the available\nbuffers."
        ],
        "example":[

        ]
    },
    {
        "name":"font-parms command",
        "Syntax":[
            "Syntax",
            "font-parms file.reference item.list* {(options}\n"
        ],
        "description":[
            "The font-parms BASIC program is used to upgrade fonts and is provided for conversion of fonts created before May 25, 1990. Before this date, arguments were ordered differently."
        ],
        "parameter":[
            "Parameter(s)",
            "optionsnReplaces all occurrences.sSuppresses display of messages to the screen."
        ],
        "example":[

        ]
    },
    {
        "name":"format command",
        "Syntax":[
            "Syntax",
            "format {(options}}\n"
        ],
        "description":[
            "The format BASIC program formats a floppy disk for use only with the D3 system. The density and drive specified by the last set-floppy or set-device command are used.",
            "If any bad sectors are detected by the format process, the disk is not usable under\u00a0D3."
        ],
        "parameter":[
            "Parameter(s)",
            "optionsdFormats for use with MS-DOS.vVerifies the disk only.",
            "Warning:Format does not support the specification\nof a device number other than the current one."
        ],
        "example":[
            "Example(s)",
            "Formats the hard disk most recently\nset with theset-deviceorset-floppycommand. For use by MS-DOS.",
            "format (d",
            "Verifies the disk.",
            "format (v"
        ]
    },
    {
        "name":"free command",
        "Syntax":[
            "Syntax",
            "free\n"
        ],
        "description":[
            "Description",
            "The free BASIC program displays information on the used and unused frames on a D3\u00a0system. Reports VME free space (for FSI use host operating system utilities).",
            "In addition to the information on the used and unused frames, the free command displays the total number of frames, the number of frames used by the operating system, the number in use for data, and the number of frames currently available or free."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "freeDisk Available\n0....1....2....3....4....5....6....7....8....9....100%\n***********\n\u00a0\n\u00a0\n                              MB      Bytes           Frames\nMaximum disk space     100%   6,145   6,144,824,000   3,072,412\nSystem usage           0%     5       5,288,000       2,644\nData usage             79%    4,883   4,882,322,000   2,441,161\nAvailable disk space   20%    1,257   1,257,214,000   628,607"
        ]
    },
    {
        "name":"fsck command",
        "Syntax":[
            "Syntax",
            " fsck -f filename -c arg"
        ],
        "description":[
            "Description",
            "The fsck command completes a more thorough check of the integrity and   structure of your data than the save command. It also allows for fixing   backward link errors automatically. This TCL command was implemented to allow its use without   first entering the D3 Windows Monitor Debugger.",
            "The fsck command provides a simple interface to the FlashBASIC      %filecheck() function and is used to verify the integrity of the data within     the D3 database. The fsck command allows for a more thorough scan of the data     than the save command.",
            "By contrast, and to provide for a better experience with data backups, using the      save command only provides a minimal check to ensure that data will be saved     properly, and then restored properly. The save command is optimized to save     the data more quickly. To achieve this, not all data integrity or structures are checked.     However, when using the fsck command, checks are included for backward link     errors and embedded segment marks."
        ],
        "parameter":[
            "Parameter(s)",
            "filenameRepresents the name of the file that you want to check.argRepresents one of two options available for checking thefilename.No (default)Fix"
        ],
        "example":[

        ]
    },
    {
        "name":"fuser command",
        "Syntax":[
            "Syntax",
            " fuser {device.number} {(options}\n fuser {device.name} {(options}\n fuser {*} {(options}\n"
        ],
        "description":[
            "The fuser BASIC program displays ownership information about a device.",
            "For Windows: Not Supported",
            "The fuser command is useful to determine which tape device is currently used, especially in an environment where several virtual machines are active, or where a UNIX application shares devices with a D3 virtual machine."
        ],
        "parameter":[
            "Parameter(s)",
            "device.numberTape\/device number obtained from\nthelist-devicecommand.device.nameDevice name. This form can be\nused with any device name, even if it is not part of the tape devices\nnormally used by the D3 virtual machine. The usual UNIX wildcards\nare allowed (for example,fuser \/dev\/*fd0*, which\nexamines all devices connected to the floppy disk drive 0).*Selects all Tape devices. This\nis the default option.optionspDirects output to system printer via the spooler.",
            "CAUTION:",
            "Thefusercommand\nis not available on all versions of UNIX. It requires root privilege,\ntherefore the D3 process should be started from root, with the-loption to retain the root ID."
        ],
        "example":[
            "Example(s)",
            "fuser *Device          PID    TTY    PIB    User    Account    Mode\/command\n \/dev\/rfd0h:     1265   tty2   001    dm      dm         tp.chk:000\n \/dev\/rfd0l:\n \/dev\/rfd1.15:\n \/dev\/rfd1.9:\n \/dev\/rmt0.1:\n \/dev\/rmt1.1:\n \/dev\/rmt1.5:\n \/dev\/px.gate:"
        ]
    },
    {
        "name":"G",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"generic-restore command",
        "Syntax":[
            "Syntax",
            "generic-restore {account.name}\n"
        ],
        "description":[
            "The generic-restore command restores a specially formatted account-save created by certain utility programs.",
            "For Windows: Not Supported",
            "The generic-restore command functions identically to the account-restore command, except that it expects the tape to be formatted as a series of t-dump commands written by a utility run on a non-D3 machine.",
            "The current utility for dumping from non-D3 boxes is the UVDUMP for dumping from UniVerse systems."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"get-fof command",
        "Syntax":[
            "Syntax",
            "get-fof file.reference {(options}\n"
        ],
        "description":[
            "The get-fof BASIC program returns the item-ID in the file-of-files file associated with the specified VME file."
        ],
        "parameter":[
            "Parameter(s)",
            "optionslGenerates a select list containing the file-of-files file-ID.sSuppresses the output of the item-ID."
        ],
        "example":[
            "Example(s)",
            "This command is useful for getting\nstatistical data contained about a file in the file of files file.\nThe example below shows that the optimal modulo for the file (in attributesug.mod) is significantly larger than the real modulo. Based\non these results, this file is a good candidate for resizing.",
            "get-fof bp (ls3749\n[404] 1 items selected out of 1 items.list fof fname sug.mod moduloPage 1      fof                     09:42:39   09 May 2004\nfof......   fname......   sug.mod...   modulo...\n3749        bp bp         23           17\n[405] 1 items listed out of 1 items."
        ]
    },
    {
        "name":"get-list command",
        "Syntax":[
            "Syntax",
            "get-list {{file.reference} list.name{list.name...}} {(adi.ref} {(options}\n"
        ],
        "description":[
            "The get-list command activates an item-list from the pointer-file file. The default file is the pointer-file file."
        ],
        "parameter":[
            "Parameter(s)",
            "file.referenceSpecified file used to retrieve\nthe item.list.nameName of the list that contains\nthe attributes to place in the active list. Multiple list names can\nbe specified to create longer lists.If more than one list name\nis specified, the lists are concatenated into a single list.If\nno list name is specified, the default name,%user-ID, is used.adi.refIndicates an attribute number.\nThis creates a list from the specified attribute.optionssCreates asecondarylist.u(Unique) Inhibits selection of duplicated items within multiple\nlists.n#Specifies to get only thenth attribute\nof the list.m#-n#Specifies to get from themth to thenth attribute of the list."
        ],
        "example":[
            "Example(s)",
            "get-list xx yy[404] 358 items selected out of 2 items.\n>",
            "get-list duplicates[404] 67 items selected out of 1 items.\n>",
            "This combines the two lists,old.invoicesandnew.invoicesinto one list. Theuoption eliminates redundant references within the list.",
            "get-list old.invoices new.invoices (u[404] 405 items selected out of 2 items."
        ]
    },
    {
        "name":"GetFsiRoot command",
        "Syntax":[
            "Syntax",
            "GetFsiRoot\n"
        ],
        "description":[
            "Description",
            "The GetFsiRoot BASIC program (Windows Only) returns a string representing the root location of the FSI data files on D3 Windows.",
            "This program returns the D3 installation directory that was specified during the D3 installation."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"GetLogonMode command",
        "Syntax":[
            "Syntax",
            "GetLogonMode\n"
        ],
        "description":[
            "Description",
            "The GetLogonMode BASIC program (Windows Only) returns a string representing whether or not the Windows Authentication logon mode is enabled.",
            "This program returns the current value of the Logon Security options (which are specified from the D3 Connect tab in the D3 Device Manager (see the D3 System Administration Guide for more information).",
            "If the Users File option is selected, returns \"D3 DM, USERS, mode\".",
            "If the Windows Login option is selected, returns \"Windows Authentication mode\"."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"group command",
        "Syntax":[
            "Syntax",
            "group file.reference {(options)}\n"
        ],
        "description":[
            "The group command displays a summary of information about each group in a file.",
            "The items in the group are summarized showing:",
            "FID of group in decimal.",
            "Offset to beginning of item in the group in hexadecimal.",
            "Size of item in hexadecimal.",
            "Item-ID."
        ],
        "parameter":[
            "Parameter(s)",
            "optionsiDisplays only those groups that have not had any items changed\nsince the last file restore.nOutputs without pausing at the end of each page on output\ndirected to a screen only.pDirects output to system printer via the spooler.sSuppresses listing of details and displays summary group statistics\nonly."
        ],
        "example":[

        ]
    },
    {
        "name":"H",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"hot-backup command (UNIX)",
        "Syntax":[
            "Syntax",
            " hot-backup {{command}{server=name}} {(options}\n"
        ],
        "description":[
            "The hot-backup command allows the set up and control of a hot backup             configuration. A menu displays without any arguments. This is the normal form of             operation. ",
            "For Windows: Not supported"
        ],
        "parameter":[
            "Parameter(s)",
            "commandSpecifies the operation to perform\non the specified server. Some of these operations are also available\nfrom the Hot Backup menus.debugForces the specified server to enter the BASIC debugger. Debug\nthe server usingtandem. This option is for testing\nonly.dumpFor slave servers only. Displays the location of the openfiles\nand openlist structures.Note:If the structures are extensive, the\ndisplay time may be substantial. During this time, the server does\nnot respond to commands or transactions from the master server.pstatusDisplays performance statistics for the specified server,\nincluding the number of times a routine is called and the approximate\nruntime for a routine.Note:Runtimes are rounded to the nearest second.\nThus, a routine that runs for less than a half-second displays a runtime\nof 0.queueDisplay various transaction log queue information.startStarts the specified server.stopStops the specified server.statusDisplay status information for the specified server.nameSpecifies the server on which\nthe specified command is performed.optionsThese options are available:fStarts the server in the foreground.qSuppresses all messages. Valid only for nonmenu operations.vTurns traces on when starting the server from the menu."
        ],
        "example":[
            "Example(s)",
            "Example 1",
            "This example shows how to enter the main menu:",
            "hot-backup",
            "Example 2",
            "This example shows two ways to starthot-backupin the foreground. Use\n                        either:",
            "hot-backup start server=<servername> (f",
            "or",
            "In this second example, the menu can still be used. However, when selecting start, the\n        server starts on that line in the foreground.",
            "hot-backup (f",
            "Example 3",
            "This example starts the only server on the virtual machine:",
            "hot-backup start",
            "Example 4",
            "This example starts thetodevmaster server and thefromprodslave server, and obtains the status on both servers:",
            "hot-backup start server=todev\n hot-backup start server=fromprod\n hot-backup status server=todev\n hot-backup status server=fromprod"
        ]
    },
    {
        "name":"I",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"idate command",
        "Syntax":[
            "Syntax",
            "IDATE"
        ],
        "description":[
            "Description",
            "The idate command sets the system date format to the international   standard.",
            "The international date format is DAY\/MONTH\/YEAR. For example, the date December 23, 1993,     would appear as 23\/12\/93.",
            "D3 retains this format until the format is reset to the United States standard or until D3 is         restarted.",
            "To reset the system date format from international standard to United States standard, use the      udate command."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"ignore-signals command",
        "Syntax":[
            "Syntax",
            "ignore-signals {options}\n"
        ],
        "description":[
            "The ignore-signals BASIC program will not attempt to push a level or go into the debugger when any character is input.",
            "For Windows: Not Supported"
        ],
        "parameter":[
            "Parameter(s)",
            "optionsoffDisables or ignores the signals and accepts characters.onEnables or recognizes typed characters as signals. Default."
        ],
        "example":[

        ]
    },
    {
        "name":"import command",
        "Syntax":[
            "Syntax",
            "import file.reference item.list{(options}\nfrom : [dir|{unix.file{unix.file}...}]\n"
        ],
        "description":[
            "The import BASIC program imports UNIX files to D3 items.",
            "For Windows: Not Supported"
        ],
        "parameter":[
            "Parameter(s)",
            "file.referenceDestination of the D3 file name.item.listList of the destination items.\nIf not specified, a list must be active.dirDirectory where the source files\nare to be found. The file names are the same as the item-IDs from\nthe source list. Theloption is used to convert\nUNIX file names to lowercase.unix.fileExplicit list of the source UNIX\nfiles. Complete path names must be used if the files are not on the\ncurrent directory. The current directory may be changed by thecdcommand. If no source list is provided, the destination\nlist is used as a source list also. Wildcards are legal in the UNIX\nfile, but in this case, all the files are concatenated before the\ncopy.optionsenExpands UNIX tabulations into a specified number of spaces.\nIf a number of spaces is not specified, the default is four. Tabulations\nexpansion is done using thepr(1)UNIX command.iSuppresses display of item-IDs.lConverts the UNIX file name into lowercase before the copy.OOverwrites D3 items if duplicate item-IDs are encountered.",
            "CAUTION:",
            "If the number of D3 items is not the\nsame as the number of UNIX files, only the lesser of these two numbers\nis transferred."
        ],
        "example":[

        ]
    },
    {
        "name":"index-select command",
        "Syntax":[
            "Syntax",
            "index-select file.name index.specification key1{key2}\n"
        ],
        "description":[
            "Use the  index-select BASIC program to create an active list based on a single key or a range of keys."
        ],
        "parameter":[
            "Parameter(s)",
            "file.nameName of the file.index.specificationAttribute definition or an a-correlative (a1, a2, and so on).key1Beginning key.key2Ending key (if omitted, then only item-ids matchingkey1will be selected)"
        ],
        "example":[

        ]
    },
    {
        "name":"indexer command",
        "Syntax":[
            "Syntax",
            "indexer {account.name} {(options)}\n"
        ],
        "description":[
            "The indexer BASIC program rebuilds indexes on part or all of the files of the system."
        ],
        "parameter":[
            "Parameter(s)",
            "optionsaUses the active list as the list of files to rebuild indexes.nOutputs report without pausing at the bottom of each page.oOverwrites any existing index.pDirects output to system printer via the spooler.",
            "Theindexercommand rebuilds indexes\nfor:",
            "The entire file system, if no list is active or the account\nname is specified.A specific account, if the account name is specified with\nthe command.Each account in anactive list, if a list isactivewhen the command is invoked.",
            "This command is useful when anaccount-restoredoes not finish properly, or is voluntarily preempt."
        ],
        "example":[
            "Example(s)",
            "Rebuilds all indexes in all accounts.",
            "indexer",
            "Rebuilds all indexes in the prod account.",
            "indexer prod",
            "Rebuilds the indexes for the \"dm\", \"prod\", and \"accounting\naccounts\".",
            "select mds \u2019dm\u2019 \u2019prod\u2019 \u2019accounting\u2019[404] 3 items selected out of 37 items.indexer"
        ]
    },
    {
        "name":"init-ovf command",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"init-pibs command",
        "Syntax":[
            "Syntax",
            "init-pibs {device.name} {(i}\n"
        ],
        "description":[
            "The init-pibs command assigns all ports a terminal type by updating attribute 2 in the pibs file.",
            "If no device name is specified, the default VT100 terminal type is assigned to all ports except port 0, which is always assigned to mm-mon.",
            "If attribute 2 in the pibs file item already has term information, then it is not overlaid unless the i option is specified."
        ],
        "parameter":[
            "Parameter(s)",
            "iInitializes or overlays existing terminal type in attribute\n2 of the pibs item."
        ],
        "example":[

        ]
    },
    {
        "name":"initovf command",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"inputwait command",
        "Syntax":[
            "Syntax",
            "inputwait delay; text; command[ ; command... ]\n"
        ],
        "description":[
            "The inputwait command displays a message, and waits for given time to execute commands."
        ],
        "parameter":[
            "Parameter(s)",
            "delaySpecifies the number of seconds to wait before executing the\nspecified commands.textSpecifies the prompt to be displayed before waiting for input.command[ ;command...]Specifies a list of semi-colon separated commands to execute\nif no input is received before the delay period expires. One or more\ncommands can be specified.",
            "Theinputwaitcommand displays the specified\ntext on the screen and then waits for the number of seconds to delay\nbefore executing the specified commands. If the user interrupts the\ndelay period by pressing any key, the commands will not be executed.",
            "This command is useful in a macro as it provides some of the same\ntype of functionality that is available in proc."
        ],
        "example":[
            "Example(s)",
            "n\nt-att 5\nt-rew\ninputwait 15; Press a key to stop the file save from starting.; cls; save (fst"
        ]
    },
    {
        "name":"iselect command",
        "Syntax":[
            "Syntax",
            "iselect file.reference item-ID\n"
        ],
        "description":[
            "The iselect BASIC program selects all of the item-IDs in the group that the specified item-ID hashes to, using the item command.",
            "This command is useful when dealing with file inconsistency errors. It can be used to determine which items are in a particular group, so that they may be copied out of the group."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "iselect md who[404] 26 items selected out of 1 items."
        ]
    },
    {
        "name":"isselect command",
        "Syntax":[
            "Syntax",
            "isselect file.reference item-ID\n"
        ],
        "description":[
            "The isselect BASIC program selects and sorts all of the item-IDs in the group that the specified item-ID hashes to, using the item command."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "isselect md who[404] 26 items selected out of 1 items."
        ]
    },
    {
        "name":"item command",
        "Syntax":[
            "Syntax",
            "item file.reference itemlist* {(options}\n"
        ],
        "description":[
            "Description",
            "The item command outputs the base FID of the group to which the specified item-ID hashes, and a list of all item-IDs that are currently hashed to the same group.",
            "For Windows: Not Supported in FSI",
            "The item command displays each item\u2019s:",
            "(hexadecimal) offset into frame\/group.",
            "a count of the total number of items in the group.",
            "the total number of bytes.",
            "the total number of full frames.",
            "the number of bytes used in the last frame of the group.",
            "If the specified item-ID is not found, the group to which it would hash displays.",
            "Case sensitivity is an issue in the hashing algorithm used by the D3 system. If a file has a D-pointer type of ds, item-IDs are case sensitive. This means:",
            "The item-ID dog and DOG are treated as two separate items.",
            "The item-ID dog and DOG would most likely hash to different groups (unless, of course, the file has a modulo of 1).",
            "If case sensitivity is off, dog and DOG are the same thing, and there can only be one dog.",
            "In the columns between the address and the offset, any of these three letters can display:"
        ],
        "parameter":[
            "Parameter(s)",
            "optionsnActivates thenopagefunction on output\nto the terminal.pDirects output to system printer via the spooler.sSuppresses output of item-IDs."
        ],
        "example":[
            "Example(s)",
            "The example below illustrates\nthe effect of not finding the item, yet showing the group to which\nthe item would hash if it were there.",
            "item testfile stuffstuff\nitem not found\n320710.0000 01BC pc.v\n1 items 444 bytes 0\/444 frames in group 320710"
        ]
    },
    {
        "name":"J",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"job-status command",
        "Syntax":[
            "Syntax",
            "job-status item-ID\n"
        ],
        "description":[
            "The job-status BASIC program returns status information of a job.",
            "For Windows: Not Supported"
        ],
        "parameter":[
            "Parameter(s)",
            "item-IDSpecifies the ID of the job from which to return status information.",
            "Possible status information returned:",
            "abortJob aborted.doneJob completed.errorError occurred.logoffPhantom was prematurely logged\noff prior to job completion.queueJob is in the queue, waiting\nfor an available phantom process.runningJob is still running. If the\njob is still running but is waiting for a response to a tape prompt,\nthese prompts may display:PromptPossible ResponsesParity ErrorAccept, Retry, QuitBlock Transfer IncompleteAccept, Retry, QuitMedia Write ProtectedContinue, QuitIncorrect reelContinue, Overwrite, QuitReel Was LabeledContinue, Overwrite, QuitReel Was UnlabeledContinue, Overwrite, QuitNeed To Do Full SaveFull save, QuitLoad Next VolumeContinue, Quit"
        ],
        "example":[

        ]
    },
    {
        "name":"K",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"kill command",
        "Syntax":[
            "Syntax",
            "kill {-[signo|signame]} [pid|ppib] {[pid|ppib]...}\n"
        ],
        "description":[
            "The kill UNIX BASIC program sends a UNIX signal to a D3 or UNIX process. Signals can be specified by their names, rather than by their number, and D3 processes by their port numbers instead of the UNIX PIDs.",
            "For Windows: Not Supported"
        ],
        "parameter":[
            "Parameter(s)",
            "signoOptional signal number in decimal. If not specified, SIGTERM\nis sent.signameOptional signal name. Among the valid signal lists are: {SIG}TERM,\n{SIG}HUP, and {SIG}USR2. If not specified, SIGTERM is sent.ppibIndicates the D3 PIB (port number), prefixed by the letterp.Checks that none of the specified processes have a PID of\n0, which wouldkillall processes in the group, usually resulting\nin an abrupt shutdown of the D3 virtual machine.",
            "Warning:Killing the flush process logs off D3\nprocesses immediately and shuts down the entire virtual machine. Killing\nthe flusher can be accomplished by using the formP<process.number>with a PIB number equal to\n-2:kill p-2This should not be the normal way to shut down a virtual\nmachine, because it loses overflow. It can be used only to do an emergency\nshutdown, due to an imminent power failure, for instance."
        ],
        "example":[
            "Example(s)",
            "Kills the (UNIX) process associated\nwith port 17.",
            "kill p17",
            "Sends a signal,sigalrm, to the UNIX\nprocess associated with port 33 and to the UNIX process whose PID\nis 7143.",
            "kill -sigalrm p33 7143",
            "Sends asignupto port 0.",
            "kill -1 p0"
        ]
    },
    {
        "name":"kill-resizing command",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"L",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"ld command",
        "Syntax":[
            "Syntax",
            "ld {file.reference} {(options}\n"
        ],
        "description":[
            "The ld command presents the best guess of what one wants to see in a columnar listing of any dictionary.",
            "The information in the report is sorted by the attribute count of each item in the dictionary."
        ],
        "parameter":[
            "Parameter(s)",
            "optionsdDisplays only the data-levels for the dictionary. If this\noption is not used, the data-level display is suppressed."
        ],
        "example":[

        ]
    },
    {
        "name":"ldf macro",
        "Syntax":[
            "Syntax",
            "ldf file.reference {(options}\n"
        ],
        "description":[
            "The ldf macro lists the summary description (attribute 17) of each attribute-defining item in the specified file.",
            "The information in the report is sorted by the attribute count of each item in the dictionary."
        ],
        "parameter":[
            "Parameter(s)",
            "optionsnActivates thenopausefunction on output\nto the terminal.pDirects output to the system printer via the spooler."
        ],
        "example":[

        ]
    },
    {
        "name":"legend command",
        "Syntax":[
            "Syntax",
            "legend {(options}\n"
        ],
        "description":[
            "The legend is a static statement stored as an item in dm,messages, file. This is in contrast to headings and footings, which are dynamic, changing with each page output.",
            "If present, the legend item is output on the bottom of each page of a printed reports directed to the spooler, unless the legend suppress modifier (leg-supp) is in effect.",
            "Each user can have their own legend item, using legend*user-ID as the naming convention for the dm,messages, item. For example, legend*bob.",
            "If the legend status is on, the system searches first for a user legend. If none exists, the default item, legend, is used."
        ],
        "parameter":[
            "Parameter(s)",
            "optionsfToggles legend off. Suppresses legend on spooler output. This\neliminates the need for theleg-suppconnective\norkoption.nToggles legend on. Outputs legend on spooler listings.sSuppresses output of status message."
        ],
        "example":[
            "Example(s)",
            "legend[1303] Legend output is suppressed.",
            "legend (n[1302] Legend output is active."
        ]
    },
    {
        "name":"lerrs macro",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"lfd macro",
        "Syntax":[
            "Syntax",
            "lfd file.reference {(options}\n"
        ],
        "description":[
            "The lfd macro produces a sorted listing of all file-defining items in the specified file, along with the description attribute from each file pointer."
        ],
        "parameter":[
            "Parameter(s)",
            "optionsnActivates thenopagefunction on output\nto the terminal.pDirects output to system printer via the spooler.sSuppresses output of item-IDs."
        ],
        "example":[

        ]
    },
    {
        "name":"lfs macro",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"lfsb macro",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"lfsi macro",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"link-pibdev command",
        "Syntax":[
            "Syntax",
            "link-pibdev {process,} port.number\n"
        ],
        "description":[
            "The link-pibdev BASIC program creates a logical link between the given (or current) process and the specified port number.",
            "For Windows: Not Supported",
            "The process and the specified port must not be in tandem, converse, or mirror."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "Links the current process to\nport 3.",
            "link-pibdev 3",
            "Links process 2 to port 4.",
            "link-pibdev 2,4"
        ]
    },
    {
        "name":"list-aborts command",
        "Syntax":[
            "Syntax",
            " list-aborts {(options}"
        ],
        "description":[
            "The list-aborts command produces a sorted report of the aborts     logged into the dm,errors, file, beginning with the most recently logged     message. It is different from the list-errors macro in that it only displays     aborts not informational messages (such as logoffs or system boots)."
        ],
        "parameter":[
            "Parameter(s)",
            "optionsnActivates the nopause function on output to the terminalpDirects output to the system printer via the spooler."
        ],
        "example":[
            "Example(s)",
            "This example reports the aborts logged into the errors file.",
            ":list-aborts\n [404] 4 items selected out of 71 items.\n Page   1     dm,errors,                                  07:25:15 29 Jun 2020\n time. r error.message................. last tcl entry.... pib\/user md. abs-fid.\n date                                                                   abs-date\n                                                                        pgm-ctr\n 12:15   Invalid Remote Driver          AZCDAZCD           1 qa         18\n 04\/07                                                     qa.fsi.flash 03\/03\/20\n                                                                        2.17A\n 08:15 0 b-tree index                   verify-index       1 qa         00000018\n 04\/07   a1 inconsistent                dm,A1909129758_AI3 qa.fsi.flash\n                                        4288, a1\n 08:14   ovf runaway                    rt (1              260 qa       18\n 04\/07   0000C65B                                          qa.fsi.flash 03\/03\/20\n         OVF_ONE_MAIN:000                                               1.1E7\n         Return stack contents...\n         OVF_ADD:000\n         RP_CMD:000\n         RP_GETGRP:000\n         RP_GETITM:000\n         GETITM_NLX:000\n         ES_MD30_L70:000\n 08:30   priv op                        verify-index       1 tim a01    18\n 04\/06   BR_UNIX_BIX:000                timsnixtest a1 (n               03\/03\/20\n         Return stack contents...                                       9.1FC\n         <No return stack entries>\n [405] 4 items listed out of 4 items."
        ]
    },
    {
        "name":"list-abs macro",
        "Syntax":[
            "Syntax",
            "list-abs {(options}\n"
        ],
        "description":[
            "The list-abs macro produces a report of each D3 mode in the dm,abs, file, showing any modes it calls and those modes which are called."
        ],
        "parameter":[
            "Parameter(s)",
            "optionsnAffects output to the terminal only, preventing output from\npausing at the end of each (terminal) page of output.pDirects output to the system printer, via the spooler."
        ],
        "example":[

        ]
    },
    {
        "name":"list-commands macro",
        "Syntax":[
            "Syntax",
            "list-commands md.name{(options}\n"
        ],
        "description":[
            "The list-commands macro produces a report showing every executable command in the specified master dictionary (md); this includes: Procs, macros, menus, cataloged FlashBASIC programs (BASIC commands) and D3 commands."
        ],
        "parameter":[
            "Parameter(s)",
            "md.nameName of the master dictionary.optionsnActivates thenopausefunction on output\nto the terminal.pDirects output to the system printer via the spooler."
        ],
        "example":[
            "Example(s)",
            "list-commands md",
            "Directs the report to the spooler.",
            "list-commands dm,, (p"
        ]
    },
    {
        "name":"list-device command",
        "Syntax":[
            "Syntax",
            " list-device {device.number} {(options}\n"
        ],
        "description":[
            "Description",
            "The list-device command shows the currently defined   devices.",
            "The devices listed can be used as tape devices through the set-half,      set-sct, set-floppy, or set-device     commands.",
            "Devices are numbered as they display in the configuration file. The current device is noted         with an asterisk (*). The active device is noted with a plus sign (+)."
        ],
        "parameter":[
            "Parameter(s)",
            "device.numberThe device number to list.If the device number is not\n                  specified, all currently defined devices are listed.optionshSuppresses the header display. Only devices are displayed.pDirects the output to the system printer via the spooler."
        ],
        "example":[
            "Example(s)",
            "In this example, the Owner column shows the PIB number that has use of the device and an*indicates that this PIB is the current process. A+indicates that this device is theactivedevice (a PIB can attach more than\n    one device).",
            "list-deviceTape       Status             16 Feb 2003       14:30:40\n #          Type               Density           Owner     Device Name\n ---------------------------------------------------------------------\n 0       |  Floppy          |  3 1\/2\" 1.44M   |         |  \/dev\/rpdsk\/4\n 1       |  Quarter Inch    |  High           |         |  \/dev\/rmt\/0n\n 2       |  4mm DAT         |                 |         |  \/dev\/rmt\/1n\n 3       |  4mm DAT         |                 |         |  \/dev\/rmt\/1un\n 4       |  8mm Tape        |                 |         |  \/dev\/rmt\/2n\n 5       |  8mm Tape        |                 |         |  \/dev\/rmt\/2un\n 6       |  Floppy          |  Pseudo Floppy  |         |  \/usr\/opt\/pick\/bin\/abs\n 7       |  Floppy          |  Pseudo Floppy  |         |  \/usr\/opt\/pick\/bin\/data\n 8       |  Floppy          |  Pseudo Floppy  |         |  \/usr\/opt\/pick\/bin\/ref\n 9       |  Network         |                 |         |  \/home\/tmp\/pipein\n 10      |  Floppy          |  Pseudo Floppy  |         |  \/home\/tmp\/floppy\n 11      |  Floppy          |  Pseudo Floppy  |         |  \/n\/dev\/home\/tmp\/floppy\n ---------------------------------------------------------------------"
        ]
    },
    {
        "name":"list-errors macro",
        "Syntax":[
            "Syntax",
            "list-errors {(options}\n"
        ],
        "description":[
            "The list-errors macro produces a sorted report of the error messages logged into the dm,errors, file, beginning with the most recently logged message."
        ],
        "parameter":[
            "Parameter(s)",
            "optionsnActivates thenopausefunction on output\nto the terminal.pDirects output to the system printer via the spooler."
        ],
        "example":[
            "Example(s)",
            "Reports the error messages logged\ninto the errors file.",
            "list-errors"
        ]
    },
    {
        "name":"list-file-access command",
        "Syntax":[
            "Syntax",
            "list-file-access {[file.reference|fof.number]...} (options\n"
        ],
        "description":[
            "The list-file-access BASIC program displays file access statistics for the desired files."
        ],
        "parameter":[
            "Parameter(s)",
            "optionscClears instead of displays. This option traverses all files\nspecified (or the whole file system if no file is specified), and\nclears the statistics. This command should be used (preferably on\nthe whole file system) before any data is collected.lRefreshes the display every 5 seconds.fPrompt for file names.pDirects output to the spooler.",
            "This command displays counters, which relate the amount\nand type of file access occurring on a given file (specified by the\nfile name or the file-of-files file number). If no file reference\nis specified, then the program takes the file references from an active\nselect list. If no select list is active, and no file references are\nspecified, then the statistics for the entire file system display.",
            "File statistics are always collected by system routines and have\nno appreciable impact on file system performance. The statistics are\ndivided into two columns:",
            "First column shows the total results since the statistics\nwere cleared.Second column shows the average results per day since the\nstatistics were cleared.",
            "These categories are:",
            "Total ReadsTotal number of reads on the file.Note:This figure includes\nall reads, some of which are not included in the subcategories listed\nbelow.ReaduNumber of reads which initiated an item lock. The percentage\nof total reads is also displayed.Readu (Blocked)Number of reads which initiated an item lock, but were blocked\nby another user. The percentage of total reads displays.Readu lockedNumber of reads which initiated an item lock with alockedclause. The percentage of total reads displays.Readu locked (Blocked)Number of reads which initiated an item lock with alockedclause but were blocked by another user. The percentage\nof total reads displays.Pointer Item ReadNumber of reads of pointer items. The percentage of total\nreads displays.Overflow ReadNumber of reads which traversed an overflow group. The percentage\nof total reads displays. If this percentage is greater than 30%, the\nfile probably should be resized.Total WritesNumber of writes to the file.Note:This figure includes all\nwrites, some of are not included in the subcategories listed below.WriteuNumber of writes which did not release a held item lock. The\npercentage of total writes displays.Write (Blocked)Number of writes which were blocked by another user\u2019s item\nlock. The percentage of total writes displays.DeleteA write which does not leave any new data. This value is the\ntotal number of item deletes performed on a file. The percentage of\ntotal writes displays.Pointer Item WriteNumber of reads of pointer items. The percentage of total\nreads displays.Overflow WriteNumber of reads which traversed an overflow group. The percentage\nof total writes displays. If the percentage is greater than 30%, the\nfile probably should be resized.Total SelectsTotal number of sequential operations on a file.Note:A sequential\naccess (for example, count or sort) increments this number by 1 rather\nthan the number of items traversed. Sequential accesses include AQL\nstatements, BASIC select statements and utilities such asistat(UNIX only) andcreate-index.Total ClearsTotal number ofclear-fileoperations performed\non a file.Total OpensTotal number of times a file has been opened.Note:Thelist-file-accesscommand opens the file, thus incrementing\nthis counter, but decrements it immediately afterwards so that the\ncommand does not affect the statistics."
        ],
        "example":[
            "Example(s)",
            "list-file-access bpPage 1                   *** LIST-FILE-ACCESS ***                      Feb 18 2003\n==================================================================================\nFile:bp                                CURRENT   TOTALS   AVERAGE PER DAY\n----------------------------------------------------------------------------------\nTotal Reads                            384                42\n              Readu                    0         ( 0% )   0          ( 0% )\n              Readu (Blocked)          0         ( 0% )   0          ( 0% )\n              Readu locked             28        ( 7%     3          ( 7% )\n              Readu locked (Blocked)   0         ( 0% )   0          ( 0% )\n              Pointer Item Read        142       ( 36% )  15         ( 35% )\n              Overflow Read            141       ( 36% )  15         ( 35% )\nTotal Writes                           15                 1\n              Writeu                   0         ( 0% )   0          ( 0% )\n              Write (Blocked)          0         ( 0% )   0          ( 0% )\n              Delete                   1         ( 13% )  0          ( 0% )\n              Pointer Item Write       4         ( 26% )  0          ( 0% )\n              Overflow Write           0         ( 0% )   0          ( 0% )\nTotal Selects                          6                  6\nTotal Clears                           0                  0\nTotal Opens                            125                125",
            "From the above data, one can ascertain that the file is fairly\nbusy. Locking does not appear to be a problem because none of the\n(Blocked) categories have tallied significant numbers. The overflow\ngroup accesses are a bit high and may indicate the potential need\nfor resizing.",
            "The raw file statistics are archived into the\nfile of files file by the file-save\u00a0process. Therefore, it is\npossible to select and display these statistics using thefile-of-filesfile directly. The example below displays\nthe five files on the system with the greatest overflow group access:",
            "sselect fof by-dsnd stat.ovf[404] 2347 items selected out of 2347 items.select fof sampling 5[4042] 5 items selected out of 5 sampling items.list fof namePage 1              fof\nfof.....            name............\n1349                fred*bp*bp\n2343                ba*bp*bp\n1293                ba*accounts*accounts\n1943                ba*memos*memos\n1222                ba*log*log\n[405] 5 items listed out of 5 items.",
            "These files above\nare good candidates for further examination. To get the full AQL statistics\n(including any changes occurring after the last file-save), do the\nsame two select statements listed in the example above, and then typelist-file-access. This displays the full information for\nthese files only."
        ]
    },
    {
        "name":"list-file-stats command",
        "Syntax":[
            "Syntax",
            "list-file-stats {det-supp}{leg-supp|legend-supp} {tcl-supp} {(options}\n"
        ],
        "description":[
            "The list-file-stats BASIC program produces the file statistics report generated from the most recently executed file-save command or account-save command."
        ],
        "parameter":[
            "Parameter(s)",
            "optionsbSuppresses thenumber of items listedmessage\nat the end of most AQL reports (seeni-supp modifier).cSuppresses column headings above output columns as well as\nthe default page heading on AQL reports (seecol-hdr-supp modifier).hSuppresses the default page heading (system time\/date and\npage number) (seehdr-supp modifier).iIf this option is used, the results will include the number\nof bytes and frames that are used in both the data and the index.\nNote that this command requires that you run thesavecommand with the(boption.nAffects output to the terminal only, preventing the AQL output\nfrom pausing at the end of each (terminal) page of output (seenopage modifier).pDirects output of the AQL sentence to the system printer,\nvia the spooler (seelptr modifier).wDisplays the output of alistorsortcommand in a full screen window, allowing the user\nto scroll backward, forward, left, and right through the report. If\na minus sign (-) displays after thewoption, then\na wide virtual display is used to display the output of the AQL sentence.\nThe user can then scroll left and right a screen at a time, as well\nas up and down a screen at a time. If a number is entered, that number\nof lines from the top of the first page are stored away as the header,\nand are displayed on each page. This may cause confusion for reports\nthat display the page number within the header. Thehoption (hdr-supp) is automatically appended to\nany reports that do not include a heading sentence. A short help screen\nis available while displaying the output to elaborate on the keystrokes.",
            "Thelist-file-statscommand lists both\nVME and FSI file statistics, listing the file statistics for VME first.",
            "For a separate FSI listing, typentlfs {(p}from TCL.",
            "Note:VME: file-of-files (hyphenated)FSI: FileOfFiles (not hyphenated)In general terms, when referring to either file,file\nof filesfile is used.",
            "Statistics are produced\nfrom thedm,file-of-files,file or thefsi:dm,FileOfFiles,file.",
            "The data displays as:",
            "r#Reel number (or volume number) that the file resides on (from\nthe lastfile-save).seq#File sequence number that numbers from 1 tonnacross the wholefile-save.file#File sequence number in the system\u2019s master dictionary.fnameFile name.modModulo of the file.bytesSize (in bytes) of the file.itemsNumber of items in the file.ovfitmsNumber of items residing in overflow frames (secondary file\nspace).framesTotal number of frames used by this file.ptr-fmsNumber of pointer frames used by this file."
        ],
        "example":[
            "Example(s)",
            "sort dm,file-of-files, by name id-supp reel# seq# file# roll-on acct \"*** \n\u2019UVF\u2019\" fname mod total bytes total items total ovf-itms total frames total ptr-fms\ngrand-total \"\u2019U\u2019\" heading \"PAGE \u2019P\u2019 ** FILE STATISTICS REPORT ** \u2019DCLL\u2019\" with stat#\"2\" lptrPAGE 1           ** FILE STATISTICS REPORT **                           16 Feb 2003\nr#   seq#.   file#   fname......   mod   bytes   items   ovfitms   frames   ptr-fms\n3    89      132                   17    4470    8                 25       8\n4    109     142     01            1     556     1                 2        1\n4    111     139     TOOLS         1     20632   20                22       21\n4    113     141     TOOLS OBSLT   1     15080   30      28        17       5\n4    112     140     TOOLS TOOLS   3     23226   30      18        29       21\n                                         ------- ------- -------   -------  -------\n*** atp4                                 359333  125     479       366      131\n                                         ------- ------- -------   -------  -------\n*** tutor                                172970  945     355       210      129\n                                         ======= ======= =======   =======  =======\n                                         4170691 15323   6229      5546     2645\n[405] 132 items listed out of 158 items."
        ]
    },
    {
        "name":"list-files command",
        "Syntax":[
            "Syntax",
            "list-files {lptr} {(options}\n"
        ],
        "description":[
            "The list-files BASIC program produces a report of all file-defining items(D-pointers) and synonym-defining items (Q-pointers)."
        ],
        "parameter":[
            "Parameter(s)",
            "optionsfDisplays D-pointer files only.pDirects output to system printer via the spooler.qDisplays Q-pointer files only.",
            "The report that it produces is in two parts. The first\npart is a listing of all thelocalfiles. This is a listing\nof all files with ad, optionally followed by a second\ncharacter, in the dictionary code attribute (attribute 1 in the master\ndictionary).",
            "This part of the report contains:",
            "the dictionary name.the base FID.the dictionary modulo.the data-portions and their base FIDs and modulos.the file\u2019s dictionary code, if it is anything other thand.",
            "The second part of the report contains those items defined\nas synonym-defining items, or Q-pointers. This includes the target\naccount and target file name."
        ],
        "example":[
            "Example(s)",
            "list-files (pf"
        ]
    },
    {
        "name":"list-index command",
        "Syntax":[
            "Syntax",
            "list-index <filename>|<accountname,,>|mds,,\n"
        ],
        "description":[
            "The list-index BASIC program lists all indexes for a given file name, account name, or for the system."
        ],
        "parameter":[
            "Parameter(s)",
            "<filename>Lists all indexes for the specified file name.<accountname,,>Lists all indexes for all files within the specified fully-pathed\naccount.mds,,Lists all indexes for the system. Indexes are listed by account\nand then by file.",
            "Displays case sensitivity, root fid, and the a-correlative\nwhich defines the index keys for each index.",
            "For Windows:VME accounts are listed first, followed by FSI accounts."
        ],
        "example":[
            "Example(s)",
            ":list-index jd.xLIST-INDEX filename: jd.x 09:35:55 09 Jul 2004 Page 1\n\u00a0\nCase Insensitive 19033 a1\nCase Sensitive 19015 a2\nCase Insensitive 19968 a1:\" This is longer than the others\""
        ]
    },
    {
        "name":"list-item-locks macro",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"list-jobs macro",
        "Syntax":[
            "Syntax",
            "list-jobs\n"
        ],
        "description":[
            "Description",
            "The list-jobs macro produces a report indicating the status of all phantom controlled processes currently in the dm,jobs, file.",
            "The report includes the following headings:",
            "If a job is still running but is waiting for a response to a tape prompt, these prompts may display:"
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "list-jobsPHANTOM   JOBS   STATUS   AT      10:09:07 04 Feb 2003          PAGE 1\nuser-md   ln.    pib      status..     start-dt..    stop-dt....   tcl-command..\npxp pxp   1      122      done(3)      12\/04 10:08   12\/04 10:09   pxpjob x25p56\npxp pxp   1      121      done(12)     12\/04 10:08   12\/04 10:09   pxpjob x25p78\npxp pxp   1      120      done(7)      12\/04 10:08   12\/04 10:08   pxpjob x25p88"
        ]
    },
    {
        "name":"list-lines command",
        "Syntax":[
            "Syntax",
            "list-lines\n"
        ],
        "description":[
            "Description",
            "The list-lines BASIC program displays communications protocol information for every port attached to the virtual machine.",
            "For Windows: Not Supported",
            "For UNIX: UNIX device name displays.",
            "The report includes these headings:",
            "For UNIX: The tty parameter is supported by UNIX only."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "list-linesLine#   Baud\/rt   Parity   Stop   Data   DCD   Xon\/off   TTY\n0       9600      NONE     1      8      OFF   enabled   \/dev\/tty0\n1       OFF\n2       9600      NONE     1      8      OFF   enabled   \/dev\/tty2\n3       9600      NONE     1      8      OFF   enabled   \/dev\/tty3\n4       9600      NONE     1      8      OFF   enabled   \/dev\/tty4"
        ]
    },
    {
        "name":"list-lists macro",
        "Syntax":[
            "Syntax",
            "list-lists {(options}\n"
        ],
        "description":[
            "The list-lists macro produces a sorted report of all previously saved lists in the pointer-file file."
        ],
        "parameter":[
            "Parameter(s)",
            "optionsnAffects output to the terminal only, preventing output from\npausing at the end of each (terminal) page of output.pDirects output to the system printer, via the spooler."
        ],
        "example":[

        ]
    },
    {
        "name":"list-lockq command",
        "Syntax":"",
        "description":[
            "Description",
            "The report includes these headings:"
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "list-lockqWaiting          owner           fcb   group\nline#    level   line#   level   fid   fid      item-ID\n0000     00                            0096B8\n0038     01                            0535F5"
        ]
    },
    {
        "name":"list-locks command",
        "Syntax":[
            "Syntax",
            " list-locks {-options} {(options}"
        ],
        "description":[
            "Description",
            "The list-locks BASIC program displays the current status of all system, FlashBASIC, spooler, group, and item locks.",
            "All locks display automatically unless one or more of the available options is provided with the command.",
            "Using list-locks shows both the VME and FSI item locks.",
            "File locks are special item locks that affect the whole file. These locks prevent any             updates or normal item locks to a file while in effect. File locks display in the item             lock listing as having item-IDs of an asterisk and hashes of zero. These locks are set             with the BASIC filelock statement.",
            "When displaying item locks (by using the i option), it is optionally             possible to display the locks of a remote D3 machine by specifying the host name. If an             asterisk is specified for the host name, then the list-locks command             attempts to list the locks on all remote hosts.",
            "Filtering -options",
            "When using filters, only lock entries satisfying at least one value for each filter will             be included in the report. ",
            "The individual values for a given filter are joined by a logical or,             while multiple filters are joined together by a logical and. That is,                (<file 1> or <file 2> or                <file ...>) AND (<pib#1> or                <pib#2> or <pib#...>)",
            "For                            example, if a lock is set on an item in dict                               resizing then use -file                         resizing",
            "For example, -file                               account,dict,data"
        ],
        "parameter":[
            "Parameter(s)",
            "-optionshelpShows the help text.computerD3 Windows only: Includes the computer name in the report.hostfsi <host>D3 Windows only: Shows the locks on given FSI host.hostvme <host>Shows the locks on a given OSFI host.timeIncludes the date and time the item lock was set.The-hostvmeoption does not support-time.",
            "(options?Shows the help text.aShows the txlog producer lock.bShows BASIC locks.cShows the txlog consumer lock.gShows VME group locks.iShows local FSI and VME item locks.mShows phantom locks.nReturns the output in a non-paginated form.Does not pause at page breaks.pDirects output results to the system printer.qShows spooler locks.sShows system locks.tShows txlog locks."
        ],
        "example":[
            "Example(s)",
            "Example 1",
            "This example shows lock entries displayed for the VME file bp, or the FSI files\n            bigdata,gps,gps or bigdata,rfid,rfid that are owned by any of the PIBs 3 7 12.",
            "list-locks -file bp bigdata,gps,gps bigdata,rfid,rfid -pib 3 7 12",
            "Example 2",
            "This example shows item locks displayed on the OSFI server referenced by the dm,hosts,\n            itemmyremoteserverthat are owned by PIB 33.",
            "list-locks -hostvme myremoteserver -pib 33",
            "Example 3",
            "This example shows item locks displayed on the OSFI server referenced by the dm,hosts,\n            itemmyremoteserverand on the FSI server with the network hostname\n            ofmybackupfsiserver.",
            "list-locks -hostfsi mybackupfsiserver -hostvme myremoteserver",
            "Example 4",
            "In this example, only the current item locks are shown.",
            "list-locks (iItem    Locks     PIB#   Lvl   Hash   item-ID               Filename\n 5834    (0016CA)  54     0     7E2C   21086                 orders \n 2746    (000ABA)  68     0     0D1F   roy\/month2            memos\n 183325  (02CC1D)  29     1     5DD7   3242                  entity\n 183197  (02CB9D)  22     2     7D9F   20946                 entity\n 184453  (02D085)  66     0     279F   73291176              entity\n 110819  (01B0E3)  42     0     084D   tcl.list-locks        d3.doc\n 110908  (01B13C)  3      0     3E36   data.representation   d3.doc\n 133899  (020B0B)  82     0     6C2C   monitor               status",
            "Example 5",
            "In this example, all locks are shown.",
            "list-locksSystem Locks\n    0    1    2    3    4    5    6    7    8    9    A    B    C    D    E    F\n 00 ###  ###  ###  ###  ###  ###  ###  ###  ###  ###  ###\n\n Basic Locks\n    0    1    2    3    4    5    6    7    8    9    A    B    C    D    E    F\n 00 ###  ###  ###  ###  ###  ###  ###  ###  ###  ###  ###  ###  ###  ###  ###  ###\n Spooler Locks\n    mq    iq    fq    peq   msp\n 00 ###   ###   ###   ###   ###\n\n Txlog Locks\n\u00a0\n    fof   pro   con\n 00 ###   ###   ###\n\n Phantom Locks\n    rel   job   pib   que   plk\n 00 ###   ###   ###   ###   ###\n\n Group Locks               PIB#   Lvl   Type   Filename\n 442384     (06C00F)       13     1     Upd    xsym\n\n Item Locks                PIB#   Lvl   Hash       item-ID   Filename\n 123034     (01E09A)       23     1     54B898A5   wm        email\n 79174      (013546)       57     0     9472A038   hv        tcl-stack\n\n FSI Filename              PIB#   Lvl   Type       item-ID   Token\n DM,basicprogram,ba        3      0     VME        newfile \u00a0\u00a0\u00a079309092\n :"
        ]
    },
    {
        "name":"list-logoffs command",
        "Syntax":[
            "Syntax",
            "list-logoffs {(options}\n"
        ],
        "description":[
            "The list-logoffs BASIC program produces a report showing the history of logoffs recorded in the dm,errors, file, along with who logged off and the status of the logged off port."
        ],
        "parameter":[
            "Parameter(s)",
            "optionsnAffects output to the terminal only, preventing output from\npausing at the end of each (terminal) page of output.pDirects output to the system printer, via the spooler.",
            "The report includes these headings:",
            "logoff userPort number, user-ID, and account name of the user that logged\noff the other port. Also, displays the date and time the user logged\noff the other port.logged off linePort number, user-ID, and account name of the user that was\nlogged off.errorsCurrent workspace condition of the port (user) that was logged\noff. There can be more than one error condition, which may include:no errors, pbufbeg fid bad, lcl glk tbl bad, fopen table bad, basic\nws bad, ibbeg fid bad, ovf stack bad, sws bad, fid bad, db table bad,\ndcb bad, scb bad, pcb bad, pcb links bad, pcb bad fid, child.pcb err.typeType of logoff command performed:Normal logoffReinitializedDid not respondlvlCurrent push-level of the port that was logged off."
        ],
        "example":[
            "Example(s)",
            "list-logoffslogoff user      logged off line   errors          type           lvl\n==============   ===============   ============    =============  ===\n50 danny ba      79 jane ba        basic ws bad    normal logoff  0\n2\/19\/03 22:51\n50 danny ba      61 joe qa         basic ws bad    normal logoff  0\n02\/19\/03 22:50\n50 danny ba      41 jon ba         basic ws bad    normal logoff  0\n02\/19\/03 22:50\n50 danny ba      36 rhb ba         glk tbl bad     normal logoff  0\n03\/19\/03 22:50\n57 sm ba         84 ch ba          child.pcb.err   reinitialized  0\n02\/19\/03 15:37                     ovf stack bad\n6 rob ba2        47 rob ba2        basic ws bad    normal logoff  0\n02\/19\/03 12:40"
        ]
    },
    {
        "name":"list-macros macro",
        "Syntax":[
            "Syntax",
            "list-macros {md|md.pathname} {(options}\n"
        ],
        "description":[
            "The list-macros macro produces a sorted report of all items defined as macros in the specified account name or your local MD (if md is specified)."
        ],
        "parameter":[
            "Parameter(s)",
            "md|md.pathnameSpecifies the path name for the master dictionary from which\nto list items that are defines as macros. If not specified, the default\nis the current MD.optionsnAffects output to the terminal only, preventing output from\npausing at the end of each (terminal) page of output.pDirects output to the system printer, via the spooler."
        ],
        "example":[

        ]
    },
    {
        "name":"list-menu command",
        "Syntax":[
            "Syntax",
            "list-menu file.name item.list*{(options}\n"
        ],
        "description":[
            "Description",
            "The list-menu command produces a documentation quality presentation format of menu(s).",
            "You must supply either an active list of menu items or an item list."
        ],
        "parameter":[
            "Parameter(s)",
            "optionsnAffects output to the terminal only, preventing output from\npausing at the end of each (terminal) page of output.pDirects output to the system printer, via the spooler."
        ],
        "example":[
            "Example(s)",
            "select md with a1 \"me\"[404] 3 items selected out of 1477 items.list-menu md (p"
        ]
    },
    {
        "name":"list-menus macro",
        "Syntax":[
            "Syntax",
            "list-menus md.name{(options}\n"
        ],
        "description":[
            "The list-menus macros produces a sorted listing of all items defined as menus in the specified master dictionary."
        ],
        "parameter":[
            "Parameter(s)",
            "optionsnAffects output to the terminal only, preventing output from\npausing at the end of each (terminal) page of output.pDirects output to the system printer, via the spooler."
        ],
        "example":[

        ]
    },
    {
        "name":"list-obj command",
        "Syntax":[
            "Syntax",
            "list-obj {file.reference}{(options}\n"
        ],
        "description":[
            "The list-obj BASIC program outputs descriptive internal information about programs compiled for BASIC and FlashBASIC.",
            "Without any options, the list-obj command outputs information on the bp file."
        ],
        "parameter":[
            "Parameter(s)",
            "optionseOutputs BASIC frame usage, FlashBASIC frame usage, total frame\nusage, beginning FID, and release version last compiled.pDirects output to the spooler.rIncludes runtime statistics in the output.",
            "The report includes these headings:",
            "dateLast compile datetimeLast compile timeframesTotal frame usageportPort number program was last compiled onuserUser name who last compiled programaccountAccount that user was logged onto when program was last compiled",
            "If theroption is specified, these\n    additional headings are included in the report:",
            "run dateThe last date the current pick object code was run.run timeThe last time the current pick object code was run.run countTotal number of times the current pick object code has run since being\n        compiled.",
            "Note:Subroutines running in FlashBasic mode are not stamped and will display as 12\/31\/67\n    00:00:00 0."
        ],
        "example":[
            "Example(s)",
            "list-obj bp (e",
            "Using theeoption, the report includes\nthese headings:",
            "pick.szNumber of frames of standard pick object code.flash.szNumber of frames of \u2019flashed\u2019 object code.framesTotal number of framesstart fidStarting frame numberreleaseRelease level in affect when the program was compiled."
        ]
    },
    {
        "name":"list-pibs macro",
        "Syntax":[
            "Syntax",
            "list-pibs {(options}\n"
        ],
        "description":[
            "The list-pibs macro produces a report of each active port in the dm,pibs, file, showing the port number, the current user of that port and the current terminal\/printer characteristics as defined by the term-type command."
        ],
        "parameter":[
            "Parameter(s)",
            "optionsnAffects output to the terminal only, preventing output from\npausing at the end of each (terminal) page of output.pDirects output to the system printer, via the spooler.",
            "The report includes these headings:",
            "pib#PIB or user\u2019s port number. The asterisk indicates the current\nport.userUser-ID (found in thedm,users,file)\nthat this user is currently logged on to.locationValue stored in the dm,users, item in thelocationattribute. This attribute typically contains the user\u2019s name.deviceSettings used in the most recently executedterm-typecommand for the terminal device this port is attached to."
        ],
        "example":[
            "Example(s)",
            "The port numbers that do not\nhave a user-ID or name are not currently in use.",
            "list-pibsPage 1    dm,pibs,    09:44:44         21 Feb 2005\npib#      user....    location....     device................\n0                                      79,25,0,7,1,8,80,59,IBM3151\n1                                      79,24,0,7,1,8,80,59,WY-50\n2         lisa        Lisa Jones       79,24,0,7,1,8,80,59,WY-50\n3                                      79,24,0,7,1,8,80,59,WY-50\n4                                      79,24,0,7,1,8,80,59,WY-50\n5                                      79,24,0,7,1,8,80,59,WY-50\n6                                      79,24,0,7,1,8,80,59,WY-50\n7                                      79,24,0,7,1,8,80,59,WY-50\n8         am          Andy Meyers      79,24,0,7,1,8,80,59,WY-50\n9         ss          Sam Smith        79,24,0,7,1,8,80,59,WY-50\n10        cm          Christine Mills  79,24,0,7,1,8,80,59,WY-50\n11                                     79,24,0,7,1,8,80,59,WY-50\n12                                     79,24,0,7,1,8,80,59,WY-50\n13                                     79,24,0,7,1,8,80,59,WY-50\n14                                     79,24,0,7,1,8,80,59,WY-50\n15                                     79,24,0,7,1,8,80,59,WY-50\n16        dp          Dick Parr        79,24,0,7,1,8,80,59,WY-50\n17                                     79,24,0,7,1,8,80,59,WY-50\n18        ff          Fred Foote       79,24,0,7,1,8,80,59,WY-50"
        ]
    },
    {
        "name":"list-resizing macro",
        "Syntax":[
            "Syntax",
            "list-resizing {(options}\n"
        ],
        "description":[
            "The list-resizing command lists the status of files currently being resized from the dm,resizing file."
        ],
        "parameter":[
            "Parameter(s)",
            "optionsnAffects output to the terminal only, preventing output from\npausing at the end of each (terminal) page of output.pDirects output to the system printer, via the spooler.",
            "The report includes these headings:",
            "accountAccount where file resides.filenameName of the file.pibResizing file processes, which are active at the moment and\nhave item locks held for the appropriate resizing item.currentCurrent relative group being rehashed.maxMaximum groups to rehash."
        ],
        "example":[
            "Example(s)",
            "Indicates that the mydata file\nin the dm account is currently being resized. The process is currently\nabout half way through rehashing the file because the current relative\ngroup is 50, which is about half of the required maximum, 101.",
            "list-resizingPage        1             dm,resizing,\naccount.    filename.     pib.    current.   max...\ndm          mydata        20      50         101"
        ]
    },
    {
        "name":"list-restore-errors command",
        "Syntax":[
            "Syntax",
            "list-restore-errors\n"
        ],
        "description":[
            "The list-restore-errors BASIC program displays errors recorded during restore."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"list-runaway-limit command",
        "Syntax":[
            "Syntax",
            " list-runaway-limit\n"
        ],
        "description":[
            "The list-runaway-limit command lists the overflow runaway settings for all pibs. This includes the current runaway limit and whether the set-runaway-autoquit feature is set to on or off."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "list-runaway-limitGlobal\n [110] Global system overflow runaway limit set to 7000 Frames\n [1363] Global system overflow runaway autoquit is off.\n Pib..    set-runaway-limit........    set-runaway-autoquit\n 1        limit of 7000 frames.        off\n 2        limit of 7000 frames.        off\n 256      limit of 7000 frames.        off\n 273      limit of 7000 frames.        off"
        ]
    },
    {
        "name":"list-runtime-errors macro",
        "Syntax":[
            "Syntax",
            "list-runtime-errors\n"
        ],
        "description":[
            "The list-runtime-errors macro produces a sorted report of error conditions logged into the dm,runtime-errors, file.",
            "For Windows: Not Supported"
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"list-system-errors macro",
        "Syntax":[
            "Syntax",
            "list-system-errors {(options}\n"
        ],
        "description":[
            "The list-system-errors macro produces a sorted report of error conditions logged into the dm,errors, file."
        ],
        "parameter":[
            "Parameter(s)",
            "optionsnAffects output to the terminal only, preventing output from\npausing at the end of each (terminal) page of output.pDirects output to the system printer, via the spooler.",
            "Since this is a standard macro, which executes the AQLsortcommand, any options available to sort may be passed\nthrough to be executed with the command.",
            "The most recently recorded\nerrors display first on the report."
        ],
        "example":[

        ]
    },
    {
        "name":"list-tandems command",
        "Syntax":[
            "Syntax",
            "list-tandems {(options}\n"
        ],
        "description":[
            "The list-tandems BASIC program lists the devices currently involved in a tandem association."
        ],
        "parameter":[
            "Parameter(s)",
            "optionspDirects output to the system printer, via the spooler."
        ],
        "example":[

        ]
    },
    {
        "name":"list-users command",
        "Syntax":[
            "Syntax",
            "list-users {user-ID} {(options}\n"
        ],
        "description":[
            "The list-users BASIC program produces a report of users currently logged on to the system."
        ],
        "parameter":[
            "Parameter(s)",
            "optionsnAffects output to the terminal only, preventing output from\npausing at the end of each (terminal) page of output.pDirects output to the system printer, via the spooler.",
            "The report is produced from thedm,pibs,file and includes:",
            "pib#Port number (*pib = current port)pidProcess ID numberuserUser-IDudateDate this user logged onutimeTime this user logged onacctAccount name currently in usemdateDate logged on to this accountmtimeTime logged on to this accountlocationLocation (usually the user name)"
        ],
        "example":[
            "Example(s)",
            "Shows all current users.",
            "list-userspib#   pid..   user.   udate   utime   account.   mdate   mtime   location...\n1      25102   dp      06\/04   10:28   dm         06\/04   10:28   Dick Parr\n*2     11884   ff      06\/04   6:49    krb        06\/04   13:48   Fred Stone\n4      7536    am      06\/04   13:19   ba         06\/04   13:20   Andy Meyers\n6      10354   sj      06\/04   8:21    ts         06\/04   8:22    Steve Johnson\n7      13666   ss      06\/04   10:28   qa         06\/04   10:29   Sam Smith\n10     26534   lisa    06\/04   16:02   ts         06\/04   16:02   Lisa Jones\n16     19992   bob     06\/04   14:30   qa         06\/04   14:30   Bob Bogus\n20     8615    cm      06\/04   10:14   krb        06\/04   15:45   Chris Mills",
            "Shows a specific user-ID.",
            "list-users bobpib#   pid..   user.   udate   utime   account.   mdate   mtime   location...\n37     20381   bob     07\/17   10:31   krb        07\/17   10:31   Bob Bogus\n*53    18348   bob     07\/17   9:35    krb        07\/17   9:36    Bob Bogus",
            "Shows all users whose user-ID begins with s.",
            "list-users s]pib#   pid..   user.   udate   utime   account.   mdate   mtime   location...\n6      40319   sj      06\/04   8:21    ts         06\/04   8:22    Steve Johnson\n7      39577   ss      06\/04   10:28   qa         06\/04   10:29   Sam Smith"
        ]
    },
    {
        "name":"listabs command",
        "Syntax":[
            "Syntax",
            "listabs {port.number{-port.number}} {options}\n"
        ],
        "description":[
            "The listabs command displays the current spooler assignment parameters for each process on the system."
        ],
        "parameter":[
            "Parameter(s)",
            "optionsnAffects output to the terminal only, preventing output from\npausing at the end of each (terminal) page of output.pDirects output to the system printer, via the spooler.",
            "If the port number, or the range of port numbers is specified,\nthe report is limited to the given ports."
        ],
        "example":[
            "Example(s)",
            "listabsdirects\nthe output to the spooler:",
            "listabs (pDirects output to the spooler.listabs 55     p     1     11     hp-lzriilistabs 3-12Line#   Status   Copies   Form#   Device\n3       p        1        3       hp-lzrii\n4       p        1        0       dp.lzr\n5       p        1        11      hp-lzrii\n6       hs       1        11      hp-lzrii\n7       p        1        11      hp-lzrii\n8       p        1        0       dp.lzr\n9       p        1        7       hp-lzrii",
            "where",
            "line#Port number of each process.statusCurrent output options.copiesCurrent number of copies.form#Current form queue.devicePrinter device name attached to the form queue."
        ]
    },
    {
        "name":"listacc command",
        "Syntax":[
            "Syntax",
            "listacc [{account.name}|{user-ID}]{legend-supp}{tcl-supp}{(options}\n"
        ],
        "description":[
            "The listacc BASIC program produces a report of system usage statistics from the dm,acc, file for all accounts, or for a specified account, or for a specific user-ID."
        ],
        "parameter":[
            "Parameter(s)",
            "optionsnAffects output to the terminal only, preventing output from\npausing at the end of each (terminal) page of output.pDirects output to the system printer, via the spooler.",
            "The report includes the following headings:",
            "accountsItem-ID column for the report. This contains the user-ID or\na PCB-FID address.mdAccount name to which the user logged. This value is acontrollingvalue for the remaining values in the right columns.pib#Line number the user logged on to.s-dateDate the user logged on.s-timeTime the user logged on.acct-timeTotal hours and seconds that this account was used.l-dateDate the user logged off.l-timeTime the user logged off.cpuAmount of CPU units used during this session. Units vary from\nsystem to system, but is generally measured in 1\/10th of a second.pagesNumber of pages of output sent to the spooler.",
            "Thelistacccommand refers to thedm,users,file to obtain the user-IDs. Each user should\nbe given their own user-ID to make each process unique."
        ],
        "example":[
            "Example(s)",
            "listacc \u2019bob\u2019page              1                           accounts    08:34:01   22 apr 1992\naccounts..  md..   pib#  s-date   s-time   acct-time   l-date  l-time   cpu.  pages\nbob         ref    0     04\/02    23:48    00:01:42    04\/02   23:50    497   0\n            ref    1     04\/02    23:50    10:52:17    04\/02   10:42    55    1222\n            ref    1     04\/02    04:48    00:07:54    04\/02   10:42    3339  0\n            ref    1     04\/02    04:40    00:02:08    04\/02   04:42    236   0\n            ref    1     04\/02    04:42    02:25:00    04\/02   04:42    172   3"
        ]
    },
    {
        "name":"listbi command",
        "Syntax":[
            "Syntax",
            "listbi {(options}\n"
        ],
        "description":[
            "The listbi command lists the built-in c functions in the item UNIX.builtin, c.builtin (MS-DOS) and user.builtin located in the dm,messages, file. These include any built-in c functions that have been added using the addbi command."
        ],
        "parameter":[
            "Parameter(s)",
            "optionspDirects output to the system printer via the spooler.sLists the system (predefined) functions only.uLists the user-defined functions only."
        ],
        "example":[
            "Example(s)",
            "listbiSystem Functions\nNum   Name        Num   Name        Num   Name\n62    ALARM       78    CALLOC      0     CHDIR\n1     CHMOD       2     CHOWN       3     CLOSE\n72    CPSTARTUP   4     CREAT       5     DUP\n7     FCLOSE      8     FDOPEN      11    FGETC\n12    FGETS       14    FOPEN       15    FPRINTF\n16    FPUTC       17    FPUTS       6     FREE\n18    FREOPEN     51    FSIZE       67    GETENV\n20    GETPGRP     19    GETPID      21    GETPPID\n22    IOCTL       23    KIL         24    LSEEK\n25    MALLOC      81    MEMCCPY     82    MEMCHR\n80    MEMCPY      83    MEMXCPY     56    OPEN\n27    PAUSE       65    PCLOSE      56    PGETPID\n28    PIPE        76    PLDMEMALLOC 79    PLDMEMFREE\n64    POPEN       9     PRINTF      79    PSTRALLOC\n68    PUTENV      13    RDHEX       29    READ\n30    SEMCTL      31    SEMGET      32    SEMOP\n33    SHMCTL      58    SHMDT       34    SHMGET\n10    SPRINTF     70    STRCAT      36    STRCPY\n69    STRLEN      63    STTY        75    UNLOAD\n49    USER0       50    USER1       37    WAIT\n59    WHEX        38    WRITE\nNo user function is currently defined."
        ]
    },
    {
        "name":"listc command",
        "Syntax":[
            "Syntax",
            "listc file.reference {select.list}{heading\"heading text\"}{(n}\n"
        ],
        "description":[
            "The listc BASIC program invokes the list-label BASIC program to produce a columnar display of the item-IDs in the specified file, in the order of appearance in the file."
        ],
        "parameter":[
            "Parameter(s)",
            "nNumber of columns - 4 default; 6 maximum.",
            "Any valid selection criteria can be passed through to AQL\nfor processing."
        ],
        "example":[
            "Example(s)",
            "listc md with a1 \"d]\"03                    Feb 2003       Items in File MD   Page 1\nd3.doc.platforms      d3.doc.files   d3.doc.release     HELP-FILE\nd3.doc.types          neat.stuff     d3.doc.processor   d3.md\nspool-file            dm.newac       d3.doc.status      pointer-file\nmsb                   dm.md          d3.doc.categories  doc.old\nphone.save            book           temp               d3.doc\nwsym                  bp             macros             ad.sup\nPCPROGS               doc            schedule\n[405] 27 items listed out of 1445 items."
        ]
    },
    {
        "name":"listconn command",
        "Syntax":[
            "Syntax",
            "listconn {file.reference} {(options}\n"
        ],
        "description":[
            "The listconn BASIC program produces a report of all items defined as connectives (also called modifiers) in the specified file reference.",
            "Any item in the master dictionary with the letter c as the first character in attribute\u00a01 is a connective. The items in the report are sorted by the value of attribute 1."
        ],
        "parameter":[
            "Parameter(s)",
            "optionsnAffects output to the terminal only, preventing output from\npausing at the end of each (terminal) page of output.pDirects output to the system printer, via the spooler."
        ],
        "example":[
            "Example(s)",
            "listconn22 Feb 2003   Connective Listings For DM\nkrb,,.......  A1..........................\nsecondary     c*\nfill          c+\nby-exp-dsnd   c-\nby-exp        c.\nby-dsnd       c\/\nby            c0\n&             c1\nand           c1\nwithin        c2\neach          c3\nevery         c3\nif            c4\nwith          c4\nifno          c4d\nwithout       c4d\nduplicate     c5\nonly          c5"
        ]
    },
    {
        "name":"listdict command",
        "Syntax":[
            "Syntax",
            "listdict {file.reference} {(options}\n"
        ],
        "description":[
            "The listdict BASIC program sorts the given file\u2019s dictionary items by attribute count and by item-id then produces a report showing the contents of the various ADIs."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "Produces a report of the ADIs\nin the master dictionary of the current account and directs the output\nto the terminal.",
            "listdict",
            "Produces a report from the dictionary of thed3.docfile and directs the output to the spooler.",
            "listdict d3.doc lptr"
        ]
    },
    {
        "name":"listfiles command",
        "Syntax":[
            "Syntax",
            "listfiles {file.reference} {(options}\n"
        ],
        "description":[
            "The listfiles BASIC program produces a report showing all file-defining items and synonym-defining items in an optionally specified file name or account name. The default file name is md."
        ],
        "parameter":[
            "Parameter(s)",
            "optionsnAffects output to the terminal only, preventing output from\npausing at the end of each (terminal) page of output.pDirects output to the system printer, via the spooler."
        ],
        "example":[
            "Example(s)",
            "Produces a report of all file-defining\nitems in the master dictionary of the current account and directs\nthe output to the terminal.",
            "listfiles",
            "This is similar to the previous example, but the output\nis directed to the spooler and thelegend-supp(koption) is invoked.",
            "listfiles (kp",
            "Produces a listing of all files in the dm account using\na file path name.",
            "listfiles dm,,"
        ]
    },
    {
        "name":"listpeqs command",
        "Syntax":[
            "Syntax",
            "listpeqs {options}\n"
        ],
        "description":[
            "The listpeqs command displays the status of all spooler controlled print job elements. The spooler account holds a file called peqs that is used to reference spooler jobs as normal D3 items and can be listed, sorted, and selected in any sequence."
        ],
        "parameter":[
            "Parameter(s)",
            "options\u2019user.ID\u2019Spooler entries are stored under the user-ID of the user who\ngenerated them. This displays the spooler entries created by the specified\nuser-ID. Single quotation marks are required around the user-ID.n{-m}Displays elementn, or elementsnthroughmthat are integer numbers.aOutputs the status of all jobs created by the current user.cOutputs only the count of spooled entries and total storage\n(frames) used.eOutputs print file absolute (disk) location. When this is\nin effect, the display has two additional columns of output:curposindicates the current frame and displacement\ninto that frame being printed.begfidis the first frame of the printfile.Both frame references are indicated as hexadecimal addresses.\nUnder the frames column next to this printfile, if a plus sign follows\nthe number, it is still being spooled; if a minus sign follows, it\nis despooling (printing).f{form.queue.number}Outputs status of jobs queued for output in form queue order\n(0 through 2048). The optionalform.queue.numberlimits display to the specified form queue.Note:This option does\nnot display hold files, as these are not assigned a form queue number.hOutputs hold files only.lDisplays status of deleted and active elements.pDirects output to system printer, via the spooler."
        ],
        "example":[
            "Example(s)",
            "listpeqs \u2019mlb\u2019\nlistpeqs \u2019jack\u2019 (n\nlistpeqs 13-22\nlistpeqs (e",
            "Thelistpeqscommand outputs a list\nof spooled entries. The following column headings display in the report:",
            "Job#Element (job) number assigned\nby the spooler.StatEncodedprint file status\n(seestatuscolumn heading below).LnkIn a linked form queue, this\nis thejob#of the next output job after this one.LinePort number that generated this\nqueue element.FrmsSize of the print file. A trailing\nplus sign indicates an increasing file, a trailing minus sign indicates\na decreasing file. A blank entry indicates a file build is being done,\nor no data has been spooled out. See optioneabove.CdspCurrent position of the despooling\nprocess.CurFidCurrent frame-ID being output\n(in hexadecimal)BegFidBeginning frame-ID of the start\nof the print file.StatusAssignment parameters on the\nprint file:aAvailable; may be edited, spooled or deleted.cClosed; spooling, job is ready to despool to device.gAlign; phantom alignment print jobhHold fileiImmediate outputlLockednNo closeoOutput is currently being generated by the user.pAssigned to printer output.rRequeued; has been edited\/spooled withsp-edit.sSpooled; linked to an output queue.tAssigned to tape output.xAborted; has been aborted bysp-kill.CopiesNumber of copies remaining to\nprint.FormAssigned output form queue.FramesNumber of frames in use by the\nprint file. If the word open displays here, the print file is still\nbeing spooled. If the print file was created with thec(stop) option, the number of frames used reflects the number of\nframes left to print when the print file was closed, instead of the\nactual number of frames used.DateDate the print file was added\nto the job queue.TimeTime the print file was added\nto the job queue.UserUser-ID of the user who created\nthe print file. Ifcharge-tois used, then the\ncharge-to account is also displayed."
        ]
    },
    {
        "name":"listprocs command",
        "Syntax":[
            "Syntax",
            "listprocs {account.name} {(options}\n"
        ],
        "description":[
            "The listprocs BASIC program produces a sorted report of all items defined as Procs in the specified file name. The default file name is md when none is specified."
        ],
        "parameter":[
            "Parameter(s)",
            "optionsnAffects output to the terminal only, preventing output from\npausing at the end of each (terminal) page of output.pDirects output to the system printer, via the spooler."
        ],
        "example":[
            "Example(s)",
            "listprocs (p",
            "listprocs dm,, leg-supp"
        ]
    },
    {
        "name":"listptr command",
        "Syntax":[
            "Syntax",
            "listptr {options}\n"
        ],
        "description":[
            "Description",
            "The listptr command displays the printer control block status for all printers.",
            "The listptr report contains this information:"
        ],
        "parameter":[
            "Parameter(s)",
            "optionsprinter.number{-printer.number}Specifies beginning printer number, or beginning through ending\nprinter numbers.bLists both allocated and unallocated printers. An unallocated\nprinter is a printergpiocb(general purpose input\/output control\nblock) with no printer assigned to it. (An empty table entry).nActivates thenopagefunction on output\nto terminal.pDirects output to the system printer, via the spooler."
        ],
        "example":[
            "Example(s)",
            "listptrPage   Dev or\nType    Number   Output   Queues   Skip   Line #   Status\nserial  0        0                 1      13       inactive\nserial  1        3        4        5      1        11         inactive\nserial  2        11       12              1        15         inactive\nserial  4        6        7               1        14         inactive\nserial  7        13                       1        99         active\nserial  8        1        98              0        74         inactive\nserial  9        99                0      19       stoppedlistptr 2-5bPage   Dev or\nType    Number   Output   Queues   Skip   Line #   Status\nserial  2        11       12       1      15       inactive\nserial  3        0        0        0      0        0          unallocated\nserial  4        6        7               1        14         inactive\nserial  5        0        0        0      0        0          unallocated"
        ]
    },
    {
        "name":"listverbs command",
        "Syntax":[
            "Syntax",
            "listverbs {account.name} {(options}\n"
        ],
        "description":[
            "The listverbs BASIC program produces a sorted listing of all items defined as command in the specified account name."
        ],
        "parameter":[
            "Parameter(s)",
            "optionsnAffects output to the terminal only, preventing output from\npausing at the end of each (terminal) page of output.pDirects output to the system printer, via the spooler."
        ],
        "example":[

        ]
    },
    {
        "name":"load.mon2 command",
        "Syntax":[
            "Syntax",
            "load.mon2\nsnap delay (10):number.seconds\n"
        ],
        "description":[
            "Description",
            "The load.mon2 BASIC program displays a graphical map of the duty load of the D3 system, taking a snapshot of the system at a given time interval.",
            "The information below displays:",
            "The report includes the following headings",
            "The vertical bar of asterisks and letters are the user-ID names, the accounts the ports are in. The asterisk fills out the vertical bar, up to the percentage of system resources consumed by this process."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "load.mon2snap delay (10):5"
        ]
    },
    {
        "name":"lock-beep command",
        "Syntax":[
            "Syntax",
            "lock-beep {(options}\n"
        ],
        "description":[
            "The lock-beep command enables\/disables beeping on lock failure."
        ],
        "parameter":[
            "Parameter(s)",
            "optionsfDisables beepingnEnables beeping",
            "By default, any lock failure causes repeated beeps to be\nemitted. To disable this feature on the current line, uselock-beep (f."
        ],
        "example":[

        ]
    },
    {
        "name":"lock-break command",
        "Syntax":[
            "Syntax",
            "lock-break {(options}\n"
        ],
        "description":[
            "The lock-break command enables or disables the ability to unconditionally break during a lock failure.",
            "By default, the user is allowed to break during a lock failure even if the break has been disabled by the user. This is to allow escape from deadlock situations.",
            "On communications lines, this can cause trouble since certain hardware can generate erroneous break signals. In this case, it is recommended to disable this function by doing lock-break (f."
        ],
        "parameter":[
            "Parameter(s)",
            "optionsnAllows breaking during lock failure.fDisallows breaking during lock failure.",
            "Warning:It is not advised that this feature\nbe disabled on user ports since this could lead to unrecoverable deadlock\nsituations."
        ],
        "example":[

        ]
    },
    {
        "name":"lock-frame command",
        "Syntax":[
            "Syntax",
            "lock-frame {.}fid\n"
        ],
        "description":[
            "Description",
            "The lock-frame command core locks a frame into real memory. This prevents the frame from being flushed to disk for any reason.",
            "The period optionally preceding the FID indicates that the FID is being referenced by its hexadecimal reference. Without the period, the reference is assumed to be decimal."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "lock-frame 1672[450] frame locked at: 59e0 (hex)"
        ]
    },
    {
        "name":"log-clear-file-off macro",
        "Syntax":[
            "Syntax",
            "log-clear-file-off\n"
        ],
        "description":[
            "The log-clear-file-off macro turns off the logging of the clear-file command."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"log-clear-file-on macro",
        "Syntax":[
            "Syntax",
            "log-clear-file-on\n"
        ],
        "description":[
            "The log-clear-file-on macro turns on the logging of the clear-file command."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"log-msg command",
        "Syntax":[
            "Syntax",
            "log-msg message\n"
        ],
        "description":[
            "Description",
            "The log-msg command records the time and date that a particular macro is executed.",
            "The log entry is placed into the dm,errors, file. This command is executed by the power-off process and can be used within a macro (for example, to note when the macro was executed)."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "log-msg application event\nsort errors by datePage 1      errors          07:31:34                      02 Feb 2003\nerrors....  date..  time..  r mode-addr......                  user    error...\n867553651   10\/01   14:54   Coldstart after abnormal shutdown  dm (0)  log-msg\n867625376   10\/02   07:02   Coldstart after normal shutdown    dm (0)  log-msg\n867626224   10\/02   07:17   application event                  dm (1)  log-msg\n[405] 3 items listed out of 3 items.",
            "The report includes the following headings:",
            "errorsSystem-generated job number (item-ID) for this item.dateDate that this error was logged.timeTime that this error was logged.rRegister address (0\u2014f), which triggered the error condition\n(for example, forward link zero, referencing illegal frame aborts,\nand so on.)mode-addrDescription of the error, or address of the program when it\ngenerated the error.user (pib)User-ID who was running the process along with the port number.errorProcess which caused this error message to be placed in the\nlog."
        ]
    },
    {
        "name":"log-status command",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "log-status[609] Transaction logger not started."
        ]
    },
    {
        "name":"logoff command",
        "Syntax":[
            "Syntax",
            "logoff {port.number}{(options}\n"
        ],
        "description":[
            "The logoff BASIC program terminates a process on a given port and sends the port to the logon prompt.",
            "The logoff process first attempts a normal log off by simulating a break and off sequence on the target port. If that times out, logoff escalates and forces the process into the debugger and simulates an off. If that fails, the target port is reinitialized, without attempting to clean up or recover its workspace.",
            "The phantom ports (that is, the scheduler, transaction logger, and those hung ports) may now be properly logged off.",
            "Process locks are released during a logoff and the tapes are detached. The errors file contains a history of logoffs."
        ],
        "parameter":[
            "Parameter(s)",
            "port.numberSpecifies the port number to\nbe set. If not specified, the port number is requested.optionse(Echo) Displays selected messages even if capturing is on.fAllows logging off the same port from two different lines simultaneously.kKills a shell if the process isshelled out.xKills the underlying UNIX pid or Windows thread.",
            "Warning:Logging off a port should be treated as a last resort. It should be used by a\n    system administrator only when the status of the PIB and potential problems that could arise\n    have been assessed."
        ],
        "example":[
            "Example(s)",
            "logoffline:677[534] logoff successful.",
            "logoff 677[534] logoff successful."
        ]
    },
    {
        "name":"logon command",
        "Syntax":[
            "Syntax",
            "logon {(p)}\nline,user-ID,user-password,md,md-password:\n"
        ],
        "description":[
            "The logon command logs on a port, other than the one currently being used, onto a specific account."
        ],
        "parameter":[
            "Parameter(s)",
            "pStarts process as a phantom line.Note:This does not have\nthe same meaning as what is often considered a phantom, where the\nprocess spawns a new process workspace. Rather, this option requires\nan existing unused port, just like any other port being used for a\nremote logon. In this context, phantom means that it is treated like\na spooler process. This means that the logon sequence is suppressed,\nwhich turns off the display of the time and date logged on, the welcome\nmessage and the automatic update of theaccfile.",
            "Note:After three unsuccessful logon attempts, the port is\nrenderedinactive, preventing further attempts. Toreactivatethe port, press any key (other than Enter), and then press ENTER\ntwice. Passwords are case-sensitive.",
            "The process prompts\nwith:",
            "line,user-ID,user-password,md,md-password:",
            "linePort number to log on. The portcannotalready be logged\non.user-IDUser-ID (must be indm,users,).user-passwordUser password (if defined).mdAccount name to log on to.Note:This prompt can be edited\nor customized using either the Editor or Update processor and can\nbe read from the master dictionary item, mdprompt. For example, if\nusing the Update processor, type:u only mds,, mdpromptmd-passwordAccount password (if defined).Note:This prompt can be edited\nor customized using either the Editor or Update processor and can\nbe read from the master dictionary item, mdpassword. For example,\nif using the Update processor, type:u only mds,, mdpassword",
            "This command is also useful for invokingbackgroundtasks on another port. Background orphantomtasks can also\nbe invoked using the phantom processor."
        ],
        "example":[
            "Example(s)",
            "Logs line 0 on to the user-ID\ndm with no user password, then on to the account dm, which also has\nno password.",
            "logonline,user-ID,user-password,md,md-password:0,dm,,dm"
        ]
    },
    {
        "name":"logon-lock command",
        "Syntax":[
            "Syntax",
            "logon-lock {({a}{f|n}{starting.port{-ending.port}}\n"
        ],
        "description":[
            "The logon-lock command turns on or off the logon lockout feature."
        ],
        "parameter":[
            "Parameter(s)",
            "aAffects all lines.fTurns logon lockout off.nTurns logon lockout on. This option is assumed if thefoption is not present.starting.port{-ending.port}Affects a range of ports. If not specified, then thelogon-lockcommand assumes the current port.",
            "CAUTION:",
            "Thesystem-coldstartmacro issues alogon-lock (fato turn off the\nlockout on all lines by default. Users wishing to enable lockout must\nmodify this so that it does not suppress this feature on desired lines.\nTurning the lock back on after releasing it is not recommended because\nthis may cause communications lines to desynchronize.",
            "When\nthe logon lockout is enabled, the logon system locks up after three\nfailed log on attempts. At this point, it is necessary to type (space)(return)(return)\nto continue. This feature is useful for synchronizing a port which\nis connected to a device, which might otherwise echo the log on message.",
            "With the logon lockout disabled, a .5 second delay occurs after\nthree failed log on attempts for security purposes, but log on may\nthen proceed normally."
        ],
        "example":[

        ]
    },
    {
        "name":"logon-reporting command",
        "Syntax":[
            "Syntax",
            "logon-reporting {(f|n}\n"
        ],
        "description":[
            "The logon-reporting command turns on or off the logon reporting feature which logs failed logon attempts to the errors file."
        ],
        "parameter":[
            "Parameter(s)",
            "nTurns logon reporting on.fTurns logon reporting off.",
            "CAUTION:",
            "Large quantities of failed logon attempts\nwill result in consumption of overflow space."
        ],
        "example":[

        ]
    },
    {
        "name":"logon-timeout command",
        "Syntax":[
            "Syntax",
            "logon-timeout {timeout} {options}\n"
        ],
        "description":[
            "The logon-timeout command updates and displays the global and local logon timeout values. The global timeout value is a default value for the D3 server and the local timeout value is used to override the global value on a specified process. By default, processes are initialized to use the global logon timeout value."
        ],
        "parameter":[
            "Parameter(s)",
            "timeoutSpecifies the timeout scheme\nto employ or disables thelogon-timeoutfeature.When a timeout value is specified, either the global or local timeout\nvalue is updated as follows:If the process mode is specified, the local timeout value\nassociated to the current process (if no process number is specified)\nor the specified process number is updated.If the Process Mode is not specified, the global timeout is\nupdated.When no timeout value is specified, the current logon timeout\nvalue displays as follows:If the Process Mode option is specified, the local timeout\nvalue associated to the current process (if no process number is specified)\nor the specified process number is displayed.If the Process Mode option is not specified or if the logon\ntimeout value for the process is set to zero (0), the global timeout\nvalue is displayed.offDisables the logon timeout (-1). When disabled, a telnet or\nCOM port process will wait at logon indefinitely and not disconnect.sysSets the logon timeout for the specified process back to the\ndefault (global) timeout value (0). This only applies when thel(Process Mode) option is specified.nSpecifies the amount of time (in deciseconds) that \u00a0telnet\nand COM port processes will wait before disconnecting while at logon\non a D3 server. The maximum value allowed in 32,767 deciseconds (or\n54 minutes, 36 seconds).optionsOptions are as follows:lProcess Mode. Displays or updates the timeout value associated\nto the current process (if no process number is specified) or the\nspecified process number.If this mode is not specified, then operations\nare performed on the global logon timeout value. In this case, any\nprocess number specified will be disregarded.qQuiet Mode. Warning messages will not display when setting\na timeout value.nProcess Number. Specifies the process number on which the\ndisplay or update operation will be performed (Process Mode Only)."
        ],
        "example":[

        ]
    },
    {
        "name":"logto command",
        "Syntax":[
            "Syntax",
            " logto account.name{,password} {(options}\n"
        ],
        "description":[
            "Description",
            "The logto command terminates accounting on the current account, and   then moves to another specified account. If a password is present, it must be provided. Passwords   are case-sensitive.",
            "If the password is omitted and required, the system prompts for it.",
            "Those pushed levels are still running the programs they were originally running;               however, they are now in a new account.",
            "Any tape or magnetic media devices attached to the process when logging to another account         at another level remain attached in the new account."
        ],
        "parameter":[
            "Parameter(s)",
            "optionsfCombines the k, m, and s options.kUpdates the parent level MD.mSuppresses the running of the account macro.sSuppresses the [340] connect message."
        ],
        "example":[
            "Example(s)",
            "Example 1",
            "logto dm<Connect time= 217 mins.; CPU= 46 units; LPTR pages= 0>",
            "Example 2",
            "logto dm,mypassword<Connect time= 217 mins.; CPU= 46 units; LPTR pages= 0>",
            "Example 3",
            "This example demonstrates the behavior of the(foption or(koption from TCL. It assumes you begin in the dm account and have\n        another account called f01.",
            ":who\n 1 dm dm\n :who\n ::who\n :::who\n ::::who\n :::::who\n ::::::who\n 1 dm dm\n ::::::logto f01 (f\n ::::::who\n 1 dm f01\n ::::::\n\n :::::who\n 1 dm f01\n :::::\n \n ::::who\n 1 dm dm\n ::::\n \n :::who\n 1 dm dm\n :::\n \n ::who\n 1 dm dm\n ::\n \n :who\n 1 dm dm",
            "Example 4",
            "This example demonstrates the behavior of the(foption or(koption from BASIC. It assumes you begin in the dm account and have\n        another account called f01.",
            "The program is called p01.",
            "a = system(16)\n  execute \"who\" capturing b\n  crt a : \": \" : b\n  if ( a = 5 ) then execute \"logto f01 (f\" capturing c else execute \"p01\"\n  execute \"who\" capturing b\n  crt a : \": \" : b\n\n  :who\n  1 dm dm\n  :p01\n  0: 1 dm dm\n  1: 1 dm dm\n  2: 1 dm dm\n  3: 1 dm dm\n  4: 1 dm dm\n  5: 1 dm dm\n  5: 1 dm f01\n  4: 1 dm f01\n  3: 1 dm f01\n  2: 1 dm f01\n  1: 1 dm f01\n  0: 1 dm f01"
        ]
    },
    {
        "name":"loop command",
        "Syntax":[
            "Syntax",
            "loop {loop.count} {\\sleep.count\\} tcl.commands\n"
        ],
        "description":[
            "The loop BASIC program performs any TCL command a specific number of times, or continuously, until any key is pressed on the keyboard."
        ],
        "parameter":[
            "Parameter(s)",
            "loop.countIndicates the number of times to execute the command. If the\nloop count is omitted, the loop is infinite. To stop the loop, press\nany key on the keyboard.sleep.countIndicates the number of seconds for the process tosleepbetween each command execution. If the sleep count is not specified,\nthe command repeats immediately."
        ],
        "example":[
            "Example(s)",
            "Executes theovfcommand three times, sleeping 10 seconds between each execution.",
            "loop 3 \\5\\ ovfovf\noverflow:   34860   reserve:   1024   blocks:   7   b-tree levels:   1   leaves:   1\novf\noverflow:   34924   reserve:   1024   blocks:   34  b-tree levels:   1   leaves:   1\novf\noverflow:   34909   reserve:   1024   blocks:   17  b-tree levels:   1   leaves:   1"
        ]
    },
    {
        "name":"M",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"maxusers command",
        "Syntax":[
            "Syntax",
            "maxusers {(options}\n"
        ],
        "description":[
            "Description",
            "The maxusers command displays the number of licensed D3 users on the system, and\/or sets the system in single or multiuser mode.",
            "The maxusers command can accept the a and o option of the where command and execute a where.",
            "The single-user mode is defined as the state where only the process that executes the command     remains on the system.",
            "On Unix platforms, line 0 is allowed on even if the system is in single user mode.",
            "All other ports are optionally logged off before entering the single-user mode, after sending two warning messages, separated by an optional grace delay.",
            "A message is logged in the errors file when entering single-user or multiuser mode. Additionally, if a user attempts to logon after the maximum allowed users limit has been reached, an error message is logged to the errors file."
        ],
        "parameter":[
            "Parameter(s)",
            "optionsaInvokes thewherecommand with theaoption.cIndicates compatibility output, which produces the original style of output. Also displays\n        the number of weeks remaining on temporary activations (for UNIX 7.4 or above and Windows\n        7.5 and above).delayInteger number that defines thegraceperiod delay\nin seconds before logging users off when entering single-user mode.\nThe default is five seconds.eDisplays entire pool list.fLogs off users currently logged on before entering single-user mode. A warning message is\n        broadcast unless thewoption is also specified. Unless theuoption is specified, a prompt will be presented on the line issuing the\n        command for each line currently logged on before logging it off. The available responses\n          are:y: Yes. Logoff the line.n: No. Do not\n         logoff the line. Move onto the next line.i: Information. Show awho,where, and if applicable, annt_pinfofor the line and then re-prompt.q:\n         Quit. The system is returned to multiuser mode.lSuppresses the message log in the system-errors file when\nchanging the mode.mSets multiuser mode. The number of allowed users is set to\nthe maximum number of user licenses allowed by the pool.m###For UNIX:Sets the maximum number of licenses used\nin a given VME or allows even distribution across multiple VMEs. The\nsystem does not remember to what the ceiling was last set. Therefore,\nwhen switching from single-user mode back to multiuser mode, if no\nceiling is specified, then it will set it at the maximum.For\nWindows:Not SupportedoInvokes thewherecommand with theaandooptions. (User must set theaoption). For example:maxusers (aopPrints the results.qQuiet mode suppresses all output to the terminal.rSets single-user mode and stops all new RPC clients from connecting\nto D3.sSets single-user mode.uUnconditionally logs off users currently logged on when entering\nsingle-user mode (valid only with thefoption).wSuppress the broadcast of the warning message indicating that the system is going to\n        single-user mode.zInvokes thewherecommand with theaandzoptions. (User must set theaoption). For example:maxusers (az"
        ],
        "example":[

        ]
    },
    {
        "name":"mirror command",
        "Syntax":[
            "Syntax",
            "mirror port.number{,port.number...} {(options}\nmirror port.number{-port.number...} {(options}\n"
        ],
        "description":[
            "The mirror BASIC program attaches the current process (the master) to one or more slave processes. All characters input or output to or from the master process display on each slave process."
        ],
        "parameter":[
            "Parameter(s)",
            "optionsdDesignates the sequence of characters to terminateconversemode. Each character is provided in its hexadecimal equivalent of\nits ASCII value. Each character is separated by a comma. For example,\nd\/41,42,43,44 indicates that an \"ABCD\" disconnects the link.xTerminates mirror mode on the target device number.",
            "The process, which initiates themirrorcommand, is the master. The process being attached is the slave\nortarget.",
            "The target slave device (the device that is\nbeing linked to the current device) must be available on the given\nport number. It may not be already attached to another process.",
            "Multiple slave terminals can be designated and must be indicated\nin ascending order.",
            "The master process may add additional slaves\nwithout terminating existing slaves.",
            "A hot key sequence disconnects\nthe link. The default hot key sequence is Esc, x. If anesc-datahas not been issued previously, the process issues it automatically,\nso that the process is not locked out from being able to suspend themirror.",
            "Either the master or slave can terminatemirrorwith the hot key sequence. If a slave terminates,\nonly that particular process is taken out of the mirror mode. If there\nare other slave processes still active, they are not affected. If\nthe master process terminates, all slaves are disconnected.",
            "For UNIX:If the D3 process is not connected to the virtual\nmachine, thenmirroris not allowed, even if thewherecommand with azoption shows the\nport as being available.",
            "For Windows:Supports themirrorcommand when the D3 process is connected to the\nvirtual machine and when it is not connected."
        ],
        "example":[
            "Example(s)",
            "Attaches terminals on ports 2,\n13, and 32 to the current process.",
            "mirror 2,13,32",
            "Attaches port 2 and ports 5 through 10.",
            "mirror 2,5-10",
            "Attaches port 3 and sets the hot key sequence to +++.",
            "mirror 3 (d\/2b,2b,2b",
            "Terminates mirror mode on port 42.",
            "mirror 42 (x",
            "Attaches ports 1 through 20 to the current port.",
            "mirror 1-20"
        ]
    },
    {
        "name":"mlist command",
        "Syntax":[
            "Syntax",
            "mlist file.reference itemlist* {(options)}\n"
        ],
        "description":[
            "The mlist command produces formatted assembly source code listing of the specified item list."
        ],
        "parameter":[
            "Parameter(s)",
            "line.number{-line.number}Specifies (source) line number,\nor range of line numbers to list.optionsThe following options are supported:eOutputs error lines only.mOutputs macro expansions.nActivates thenopagefunction on output\nto the terminal.pDirects output to system printer via the spooler.sSuppresses object code display.zInhibits entry into editor when used with theeoption."
        ],
        "example":[

        ]
    },
    {
        "name":"mload command",
        "Syntax":[
            "Syntax",
            " mload file.reference itemlist* {(options)}\n"
        ],
        "description":[
            "The mload command loads the assembled object code into the virtual memory address defined in the routine.",
            "For Windows: Not Supported"
        ],
        "parameter":[
            "Parameter(s)",
            "optionsnReturns the item checksum data without actually loading the\nitem.vVerifies mismatches and errors only."
        ],
        "example":[
            "Example(s)",
            "Command:",
            "mload user_modes",
            "After entering the previous command, you will see the following prompt where you can specify\n    where to load the assembled object code into the virtual memory address defined in the\n    routine:",
            "to abs file ("
        ]
    },
    {
        "name":"modem-off macro",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"modem-on macro",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"monitor-status command",
        "Syntax":[
            "Syntax",
            "monitor-status {(options}\n"
        ],
        "description":[
            "The monitor-status BASIC program produces a snapshot listing of information related to memory-resident frames.",
            "For Windows: Not Supported"
        ],
        "parameter":[
            "Parameter(s)",
            "optionsnActivates thenopausefunction on output\nto the terminal.pDirects output to the system printer via the spooler."
        ],
        "example":[
            "Example(s)",
            "monitor-statusMonitor Statistics\n==================\nprocess activations             : 0\nIdle time                       : 0\n# of frame faults               : 33\n# of writes                     : 106\nFailed buffer search            : 0\nRead queue full events          : 0\nWrite queue full                : 0\nDisk errors                     : 0\n\nBuffer Table Information\n========================\nframes with  0   regs attached  : 8,064\nframes with  1   regs attached  : 364\nframes with  2   regs attached  : 156\nframes with  >=3 regs attached  : 158\nWrite required                  : 1,251\nRead queued                     : 0\nMemory locked                   : 1,588\nFrame referenced                : 5,645\nWrite queued                    : 0\nTop of hash                     : 7,142"
        ]
    },
    {
        "name":"mono command",
        "Syntax":[
            "Syntax",
            "mono {\/switch}\n"
        ],
        "description":[
            "The mono BASIC program switches output to a monochrome display from a color display, or sets the visual attributes of the monitor.",
            "On a system with both a color and monochrome display monitor, the mono command switches output from the color monitor to the monochrome display."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"mount-cd command",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"move-file command",
        "Syntax":[
            "Syntax",
            "move-file file.reference {file.name}\nto: (file.reference {file.name}\n",
            "(dict.name\n",
            "(dict.name file.name\n",
            "file.name\n"
        ],
        "description":[
            "The move-file BASIC program moves a file descriptor from one master dictionary to another. The dictionary may be file-level, account-level (master dictionary), or system-level (master dictionaries or system).",
            "This implementation allows moving data from FSI files to FSI files and from VME files to VME files."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "Changes the name of the data-level\nD-pointer for thebpfile to another item in\nthe dictionary ofbpcalled old.bp. The old.bp\nwould subsequently be available using the reference bp,old.bp. This\nalso removes the default D-pointer to thebpfile,\nand any reference to thebpdata section would\nresult in the messagedata level descriptor missing.",
            "move-file dict bp bpto:old.bp",
            "Changes thebpfile toold.bp.",
            "move-file md bpto:old.bp",
            "Note:This doesnotchange the name of the data file\nwithin the dictionary ofbp.",
            "Moves\nthebpfile from the current account to the archive\naccount master dictionary.",
            "move-file md bpto:(archive,,",
            "Moves the data portion of thebpfile\nfrom the current account to the account called archive, to a dictionary\ncalled bp, and renames it bp.old.",
            "move-file dict bp bpto:(dict archive,bp,old.bp,",
            "Renames the account pa to pete.",
            "move-file mds,, pato:pete",
            "Note:Therename-filecommand doesnotwork at the master dictionary\u2019s system level."
        ]
    },
    {
        "name":"mul command",
        "Syntax":[
            "Syntax",
            "mul integer.number integer.number\n"
        ],
        "description":[
            "The mul command multiplies the first integer number provided by the second integer number provided and displays the result as an integer number."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"mulx command",
        "Syntax":[
            "Syntax",
            "mulx hex.number hex.number\n"
        ],
        "description":[
            "The mulx command multiplies the first hexadecimal number provided by the second hexadecimal number provided and displays the result as a hexadecimal number."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "mulx 8 1CE0"
        ]
    },
    {
        "name":"mverify command",
        "Syntax":[
            "Syntax",
            "mverify file.reference itemlist* {(options)}\n"
        ],
        "description":[
            "The mverify BASIC program compares the assembled object code in virtual memory against the corresponding  itemlist in specified file name. Any frames with mismatches are reported.",
            "For Windows: Not Supported"
        ],
        "parameter":[
            "Parameter(s)",
            "optionsaOutputs columnar listing of all mismatches.eOutputs errors only.pDirects output to the system printer via the spooler."
        ],
        "example":[

        ]
    },
    {
        "name":"N",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"net-errors command",
        "Syntax":[
            "Syntax",
            "net-errors {(options)}\n"
        ],
        "description":[
            "The net-errors BASIC program sets or displays error handling behavior when accessing remote files.",
            "With no options, the current error handling behavior displays with these options:",
            "If options are specified, then the error handling behavior is changed and then redisplays.",
            "This command affects the current line only unless specified with the g option.     The local settings have precedence over the global settings.",
            "The only way to revert from local to global settings is to set the global values. This can be     done by either logging off and back on, or by setting the global values. Caution must be used     with the latter because it affects all users using the global options (those that have not made     local settings). In the latter case, consider checking the existing global options using      net-errors (g and then setting them to the same values shown using      net-errors (g <options>."
        ],
        "parameter":[
            "Parameter(s)",
            "optionscClears all error handling options.gSets the options specified with thenet-errorscommand globally for all\n        lines. If no other options are specified, displays the global default options.lEnables error logging.nEnables user notification.iEnables notification and intervention on all errors.sSuppresses the option display.",
            "Warning:The selection of any option clears all other options. As such, it is necessary\n    to specify all desired options when changing the behavior.net-errorsprocesses the given options in the order specified. For example,net-errors\n     (lcnwill enable logging, then clear all settings (including the logging that was just\n    enabled), and then finally enable notifications."
        ],
        "example":[
            "Example(s)",
            "net-errorsRemote Error Logging\non\nRemote Error Notification\non\nRemote Error Intervention\non",
            "net-errors (iRemote Error Logging       off\nRemote Error Notification  on\nRemote Error Intervention  on",
            "net-errors (nRemote Error Logging       off\nRemote Error Notification  on\nRemote Error Intervention  off",
            "net-errors (cRemote Error Logging       off\nRemote Error Notification  off\nRemote Error Intervention  off",
            "net-errors (lRemote Error Logging       on\nRemote Error Notification  off\nRemote Error Intervention  off"
        ]
    },
    {
        "name":"net-status macro",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"network-setup utility",
        "Syntax":[
            "Syntax",
            "network-setup {{command}} {(options}\n"
        ],
        "description":[
            "The network-setup utility allows the setup and control of a D3   network. If no arguments are supplied, a menu opens. This is the normal form of   operation."
        ],
        "parameter":[
            "Parameter(s)",
            "optionsq(Quiet) Suppresses all messages. Valid only for non-menu operations."
        ],
        "example":[

        ]
    },
    {
        "name":"network-status command",
        "Syntax":[
            "Syntax",
            "network-status [*|ports] {(options}\n"
        ],
        "description":[
            "The network-status BASIC program displays remote files opened by a line."
        ],
        "parameter":[
            "Parameter(s)",
            "optionsaDisplays all file descriptors in the workspace, even closed\nones.fFind item locksiDisplay Client locksrDisplays information for all drivers (default is TCP\/IP only).sDisplay Server locksvDisplays internal fields\u2014output can change between releases.",
            "You can specify one line number, a list of line numbers,\na range of line numbers, or all line numbers. For example:",
            "n,mDisplays information for linenand linem.n-mDisplays information for linesnthroughm, inclusive.n,m-oDisplays information for linesnandmthrougho, inclusive.*Displays information for all lines."
        ],
        "example":[

        ]
    },
    {
        "name":"nframe-index command",
        "Syntax":[
            "Syntax",
            "nframe-index file.reference a.code\nnframe-index file.reference*\n"
        ],
        "description":[
            "The nframe-index command produces a total of the number of frames in use by a specific B-tree index, or all indexes if indicated by an asterisk."
        ],
        "parameter":[
            "Parameter(s)",
            "a.codeSpecifies theaprocessing code to be used\nin forming the keys to the index. The processing code must include\nan attribute number.*Designatesallindexes.Note:Either anaprocessing code or an*mustbe specified."
        ],
        "example":[
            "Example(s)",
            "This indicates that 67 frames\nare in use by the index which defines attribute one of the invoices\nfile.",
            "nframe-index invoices a1Total of 67 frames counted.",
            "nframe-index invoices *"
        ]
    },
    {
        "name":"ntlfs macro",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"nt_cinfo command",
        "Syntax":[
            "Syntax",
            "nt_cinfo <dll number> {*}\n"
        ],
        "description":[
            "Description",
            "The nt_cinfo command obtains information about loaded C DLLs.",
            "The nt_cinfo command displays the DLL number, the DLL name, and the handle to the DLL.",
            "If a DLL number is specified, only the information for the specified DLL displays. If no DLL number is specified, or if an asterisk (*) is entered, information for all DLLs\u00a0display."
        ],
        "parameter":[
            "Parameter(s)",
            "dll numberSpecific DLL number.*Specifies all DLLs."
        ],
        "example":[
            "Example(s)",
            "nt_cinfoDLL   Name                   Handle\n---   --------------------   ------\n1     reserved               -\n2     (null)\n3     (null)\n4     (null)\n5     (null)\n6     (null)\n7     (null)\n8     (null)\n9     (null)\n10    (null)\n11    (null)\n12    (null)\n13    (null)\n14    D3MQSeries.dll         OBF80000\n15    (null)"
        ]
    },
    {
        "name":"nt_cload command",
        "Syntax":[
            "Syntax",
            "nt_cload <dll number> <dllName>\n"
        ],
        "description":[
            "The nt_cload command loads a C DLL."
        ],
        "parameter":[
            "Parameter(s)",
            "dll numberDLL number.dllNameDLL name."
        ],
        "example":[

        ]
    },
    {
        "name":"nt_cunload command",
        "Syntax":[
            "Syntax",
            "nt_cunload <dll number> {(options}\n"
        ],
        "description":[
            "The nt_cunload command unloads a C DLL."
        ],
        "parameter":[
            "Parameter(s)",
            "dll numberDLL number.optionszForces the unload even if an error occurs."
        ],
        "example":[

        ]
    },
    {
        "name":"nt_dllinfo command",
        "Syntax":[
            "Syntax",
            "nt_dllinfo\n"
        ],
        "description":[
            "The nt_dllinfo command obtains information about loaded DLLs."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "nt_dllinfoDll   Name          Handle      Address\n---   ------------  ----------  --------\n1     d3core        02cd0000    02f36024\n2     d3file        02f70000    0314a024\n3     d3pproc\n4     d3access      03e70000    03f83014\n5     d3compil      023e0000    0243f014\n6     d3id          021f0000    023cc014\n7     d3update      03c00000    03d5a024\n8     d3misc\n9     d3basic       01ff0000    0219e024\n10    d3basdeb      021b0000    021e7014\n11    d3sysdeb      09790000    09800014\n12    d3op\n13    d3tape        03930000    03a62024\n14    d3runoff\n15    d3spool       040d0000    0414f024\n16    d3editor      0a490000    0a4b3014\n17    d3conv        03160000    03260024\n18    d3data        01fe0000\n19    (null)\n20    (null)\n21    (null)\n22    (null)\n23    (null)"
        ]
    },
    {
        "name":"nt_dllload command",
        "Syntax":[
            "Syntax",
            "nt_dllload <dll number> <dllName>\n"
        ],
        "description":[
            "The nt_dllload command loads a DLL."
        ],
        "parameter":[
            "Parameter(s)",
            "dll numberDLL number.dllNameDLL name."
        ],
        "example":[

        ]
    },
    {
        "name":"nt_dllunload command",
        "Syntax":[
            "Syntax",
            "nt_dllunload dll number{(options}\n"
        ],
        "description":[
            "The nt_dllunload command unloads a DLL."
        ],
        "parameter":[
            "Parameter(s)",
            "dll numberDLL number.optionszForces the unload even if an error occurs."
        ],
        "example":[

        ]
    },
    {
        "name":"nt_eventlog command",
        "Syntax":[
            "Syntax",
            "nt_eventlog {?}{n} {(options}\n"
        ],
        "description":[
            "The nt_eventlog command displays or clears the Windows application or system event log."
        ],
        "parameter":[
            "Parameter(s)",
            "?Displays a help screen.nSpecifies the number of log records\nto display. For example,nt_eventlog 10 (adisplays\nonly return the first 10 records.optionssDisplays the system event log.cClears the application log.csClears the system log."
        ],
        "example":[
            "Example(s)"
        ]
    },
    {
        "name":"nt_file-info command",
        "Syntax":[
            "Syntax",
            "nt_file-info {dict} file.spec\n"
        ],
        "description":[
            "The nt_file-info command displays file information for a specified file."
        ],
        "parameter":[
            "Parameter(s)",
            "dictDictionary name.file.specName of file.",
            "This information displays:",
            "File NumberInternal numeric identifier for the file.ModuloCurrent modulo of the file.ServerComputer name where the file is located."
        ],
        "example":[

        ]
    },
    {
        "name":"nt_getfsiaccount command",
        "Syntax":[
            "Syntax",
            "nt_getfsiaccount {pib.no}\n"
        ],
        "description":[
            "The nt_getfsiaccount command in the DM account, returns the current FSI account getting logged onto."
        ],
        "parameter":[
            "Parameter(s)",
            "pib.noIf the pib number is not specified, the system defaults to\nthe current pib."
        ],
        "example":[

        ]
    },
    {
        "name":"nt_heapwalk command",
        "Syntax":[
            "Syntax",
            "nt_heapwalk {pib.no} {(options\n"
        ],
        "description":[
            "The nt_heapwalk command in the DM account, will walk the \u2019heap\u2019 of the given line and display the results in a human readable form. If the entire \u2019heap\u2019 cannot fit into the buffer, then a message is displayed. This will indicate there is possibly memory fragmentation."
        ],
        "parameter":[
            "Parameter(s)",
            "pib.noIf the pib number is not specified,\nthe system defaults to the current pib.optionsnNo paginationpSend output to the printer"
        ],
        "example":[

        ]
    },
    {
        "name":"nt_inv-flash command",
        "Syntax":[
            "Syntax",
            " nt_inv-flash file.reference item.name{(options}\n"
        ],
        "description":[
            "The nt_inv-flash command tags the flashed program object in the cache   as old. The next time the program is loaded, the latest version will be stored in the   cache."
        ],
        "parameter":[
            "Parameter(s)",
            "optionsqSuppresses all terminal output."
        ],
        "example":[
            "Example(s)",
            "nt_inv-flash bp testprogram"
        ]
    },
    {
        "name":"nt_iotrace command",
        "Syntax":[
            "Syntax",
            "nt_iotrace pib{(options}\n"
        ],
        "description":[
            "The nt_iotrace command captures the i\/o activity for a process id."
        ],
        "parameter":[
            "Parameter(s)",
            "pibpib number.optionsbBinary TracedDecimal TracehHexadecimal DataiTrace inputoTrace outputtStart trace (default)Note:Not compatible withxoption.xStop traceNote:Not compatible withtoption.",
            "Note:There must be at least andiorooption."
        ],
        "example":[

        ]
    },
    {
        "name":"nt_listclients command",
        "Syntax":[
            "Syntax",
            "nt_listclients\n"
        ],
        "description":[
            "Description",
            "The nt_listclients command lists the active clients on the   system.",
            "The nt_listclients command displays this information:"
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            ":nt_listclientsMachine         Client-id (Type)     # Obj    PIB# \n =================================================== \n billsmith       A0000C98 (User)      0        1 \n 74.217.65.16    A0000498 (User)      0        2"
        ]
    },
    {
        "name":"nt_list-ilocks command",
        "Syntax":[
            "Syntax",
            " nt_list-ilocks {-options} {(options}"
        ],
        "description":[
            "The nt_list-ilocks command generates a report of the FSI item locks   that are currently set. "
        ],
        "parameter":[
            "Parameter(s)",
            "hostfsi <host>Shows locks on given FSI host.If -hostfsi is not\n         specified, then the host will default to the value in fsi:mds,, ComputerName attribute\n         1.optionscomputerIncludes the computer name in the report.timeIncludes the date and time the item lock was set.fileUses the full path of one or more files to return the item locks held on those\n        particular files.pibUses one or more PIB numbers to return the item locks held by those particular PIB\n        numbers.helpDisplays abbreviated TCL help."
        ],
        "example":[
            "Example(s)",
            "When using filters, only lock entries satisfying at least one value for each filter will be\n    included in the report.",
            "Only lock entries for the filesbigdata,gps,gpsorbigdata,rfid,rfidthat are owned by any of the PIB numbers 3, 7, or 12\n    will be included.",
            "nt_list-ilocks -file bigdata,gps,gps bigdata,rfid,rfid -pib 3 7 12"
        ]
    },
    {
        "name":"nt_list-jobs command",
        "Syntax":[
            "Syntax",
            "nt_list-jobs\n"
        ],
        "description":[
            "Description",
            "The nt_list-jobs command lists server jobs running on the server since rebooting.",
            "The nt_list-jobs command displays this information:"
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "nt_list-jobsModule              ThreadId   Start     Time\/Pri   UserCpu   SysCpu\n    ================    ========   =======   ========   =======   =======\n0   SysColdstart.D3F    0000055c   64936155  00:00:00"
        ]
    },
    {
        "name":"nt_list-resizing command",
        "Syntax":[
            "Syntax",
            "nt_list-resizing\n"
        ],
        "description":[
            "Description",
            "The nt_list-resizing command lists the files being resized and the files that have been resized.",
            "The nt_list-resizing command displays this information:",
            "Running",
            "Paused",
            "Done"
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            ":nt_list-resizingFile                     Server    OldMod   NewMod   CurGrp  Date   Time   State\n===================      ========  ======   ======   ======  ====   ====   =====\ntests,deepak,deepak      SRVRMAIN  1        5        5       09\/20  15:38  Done"
        ]
    },
    {
        "name":"nt_makefof command",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"nt_migrateacc command",
        "Syntax":[
            "Syntax",
            "nt_migrateacc <account>{(options}\n"
        ],
        "description":[
            "The nt_migrateacc command migrates an account from the VME to the FSI."
        ],
        "parameter":[
            "Parameter(s)",
            "accountAccount name.optionsoOverlays the existing FSI account."
        ],
        "example":[

        ]
    },
    {
        "name":"nt_name command",
        "Syntax":[
            "Syntax",
            "nt_name {(options}\n"
        ],
        "description":[
            "The nt_name command obtains network information."
        ],
        "parameter":[
            "Parameter(s)",
            "optionsnReturns the host name."
        ],
        "example":[

        ]
    },
    {
        "name":"nt_osfi_start command",
        "Syntax":[
            "Syntax",
            "nt_osfi_start {port}\n"
        ],
        "description":[
            "The nt_osfi_start command starts the OSFI server."
        ],
        "parameter":[
            "Parameter(s)",
            "portSpecifies the OSFI port to start. If no port number is specified,\nthe port number \u00a0entry is read from theHKEY_LOCAL_MACHINE\/SOFTWARE\/RocketSoftware\/D3\/CurrentVersion\/D3Fsi\/OsfiPortregistry key. If no port number entry exists in that registry key,\nthen the default port number (1598) is started."
        ],
        "example":[

        ]
    },
    {
        "name":"nt_osfi_stop command",
        "Syntax":[
            "Syntax",
            "nt_osfi_stop {port}\n"
        ],
        "description":[
            "The nt_osfi_stop command stops the OSFI server."
        ],
        "parameter":[
            "Parameter(s)",
            "portSpecifies the OSFI port to stop. If no port number is specified,\nthe port number entry is read from theHKEY_LOCAL_MACHINE\/SOFTWARE\/RocketSoftware\/D3\/CurrentVersion\/D3Fsi\/OsfiPortregistry key. If no port number entry exists in that registry key,\nthen the default port number (1598) is stopped."
        ],
        "example":[

        ]
    },
    {
        "name":"nt_pinfo command",
        "Syntax":[
            "Syntax",
            "nt_pinfo {(options}\n"
        ],
        "description":[
            "Description",
            "The nt_pinfo command obtains and displays information about                 threads.",
            "The nt_pinfo command displays a report showing the PIBs (line numbers), the                                 associated thread-id, CPU and memory utilization, and the name of                                 the associated device."
        ],
        "parameter":[
            "Parameter(s)",
            "optionsbDisplays block counts (AllocB and CommtB).\n                                                  This cannot be used with theuoption unless thewoption is\n                                                  used.lLoops displaying the delta CPU usage\n                                                  information for any ports that have consumed CPU\n                                                  within the last 1 second. Useful for finding\n                                                  active CPU consumers. Press the X key to exit.mDisplays the virtual memory size in\n                                                  megabytes (MB).sSuppress the display of the virtual memory\n                                                  statistics (overrides thevoption).tDisplays the totals for the AllocK,\n                                                  AllocB, CommtK, and CommtB columns.uDisplays the user-ID in the report. This\n                                                  cannot be used with theboption\n                                                  unless thewoption is\n                                                  used.vDisplays only virtual memory (process\n                                                  virtual address space) and page file statistics.\n                                                  When used with themoption, the\n                                                  display is in MB.wWide display.zDisplays all configured ports, including\n                                                  those that do not have an associated thread."
        ],
        "example":[
            "Example(s)",
            "nt_pinfo (sPIB  ThreadId T  User  Kernel AllocK CommtK            Device\n==== ======== = ====== ====== ====== ====== =============================\n   0 00018610 C  0.500  0.171    420   2345 CONSOLE\n   1*00019a10 T 95.671 02.750   2456   3695 ::1;50475\n   2 00009e50 T 38.437 91.859    185   1705 ::1;63959\n 256 00019b14 P  0.781  0.875      5    132 (null)\n 273 00018d9c P  0.000  0.015      5    132 (null)",
            "nt_pinfo (bstuwPIB    UserName        ThreadId     T    User      Kernel    AllocK   AllocB  CommtK   CommtB         Device\n==== ============= ================ = ========== ========== ========= ====== ========= ====== =======================\n   0            dm 0000000000018610 C      0.500      0.171       420    517      2345    529 CONSOLE\n   1*         Andy 0000000000019a10 T    295.671    102.765      2456    334      3707    344 ::1;50475\n   2    admin_user 0000000000009e50 T   8149.046    292.296       185    275      1705    408 ::1;63959\n 256               0000000000019b14 P      0.781      0.875         5     33       132     35 (null)\n 273               0000000000018d9c P      0.000      0.015         5     33       132     34 (null)\n                                                            ========= ====== ========= ======\nTotal                                                            3071   1192      8021   1350",
            "PIBProcess Identification Block (line number).ThreadIdThread-id.TType of process attached.T = TelnetS = serialC = consoleW = mvWorkstation TelnetY = mvWorkstation printer lineZ = mvWorkstation serial lineR = RPC connectionO = ODBC connectionUserUser CPU time since thread started.KernelKernel CPU time since thread started.AllocKThe amount of memory in KB that a thread currently has allocated.AllocBThe number of blocks of memory of any size\n                                                  a thread currently has allocated.CommtKThe total amount of memory in KB that a thread currently has allocated plus cached.CommtBThe total number of blocks of memory of any\n                                                  size a thread currently has allocated plus\n                                                  cached.DeviceThe name of the device associated with this PIB."
        ]
    },
    {
        "name":"nt_rel-tcp command",
        "Syntax":[
            "Syntax",
            "nt_rel-tcp\n"
        ],
        "description":[
            "The nt_rel-tcp command releases memory and closes tcp."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"nt_resize command",
        "Syntax":[
            "Syntax",
            "nt_resize -f {dict} file.spec -m modulo{-p priority}{-c no|fix}{-t}{-i}{-q}\nnt_resize -f {dict} file.spec -s\nnt_resize -stopall\n"
        ],
        "description":[
            "The nt_resize command starts the FSI file resizing process. This   command is executed at coldstart time to restart any resizing commands which were interrupted by a   shutdown. It can also be called from TCL to resize files in real time."
        ],
        "parameter":[
            "Parameter(s)",
            "-f {dict}file.specSpecifies the file to be resized. Specified as: { account,}dict{,data}The account must be an FSI account. If the account is not specified,\nthe command must be issued from an FSI account.-mmoduloSpecifies the file modulo in decimal. If the modulo is equal\nto the current modulo, the file is compacted, removing empty cells\nin the file.Note:This version does not support modulo reduction.-ppriorityResize priority. Can be specified as follows:LOWESTLOWNORMALHIGHHIGHESTThe system prefers the priority specification\noptionsNORMALandLOW. Resizing\nwith theLOWoption takes longer, but does not impact\nsystem performance. SpecifyingLOWESTis even slower.\nAvoid using theHIGHandHIGHESToptions as they can cripple the system. These options should only\nbe used when the system is dedicated to the resizing with no other\nactivities running.-c no|fixFile check option. By default, files are checked for errors\nbefore the resize process is initiated. If any file errors are encountered,\nthe user is notified of the error and the file resize process is not\ninitiated. Use the-coption to change this behavior\nas follows:Thenooption disables the automatic file check process.Thefixoption attempts to correct any file errors encountered. If errors are\n          found and are successfully fixed, the user is notified and file resize process is started.\n          If errors are found andcannotbe successfully fixed, the user is notified and file\n          resize process is not initiated.-tAdds traces to the Windows event log.-iStarts the resizing in immediate mode and cannot be stopped.\nThe process issuing the command performs the resizing. This command\nmust be issued on the server on which the file is located.-qQuiet mode. No messages except errors.-sStops the resize of the file specified with the-foption.stopallStops all resizing.",
            "Note:Shutting down D3 stops any active resizing."
        ],
        "example":[

        ]
    },
    {
        "name":"nt_resize-menu command",
        "Syntax":[
            "Syntax",
            "nt_resize-menu\n"
        ],
        "description":[
            "The nt_resize-menu command demonstrates the functionality of the four FSI utilities supplied by Rocket.",
            "nt_GetFillRatio",
            "nt_IsUnderSized",
            "nt_AdjustRatio",
            "nt_AdjustModulo"
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"nt_restart_odbc",
        "Syntax":[
            "Syntax",
            "nt_restart-odbc\n"
        ],
        "description":[
            "Stops or restarts the ODBC server. Typically used after configuring the Log Tracing Messages, Trace File and Flush Period values in the D3 Connect tab of the D3 Device Manager to enable D3 ODBC server tracing and debugging. Note that existing ODBC connections will be intact after nt_restart-odbc is used."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"nt_telnetdisc command",
        "Syntax":[
            "Syntax",
            "nt_telnetdisc {(options}\n"
        ],
        "description":[
            "The nt_telnetdisc command inquires\/sets\/resets the Telnet disconnect feature."
        ],
        "parameter":[
            "Parameter(s)",
            "optionsnTurns on the disconnect feature.fTurns off the disconnect feature."
        ],
        "example":[

        ]
    },
    {
        "name":"nt_upgrade command",
        "Syntax":[
            "Syntax",
            "nt_upgrade\n"
        ],
        "description":[
            "The nt_upgrade command upgrades any d3 dataset with current changes. It first runs a pre-upgrade routine, then the upgrade, and finally a nt_postupgrade procedure. All D3 processes must be logged off.",
            "The nt_upgrade procedure can only be run from the \u2019dm\u2019 account after a D3 service pack installation. The upgrade script is imported into the dm\u2019s master dictionary by entering the following:"
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"odbc-setup command",
        "Syntax":[
            "Syntax",
            "odbc-setup [config|default|shutdown|start|status|stop|version]\n"
        ],
        "description":[
            "The odbc-setup utility allows you to start, stop, and configure the ODBC server. Additionally, the current server status and version can be displayed."
        ],
        "parameter":[
            "Parameter(s)",
            "configConfigures ODBC start parameters.\nThese values can be configured:cache.flatIf set toyes, the server attempts to return\nthe maximum cache size (as specified incache.rows). This can improve performance when running large queries. The default\nsetting isno.cache.rowsSpecifies the maximum number of rows that will be cached by\nthe server. If not specified, the default is 200.debugIf set to yes, debug messages are sent to the log file. Debug\nmessage information includes the statement syntax and the result set.\nThe default setting isno.errorfileSpecifies the directory in which to log ODBC error messages.\nIf set to\/dev\/null(default, no error messages are\nlogged.logfileSpecifies the directory in which to log ODBC debug and runtime\nmessages. If set to\/dev\/null(default, no error\nmessages are logged.portTCP service port on which the server listens for clients.timeoutSpecifies the ODBC server process inactivity timeout in minutes.defaultResets the ODBC server configuration back to the default configuration.shutdownTerminates the processes for all ODBC connections on the current\nvirtual machine. The server process in not shut down.startStarts the ODBC server(s).statusDisplays the status of the ODBC server(s).stopStops the ODBC server(s).versionDisplays the version of the ODBC server."
        ],
        "example":[

        ]
    },
    {
        "name":"off command (TCL commands)",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "off<connect time= 230 mins.; cpu= 29707 units; lptr pages=12>"
        ]
    },
    {
        "name":"okidata command",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"onneterror command",
        "Syntax":[
            "Syntax",
            "onneterror(environment, operation, errorcode, module, filename, item-ID, action)\n"
        ],
        "description":[
            "Description",
            "onneterror is a globally cataloged subroutine that can be called from the FSI when a network error occurs during FlashBASIC file I\/Os. This allows users to break out of the error and customize the subroutine.",
            "The onneterror subroutine is available in the dm account of the FSI (fsi:dm,basicprograms, onneterror)"
        ],
        "parameter":[
            "Parameter(s)",
            "environmentEnvironment in which error occurred.0Generic I\/O1From VMEoperationOperation running when on network\nerror occurred:readwriteopenclear-fileselectreadnextkeyerrorcodeRPC error code.moduleName of the currently running\nFlash module.filenameFile in error.item-IDItem-ID, if applicable.actionAction to take upon exiting.0Ignore error, and take theelseclause,\nif any.1Abort the program.2Drop into the FlashBASIC debugger."
        ],
        "example":[
            "Example(s)",
            ":compile bp netter (onetter\n.\n[820] Creating FlashBASIC Object (Level 0 ) ...\n[241] Successful compile! 3 frame(s) used.\n:09:16:50 24 Jan 2006\n:off:run bp netterto force a NW error, unplug this computer from the NW?\nNetwork Error !!!Running Module \"netter\"\nwrite item ([\/\/jsmith3]jsmith3:dm\/dm 20365 ) cannot bind remote connection\n\u00a0\nA = Abort \/ D = Debug \/ I = Ignore ?i"
        ]
    },
    {
        "name":"op command",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"overflow command",
        "Syntax":[
            "Syntax",
            "overflow {(options}\n"
        ],
        "description":[
            "The overflow command displays the system overflow table which contains the addresses of available disk frames. All unused frames are available for use by the spooler, the D3 file system, and the process workspace."
        ],
        "parameter":[
            "Parameter(s)",
            "optionsaLists the start and end FIDs for each block as well as their\nsizes. When using the(aoption, the user may filter\nthe FIDs displayed by specifying a high and low limit. If the(boption is used along with the(aoption,\nthen the display shows the block start and end FIDs plus the sizes.\nThe user can filter blocks based on size.bLists total number of frames for each contiguous block of\noverflow. When using the(boption, the user may\nspecify a range of sizes as well.cOnly counts frames that display with the(aor(boptions in the final frame and block counts.nActivates thenopagefunction on output\nto the terminal.oDisplays theoldsafe table. Before every full or incremental\nsave, the most significant blocks in the overflow table are saved\nin an alternate area. This area can be displayed using the(ooption. This option is useful for analyzing the change\nin overflow over a time period.pDirects output to the printer via the spooler.sDisplays onlysafeblocks. The safe blocks are blocks\nthat are restored in case of a power loss or full system crash.tDisplays blocks in thesafetable with an asterisk.",
            "The overflow table is kept in the B-tree format. Each node\nin the B-tree may contain up to 120 elements.",
            "The report includes\nthe following headings:",
            "overflowTotal number of frames available.reserveNumber of frames held in reserve (must have been previously\nestablished with theset-ovf-reservecommand).\nThese frames are used only when all overflow frames have been used\nand are intended to provide space on an emergency basis for system\nfunctions such asfile-savecommands.blocksNumber of contiguous blocks of storage.B-tree levelsNumber of levels in the B-tree that holds the frame addresses.leavesNumber of leaves (nodes on the final level) on the B-tree.\nAll frame addresses are stored at theleaflevel."
        ],
        "example":[
            "Example(s)",
            "Indicates that there are 8450\nframes remaining in the overflow table, 1024 marked as the spare gas\ntank; a total of 669 blocks in the table; 2 B-tree levels with 9 leaves.",
            "overflowoverflow: 8450 reserve: 1024 blocks: 669 b-tree levels: 2 leaves: 9",
            "overflow (a319843-319934319838-319844 : 7 319849-319855 : 7 319866-319866 : 1\n319885-319885 : 1 319889-319889 : 1 319898-319899 : 2\n319902-319902 : 1 319907-319909 : 3 319924-319924 : 1\n319927-319927 : 1 319929-319929 : 1 319932-319932 : 1\n319934-319934 : 1\noverflow: 8497 reserve: 1024 blocks: 692 b-tree levels: 2 leaves: 9"
        ]
    },
    {
        "name":"ovf-monitor command",
        "Syntax":[
            "Syntax",
            "ovf-monitor {*|port{,port}{-port}...} {(options}\n"
        ],
        "description":[
            "The ovf-monitor command monitors and displays overflow consumption on a port by port basis."
        ],
        "parameter":[
            "Parameter(s)",
            "*Monitors all ports. This is the\ndefault.port{,port}{-port}...}Specifies the port(s) or range\nof ports to monitor.optionsaDisplays all target ports. By default, only the ports that\nare actively consuming overflow are displayed.sEnables scroll mode. Each \u00a0new occurrence of activity\nis displayed as a new line in the output display. Note that older\nentries will scroll off the screen when the screen becomes full.tnSpecifies the time innseconds between\nrefreshes of the displayed ports. The default is 10 seconds.",
            "Upon runningovf-monitor, a set of options\ndisplay at the bottom of the results:",
            "Press 8=up; 2=down;7=home;1=end;9-PgUp;3=PgDn;ESC=Exit;Rtn=Refresh",
            "The options allow you to move up and down through the\ndisplayed results (not available when scrolling mode is enabled),\nrefresh the displayed results or exit the program."
        ],
        "example":[
            "Example(s)",
            "The example below illustrates\nusing theovf-monitorcommand to display all target\npibs.",
            ":ovf-monitor (aOverflow Monitor                                     17:25:53\nPort   Ovf used   Change   Cached    Change   Cache Max Ports'   Total\n0      0          0        No cache                              1838\n1      57         0        14        0        30                 1838\n2      0          0        No cache                              1838\n3      45         0        15        0        30                 1838\n4      0          0        0         0        0                  1838\n5      0          0        0         0        0                  1838\n6      0          0        0         0        0                  1838\n7      0          0        0         0        0                  1838\n8      0          0        0         0        0                  1838\n9      0          0        0         0        0                  1838\n10     0          0        0         0        0                  1838\n11     0          0        0         0        0                  1838\n12     0          0        0         0        0                  1838\n13     0          0        0         0        0                  1838\n14     0          0        0         0        0                  1838\n15     0          0        0         0        0                  1838\n16     17         0        0         0        0                  1838\n17     823        0        0         0        0                  1838\n18     822        0        0         0        0                  1838\nPress 8=up; 2=down;7=home;1=end;9-PgUp;3=PgDn;ESC=Exit;Rtn=Refresh",
            "Note:Negative values displayed in either theOvf\nusedorTotalcolumns indicate a condition\nwhere a port released more overflow frames than it consumed. For example,\nif a user creates a file on port 1 and then subsequently deletes the\nfile using port 2, the port 2Ovf usedvalue would\ndisplay a negative number indicating the difference between the number\nof overflow frames that have been released and consumed by that line.",
            "The example below illustrates setting theovf-monitorcommand to use a scrolling display that refreshes every 2 seconds.\nIn this case, only the activity on port 20 is being monitored.",
            ":ovf-monitor 20 (st2Overflow Monitor                                     17:25:53\nPort   Ovf used   Change   Cached    Change   Cache Max Ports'   Total\n20     23         23       3         3        30                 1860\n20     40         17       19        16       30                 1877\n20     0          -40      19        0        30                 1837\n20     0          -40      19        0        30                 1837\n20     0          -40      19        0        30                 1837\n20     0          -40      19        0        30                 1837\n20     0          -40      19        0        30                 1837\n20     0          -40      19        0        30                 1837\n20     1          0        0         -19      0                  1838\n20     0          0        0         -19      0                  1837\n20     0          0        0         -19      0                  1837\n20     0          0        0         -19      0                  1837\n20     0          0        0         -19      0                  1837\n20     0          0        0         -19      0                  1837\n20     0          0        0         -19      0                  1837\n20     23         23       3         3        30                 1860\nPress ESC=Exit;Rtn=Refresh"
        ]
    },
    {
        "name":"P",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"p command (TCL commands)",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "No output displays.",
            "p\nwho",
            "p\nwho40 bob ref"
        ]
    },
    {
        "name":"paint command",
        "Syntax":[
            "Syntax",
            "paint file.reference {item.list*}{attr.list}{(options}\n"
        ],
        "description":[
            "The paint command displays items to the screen or printer in Update processor format."
        ],
        "parameter":[
            "Parameter(s)",
            "file.referenceSpecifies the file name.item.list*If noitem.list*is specified, or if an*is used, all programs\nin the file display.attr.listIndicates the names of the attributes\nthat are affected by the command. Specific attributes can display,\nwithout using the default macro defined on the file\u2019s D-pointer. This\noption functions in the same way as theoutlistin alistorsortcommand.optionseDisables line number display.fOutputs a form feed between each item.hDisables header with page number.iIncludes the display of item-IDs.nDisables pause at bottom of page.pOutputs to the printer.rRawoption. When using this option, nondisplayable\ncharacters display as periods, and the escape character as a[. This option also causes the Update processor not to trim\ntrailing attributes.zInhibits the item header (line that includes the item size).",
            "Thepaintcommand behaves differently\nthan an AQLlist command, in that controlling\/dependent\nattributes are displayed ascolumnsandrows. Also,\nattribute headers are boldfaced."
        ],
        "example":[
            "Example(s)",
            "Obtains the default list of attributes\nfrom themacroattribute in theentityfile-defining\nitem located in the dictionary of the entity file.",
            "paint entity",
            "Explicitly requests the three fields shown, regardless\nof thedefaultmacro.",
            "paint invoices customer.name invoice.date invoice.amount",
            "Like the first example, but uses theioption to include the item-ID of each item.",
            "paint entity (i"
        ]
    },
    {
        "name":"password command",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"penv command",
        "Syntax":[
            "Syntax",
            "penv\n"
        ],
        "description":[
            "The penv BASIC program displays a list of all user D3 shell variables and the contents of those variables."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"phantom-reset command",
        "Syntax":[
            "Syntax",
            "phantom-reset {a,b{,n-m}}\u00a0\n"
        ],
        "description":[
            "The phantom-reset BASIC program resets the specified phantom lines to available status. If a UNIX process for a phantom is gone (PID 0), it recreates the process and ensures that the port on the D3 side is available to handle the next request."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"phantom-status command",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"pibstat command",
        "Syntax":[
            "Syntax",
            "pibstat value\n"
        ],
        "description":[
            "The pibstat command in the DM account displays the current PIB status bit settings for a specified value."
        ],
        "parameter":[
            "Parameter(s)",
            "valueA 2-byte PIB status returned by thewherecommand, under the column labeled PIB Stat.",
            "Thepibstatcommand is perhaps the most\nuseful indication of resource use on a D3 machine. The first two digits\nof this value indicate thestateof a process. Some of the\nmore common values include:",
            "f3xxWaiting-for-input or displaying text.e3xxWaiting-for-input or displaying text with echo off.f5xxDisplaying text, but line is inxoff(CTRL+S)\nstate.ffxxProcess is currently using the CPU.bfxxProcess is currently sleeping.dfxxPIB currently requesting disk I\/O.",
            "Note:This command reflects the D3 process status. The termroadblockedmeans that the port is currently reading or writing\na character."
        ],
        "example":[
            "Example(s)",
            "Returns the PIB status for port\n68 as ff10, which can then be used in thepibstatcommand:",
            "where 68ln   pcb      pib   abs      stat...\n     fid      stat  bas\n*068 024ee5   ff10  000018   1...pibstat ff101111   1111      1111   1111\nProcess is running or activatable\n      not sleeping\n      not frame faulted\n      echoing input\n      not I\/O roadblocked\n      not reading\n      not writing\n      not comatized\n      not DCD on\n      type-ahead enabled\n      modem-control enabled."
        ]
    },
    {
        "name":"pid command",
        "Syntax":[
            "Syntax",
            "pid {port.number} {(options}\npid * {pid.to.search} {(options}\n"
        ],
        "description":[
            "The pid BASIC program displays the UNIX PID of a D3 process.",
            "For Windows: Not Supported"
        ],
        "parameter":[
            "Parameter(s)",
            "optionspDirects output to the system printer via spooler.",
            "The D3 process is specified by a port number (PIB), all\nD3 processes currently connected if the argument is an asterisk, or\nif there is no argument in the current process.",
            "The first form\ndisplays the UNIX PID or the specified D3 port number (PIB). The second\nform displays the UNIX PIDs of all the D3 processes currently connected\nto the virtual machine. An asterisk precedes the current process.\nIf a list of PIDs to search is provided, a plus sign displays before\neach process found in the list. This form is useful to determine whether\na specified UNIX process, identified by its PID, is connected to the\nvirtual machine."
        ],
        "example":[
            "Example(s)",
            "34726 is the current UNIX PID.",
            "pid34726",
            "14525 is the UNIX PID for D3 PIB 22.",
            "pid 2214525",
            "Displays the PIDs of all D3 processes and searches to\ndetermine if the UNIX processes 36978 and 2345 are D3 processes. This\ncommand was executed on (D3) line 2. The UNIX process 36978 is connected\nto the virtual machine on line 3, and the process 2345 is not connected\nto this virtual machine.",
            "pid * 36978 2345PIB   PID     PIB   PID\n===   ======  ===   ======\n0     35002   * 2   6513\n+ 3   36978   4     42611"
        ]
    },
    {
        "name":"pitch-compile command",
        "Syntax":[
            "Syntax",
            "pitch-compile fonts,pitch{item-ID} {(options}\n"
        ],
        "description":[
            "The pitch-compile BASIC program compiles a pitch file found in the dm,fonts,pitch file."
        ],
        "parameter":[
            "Parameter(s)",
            "options?Provides online help.cWrites width in decipoints.oOverwrites existing items.sSuppresses screen output.tDefault. Writes width in ellipses.xWrites width in hexadecimal scaled decipoints."
        ],
        "example":[

        ]
    },
    {
        "name":"pitch-table command",
        "Syntax":[
            "Syntax",
            "pitch-table fonts,desc{item-ID} {(options}\n"
        ],
        "description":[
            "The pitch-table BASIC program builds a pitch table for a font file in the dm,fonts,descr file.",
            "The item generated is followed by the extension,.pitch."
        ],
        "parameter":[
            "Parameter(s)",
            "options?Displays online help for this command.cWrites width in decipoints.oOverwrites existing items.sSuppresses screen output.t(Default) Writes width in ellipses.wDisplays as it happens.xWrites width in hexadecimal scaled decipoints.yDisplays statistics when done with item."
        ],
        "example":[

        ]
    },
    {
        "name":"poke command",
        "Syntax":[
            "Syntax",
            " poke port.number{,{text}}\n poke port.number{}esc{file.reference {item-ID}}\n poke port.number esc\n poke port.number tcl.commands esc{tcl.commands{esc}...}\n\n"
        ],
        "description":[
            "Description",
            "The poke BASIC program sends either a string of characters, or one or   more TCL commands to the input buffer of another port.",
            "One or more TCL commands can be sent directly to the target port. Each TCL command must be     followed by an escape, which is treated as a carriage return on the receiving port.",
            "An item containing one or more valid TCL commands can also be transmitted directly from a file.     The transmitted item must contain one valid TCL command on each attribute. This feature is     accomplished by poking an escape to the target port. The process prompts for the file name and     item-ID of the item to transmit and execute.",
            "The poke command displays the number of characters it has successfully poked to the target port\u2019s input buffer. The number reported may not match the actual number of characters sent due to the condition of the target port\u2019s input buffer.",
            "The ESC key is used by poke to terminate commands, a special provision applies for transmitting an actual escape. This is accomplished by pressing ESC twice. A set of two escapes is treated (and poked) as one escape.",
            "This process does not check to see that the target port is ready to accept characters.      In other words, if the target port is in the Update Processor or a FlashBASIC program at an       input statement and the (TCL) who command is poked to      the target port, it is treated as data on the receiving end. Some functions of the Update      processor\/TCL command stack interfere with transmission of control characters from the TCL      prompt.",
            "For example, suppose there was a need to poke a CTRL+D to another port.      The TCL command stacker uses CTRL+D to retrieve the previous command. The only way this could      be accomplished from TCL is to first turn off the command stacker for the current port with the       stack-off command. Then the CTRL+D could be poked. The       stack-on command restarts the stacker. For this reason, it is probably      easier to do all poking from FlashBASIC, where control characters can be poked by their       char equivalents. "
        ],
        "parameter":[
            "Parameter(s)",
            "port.numberDesignates the target port number.textContains any characters, except segment marks (x'ff'), and can be unlimited in length.Thetextcan be preceded by a space, which optional. When the text is\n         omitted, a carriage return is sent to the target port. Thetextstring\n         can be enclosed in single or double quotation marks, or backslashes."
        ],
        "example":[
            "Example(s)",
            "Example 1",
            "The following example sends a carriage return to port 16.",
            "poke 16[1028] 1 characters poked.",
            "Example 2",
            "The following example sends a carriage return to port 16.",
            "poke 16,[1028] 1 characters poked.",
            "Example 3",
            "The following example sends the string, \"answer the phone!\", to port 16, without following the\n    (poked) string with a carriage return.",
            "poke 16,answer the phone![1028] 17 characters poked.",
            "Example 4",
            "The following example is exactly the same asExample 3.",
            "Single or double quotation marks and backslashes have no effect on the string being sent,\n    unless the string begins with, but not followed by, a literal quotation mark.",
            "poke 16,\"answer the phone!\"[1028] 17 characters poked.",
            "Example 5",
            "The following example fails because the string is preceded by a quotation mark.",
            "poke 16 \"hi[2] Uneven number of delimiters (\u2019 \" \\).",
            "Example 6",
            "The next example shows that a trailing quotation mark\nis accepted.",
            "poke 16 hi\"[1028] 3 characters poked.",
            "Example 7",
            "The following example shows that embedded quotation marks are permitted.",
            "poke 16,don\u2019t panic![1028] 12 characters poked.",
            "In all of the previous examples, no carriage return was\nentered at the end of the poked strings.",
            "Example 8",
            "In this form of apoke, the string being sent is an actual TCL command. The[is echoed by pressingEsc. This pokes awhoto\n    port 16 and issues a carriage return to process the command.",
            "poke 16 who[",
            "Example 9",
            "The following example pokes thewho,time, andovfcommands to port 16 and executes them.",
            "poke 16 who[time[ovf",
            "Example 10",
            "The following example uses the port number, followed by pressingEsc, and thenEnter. The process prompts for the file name and item-ID of the item to transmit.",
            "poke 16[poke from file-name item-name:md script1",
            "Example 11",
            "Each attribute of the specified item, starting at the first attribute, is treated as a valid TCL\n    command.",
            "For example,script1could look like this:",
            "id:\u00a0script1\n att 1:\u00a0who\n att 2:\u00a0time\n att 3:\u00a0ovf",
            "Example 12",
            "The file name in this example is supplied on the command\nline. The process only prompts for the item-ID of the item to transmit.",
            "poke 16[mdpoke from item-name:script1",
            "Example 13",
            "The file name in this example and item-ID are specified\non the command line.",
            "poke 16[md script1[1028] 13 characters poked.",
            "Example 14",
            "In this form, an item is constructed spontaneously , then poked into\n    the target port\u2019s input buffer. This example executes thewho,time, andovfcommands on port 16.",
            "poke 16[poke from file-name item-name:[0001 :who\n 0002 :time\n 0003 :ovf\n 0004[1028] 13 characters poked.",
            "Example 15",
            "The following example pokes two Esc key results in one escape being sent.",
            "poke 16 [[[1028] 1 characters poked.",
            "Example 16",
            "The following example illustrates usingexecutetopokecharacters to another port. This instruction pokes a CTRL+X, then a CTRL+E, followed by a\n    literal\"y\". This explicitly exits the receiving port from the current item in\n    the Update processor.",
            "execute \"poke 16 \" : char(24):char(5):\"y\""
        ]
    },
    {
        "name":"power-off command",
        "Syntax":[
            "Syntax",
            "power-off {(u}\n"
        ],
        "description":[
            "The power-off command in the DM account brings the system to an orderly shutdown by logging off all users, flushing memory to disk, and parking the disk heads prior to halting the system.",
            "If the port is not logged off by the time the power-off reaches its final phase, the port is automatically logged off."
        ],
        "parameter":[
            "Parameter(s)",
            "uUnconditionally logs all ports off.",
            "This is used prior to system shutdown to ensure that all\nwork spaces are returned to overflow and all updated frames in memory\nare written to disk. Thepower-offcommand puts\nthe machine in a halt state.",
            "The status of the spooler displays\nand an option to continue is offered. Ifyis\nentered to continue, any user still logged on is logged off, all process\nworkspaces are released, all printers are stopped, and all updated\nmemory frames are written to disk. The system is shut down.",
            "If theuoption is not specified and any port, other\nthan the port executingpower-off, is logged on,\nthe system prompts for each port to be logged off."
        ],
        "example":[
            "Example(s)",
            "Tests the logon state of each\nline.",
            "power-off",
            "If any ports are still active, this message displays:",
            "Line 1 is logged on as lw ts\nDo you want to log it off (y\/n\/a)?",
            "yAttempts to log the port off and displays the message:[534] logoff successful.Note:This prompt is repeated for all ports that are still\nactive. To avoid this process, respond with anato the prompt:Do you want to log it off (y\/n\/a)?nThe message below displays and the process stops and returns\nto TCL:Shutdown procedure aborted.aAttempts to log all ports off, without prompting for a response\non each open port.",
            "After all ports are logged off, this messages display:",
            "Detaching tape...\nSpooler status:\nThe spooler is inactive.\nDo you wish to continue (y\/n)?",
            "If the response to the question isn, this message displays:",
            "Shutdown procedure aborted.",
            "The process stops and returns to TCL. If the response\nto the question isy, this messages displays:",
            "Terminating all print jobs.\nWrapping up process on line 1.\nWrapping up process on line 2.",
            "After all the lines arewrapped up, this message\ndisplays:",
            "Pause for wrapup processing to complete...\nFlushing memory, boot when disk is quiescent...",
            "After the disk settles down, this message displays:",
            "Flush complete."
        ]
    },
    {
        "name":"pr-spool-job command",
        "Syntax":[
            "Syntax",
            "pr-spool-job spooler.job{(options}\n"
        ],
        "description":[
            "The pr-spool-job command respools a spooler hold job. The user can select a one-time sp-assignment for this job by placing the desired sp-assign options after the open parenthesis at TCL."
        ],
        "parameter":[
            "Parameter(s)",
            "optionscopiesInteger number in the range 1-125. Indicates the number of\ncopies (default = 1).aOutput goes to the alternate port on the current terminal.\nTo function correctly, the auxiliary port on and off commands must\nbe defined for the current terminal in the devices file.Note:Theaoption does not suppress output to the system printer\nby default. To disable system printer output, use thesoption as well.dDelays sending output to the queue. The output is delayed\nuntil the file is closed. This option must not be used with theioption. This option overrides theioption.fnumberSpecifies the output queue into which a print file will be\ninserted. The number must be between 0 and 125, inclusive. The default\noutput queue is 0. Each output queue is assigned to a specific printer.hSpools output to a hold file.mSuppresses the display of message[1151] Entry #n.pAssigns output to the printer. This is the default.sSuppresses output to printer."
        ],
        "example":[
            "Example(s)",
            "This respools spooler job number\n3 to form queue number 2. Four copies of the job will be output. Note\nthat a comma is used to separate the form queue number 2 from the\nnumber of copies 4. Spaces cannot be used.",
            "pr-spool-job 3 (f2,4"
        ]
    },
    {
        "name":"prime command",
        "Syntax":[
            "Syntax",
            "prime {number}\n"
        ],
        "description":[
            "The prime BASIC program calculates the next higher and lower prime number from a specified number."
        ],
        "parameter":[
            "Parameter(s)",
            "numberIf a prime number is not provided with the command, the program\nrequests it."
        ],
        "example":[
            "Example(s)",
            "prime 1313 is a prime number\nthe next highest prime number is = 17\nthe next lowest prime number is = 11",
            "prime 14the next highest prime number is = 17\nthe next lowest prime number is = 13",
            "primePRIME - computes the next greater prime number\nEnter a positive integer =1313 is a prime number\nthe next highest prime number is = 17\nthe next lowest prime number is = 11"
        ]
    },
    {
        "name":"print-err command",
        "Syntax":[
            "Syntax",
            "print-err file.reference msg.list{(options)}\n"
        ],
        "description":[
            "The print-err command provides a means of displaying messages from the messages file in their output format."
        ],
        "parameter":[
            "Parameter(s)",
            "file.referenceName of the file, usually messages,\nthat contains the message list.msg.listIndicates one or more item-IDs\nof items in the messages file.optionsnNo pause option suppresses pause at end of page on terminal\ndisplay.pDirects output to the printer, via the spooler.sUsed in FlashBASIC to allow stacked input.",
            "Messages are generally kept in thedm,messages,file, but the process may specify any file which contains items\nwith a similar format to the items indm,messages,file."
        ],
        "example":[
            "Example(s)",
            "Shows that it did not work, but\nit actually did. Message 3 prints when an invalid command is issued.\nThe'A'is where the invalid command would display.",
            "print-err messages 3[3] The command \u2019A\u2019 is not defined.",
            "print-err messages 333[333] The file of files cannot be cleared or deleted.",
            "print-err messages 659 536[659] Line printer ready.\n[536] already logged offdata \"stuff\"\nexecute \"print-err dm,messages, 201\"",
            "This FlashBASIC code produces the output:",
            "[201] \u2019stuff\u2019 is not a file name."
        ]
    },
    {
        "name":"print-error command",
        "Syntax":[
            "Syntax",
            "execute \"print-error\"\n"
        ],
        "description":[
            "The print-error BASIC program prints an error message from stacked data statements."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "data \"100\"\ndata \"black\"\ndata \"white\"\nexecute \"print-error\"[100] \u2019black \u2019 is not \u2019white\u2019."
        ]
    },
    {
        "name":"print-filter command",
        "Syntax":[
            "Syntax",
            "print-filter {(options}\n"
        ],
        "description":[
            "The print-filter command controls the ways attribute and value marks are displayed or printed."
        ],
        "parameter":[
            "Parameter(s)",
            "optionsnMakes attribute and value marks printable.fLeaves attribute and value marks unchanged.",
            "CAUTION:",
            "Theprint-filtercommand\nshould always be used in conjunction with thecrt-delimiterscommand.",
            "If theprint-filtercommand\nis issued without an option, the current setting status is returned.",
            "In conjunction with thecrt-delimiterscommand,\ntheprint-filtercommand allows attribute\nand value marks to display or print in three different ways, according\nto this table:",
            "delimiters    filter   print                 |   crt statements\n---------------------------------------------------------------\n(f            (f       unchanged (x\u2019fe\u2019)\n(n            (f       unchanged (x\u2019fd\u2019)\n(f            (n       \u2019^\u2019,\u2019]                |   cr\/lf\n(n            (n       \u2019^\u2019 and \u2019]\u2019",
            "Theprint-filtercommand takes precedence over thecrt-delimiterscommand. As a result, when theprint-filteris set to off, thecrt-delimitershas no effect.\nAt boot time, theprint-filterdefaults to on.",
            "Note:Theprint-filtercommand stops printing\nwhen the first unprintable character is encountered."
        ],
        "example":[

        ]
    },
    {
        "name":"printronix command",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"psh command",
        "Syntax":[
            "Syntax",
            "psh unix.command{~}>{>} {file} item{(t}\n"
        ],
        "description":[
            "The psh BASIC program executes a UNIX command and captures the results in a D3 item. This command is an alternative to the ! command, which allows capturing the result of the UNIX command into a D3 item.",
            "For Windows: Not Supported"
        ],
        "parameter":[
            "Parameter(s)",
            "unix.commandAny UNIX command. If it contains the>character,\nit is passed down toshwith its conventional usage.\nIn this case, the>before the D3 item specification\nmust beescapedby a~character. Only stdout\nis captured. To capture stderr, redirect it to stdout.fileOptional D3 file name where the item is stored. If not specified,\nlst is used as a default.itemItem name where the result is stored. If>>are used, with no space in between, the result of the UNIX command\nis appended to the end of the item, if it already exists.tDisplays the result on screen, as well as storing it in the\nspecified item."
        ],
        "example":[
            "Example(s)",
            "Prints a calendar for the year\n2003 and stores it in the item 2003 in the file tmp.",
            "psh cal 2003 > tmp 2003",
            "Transfers the file \/usr\/D3\/myfile into the D3 item myfile\nin the file lst (default). If the file does not exist on UNIX, the\nerror message displays on the terminal.",
            "psh cat \/usr\/D3\/myfile > myfile",
            "Transfers the file \/usr\/D3\/myfile into the D3 item myfile\nin the file lst (default). stderr is redirected to stdout ('2>&1').\nTherefore, if the file does not exist, the error message is in the\nD3 item.",
            "psh cat \/usr\/D3\/myfile 2>&1 ~> myfile",
            "Note:Theescapeof the >D3 redirection.",
            "Stores the error messages produced by the two compilations of myprog1.c\nand myprog2.c in the item myerrs. The second error messages are appended\nto the end of the first.",
            "psh cc myprog1.c 2>&1 ~> myerrs\npsh cc myprog2.c 2>&1 ~>> myerrs",
            "Note:Theescapeof the >D3 redirection and the>>to append data.",
            "Changes the directory, lists\nit, and stores the result in the item mylist.",
            "psh cd \/tmp; exec ls -l > mylist",
            "Note:Useexecto avoid creating an intermediate\nshell.cdis not a UNIX command, but ashkeyword, and thus cannot use theexeccommand."
        ]
    },
    {
        "name":"psr command",
        "Syntax":[
            "Syntax",
            "psr {port.number} {(options}\n"
        ],
        "description":[
            "The psr BASIC program displays formatted output of the status of the currently active UNIX and\/or D3 processes.",
            "For Windows: Not Supported"
        ],
        "parameter":[
            "Parameter(s)",
            "optionskShows only the processes running in D3.pDirects output to system printer via the spooler.rShows only the running processes.s{n}Selects the running processes by doing two UNIXpscommands, separated by a specified sampling periodn(default1s), and comparing the CPU usage of\nthe processes.",
            "Whenever possible, this command tries to identify the D3\nprocess from the status returned by the UNIXpscommand.",
            "If the port number is specified, the output shows\nprocess information related to the D3 process port and its child processes.\nThis argument supersedes therandkoptions.",
            "This command displays:",
            "PIDUNIX process identification.PPIDUNIX process identification of\nthe parent process.TTYDevice name where the process\nis connected.CPUCumulative UNIX CPU time in minutes:\nseconds, or+n, wherenis the number of seconds accumulated in the given sampling\nperiod if the (d) option was used.SUNIX process status:AActiveRRunningSSuspendedTTerminatedWWaiting for I\/OZZombie (defunct)PORTD3 port number.USERIf the process is connected to\nthe current virtual machine, this is its user-ID.ACCOUNTIf the process is connected to\nthe current virtual machine, this is its master dictionary.STATIf the process is connected to\nthe current virtual machine, this is its D3 status.MODE\/COMMANDIf the process is connected to\nthe current virtual machine, this is the name of the virtual mode\nit is currently executing. If not, it is the name of the UNIX command\nit is executing.",
            "The formpsrport.numberis useful to identify all processes spawned by a D3 process.",
            "The formpsr (rallows detecting processes,\nwhich are consuming CPU. By repeating this command after a few second\nintervals, it is easy to identify processes looping or having hardware\nrelated problems (for example, too many serial interrupts).",
            "The formpsr (sris an alternative topsr (rto show running processes. It allows taking a sample\non a longer period, thus catching processes running often, but not\nfor a long time.",
            "CAUTION:",
            "Thepsrcommand can be intrusive."
        ],
        "example":[
            "Example(s)",
            "psrPID   PPID   TTY     CPU     S   PORT   USER   ACCOUNT   STAT   MODE\/COMMAND\n1     0      -       18:08   S                                  init\n1973  1      -       1:04    S                                  syncd\n3071  L1     10\/0    421:23  R                                  d3\n3255  1      -       0:01    S                                  errdemon\n3762  1      112\/0   0:00    S   072                     F310   md0:00C\n4270  1      108\/0   0:00    S   068                     F310   md0:00C\n4368  1      -       0:00    S                                  srcmstr\n5028  4368   -       0:00    S                                  writesrv\n5283  1      89\/0    0:00    S   057    dm     dm        F310   tcl.input:000\n5615  1      102\/0   0:20    S                                  pxproute\n6053  1      91\/0    0:15    S   059                     F310   rdl.getchar:000\n6314  4368   -       0:00    S                                  qdaemon\n6513  1      2\/0     0:00    S   002                     F310   rdl.getchar:000\n7110  1      0       0:00    S   128                     BF10   sp.sleep:040",
            "This command takes two samples at 3 second intervals and displays\nthe time accumulated by the running process. In this example, the\nprocess d3 has consumed 3 seconds (the whole sampling period), which\nis an indication of a potential problem.",
            "psr (d3PID   PPID   TTY     CPU     S   PORT   USER   ACCOUNT   STAT   MODE\/COMMAND\n3071  1      10\/0    +3      R                                  d3"
        ]
    },
    {
        "name":"ptype command",
        "Syntax":[
            "Syntax",
            "ptype file.name program.name\n"
        ],
        "description":[
            "The ptype command returns whether a BASIC program is a main program or a subroutine."
        ],
        "parameter":[
            "Parameter(s)",
            "file.nameName of the file containing the program you are verifying.program.nameName of the program you are verifying.",
            "This command also displays whether flash code is available\nas part of object code."
        ],
        "example":[

        ]
    },
    {
        "name":"pverify command",
        "Syntax":[
            "Syntax",
            "pverify file.reference {itemlist*} {(options}\n"
        ],
        "description":[
            "The pverify command verifies the checksum for the object code of a BASIC program."
        ],
        "parameter":[
            "Parameter(s)",
            "optionseSuppresses the message[429] program object verifies.pDirects output to the spooler.",
            "Each time a program is compiled, a checksum is generated\nand stored with the object code. Thepverifycommand\nrecalculates the checksum, then verifies it against the stored checksum."
        ],
        "example":[

        ]
    },
    {
        "name":"Q",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"qselect command",
        "Syntax":[
            "Syntax",
            "qselect file.reference {itemlist*} {(attribute.number)}\n"
        ],
        "description":[
            "The qselect command creates a list from the specified file reference     and item list, similar to the get-list command."
        ],
        "parameter":[
            "Parameter(s)",
            "file.referenceName of the specified file.attribute.numberAttribute number in an item (or list of items) specified by the item list. If\n                an attribute number is not specified, all attributes are used.item.list*List of items.",
            "The list is constructed from the attributes identified by the attribute number in an item (or\n        list of items) specified by the item list. Each attribute, value, and sub-value becomes a\n        single attribute value in the list."
        ],
        "example":[
            "Example(s)",
            "Example 1",
            "Builds a list from the multivalues stored in attribute 5 of the item-ID s12345 from the\n        invoice-file.",
            "qselect invoice-file s12345 (5",
            "Example 2",
            "qselect dict d3.doc \u2019desc\u2019"
        ]
    },
    {
        "name":"R",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":".r command (mvBase)",
        "Syntax":[
            "Syntax",
            ".r [dict] filename item-ID [(L)]"
        ],
        "description":[
            "The .r command executes stack statements stored in a file   item.",
            "The .r (run) command is used in conjunction with the .c (copy) command to save frequently     performed command procedures and recall them for execution. The .r command executes one or more     stack statements that have been stored in a file item with the .c command. You can also load     these statements into the stack, and then selectively execute them."
        ],
        "parameter":[
            "Parameter(s)",
            "dictSpecifies the file dictionary.filenameSpecifies the name of the file.item-IDIdentifies the item in the filename that contains the stored statements you want to\n        execute.LLoads the statements in item-ID into the stack without executing them.",
            "After each command executes, it becomes statement 1 in the stack.",
            "To stop executing the statements stored in the file item, press BREAK. Even though all of the\n    statements in the file item have not been executed, they will all be stored in the stack."
        ],
        "example":[

        ]
    },
    {
        "name":":reset-async command",
        "Syntax":[
            "Syntax",
            ":reset-async {port.number}\n"
        ],
        "description":[
            "The :reset-async BASIC program resets the current port or all ports to default values.",
            "For Windows: Not Supported",
            "If the port number is omitted, all ports are reset. The default values are: converse, tandem, and mirror, all off, yet enabled for use."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "Resets all ports to default values.",
            ":reset-async",
            "Resets port 5 to its default values.",
            ":reset-async 5"
        ]
    },
    {
        "name":"reblock-ovf command",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"reboot command",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"reclaim-ovf command",
        "Syntax":[
            "Syntax",
            "reclaim-ovf {(options}\n"
        ],
        "description":[
            "The reclaim-ovf BASIC program allows the user to recover all frames not used by the system to the overflow space, thus eliminating the necessity of a file-save\/restore. The number of lost frames that are recovered displays at the completion of the frame scan process.",
            "For Windows: Not Supported"
        ],
        "parameter":[
            "Parameter(s)",
            "optionsbInitiates the overflow reclamation process in the background.fDisplays the file names as they are scanned.iReuses the same preallocated workspace.kKills the overflow reclamation process.nUser specifies the number of preallocated frames (withoutnoption, 100\n        frames are pre-allocated as default).rResumes a previously suspendedreclaim-ovf.sInquires status of the overflow reclamation process.uUnconditionally kills thereclaim-ovfprocess.xSuspends the currently activereclaim-ovfprocess.",
            "CAUTION:",
            "The overflow reclamation process aborts\nif not enough frames are pre-allocated to build the new overflow table.\nIt is advised to allocated two times the number of leaves of the current\noverflow table.",
            "Thereclaim-ovfcommand re-initializes the spooler control block. Therefore,\n    all hold files are lost."
        ],
        "example":[

        ]
    },
    {
        "name":"recover-item command",
        "Syntax":[
            "Syntax",
            "recover-item\n"
        ],
        "description":[
            "The recover-item command recovers the last item deleted by the CTRL+XO command in the Update processor. It also recovers the last item that was exited without filing.",
            "The process first displays the name of the item to be recovered. The deleted item is stored in a temporary buffer and can be recovered with this command until another item is deleted."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "u test item1\nCTRL+XO\u2019item1\u2019 deleted.recover-itemRecover test item1 (y\/n)?y[253] \u2019item1\u2019 recovered."
        ]
    },
    {
        "name":"remote-cache command",
        "Syntax":[
            "Syntax",
            "remote-cache file.reference\nremote-cache file.reference 0\nremote-cache file.reference {number.of.updates}\n"
        ],
        "description":[
            "Description",
            "The remote-cache BASIC program increases the performance of updates         over a network by sending groups of updates at a time.",
            "Typically, each update made on a remote file is sent immediately to the remote site. Because of     limitations in network throughput, this can introduce performance delays in batch update     applications. To alleviate this issue, batch updates can be cached and sent in groups. This     significantly improves performance almost to the same point as a series of local updates.",
            "To turn on update-caching and\/or to flush the cache, use the first syntax form.",
            "To turn off update-caching and to flush the cache, use the second syntax form.",
            "To set the number of updates to be cached before being sent, use the third syntax form. The higher the number of updates, the better the performance will be."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"rename command",
        "Syntax":[
            "Syntax",
            "RENAME [(DICT\/DATA)] old-filename\nTO: new-filename"
        ],
        "description":[
            "The rename command renames both the dictionary and data portions of     the file. It can also be used to rename only the dictionary or data portions of the file by     specifying DICT or DATA in the command line.",
            "The rename command cannot be used to transfer files between the dictionary         and data levels. This command sets all group update flags to allow incremental saves to be         used correctly."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "RENAME [(DICT\/DATA)] test1new name:test2"
        ]
    },
    {
        "name":"rename-file command",
        "Syntax":[
            "Syntax",
            "rename-file file.reference\nnew name: new.file.reference\n"
        ],
        "description":[
            "The rename-file BASIC program changes the name of a file, both in the master dictionary and in the dictionary of the designated file reference.",
            "The process prompts for the new name. Items within the file and its associated dictionary are not affected."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "rename-file test1new name:test2"
        ]
    },
    {
        "name":"renumber command",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"reset-port command",
        "Syntax":[
            "Syntax",
            "reset-port port.number{(options}\nreset-port tty.name{(options}\n"
        ],
        "description":[
            "The reset-port BASIC program restarts suspended output and drains both the input and output terminal buffers.",
            "For Windows: Not Supported"
        ],
        "parameter":[
            "Parameter(s)",
            "port.numberPIB associated to the device\nto restart. This command may not be issued against its own port.tty.nameDevice name to reset. This form\ncan be used on any serial device on the system, even if not connected\nto the D3 virtual machine.optionsfSuspends output option acts as if the device had sent anx-off(CTRL+S).iDrains input buffer. All characters waiting to be read from\nthe device are removed. If no option is specified, this option is\npart of the default.nRestarts output and acts as if the device had sent anx-on(CTRL+Q). If no option is specified, this option is\npart of the default.oDrains output buffer. All characters waiting to be sent to\nthe device are removed (lost). If no option is specified, this option\nis part of the default.rResets to raw mode.",
            "No other characteristic of the device is altered by thereset-portcommand. Restarting suspending output is useful\nwhen a port is stopped by ax-offand ax-oncommand that was never sent.",
            "The D3 process\nmust be connected to the D3 virtual machine. Otherwise, thetty.nameform of the command must be specified."
        ],
        "example":[
            "Example(s)",
            "reset-port 25",
            "reset-port \/dev\/tty26"
        ]
    },
    {
        "name":"reset-user command",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"resize command",
        "Syntax":[
            "Syntax",
            " resize file.reference {modulo} {(options}\n"
        ],
        "description":[
            "Description",
            "The resize command resizes a file to the preferred modulo, and         increases or decreases the apparent contiguous portion (or modulo) of the specified file         without requiring a file-restore. It either adds or releases the amount         of overflow necessary to reach the new modulo and rehashes all of the items. The rehashing         is done by groups and the current relative group being rehashed displays on the         screen.",
            "For Windows: Not Supported in FSI. ",
            "See the nt_resize command for an alternate resize method.",
            "The resize command allows a file to be read or modified while the items are                 being rehashed. The resizing process does not require a completely new block of                 overflow with a size equal to the new modulo. Instead, it allocates a new file                     segment, which is only as big as the difference between the old and new                 modulos, and maps this segment onto the existing file. The file then displays to                 have one contiguous block available even though it might really be several blocks                 internally.",
            "When a resizing command has begun rehashing a file, the command can be logged-off or interrupted                 without problems. The resizing process can then be restarted on the same line or on                 a phantom.",
            "If the modulo is not specified, then the resize command resizes the file                 according to the reallocation attribute in the file\u2019s D-pointer. ",
            "This command is executed at coldstart time to                             restart any resizing commands that were interrupted by a                         shutdown.",
            "After resizing a file, the D-pointer of that file displays a modulo equal to the new modulo. The reallocation attribute is also changed to the new modulo. The internal base and modulo of each of the file\u2019s segments display in the segment-base and segment-mod attributes. These attributes cannot be modified.",
            "Since files can now be made up of multiple segments, it is no longer valid to                     assume that the base plus the modulo in the file\u2019s D-pointer points to the FCB. ",
            "To find the FCB, add the base and the modulo of the first segment. This formula                     is not guaranteed on future releases. ",
            "Resizing processes occasionally pause during the rehashing phase because items                     cannot be moved while another user is accessing the same file in a sequential                     manner. ",
            "When resizing downwards, it is sometimes not possible to release the extra file                     space if another user has that file open. In this case, all users must close the                     file before the space can be released. When all users have closed the file,                     re-execute the resize command to release the space. "
        ],
        "parameter":[
            "Parameter(s)",
            "optionsaAllocates new file space only.If this option is used, then the new segment is added,\n                                    but no items are rehashed. This is useful for allocating the new\n                                    file space in the foreground, and then starting another resizing\n                                    process as a phantom to complete the rehashing process.sSuppresses output of the relative group counter during rehashing.uUnconditional resizing.Typically, resizing processes pause temporarily when some other\n                                    process is accessing the file in a sequential fashion. For\n                                    example, a save, an AQL, or FlashBASICselect. This is because items are in motion\n                                    during the resizing and sequential processes might find an item\n                                    twice.Theuoption disables this\n                                    behavior so that resizing proceeds irrespective of any\n                                    sequential processes. Also, theuoption\n                                    releases extra unused file space at the end of a resize down\n                                    irrespective of how many users have that file open.w{n}Waits after every group.If a numeric parameter is not specified, then this option\n                                    causes the resizing process to wait for approximately 100\n                                    milliseconds between each group that it rehashes.If an\n                                    optional numeric parameter is specified, then the process sleeps\n                                    fornseconds between each group. This option\n                                    minimizes the impact on overall system performance during the\n                                    resizing process and is strongly recommended.zRehashes a small number of groups only.This is used by thecheck-resizingandkill-resizingcommands after a resizing\n                                    process has been terminated unexpectedly.Under these\n                                    conditions, theresizecommand processes\n                                    enough groups to assure that no duplicate items occur in groups\n                                    which were previously being rehashed."
        ],
        "example":[
            "Example(s)",
            "Assume that a file calledmydataexists with a modulo of 7, and that theistatcommand indicates a suggested modulo of 13.",
            "resize mydata 13Allocating 6 additional frames for primary file space.\n Rehashing 7 group(s).\n 7\n [188] Resizing complete.",
            "The file now exists with a modulo of 13."
        ]
    },
    {
        "name":"restore-accounts command",
        "Syntax":[
            "Syntax",
            "restore-accounts {(options}\nrestore-accounts {host} {(options}\n"
        ],
        "description":[
            "The restore-accounts BASIC program restores all accounts that do not already exist on the system from the attached file-save tape or a tape created by an account-save with an active list of accounts. File statistics can be built with the restore operation. It is therefore not necessary to do a file-save after a restore operation to create file statistics."
        ],
        "parameter":[
            "Parameter(s)",
            "hostFor Windows:If a host\nis specified, the account is restored onto the host system specified.optionsframe.sizeInteger number that designates the frame size of the source\nsystem, which created save media. Specifying a frame size automatically\nenables thefoption, which has the effect of disabling\nfast restores. This option automatically affects modulos, which are\neither divided or multiplied by the specified number, according to\nthe data frame size on the target machine. For determining data frame\nsize. If the target frame size is bigger than the source frame size,\nall modulos are divided by the ratio (target\/source = ratio). For\nexample, if the target system has 2 KB data frames and the source\nsystem had 500-byte frames, the modulos would all be divided by 4.\nThis file resizing operation occurs after the reallocation parameter\nhas been checked, unless file resizing has been disabled during the\ninitial boot process.bIgnores any indexes saved on tape.cCompatible tape. This is used on tapes produced on licensee\nsystems. The restore process runs noticeably slower.dData-sensitive files. All files except the master dictionary\nare restored as ds-type files and are case-sensitive.eIndicates that the tape label is in Adds, Mentor format.fDisables fast restores. This option is required if the data\nbeing restored needs to be logged by hot-backup or transaction logging.gSuppresses the generation of indexes in cases where indexes\nare not saved to tape.nDisables file reallocation process.oOverwrite option. Applicable only when using the optional\nhost specification.qIndicates that the tape label is in non-D3 format. For example.\nR91.rRestores accounts to the FSI.uIndicates that the tape label is in Ultimate format.",
            "This is generally used with the lastfile-savecompleted after upgrading to a new release of D3. It is important\nto restore the D3 file system from the media on which D3 is provided,\nsince changes may have been made.",
            "restore-accountsusesaccount-restore (azin its processing loop.\nTheaandzoptions are described\nunderaccount-restore."
        ],
        "example":[
            "Example(s)",
            "Restores all accounts from the\ncurrent peripheral storage device.",
            "restore-accounts",
            "Restores all accounts on a tape created on a licensee\ncompatible system.",
            "restore-accounts (cu"
        ]
    },
    {
        "name":"rmbi command",
        "Syntax":[
            "Syntax",
            "rmbi {function.list}\n"
        ],
        "description":[
            "The rmbi command removes one or more functions from the list of UNIX or C built-in functions."
        ],
        "parameter":[
            "Parameter(s)",
            "function.listA list of one or more item-IDs (separated by spaces) indicating\nfunctions to add to the existing built-in functions.",
            "Functions in the function list are no longer available\nto be called from within FlashBASIC. If the function list is not specified,\nthen a list is presumed to be active. If no list is active, the file-defining\nthe user\u2019s built-in functions is rebuilt to match the list of built-in\nfunctions."
        ],
        "example":[

        ]
    },
    {
        "name":"run command",
        "Syntax":[
            "Syntax",
            " run file.reference item-ID{(options)}\n"
        ],
        "description":[
            "The run command invokes BASIC\/FlashBASIC run time, which attempts to                 load and execute a compiled BASIC\/FlashBASIC program.",
            "Programs may be created and modified using the Update processor. They can                                 be run when exiting the Update processor by using the CTRL+XR                                 command. The CTRL+XR command files the item, compiles it, and, if                                 there are no errors, runs it."
        ],
        "parameter":[
            "Parameter(s)",
            "optionsaProhibits entry into the BASIC\/FlashBASIC debugger; aborts\non error conditions.dEnters the BASIC\/FlashBASIC debugger prior to execution.This is important when\n                                                  parameters are passed in acallstatement. The FlashBASIC debugger may also be\n                                                  called at any time while the program is executed\n                                                  by pressing BREAK on the terminal.eEnters the debugger on any error condition.This option forces the operator to either\n                                                  accept the error by using the debugger or exit to\n                                                  TCL.iInhibits variable initialization.This option is not recommended due to reliability,\n                                                  transportability, and data integrity reasons. It\n                                                  causes the values in the variable area to be\n                                                  retained when the program is run. This can be\n                                                  specified only whenrunis\n                                                  being executed from thechaincommand. It allows variables to be passed from one\n                                                  program to the next.nActivates thenopagefunction on output\nto the terminal.pDirects output fromprintstatements to the spooler.This has the same\n                                                  effect as issuing a BASICprinter\n                                                  onstatement.sSuppresses run-time warning messages.",
            "Warning:Programs defined as external subroutines\ncannot berun."
        ],
        "example":[

        ]
    },
    {
        "name":"run-list command",
        "Syntax":[
            "Syntax",
            "run-list file.reference\n"
        ],
        "description":[
            "The run-list BASIC program runs a series of BASIC programs. As each one concludes, the next program is automatically executed.",
            "An active list of BASIC programs must be present, before invoking this command."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "select bp program1 program2 program3[404] 3 items selected out of 127 items.run-list bp"
        ]
    },
    {
        "name":"run.nf command",
        "Syntax":[
            "Syntax",
            " run.nf file.reference item-ID{(options)}\n"
        ],
        "description":[
            "The run.nf command invokes BASIC run time (not FlashBASIC),                 which attempts to load and execute a compiled BASIC program, even if compiled with                 FlashBASIC.",
            "Programs may be created and modified using the Update processor. They can                                 be run when exiting the Update processor by using the CTRL+XR                                 command. The CTRL+XR command files the item, compiles it, and, if                                 there are no errors, runs it."
        ],
        "parameter":[
            "Parameter(s)",
            "optionsaProhibits entry into the BASIC debugger;\n                                                  aborts on error conditions.dEnters the BASIC debugger prior to\n                                                  execution.This is important when parameters\n                                                  are passed in acallstatement.\n                                                  The BASIC debugger can also be called at any time\n                                                  while the program is executed by pressing BREAK on\n                                                  the terminal.eEnters the debugger on any error\n                                                  condition.This option forces the operator to\n                                                  either accept the error by using the debugger or\n                                                  exit to TCL.iInhibits variable initialization.This\n                                                  option is not recommended due to reliability,\n                                                  transportability, and data integrity reasons.\n                                                  Causes the values in the variable area to be\n                                                  retained when the program is run. This can be\n                                                  specified only whenrunis\n                                                  being executed from thechaincommand. It allows variables to be passed from one\n                                                  program to the next.nActivates thenopagefunction on output to the terminal.pDirects output fromprintstatements to the\n                                                  spooler.This has the same effect as issuing a\n                                                  BASICprinter onstatement.sSuppresses run-time warning messages.",
            "Warning:Programs defined as external subroutines cannot berun."
        ],
        "example":[

        ]
    },
    {
        "name":"runoff command",
        "Syntax":[
            "Syntax",
            "runoff file.reference itemlist*{(options)}\n"
        ],
        "description":[
            "The runoff command facilitates the preparation and maintenance of textual material such as memos, manuals, and so on."
        ],
        "parameter":[
            "Parameter(s)",
            "file.referenceFile that contains the items\nspecified initemlist.itemlist*Chains items to other items within\nthe same item list.optionscSuppresses the.chainand.readcommands.iOutputs the name of the next item-ID to be output.jSuppresses highlights.nPrevents pausing at page breaks when outputting to the terminal.numberSets the number of times boldface or underscore characters\nare printed.pDirects output to system printer, via the Spooler.sSuppresses boldface, underline, fonts, and default headings.uForces all output to uppercase."
        ],
        "example":[

        ]
    },
    {
        "name":"S",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"s-dump command",
        "Syntax":[
            "Syntax",
            "s-dump file.reference {item.list} {selection.criteria} {sort.criteria} {modifiers}\n{heading \"text\"} {(options)}\n"
        ],
        "description":[
            "The s-dump command writes items from a given file to the attached peripheral storage device in sorted order. The heading or header modifier allows specifying the contents of the tape label written to the tape prior to the dump. The tape must already be at load point in order to write the tape label. If no selection criteria are specified, the entire file is written.",
            "When saving to multiple reels, entering Q at the insert prompt (insert next reel and type \"C\" to continue), stops the process.",
            "If the dump is being done to streaming cartridge tape (SCT), an explicit end-of-data sequence must be written at the end, because SCT cannot back up. The t-weof (TCL) command and the FlashBASIC weof statement both write the second eod needed to indicate the end of the file. Otherwise, account-restore or sel-restore fail to see the end of the tape."
        ],
        "parameter":[
            "Parameter(s)",
            "cAllows backward compatibility with older legacy systems when\ndumping binary data.hSuppresses the tape label.iSuppresses the display of item-IDs as they are dumped.pDirects output to printer.r{frame.size}Creates dumps that are to be used on a system with a data\nframe size different from the system that created the tape. The frame\nsize designates the target system frame size. D3\u00a0utilizes 2000-byte\nframes."
        ],
        "example":[
            "Example(s)",
            "s-dump entity by name\ns-dump invoices by date by customer with date <= \"1\/1\/05\" heading \"Pre-2005 archived\ninvoices\""
        ]
    },
    {
        "name":"sample command",
        "Syntax":[
            "Syntax",
            " ssample [DICT] filename [item-list] [selection] [output] (n)\n"
        ],
        "description":[
            "The sample command creates a temporary select-list of the first    n items in a file that match the specified criteria. This command is useful   when testing a small number of items. For example, testing 100 items in a file rather than the   entire file.",
            "The sample command creates a temporary select-list containing the first      n item-IDs of the items specified in the item-list or the selection     criteria. The items referenced by the select-list are processed by the next command     executed.",
            "To permanently save the select-list, use the save-list     command. When a select-list is saved, you can retrieve it at any time with the      get-list command.",
            "A select-list can reference data in any file, not just the file specified in the original      sample statement. If two files have similar items with the same item-IDs,     you can create a select-list from one file, then use it to operate on items from the other     file."
        ],
        "parameter":[
            "Parameter(s)",
            "DICTSpecifies the file dictionary.filenameThe name of the file.item-listA list of individual item-IDs that you want to select or\n        compare against specified criteria. Enclose each item-ID in single quotes. This parameter\n        overridesn.selectionSpecifies one or more conditions that an item must meet\n        to be included in the select-list. For a complete description of selection expression\n        syntax, see thelist commandinformation.outputThe name of an attribute whose values are to be selected.\n        Each value becomes a separate item-ID in the select-list.nThe number of items to sample."
        ],
        "example":[
            "Example(s)",
            "The following example creates a select-list containing the first four items in the ORDERS file\n    whose sale date is January 15, 2018:",
            ">SAMPLE ORDERS WITH DATE = \"01\/15\/18\" (4)4 ITEMS SELECTED.",
            "If you list these items with thelistcommand, they appear in sorted\n    order:",
            ">LIST ORDERS0179\n0134\n0234\n0156\n\n4 ITEMS LISTED."
        ]
    },
    {
        "name":"save command",
        "Syntax":[
            "Syntax",
            "save {(options)}\n"
        ],
        "description":[
            "The save command invokes the backup procedure to save the entire file system, an individual account, or to perform an incremental save. It is the process invoked by the account-save and file-save commands."
        ],
        "parameter":[
            "Parameter(s)",
            "optionsaSuppresses the added information (including all update stamps\nand binary item sizes).bSaves the B-tree indexes. After afull-restore, this prevents having to regenerate indexes. Note that this option\nis only supported for UNIX and Windows VME implementations. It is\nnot supported from the Windows FSI.Warning:Saved indexes\nare platform specific and will not be restored properly on platforms\ndiffering from the originator.dPrevents the clearing of dirty bits.Note:This option should\nonly be used when performing asavein preparation\nfor a full restore.fDisplays the file names as they are saved. If omitted, only\nthe mds file and individual master dictionary (account) names are\nlisted.gDisplays file inconsistency errors when found, but skips the\ngroup and continues thesave. Errors are logged\nin the dm,errors, file in attributes 14, 15, and 16 of the error item.\nAttribute 14 is the save date, 15 is the primary group FID, and 16\nis the account > dictionary > data display information. At the end\nof thesave, a message displays indicating the\ntotal number of file inconsistency errors encountered, if at least\none was found. If used with the b option, index corruptions are also\nskipped.hTruncates any GFE's found in the save.Warning:Care should be taken when using this option because of potential\ndata loss.iIndividual master dictionarysave(account-savecommand).The account name can only be\nspecified at TCL if theaccount-savecommand is\nused. Thesavecommand does not take an account\nname at TCL. It always prompts when theioption\nis specified.Theioption can be used with an\nactive list to generate multiple account-saves. If a list is active\nand theioption is specified, the system generates\na tape that can be restored with therestore-accountscommand.jSuppresses the dirty bit counter display.kReorganizes all file of files file numbers sequentially on\nthe tape. This option is not support from the FSI.Warning:Care should be taken if reorganizing the file of files file using\nHot-Backup, Transaction logging, or an incrementalfile-save.lEach file may have a list of value mark separated item-IDs\n(stored in attribute 25 of the file) to save. This option saves only\nthat list of value mark separated item-IDs. An asterisk in attribute\n25 saves all items in the file. If there is no list, only the file-defining\nitem is saved, as if the file had a dy dictionary code. In addition,\ntheloption does not unmark (clear dirty bits) items\nthat have changed. These items are saved on subsequent incrementalfile-savecommands oraccount-savecommands.\nThis is similar to thevoption for the fullfile-save.mSame as theloption, but it additionally\nunmarks or clears the dirty bits.pDirects console listing to the printer, via the spooler.qChanges the terminal display from hierarchical format to indented\nformat.rSame as thelandmoptions,\nexcept the list is also saved with the file as a separate item in\nthe dm,file-of-files, file.sAn item is stored in dm,file-of-files, file for each file\nsaved. Thesoption generates additional statistics,\nwhich can be reviewed withlist-file-stats.tOutputs to the tape (magnetic media), which has been previously\nattached to the process. If thetoption is not specified,\nsave does all the processing, but nothing is written to the media.\nThe system prompts for the file-save tape label, which is written\non the tape as part of the tape label. Omitting thetoption is useful for regenerating system statistics and\/or finding\nfile inconsistency errors, and is the basis of fake or dummy saves.uPerforms an incremental file save or account save. This saves\nall file items and data items that have changed since the last fullfile-saveoraccount-save.vPerforms a full file save, but does not unmark the items that\nhave been changed. These items will continue to be saved on subsequent\nincremental file saves. Unless theioruoption is specified, the system does a full file save.xSaves files with a D-pointer type of dx.ySaves files with a D-pointer type of dy.",
            "The appropriate peripheral storage device must be attached\nto the current process before invoking this command.",
            "These types\nof saves can be performed:",
            "A fullfile-saveis a complete logical\nbackup of the D3 file system.An incrementalfile-savesaves only those\nitems which have changed since the last fullfile-save. Changed items since the last save are referred to asdirtyitems. If multiple incremental file-saves are done between fullfile-savecommands, the most recent incrementalfile-savecontains the accumulated changes since the last\nfullfile-save(see theuoption).A list drivenfile-savesaves all items\nfor a given file that are specified in thedm,file of files,files starting at attribute 25 of the item representing that file.\nAttribute 25 begins theselect list(seelandmoptions).Anaccount-savesaves all the files in\na single accountAn incrementalaccount-saveis like an\nincrementalfile-save, but only affects the files\nin a single account.Adummyorfakesaveis a\nsave without thet(tape) option. This is useful\nin cases where the D3 file system needs to be verified for integrity.",
            "Thesavecommand can also be driven from\nan active list, like any other AQL command, although it is truly not\nan AQL command. If a list is active whensaveis\ninvoked, each item in the list is treated as an account name. On a\nfullfile-savewith a list active, a fully restorable\ntape is created. This automatically includes the dm account, even\nif it is not in the list. On anaccount-savewith\na list active, the prompt for account name does not appear. This type\nof save is not fully restorable, unless the dm account is in the list.\nThis type of tape may be used withrestore-accounts. In both of these types of saves, the dirty bits are not cleared\nunless thevoption is used.",
            "Note:There is a\npotential conflict with this function and thelandmoptions. If these options are used and a list is active,\nthe active list replaces the list in thedm,file of files,file.",
            "In any type of save process, the D-pointer to the\nfile determines the course of action for saving or not saving files.\nThe D-pointer type is attribute 1 of its corresponding file-defining\nitem. Files are saved according to these rules:",
            "d, dc, dl, and dp files are always saved.dx files are not saved. Any files beneath a dx file are also\nnot saved. These file can be replaced with corrected ones using thexoption.dy file pointers are saved, butnotthe data within\nthem. After arestore, a dy file is emptied. This\nfile can be replaced with a corrected one using theyoption.",
            "The system does not save frames which are in the overflow\ntable (unused frames), so the amount of backup media required is related\nto the number of frames currently in use.",
            "When saving to multiple\nreels, the system prompts with:",
            "Load volume #n and type \u2019C\u2019\nlabel 08:00:00 16 Feb 2003 DATA \"account.name\" # -",
            "The prompt accepts either the letterc, which tells it to continue after inserting the next sequential\nreel, or the letterq, to quit and stop the\nsave."
        ],
        "example":[
            "Example(s)",
            "to dm\nset-sctTape attached block size: 16384\n[1082] Tape device is attached to quarter inch Streaming Cartridge Tape\nsave (bft)\nfile-save tape label = daily-backup\n1 35 > dm\n1 36 > dm > newac\n1 37 > dm > newac > newac\n.\n.\nLoad volume #2 and type \u2019C\u2019\nlabel 08:00:00 16 Feb 2003 DATA dm daily-backup #\n.\n.\n2 142 > lastaccount > lastfile > lastitem\nClearing dirty bits..."
        ]
    },
    {
        "name":"save-list command",
        "Syntax":[
            "Syntax",
            "save-list {{file.reference} {list.name}}\n"
        ],
        "description":[
            "The save-list command writes the list of item-IDs generated by a select, sselect, qselect, or get-list command."
        ],
        "parameter":[
            "Parameter(s)",
            "save-listMust be invoked immediately after the command that created\nthe list.file.referenceSpecifies a file in which to save the list. If not specified,\nthe list is saved in the pointer-file.list.nameSpecifies the name of thelist-item. If there\nis already an item with the specified item-ID, it automatically is\noverwritten by the new list. If not specified, the default name,%user-ID, is used."
        ],
        "example":[
            "Example(s)",
            "sselect entity with area.code \"714\" by name[404] 16782 items selected out of 272876 items.save-list orange.countyList \u2019orange.county\u2019 in \u2019pointer-file\u2019 saved."
        ]
    },
    {
        "name":":scroll command",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"search command",
        "Syntax":[
            "Syntax",
            "search file.reference {item.list*} {(options)}\n"
        ],
        "description":[
            "The search command searches a file for the existence of one or more strings of characters in any attribute and optionally creates and saves a list."
        ],
        "parameter":[
            "Parameter(s)",
            "optionsaOutputs in standard assembly listing format.dOutputs entire item on any match.fOutputs only the first line containing the string in an item.eAllows searching a file for items that do not contain any\nof the specified strings.iSuppresses the item-ID output. Does not affect other output.jOutputs only one match per item (overridden by thedoption).lPrompts for list name and saves the resulting list under the\ngiven name. This does not show matches or leave an active list at\nthe end of the process.nOutputs the report without pausing at the bottom of each page.oDisplays item-IDs with matches and does not create a list.pDirects output to the system printer, via the spooler (overridden\nby theloption).sSuppresses line number output.uOutputs two attributes after, and one line before, the matching\nline.",
            "After invoking the command, the promptsearch for:displays on the screen. Any of these responses to this prompt are\nvalid:",
            "A string of charactersPressing Enter begins the search, after at least one string has been entered.",
            "The item-IDs can be saved in a list when theloption is specified. As the search progresses through the file,\nit displays all lines that match the specified search strings by default."
        ],
        "example":[
            "Example(s)",
            "The following example searches for vb in the master dictionary and saves the list as vb.list\n    after completing.",
            "search md (lsearch for:vbsearch for:\n list name:vb.listlogoff\n sselect\n td\n ...\n [2000] 15 out of 1512 item(s) found."
        ]
    },
    {
        "name":"search-system command",
        "Syntax":[
            "Syntax",
            " search-system {destination.file} {(options)}\n"
        ],
        "description":[
            "Description",
            "The search-system BASIC program searches every file in the D3 file   system for the existence of one or more strings of characters in any attribute, and optionally   creates and saves a list.",
            "If a master dictionary name is provided, only that account is searched. The      search-system command searches remote accounts (Q-pointers) in the mds.",
            "The search-system command scans each item in each file looking for a string     match in any attribute. If a match is found, it displays the item-ID and the attribute     containing the matching string. Any number of unique strings can be specified. The search is     successful if any one string matches any portion of the attribute.",
            "Search process",
            "A data file search can be specified to search system-wide horizontally:",
            "The file name must already exist. As items are found, control items       are added to the output file. Control items are  sequentially-assigned numeric item-IDs,       beginning with 1.",
            "The system repeatedly asks for additional strings.",
            "A question mark can be used as a wildcard character in the string, with up to               15 different strings specified. ",
            "You can locate a string that contains a question mark using a backslash followed by a               question mark:  \\ ? ",
            "The following prompt indicates at which        level of the file system to begin the       search:",
            "The        search-system command has hierarchical level control. The four levels       are:",
            "Any range can be specified. ",
            "This       is the level to continue the search. The routine can either traverse a single branch of the       hierarchy (such as a single account and all its files) or it can traverse laterally       across the branches (such as all the data files only of all the accounts). The        stop\/lateral level must be equal to or lower than the start level.",
            "Output is an item of the format:"
        ],
        "parameter":[
            "Parameter(s)",
            "options?Displays online usage information about the process.aDisplays all items searched, including items in which the\nstring was not found.cClears the output file prior to execution.mChecks for multiple occurrences.pDirects output to the system printer via the spooler.sSuppresses display on the screen.qSearches remote accounts and files."
        ],
        "example":[

        ]
    },
    {
        "name":"sel-restore command",
        "Syntax":[
            "Syntax",
            " sel-restore destination.file{item.list*} {(options)}\n Account name on tape:? account.name\n File Name:? tape.file\n"
        ],
        "description":[
            "The sel-restore command selectively restores items from either a file-save, account-save, incremental save, or transaction log media to a specific file."
        ],
        "parameter":[
            "Parameter(s)",
            "destination.fileFile to restore into. The file\nmust already exist.tape.fileName of the file on the offline\nmedia. The system prompts for thefile nameof the file to\nrestore from the save media. If a null file reference is entered,\nthe account\u2019s master dictionary is restored.item.list*Designates which items to restore\nfrom tape. A null list restores all items.optionsaIndicates that the media is already positioned at the correct account.Theaoption is used to avoid rewinding and searching. If the order of the\n         file on the tape is known (from thelist-file-statsreport generated\n         following the save), then multiple files can be restored without rewinding the media.After the first file is restored on the account, the nextsel-restoreis done using theaoption. Thesel-restoreprocess prompts directly for the file reference. The system\n         next prompts for full, incremental, or transaction restore. As the tape is searched, the\n         file names on it are printed, along with the file numbers. Names are indented one space for\n         account names, indented two spaces for dictionaries, and indented three spaces for data\n         file names. At the completion of the restore, the system again prompts for incremental and\n         transaction restore.cCauses every item in the current file to be a candidate for restore. This ensures that data\n        can be restored even if a D-pointer is damaged on the tape. This option is used with thenoption.fDisplays all file references for all accounts.This is not compatible with thenoption.gPrompts the user for a group number that must match for an item to be restored.Items that have been saved (for example,account-save) have a saved\n         associated group number. This saved associated group number is checked to determine if a\n         match has occurred.iIndicates that Item-IDs of the restored items are not to be printed.nRestores a file by its number.The process prompts for the number of the file to restore.\n         This option is particularly useful for restoring from a multi-reel backup media, so that\n         the restore can begin from the reel where the file resides (or begins). The file number can\n         be found on thefile statistics reportfor the appropriate save media.oOverwrites if a duplicate item-ID is found on disk.D-pointers are protected from being\n         replaced by duplicate item-IDs.sSuppresses the message\u2019item-ID\u2019 exists on file.zBypasses prompts for restore only.",
            "Normal backup procedures ensure all the items in all the\nfiles are saved from time to time. Critical files can be backed up\ncontinuously using the transaction logger.",
            "The media used for\nthis backup can be SCT, half-inch tape, floppy disks, and so on. For\nconvenience, the save media is referred to as tape, or media.",
            "This command can be invoked after the physical save media is put in the appropriate I\/O device\n    and attached with the appropriate command.",
            "The specified account name and file reference variables\nmust match exactly with the appropriate name on tape.",
            "To check the contents of the tape, the files can be listed by using asel-restoreand specifying a dummy account name and file reference on the\n    tape. A dummy account\/file name is one that does not exist in the system. For example, oxymoron.\n    The entire tape is searched looking for the dummy account, printing the names of the files on\n    the tape.",
            "In restoring both the dictionary and data\nsection of a file, restore the data section first. Although the dictionary\nname appears before the data section name on the screen, the data\nis saved (and restored) before the dictionary.",
            "At any point, the media can be moved backward (using thet-bck (n)command),\n    or forward (using thet-fwd (n)command) to position it. This is assuming\n    that the save media device supports the command. Also, asel-restorecommand\n    with theaornoption can be started. This might be faster\n    than restarting the tape from the beginning when restoring both the dictionary and the data\n    sections of a file, or when restoring multiple files. However, SCTs do not allowt-bck. The only recourse is rewinding (t-rew) and moving\n    forward to the correct file (t-fwd).",
            "Account dictionaries (master dictionary\nitems) follow all other files for each master dictionary on the tape.",
            "If thesoption is specified when the save tape is created, the contents of the\n    tape can be seen usinglist-file-statsanytime before another file save using\n    thesoption.",
            "Note:The termtapeis used for a documentation convention only.The type of media is\n     determined prior to using this command by the use of either theset-floppy,set-sct, or other media-attaching commands. After the media is attached,\n     all of the typical tape-handling commands can be used, with a few exceptions such ast-retenandt-erase."
        ],
        "example":[
            "Example(s)",
            "Example 1",
            "sel-restore dict devicesRestore from (F)ull account, (I)ncremental, (T)ransaction log:_ fAccount name on tape:dmFile name:dict devices:\n      Scans the file-save tape, and finds the \u2019dm\u2019 account\n      Scans the DM account and finds the \u2019dict devices\u2019 file\n      Scans the DEVICES file and restores the requested item(s)\n      :\n Restore from Incremental save tape?_ noRestore from transaction log?_ no",
            "Example 2",
            "This example shows thesel-restorecommand using thegoption:",
            ":sel-restore file3 (g\n Restore from F)ull\/Account, I)ncremental or T)ransaction log (f\/i\/t):f\n account name on tape:gg\n file name:file1\n group#:17526\n gg 294\n file1 297\n file1 298\n 1 78\n 2 27\n Restore from incremental save tape (y\/n)?nRestore from transaction log tape (y\/n)?n[992] 2 item(s) have been restored"
        ]
    },
    {
        "name":"send-message command",
        "Syntax":[
            "Syntax",
            "send-message user-ID text\nsend-message * text\nsend-message ! port.number text\nsend-message !* text\n"
        ],
        "description":[
            "The send-message BASIC program directs a text message to a specific port, a specific user-ID, all current users, or every device attached to the system."
        ],
        "parameter":[
            "Parameter(s)",
            "user-IDSends the message to any port\nwhere the specified user-ID is logged on.*Sends the message to all users\ncurrently logged on to the system.!port.numberSends the message to the specified\nport.!*Sends the message to every terminal\n(and serial printer) connected to the system, whether or not the device\nis logged on. (Even terminals sitting at the logon screen receive\na message).optionsbForces beep on receiving process.dForces no delay on receiving process.",
            "The recipient of the message sees the time\/date, the user-ID\nand port number of the user who sent the message, and the text of\nthe message. A beep (bell, alert) is sounded and the process sleeps\n3 seconds. The text need not be enclosed in quotation marks.",
            "If the recipients of the message is in the Update processor or in\na menu, they are prompted to press ENTER to continue before the screen\nis redisplayed. This message times out in 60 seconds.",
            "If the\nrecipient(s) of the message is shelled out into UNIX, then the message\nis written directly to the appropriate tty device.",
            "The@(x,y)and@(-x)functions may be used\nwithin message text.",
            "For example,msg !2 @(-1) @(40,20). This message clears the screen, then displays this message at cursor\nposition 40,20 on port 2. When using the@function,\nthe beep and the 3-second delay are disabled on the process receiving\nthe message, unless theband\/ordoptions are used."
        ],
        "example":[
            "Example(s)",
            "Sends the message to port 0 only.",
            "send-message !0 are you there?",
            "Sends the message to port 5. The message first clears\nthe screen, then prints Here is some text at cursor location (40,10).",
            "send-message !5 @(-1) @(40,10) Here is some text"
        ]
    },
    {
        "name":"set command",
        "Syntax":[
            "Syntax",
            "set {variable.name{={\"|\u2019}variable.value{\"|\u2019}}}\n"
        ],
        "description":[
            "The set BASIC program modifies the value of a D3 user shell variable."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "setmycv=1display @$mycv1"
        ]
    },
    {
        "name":"set-8mm command",
        "Syntax":[
            "Syntax",
            " set-8mm {(options}\n"
        ],
        "description":[
            "The set-8mm command sets the 8mm data cartridge as the tape device, by invoking the set-device command and passing in the argument 8mm and an i option. The default block size is 16384.",
            "The list of installed devices displays with an asterisk in front of the selected device. If more than one 8mm tape is present on the system, this command selects the first tape in the configuration file. To select another device, use the set-device command."
        ],
        "parameter":[
            "Parameter(s)",
            "optionscChanges tape block size. The current tape block size displays\nand the user is prompted for the new block size (0 or 512). A tape\ncan only be read with the same block size that it was written. Normally,\nD3 uses a block size of 0, which means variable length blocks, but\nthis option is provided for compatibility with other systems."
        ],
        "example":[

        ]
    },
    {
        "name":"set-abs command",
        "Syntax":[
            "Syntax",
            "set-abs file.reference{(options)}\n"
        ],
        "description":[
            "The set-abs command designates a file as the data section associated to the boot ABS, or control the boot ABS specifications."
        ],
        "parameter":[
            "Parameter(s)",
            "optionsnumberDesignates the number of frames to load into boot ABS. The\nnumber should be large enough to ensure the entire code area in the\nABS area is loaded. If the number is not specified, the entire ABS\narea is loaded. This option is relevant only with theloption.lCopies the ABS area from the abs file to boot ABS.sSizes the abs file to the size of boot ABS. If boot ABS is\nlarger than specified in the abs file, frame specification items are\nadded to the abs file as needed.",
            "If no options are specified, the abs file is set up to\ndefine the boot ABS area.",
            "This command is intended for use only\nby system development personnel.",
            "CAUTION:",
            "Theset-abscommand is normally inserted in thesystem-coldstartmacro, and should be used with extreme caution."
        ],
        "example":[
            "Example(s)",
            "Loads 1950 frames from the abs\nfile into boot ABS.",
            "set-abs ABS (1950)"
        ]
    },
    {
        "name":"set-active-update command",
        "Syntax":[
            "Syntax",
            "set-active-update {(options}\n"
        ],
        "description":[
            "The set-active-update command ensures that data fragments are cleaned-up from file-system frames whenever data is deleted from a file. Additionally, frames that are being returned to local overflow are also scrubbed."
        ],
        "parameter":[
            "Parameter(s)",
            "optionsnTurns active update feature on.fTurns active update feature off."
        ],
        "example":[

        ]
    },
    {
        "name":"set-auto-disconnect command",
        "Syntax":[
            "Syntax",
            "Run dm,bp, set-auto-disconnect {(q}"
        ],
        "description":[
            "The set-auto-disconnect command goes through the SECURITY-CONTROL   file and sets the auto-disconnect value for all PIBs at system-coldstart."
        ],
        "parameter":[
            "Parameter(s)",
            "optionsqQuiet mode. Warning messages will not be displayed."
        ],
        "example":[

        ]
    },
    {
        "name":"set-batch command",
        "Syntax":[
            "Syntax",
            "set-batch {port.number{,trigger}} {(options}\nset-batch {*{,trigger}} {(options}\n"
        ],
        "description":[
            "The set-batch BASIC program displays or changes the current sensitivity value for the interactive\/batch trigger.",
            "For Windows: Not Supported"
        ],
        "parameter":[
            "Parameter(s)",
            "port.numberInteger number between 0 and\nthe maximum number of ports.*Sets and displays the data for\nall ports on the system in place of a port number.triggerA sensitivity value which defines\nhow long it takes for a process to become abatch process.\nIf the trigger value is not specified, the current setting displays.\nThe trigger value can be either one of these:0Forces the process to stay ininteractivemode, giving\naccess to all of the memory.[1,127]Sets the process to become batch after the trigger disk reads\nwithout any keyboard input. After that point, the process is prevented\nfrom using excessive amounts of memory and is disabled for a short\nperiod, set byset-batchdly, if it attempts to\ndo a disk read when an interactive process is accessing the disk.\nThis tends to limit the impact of batch jobs reading a lot of data\n(for example, an AQL statement) on the overall system performance.[-128,-2]Sets the process to become batch after the ABS (trigger) disk\nreads, as above. The difference is that, in addition to having the\nsame limits as in the previous case, the process is disabled for a\nshort period every ABS (trigger) disk reads, even if there is no concurrent\ndisk access by an interactive process. This setting is useful for\nprocesses which modify a large amount of data.Note:The performance\npenalty on these processes can be severe, depending on the setting.\nThis option should be used only on background tasks.trigger=-2is the most stringent setting\n(disables process every other disk access)trigger=-128is the minimum penalty (disables\nprocess every 128 disk reads).optionsbDisplays batch processes only.iDisplays interactive processes only.qQuiet mode suppresses all terminal output when changing values.",
            "Note:When using a negative trigger value,set-batchdisplays the setting as a number larger than 127. For example,set-batch 0,-100displays 156 (256-100). The value of 1\nis not a legal trigger value.",
            "The display includes:",
            "Total number of readsTotal number of reads completed as a batch process since the\nlast boot, or since the last time the counters were cleared"
        ],
        "example":[
            "Example(s)",
            "set-batchpib   trig   status   reads   tot.read   tot.btch   %batch   05 mar 2002 page 1\n29    27     inter    11      744        0          0.00",
            "In the example above, port 29 isinteractive, has\na batch trigger of 127, has read 11 times since the last keyboard\ninput, has read 744 times since the last boot time (or since the counters\nwere cleared), and has done 0 reads while defined as abatchprocess.",
            "The report includes the following headings:",
            "pibD3 port number (PID)trigTrigger valuestatusCurrent status of the process, is eitherinteractiveorbatch.readsNumber of disk reads since the last keyboard input.tot.readTotal number of disk reads since the last boot, or since the\ncounters were cleared (logon).tot.btchNumber of disk reads done while it was a batch process.%batchPercentage of disk reads done while it was a batch process,\nas compared to the total number of disk reads.",
            "Sets the process 3 to forcedinteractivemode. Whatever\nthe number of disk reads the process does, it remainsinteractive(highest priority).",
            "set-batch 3,0",
            "Sets the batch trigger counter of process 5 to 100. After\n100 disk reads without any keyboard input (for aselect, for instance), the process becomesbatch, and is a lower\npriority than the interactive processes.",
            "set-batch 5,100",
            "Sets the batch trigger counter of process 10 to -50. After\n50 disk reads without any keyboard input (for aselect, for instance), the process becomesbatch, and is disabled\nfor a short time every 50 disk reads.",
            "set-batch 10,-50"
        ]
    },
    {
        "name":"set-batchdly command",
        "Syntax":[
            "Syntax",
            "set-batchdly {{trigger.value}{,{trigger.weight} {,{cancel.trigger}}}}\n"
        ],
        "description":[
            "The set-batchdly BASIC program displays or changes the current sensitivity value for the interactive\/batch trigger, as well as the weight of the trigger and the trigger cancel value.",
            "For Windows: Not Supported"
        ],
        "parameter":[
            "Parameter(s)",
            "trigger.valueNumber of concurrent disk reads performed by interactive processes\nthat must be occurring for a batch process requesting a disk read\nto be suspended. This value should normally be set to 1.trigger.weightBias value, expressed in milliseconds, to determine how important\ninteractive processes are over batch processes. Its default value\nis 0. A null value minimizes the difference between interactive and\nbatch processes. Batch processes are prevented from using too much\nmemory.cancel.triggerNumber that allows the entire machine to become batch when\nno interactive activity is taking place. Its value is derived by taking\nthe total number of memory buffers and dividing by 2.",
            "Adjusting the relative priority of batch and interactive\nprocesses is done by a dynamic adjustment of both memory usage and\ndisk access.",
            "The setting affects the whole virtual machine,\nand remains in effect until the virtual machine is rebooted."
        ],
        "example":[
            "Example(s)",
            "Displays the current setting.",
            "set-batchdlyTrigger: 1. Delay: 1000 ms. Continuous batch reads trigger: 9000",
            "Sets a new trigger weight to 100 milliseconds. In effect,\nthis artificially suspends the batch processes, which attempts a disk\nread while an interactive process is doing a disk read. The continuous\nbatch trigger is unchanged.",
            "set-batchdly 1,100Old trigger: 1. Delay: 1000 ms. Continuous batch reads trigger: 9000",
            "Sets the cancel trigger value to 500. This indicates that\nwhen there are more than 500 disk reads performed by batch processes\nwithout any intervening interactive reads, normal priority is assigned\nto batch reads.",
            "set-batchdly ,,500Old trigger: 1. Delay: 100 ms. Continuous batch reads trigger: 9000"
        ]
    },
    {
        "name":"set-baud command",
        "Syntax":"",
        "description":[

        ],
        "parameter":[
            "Parameter(s)",
            "port.numberSerial port to change. If the\nport number is not specified, the baud rate is set on the current\nport. A -1 can also be specified to indicate the current port.The baud rate can be one of these supported baud rates: 110, 150,\n300, 600, 1200, 2400, 4800, 9600, 19200. The default baud rate for\neach port is 9600.For UNIX:The port number can be\nspecified either by a number or by a device name, such as \/dev\/tty3,\nin which case the port does not have to be connected to the D3 virtual\nmachine. \/dev\/ can be omitted. This command is provided for compatibility\nwith non-UNIX implementations.For Windows:Supports the\nserial port number specified.word.lenData length, which can be any\nnumber between 5 and 8, inclusive.For UNIX:If no UNIX\nprocess is connected to the device,set-bauddisplays:Process not connected.In this case, the device is probably not initialized\nproperly or not connected to a physical terminal. The form with a\ntty name, instead of a port number, should then be used.For\nWindows:Supports the specified port number and data length.parityData parity. Note that there\nis nomarkorspaceparity supported. These values are\npermitted:0ornIndicates no parity.1oroIndicates odd parity.2oreIndicates even parity.stop.bitsNumber of data stop bits, which\ncan be 0, 1, or 2.",
            "Warning:For UNIX:The UNIXsttycommand can be used to change the port setting, except for the current\nport.For Windows:Thesttycommand is not\nsupported."
        ],
        "example":[
            "Example(s)",
            "set-baudLine number: \u00a04 (\/dev\/tty4)\nBaud rate \u00a0: 9600\nParity \u00a0\u00a0\u00a0\u00a0: none\nStop bits \u00a0: 1\nWord length : 8"
        ]
    },
    {
        "name":"set-bootsleep command",
        "Syntax":[
            "Syntax",
            "set-bootsleep seconds\n"
        ],
        "description":[
            "The set-bootsleep BASIC program sets the delay (in seconds) before the system is booted automatically.",
            "For Windows: Not Supported"
        ],
        "parameter":[
            "Parameter(s)",
            "secondsValue 0-3600.Note:If seconds\nis set to 0, there is no chance to interrupt the boot process."
        ],
        "example":[

        ]
    },
    {
        "name":"set-break command",
        "Syntax":[
            "Syntax",
            "set-break {decimal.value}|{.hexadecimal.value}|{off}|{esc}|{^} {(options}\n"
        ],
        "description":[
            "The set-break BASIC program displays or changes the value of the break character used as an optional substitute for the BREAK key for the current port."
        ],
        "parameter":[
            "Parameter(s)",
            "The initial value of this character\nis set for the entire virtual machine by thebrkchrstatement in the configuration file. Without any argument, this\ncommand displays the current value.",
            "decimal.valueValue 0-255.hexadecimal.valueValue 0-ff. This must be preceded\nwith a period.offDisables the BREAK key.escDefines the ESC key as the BREAK\nkey.^Indicates the character specified\nis a control character.optionsqQuiet option suppresses all terminal output.",
            "Theset-break offdisables the BREAK\nkey. The value to assign the BREAK key can be referenced by its ASCII\nor hexadecimal value.",
            "Using the escape character as the value assigns 27 (x'1b').Using theoffcommand as the value assigns\n255 (x'ff').Using a character specification assigns that character to\nthe BREAK key.Using the^indicates the character specified\nis a control character.",
            "When this function is enabled by assigning a value other than\nx'ff' to this character, and when thebrk-level commandhas been issued, pressing the corresponding key pushes one more\nTCL level. When thebrk-debug commandis issued, pressing the corresponding\nkey enters the FlashBASIC or system debugger.",
            "Assigning anunreasonablevalue to the break character will have unpredictable\nresults. For example,set-break 13makes pressing\nENTER push a level or break."
        ],
        "example":[
            "Example(s)",
            "Displays the current definition\nfor the BREAK key.",
            "set-breakBreak value x\u20191C\u2019 (decimal 28)",
            "Defines the BREAK key as CTRL+C.",
            "set-break 3Break value x\u201903\u2019 (decimal 3)\nPrevious value x\u20191C\u2019 (decimal 28)",
            "Defines the ESC key as the BREAK key.",
            "set-break escBreak value x\u20191B\u2019 (decimal 27)\nPrevious value x\u201903\u2019 (decimal 3)"
        ]
    },
    {
        "name":"set-cmem command",
        "Syntax":[
            "Syntax",
            "set-cmem {size} {(options}\n"
        ],
        "description":[
            "The set-cmem BASIC program displays or changes the size of the data area used for the BASIC\/C or BASIC\/GM Assembler interface for the current process.",
            "For Windows: Not Supported"
        ],
        "parameter":[
            "Parameter(s)",
            "sizeSpecifies the new data size.\nTheminimum size is 1KB. There is no maximum.\nIf the size is not specified, the current size displays.\nThe new size remains valid for the current process. At boot time,\nthe default size is 32 KB.optionsqQuiet mode suppresses all terminal output."
        ],
        "example":[
            "Example(s)",
            "set-cmemBASIC\/C data size: 32768 bytes (32 K)"
        ]
    },
    {
        "name":"set-compat command",
        "Syntax":[
            "Syntax",
            "set-compat {environment} {(g}\n"
        ],
        "description":[
            "The set-compat command allows a user (port), or the global environment, to be set to a particular Pick compatible environment. Using this command allows functionality to be added to D3 that is specific to a particular Pick compatible environment."
        ],
        "parameter":[
            "Parameter(s)",
            "environmentAPSets to Advanced Pick compatibility.D3Sets to D3 compatibility (default).mvBaseSets to mvBase compatibility.RealitySets to Reality compatibility.SequoiaSets to Sequoia compatibility.UltimateSets to Ultimate compatibility.gSets the compatibility setting globally."
        ],
        "example":[

        ]
    },
    {
        "name":"set-compiler command",
        "Syntax":[
            "Syntax",
            "set-compiler {compat.version}\n"
        ],
        "description":[
            "The set-compiler BASIC program sets backward BASIC compiler compatibility."
        ],
        "parameter":[
            "Parameter(s)",
            "compat.versionapSets to Advanced Pick compatibility.gaSets to General Automation compatibility.pickSets to general Pick compatibility.extSets to extended compatibility (default).r83Sets to R83 compatibility.",
            "Note:See the$options directivefor more information on each\nof these compatibility settings."
        ],
        "example":[

        ]
    },
    {
        "name":"set-date command",
        "Syntax":[
            "Syntax",
            "set-date mm\/dd\/yy{yy}\nset-date dd mmm yy\n"
        ],
        "description":[
            "Description",
            "The set-date BASIC program sets the system software date, and optionally the system hardware clock.",
            "For Windows: Not Supported. Use the Windows utility or the BIOS to set the date.",
            "The date displays automatically at the TCL prompt by pressing ENTER, or CTRL+M. The time command displays the time and date.",
            "The D3 system date is set as a difference from the UNIX system date. Normally, the difference is 0, making both dates equal."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "set-date 2\/20\/2003"
        ]
    },
    {
        "name":"set-date-eur command",
        "Syntax":[
            "Syntax",
            " set-date-eur {(options}\n"
        ],
        "description":[
            "The set-date-eur command toggles the standard (American) date format to European\/International format: dd\/mm\/yy for input and output purposes."
        ],
        "parameter":[
            "Parameter(s)",
            "optionsLAllows the setting of the date format locally for each PIB.The default local setting is\n         determined at logon by the global setting. If this option is employed, only the local\n         setting is changed. Otherwise, both the global and local settings are changed."
        ],
        "example":[

        ]
    },
    {
        "name":"set-date-format command",
        "Syntax":[
            "Syntax",
            "set-date-format {country.code} {(options}\n"
        ],
        "description":[
            "The set-date-format command allows changing the domestic time\/date format using items from the date-format file.",
            "For Windows: Not Supported"
        ],
        "parameter":[
            "Parameter(s)",
            "country.codeValid list of country codes:usUnited States.grGerman.itItalian.spSpanish.ukEnglish\/United Kingdom.optionssSets system date format using the item date-format in thesystem-configfile.uUpdates the item date-format in thesystem-configfile using the specified country code."
        ],
        "example":[

        ]
    },
    {
        "name":"set-date-std command",
        "Syntax":[
            "Syntax",
            " set-date-std {(options}\n"
        ],
        "description":[
            "The set-date-std command toggles the European\/International date format to standard (American) format: mm\/dd\/yy for input and output."
        ],
        "parameter":[
            "Parameter(s)",
            "optionsLAllows the setting of the date format locally for each PIB.The default local setting is\n         determined at logon by the global setting. If this option is employed, only the local\n         setting is changed. Otherwise, both the global and local settings are changed."
        ],
        "example":[

        ]
    },
    {
        "name":"set-date-window command",
        "Syntax":[
            "Syntax",
            " set-date-window {n} {(options)}\n"
        ],
        "description":[
            "Description",
            "The set-date-window command allows specifying the rollover point on your system.",
            "The rollover point determines the numeric cutoff for which century (20th or 21st) is being referred to when representing the year in 2-digit format within a program. For example, if the rollover point is set to 30 (the default), specifying a 2-digit representation of the year between 00 and 29 means you are referring to the years 2000 - 2029. Conversely, specifying a 2-digit representation of the year between 30 and 99 means you are referring to the years 1930 - 1999."
        ],
        "parameter":[
            "Parameter(s)",
            "nTwo-digit number specifying the rollover point (year).If a non-numeric parameter is specified, an error message is returned.If no parameter is specified, the currently set rollover point is returned.optionsThe following options are supported:iSuppress the output for this command.xIndicates that the value specified innis expressed in hexadecimal format."
        ],
        "example":[

        ]
    },
    {
        "name":"set-decimal command",
        "Syntax":[
            "Syntax",
            "set-decimal {(options}\n"
        ],
        "description":[
            "The set-decimal command designates that a numeric expression of 1 is equal to 100 units."
        ],
        "parameter":[
            "Parameter(s)",
            "optionsuSets the system default."
        ],
        "example":[
            "Example(s)",
            "set-decimalu bp test01 print oconv(300,\u2019u01b6\u2019);* Unit input-conversion user exit\n02 print oconv(5,\u2019u11b6\u2019);* Unit output-conversion user exit",
            "This output displays:",
            "3\n500"
        ]
    },
    {
        "name":"set-def-tape-blk command",
        "Syntax":[
            "Syntax",
            "set-def-tape-blk block.size device.number\n"
        ],
        "description":[
            "There are two methods to configure the drive in variable block size mode:",
            "For Windows: Not Supported",
            "For AIX: Not Supported",
            "For Linux: Supported"
        ],
        "parameter":[
            "Parameter(s)",
            "block.sizeSize of the block.device.numberNumber of the tape device.",
            "From the TCL prompt:",
            "Enter:list-deviceReview the list of devices and determine the correct\ndevice.Enter:!mt -f device.name setblk 0wheredevice.nameis the device name\nlisted in the TCL command.Execute this command after every\nLinux shutdown."
        ],
        "example":[
            "Example(s)",
            "To set tape device number 5 to\na physical block size of 512, enter:",
            "set-def-tape-blk 512 5"
        ]
    },
    {
        "name":"set-device command",
        "Syntax":[
            "Syntax",
            " set-device {?} {(options}\n set-device {device} {(options}\n set-device {keyword} {(options}\n"
        ],
        "description":[
            "The set-device FlashBASIC program attaches the SCT, floppy disk, half-inch, or special devices.",
            "This command is a more generalized form of the standard set-half, set-sct, set-8mm, or set-floppy commands."
        ],
        "parameter":[
            "Parameter(s)",
            "deviceExpressed as a number, through\noptions, or by up to three keywords extracted from the fields device,\ntype or options in thelist-devicecommand. Devices\nare numbered from 0 to 9 as they display in the configuration file.Note:Options cannot allow complete selection. If a system has two identical\ndevices, for example, two 5.25-inch floppy disks, the options will\nselect only the first. The form with a device number must be used\nfor these cases, using either the device number or the UNIX device\nname as keyword. If no argument is provided,set-devicelists the currently defined devices, aslist-device.keywordIdentifies the device\u2014available\nkeywords are: 720k, 1.2M, 1.44M, 31\/2\", 51\/4\", floppy, sct, 8mm and\n\"half inch\".Note:2.88 MB hard disk drives are supported.options33.5-inch floppy disk.55.25-inch floppy disk.99-track, half-inch tape.a5.25-inch floppy disk.b3.5-inch floppy disk.cChanges the 8 mm tape block size. The current tape block size\ndisplays and the operator is prompted for the new block size (0 or\n512).For UNIX:The default block size is set at 0 at install\ntime. A block size of 0 means variable length.For Windows:Supports the current tape block size.d4 mm DAT tapeeSelects 2.88 MB floppy disk.fFloppy disk (3.5-inch or 5.25-inch as default).hHigh density (1.44 M for 3.5-inch floppy disk, 1.2 MB for\n5.5-inch floppy disk, 6250 bpi for 9-track tapes, 150 MB for quarter-inch\ntapes).iSuppresses display of devices after the command is complete\n(used in macros).kHard disk pseudo tapes. These devices are removable or fixed\nhard disks or regular UNIX files. Their size is fixed and determined\nby the device or by the maximum file size for a user. The main usage\nfor these devices is for small, fast t-dumps\/saves, transaction logging,\nor incremental saves.lLow density (720 KB for 3.5-inch floppy disk, 1600 bpi for\n9-track tapes).mMedium density (720 KB for 5.25-inch floppy disk, 3600 bpi\nfor 9-track tapes).nNetwork pseudo tape. This device has aninfinitesize.\nIt is assumed another system is reading the data at theother endof the network.qQuarter-inch tape.rPrevents an automatic rewind on the device. This option must\nbe used to set the device to a floppy disk with an unformatted floppy\ndisk in the drive.sStandard density (360 for 5.5-inch floppy disk, 60 MB or 120\nMB for quarter-inch (SCT) tapes).v8 mm Tape"
        ],
        "example":[
            "Example(s)",
            "Example 1",
            "Selects the 3.5-inch floppy disk.",
            "set-device floppy 1.44m",
            "Example 2",
            "Selects the tape device associated with the UNIX device\/dev\/rmt0.",
            "set-device rmt0",
            "Example 3",
            "Selects the tape device associated with the UNIX device\/dev\/rpdsk\/4. The Owner\n    column displays the PIB number that has use of the device. The*indicates that\n    this PIB is the current process, and the+indicates that this device is theactivedevice (as a PIB can attach more than one device).",
            "set-device 0Block size: 500\n\n [1701] Tape device is assigned to 3 1\/2\" high density (1.44M) floppy drive.\n Tape    Status            16 Feb 2003          14:30:40\n #       Type              Density            Owner       Device Name\n ----------------------------------------------------------------------\n 0   |   Floppy        |   3 1\/2\" 1.44M   |   191*+   |   \/dev\/rpdsk\/4\n 1   |   Quarter Inch  |   High           |           |   \/dev\/rmt\/0n\n 2   |   4mm DAT       |                  |           |   \/dev\/rmt\/1n\n 3   |   4mm DAT       |                  |           |   \/dev\/rmt\/1un\n 4   |   8mm Tape      |                  |           |   \/dev\/rmt\/2n\n 5   |   8mm Tape      |                  |   141     |   \/dev\/rmt\/2un\n 6   |   Floppy        |   Pseudo Floppy  |           |   \/usr\/opt\/pick\/bin\/abs\n 7   |   Floppy        |   Pseudo Floppy  |           |   \/usr\/opt\/pick\/bin\/data\n 8   |   Floppy        |   Pseudo Floppy  |           |   \/usr\/opt\/pick\/bin\/ref\n 9   |   Network       |                  |           |   \/home\/tmp\/pipein\n 10  |   Floppy        |   Pseudo Floppy  |   191*    |   \/home\/tmp\/floppy\n 11  |   Floppy        |   Pseudo Floppy  |           |   \/n\/dev\/home\/tmp\/floppy\n ------------------------------------------------------------------------"
        ]
    },
    {
        "name":"set-dozens command",
        "Syntax":[
            "Syntax",
            "set-dozens {(options}\n"
        ],
        "description":[
            "The set-dozens command designates that a numeric expression of 1 is equal to 12 units."
        ],
        "parameter":[
            "Parameter(s)",
            "optionsuSets system default."
        ],
        "example":[
            "Example(s)",
            "set-dozens",
            "Dozens conversion set.",
            "u bp test\n01 print oconv(36,\u2019u01b6\u2019);* Unit input-conversion user exit\n02 print oconv(5,\u2019u11b6\u2019);* Unit output-conversion user exit",
            "This output displays:",
            "3\n60",
            "since 3 dozen = 36, and 5 dozen = 60."
        ]
    },
    {
        "name":"set-dptr command",
        "Syntax":[
            "Syntax",
            "set-dptr {[+|-]types} {item.list} {(options}\n"
        ],
        "description":[
            "The set-dptr BASIC program changes the first attribute of file-defining D-pointers, to set or reset special types, such as dx or dy."
        ],
        "parameter":[
            "Parameter(s)",
            "[+|-]Attribute list consists of a+to set an attribute or a-to remove\nan attribute, followed by a string of one or more characters.attributesOne or more characters among\nthe valid dictionary code attributes:x,y,l,s,p,n, andu. See File-Defining Items\nin the Glossary for more information on file-defining item dictionary\ncode attributes.If no attribute change is specified, then the\ntypes of all the specified files display. It is not allowed to turn\non thelattribute and either ofxory. When trying to set thelattribute, files currently dx or dy are not altered. Similarly,\nfiles currently dx or dy, do not have thelattribute\nset. Thenand theuoptions are\nmutually exclusive.Note:When enabling a file(+l)for Hot Backup or Transaction Logging, use thedoption to preserve file integrity.typesOne or more characters among\nthe following:x,y,l,s,p,n, andu.If no change is specified, then the\ntypes of all the specified files display. It is not allowed to turn\non theltype and either ofxory. When trying to set theltype, files\ncurrently dx or dy are not altered. Similarly, files currently dx\nor dy, do not have theltype set. Thenand theuoptions are mutually exclusive as well\nas thettype and theltype.item.listList of elements to change. If\nnot explicitly stated, a select list must be used. If theaoption is used, the specified items are a list of accounts.\nAll files in the account, dictionaries and data levels, are altered.\nThe D-pointer defining the account in the mds file, is also altered.\nIf thefoption is used, the specified items are\na list of files. If specifying a simple file name, such as bp, then\nthe dictionary and all data levels are altered. If specifying an explicit\ndata level, such as bp,bp, then only the specified data level is altered.\nExplicit path names are accepted.optionsaChanges accounts. The item list is a list of accounts.dWhen used with the+lattribute, ensures\nthat the newly logged file is synchronized with the Hot Backup slave\nor a Transaction Log tape.fChanges files. The item list is a list of files. Thefoption is the default.pPrints all changes to the printer.qQuiet option suppresses the user\u2019s message.sDisplays ds type files.",
            "At the end, the number of files actually changed displays.\nIn case of error, the error messages display at the end.",
            "Warning:Theset-dptrcommand will not affect processes\nthat currently have the file open. Those processes must either close\nthe file or logoff for the change to take affect.The sensitivity of a file cannot be changed after the file\nis created.If the dictionary of a file contains items that look like\nD-pointers (that is, the first attribute starts with a d, attributes\n2 and 3 are numerical), these items can be altered.Although the dataset of a file may be changed independently\nof the file\u2019s dictionary, it is not possible to change a dictionary\nindependent of the dataset. In other words, any changes applied to\nthe dictionary of a file are also applied to the dataset.If the attribute 1 of a D-pointer contains attributes other\nthan the ones supported by this command, they are left intact.Do NOT use theset-dptrcommand to add the X option to FSI accounts using\n      theset-dptr (Aoption as this negatively affects therestore-accountscommand. If you want to have yourfile-savenot save an FSI account, simply edit attribute 1 of the MDS\n      pointer for that account to read \u201cQ\u201d instead of \u201cQS\u201d."
        ],
        "example":[
            "Example(s)",
            "Sets theptype to all data levels of the file bp in the current account.",
            "set-dptr +p bp (f",
            "Sets thextype to all data levels\nof the file entity in the account pa.",
            "set-dptr +x pa,entity, (f",
            "Sets thextype, removes theltype to the data level backup of the file entity in the\naccount pa.",
            "set-dptr +x -l pa,entity,backup (f",
            "Selects all accounts in the system, and removes allxytypes in all files in all accounts.",
            "select mds\nset-dptr -xy (a",
            "Note:It is not necessary to select items in themdsfile, which are real D-pointers.set-dptrignores Q-pointers and items that do not look like D-pointers.",
            "Selects all accounts in the system, except dm, adds theloption, and removes allytypes in all\nfiles in all the selected accounts.",
            "select mds # \"dm\"\nset-dptr +l -y (a"
        ]
    },
    {
        "name":"set-esc command",
        "Syntax":[
            "Syntax",
            "set-esc {argument} {(options}\n"
        ],
        "description":[
            "The set-esc BASIC program specifies the value of the key to treat as the ESC key. This key subsequently pushes a level when pressed.",
            "For Windows: Not Supported"
        ],
        "parameter":[
            "Parameter(s)",
            "argument.hexnumIndicates the key, designated by its corresponding hexadecimal\nvalue, to trigger a level push.decnumIndicates the key, designated by its corresponding decimal\nvalue, to trigger a level push.offDisables this function by defining escape as x\"ff\".escDefines escape as x\"1B\", the normal value for escape.optionsqQuiet mode does not display output.",
            "The key to trigger a level push can be redefined by indicating\nthe decimal or hexadecimal value of the character to use in place\nof ESC.",
            "Warning:Assigning anunreasonablevalue\nto the ESC key, such as ENTER, will have unpredictable results."
        ],
        "example":[
            "Example(s)",
            "Checks the current setting for\nthe ESC key.",
            "set-escEscape value x\u20191C\u2019 (decimal 28)",
            "Defines the ESC key as CTRL+C.",
            "set-esc 3Escape value x\u201903\u2019 (decimal 3)\nPrevious value x\u20191C\u2019 (decimal 28)",
            "Defines the ESC key as the BREAK key.",
            "set-esc escEscape value x\u20191B\u2019 (decimal 27)\nPrevious value x\u201903\u2019 (decimal 3)"
        ]
    },
    {
        "name":"set-file command",
        "Syntax":[
            "Syntax",
            "set-file {account.name{file.name}} {alternate.name}\n"
        ],
        "description":[
            "Description",
            "The set-file BASIC program creates or updates the synonym-defining item called qfile in the master dictionary of the current account.",
            "This provides access to the specified file name in the specified account.name by using the file name, qfile, in place of the file name parameter during any file-handling commands.",
            "If an alternate.name is supplied, then the MD is updated with that name (instead of qfile).",
            "Each time set-file is invoked, it overwrites the previous Q-pointer.",
            "The same functionality can be achieved using path names."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "set-file dm bp\u2019qfile\u2019 updated.list qfile"
        ]
    },
    {
        "name":"set-floppy command",
        "Syntax":[
            "Syntax",
            " set-floppy {(density, drive)}\n"
        ],
        "description":[
            "Description",
            "The set-floppy command attaches the first floppy (in the list-device listing) drive to the current process for subsequent input or output activity. The drive indicator and density are indicated with the options provided.",
            "This is used after the t-att command to designate the density to read\/write     hard disks and which floppy disk drive to use when more than one drive is present.",
            "This command does not allow selection among two devices of the same type. ",
            "If two or more devices of the same type are present, the first one in the configuration file      is selected. This command may fail on an unformatted floppy disk. ",
            "Do not forget to rewind with the t-rew command prior to attempting any      read or write operation. "
        ],
        "parameter":[
            "Parameter(s)",
            "densityeSelects 2.88 MB floppy disk.hHigh density (1.2 MB for 5.25-inch, 1.44 MB for 3.5-inch)\nfloppy disk.sStandard density (360 KB for 5.25-inch, 720 KB for 3.5-inch)\nfloppy disk.driveaSelects 5.25-inch floppy disk.bSelects 3.5-inch floppy disk.hSelects 1.2 MB if 5.25-inch or 1.44 MB if 3.5-inch floppy\ndisk.sSelects 360 KB if 5.25-inch floppy disk.lSelects 720 KB if 3.5-inch floppy disk."
        ],
        "example":[
            "Example(s)",
            "Attaches the floppy disk drive\nA at high density.",
            "set-floppy (ah"
        ]
    },
    {
        "name":"set-flush command",
        "Syntax":[
            "Syntax",
            "set-flush {{period}{,force.period}} {(options}\nset-flush {{period}{,off}} {(options}\nset-flush {{period}{,imm}} {(options}\n"
        ],
        "description":[
            "The set-flush BASIC program displays or changes the value of the period of the flush and of the forced flush.",
            "For Windows: Not Supported"
        ],
        "parameter":[
            "Parameter(s)",
            "periodA new period (in seconds) with\nwhich the flush process wakes up automatically to writedirty(write-required) frames back to disk. The valid range is from 500\nto 32000 milliseconds (0.5 to 32 seconds). If a period is not specified,\nthe current flush period displays.The default period is defined\nat boot time by theflushstatement in the configuration\nfile.force.periodNew period (in seconds) with\nwhich the flush process wakes up automatically to write all buffers\ncontaining data belonging to the file system (item, indexes, and so\non). This period is the guaranteed time after which an update to a\nprotected file is written to disk. These values have a special meaning:0All writes are done by the process itself. In other words,\nwhen a process updates an item, for example, the process waits until\nthe write is completed. The keywordimmcan be used\nto specify this option.-1Forced flush mechanism is disabled. With this option, there\nis no guaranteed time for an update to the file system to be written\nto disk. The keywordoffcan be used to specify this\noption.optionsqQuiet mode suppresses all terminal output.",
            "Note:The default period is defined at boot time by thefflushstatement in the configuration file."
        ],
        "example":[
            "Example(s)",
            "Indicates that the current flush\nperiod is set at 10 seconds, and the forced flush period is 5 seconds.",
            "set-flushFlush period 10 s. Forced flush period 5 s.",
            "Sets the forced flush in immediate mode. The normal flush\nperiod is not changed.",
            "set-flush ,immFlush period 10 s. Forced flush immediate.",
            "Disables the forced flush in immediate mode and sets the\nnormal flush period to 30 seconds.",
            "set-flush 30,offFlush period 30 s. Forced flush off."
        ]
    },
    {
        "name":"set-half command",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"set-imap command",
        "Syntax":[
            "Syntax",
            "set-imap {item-ID{time.out}} {(options}\n"
        ],
        "description":[
            "The set-imap BASIC program defines a keyboard input and\/or a terminal output translation table, through which any sequence of keyboard input and terminal output characters can be translated into any other sequence of characters.",
            "The set-imap command has additional functionality over that of the      set-func command (no longer supported). Multiple characters can be used and     no lead character is required.",
            "A null item has been added to the keyboards file so that a set-imap null sets the function keys to null."
        ],
        "parameter":[
            "Parameter(s)",
            "item-IDItem-ID of the translation table, located in thekeyboardsfile in the dm account. The format of the keyboard item is\n        described inkeyboards file.If the item has already been compiled into a translation table and\n         stored as a binary item in the dictionary of the file, the translation item is not\n         recompiled, unless thecoption is used. A null item sets the function\n         keys to null.time.outValue of the time out, expressed in milliseconds, after which\n        an incomplete input sequence is aborted.If not specified, the value defined in the item\n         by the time-out value modifier in attribute one, is used. If none is specified, the default\n         value is 100 milliseconds.The time out should be adjusted to the baud rate and\n         possible special conditions, such as network delays, to detect sequences of characters\n         properly. If the time out is 0, the translation mechanism waits indefinitely between\n         characters of a sequence until either a valid sequence is received or until an unexpected\n         character breaks a sequence. The time out does not apply to output translation. For\n         information on adjusting the time-out value, see the following Caution.optionsport.numberPort number in decimal. If not specified, the current port\nis used.cCompiles the item. This option must be used when the item\nis modified. The item is compiled into a binary item and stored in\nthe dictionary of thekeyboardsfile.vVerbose option displays information about the translation\ntable (name and size) and the modifiers used in attribute one.",
            "Input translation can be used to translate special key\nsequences, such as pressing ESC, [ , A, into a sequence understandable\nby the application.",
            "Output translation can be used to convert\na character into an appropriate escape sequence, for example, to change\nfonts on a printer, print the character, and change the fonts back.",
            "The translation is based on the notion of input sequence, which\nis a variable-length series of characters which must be received completely\nwithin a given time, typically 1\/10th of a second, to be recognized\nas one key stroke, and converted into an output sequence. If an input\nsequence is not received within the specified time, or if a character\nreceived is not part of a valid sequence, the sequence is aborted,\nand all characters received so far are desequentialized and passed\nto the application or displayed as a series of discrete characters.",
            "When applied to a terminal output translation, there is no notion of time out, but there are some\n    restrictions. See the following Caution.",
            "The translation is described in a table that is associated to each port. A table can be shared\n    among different ports. Each input and output table contains a main translation table and an\n    optional alternate table. The two tables have identical structure and capabilities. The main\n    table is active when the translation is activated. A special input sequence can be defined to\n    switch to the alternate table until it is switched manually back, or for one translation\n    (keystroke) only.",
            "An input sequence can have from one to 127 characters. An output\nsequence can be from 0 to 127 characters in length. If an output sequence\nis null, the corresponding key is made inoperative (input) or the\ndata is not displayed (output).",
            "Without a numeric option, the\ncurrent port is affected. Optionally, a specific port can be specified\nby using the port number as a numeric option.",
            "Pressing BREAK\naborts any pending sequence and sets the main translation table as\nthe active one.",
            "If there is no argument, the translation mechanism,\nif currently active, is disabled.",
            "If the one-to-one input\/output\ntranslation, defined by the TCL commandset-iomap, is also active on this port, the translation defined byset-imapis processed first, and each character of the\nresulting string is passed through the one-to-one conversion table\nset byset-iomap.",
            "Theset-imapcommand can be called automatically by the TCLtermcommand with thekoption, if the item defining\nthe terminal has the name of a keyboard translation item in the value\n4 of attribute 1.",
            "CAUTION:",
            "Depending on the implementation, the time out can have a\n    resolution less than the millisecond.For UNIX:The resolution is typically 10\n     milliseconds and 50 milliseconds on non-UNIX implementations. Therefore, a time out of 15\n     milliseconds is rounded up to 20 milliseconds on UNIX and 50 milliseconds on a non-UNIX system.For Windows:The time-out resolution is 50 milliseconds.If the input\n     buffer of the process becomes full, some sequences may be aborted and\/or truncated. If high\n     system or communication load creates abnormal delays, it is possible that an input sequence is\n     decoded incorrectly.For example, if network conditions create large delays between\n     characters, it is conceivable that an Esc, [, A reaches the computer as an escape character,\n     followed by [, then A character sequence, thus breaking the sequence. This could be especially\n     true using a network where data may be broken into packets. In these situations, it might be\n     necessary to set a larger time-out value, thus opening the possibility that a user can use\n     discrete keys, such as ESC, [, and A, which could be interpreted as a sequence.",
            "CAUTION:",
            "When translating output, there are some restrictions on how\n    the data is processed.In FlashBASIC, all the data in an input sequence must be within oneprintorcrtstatement. For example, ifstartis to be translated into another string, thencrt\n      \u2019start\u2019is translated correctly, but this does not:crt \u2019st\u2019\ncrt \u2019art\u2019Applying output translation to echo input data,\n     multicharacter sequences can cause some apparent delay in the echo process. For example, assume\n     the system is set to translate on output abc into ABC, so that typing abc will echo ABC. Do not\n     confuse the translation of the echo and the translation of the actual data, though they should\n     be identical for obvious clarity reasons, if the user types the string, this occurs:User Input Display\n----------------\na\nb\nc ABC\na\nx ax\na\naNo echo, because this\n    might be the beginning of a sequence, but the application actually receives the a.bThere is still no echo.c ABCThe sequence is converted\n    and displays.aNo echo, as above.x axThe x breaks the\n     sequence and the data displays. If a character is being translated, and this character can\n     occur in an otherwise normal escape character sequence generated, for example, by a FlashBASIC@function, the escape character sequence is broken. For example, if all@functions are translated into an escape character sequence Esc,\n     c']',x'31', and if, for the specified terminal, the clear screen character sequence is Esc,\n     c'@', then the end result is Esc,Esc, c']',x'31', which is not correct. Extreme care must be\n     used when defining the output translation on single characters."
        ],
        "example":[
            "Example(s)",
            "Sets the keyboard translation\nto an ibm3151.",
            "set-imap ibm3151",
            "Sets the keyboard translation to a Wy-50, changing the\ntime out to 100 milliseconds, on port 24.",
            "set-imap wy-50 100 (24",
            "Sets the keyboard translation to an att605, recompiling\nthe item first.",
            "set-imap att605 (c",
            "Disables the keyboard input translation.",
            "set-imap"
        ]
    },
    {
        "name":"set-incremental command",
        "Syntax":[
            "Syntax",
            "set-incremental {(option}\n"
        ],
        "description":[
            "The set-incremental command enables or disables the incremental save feature.",
            "For Windows: Not Supported"
        ],
        "parameter":[
            "Parameter(s)",
            "optionfTurns off the incremental save.nTurns on the incremental save.",
            "By default, the incremental save is enabled at every boot.\nSome users who are not using the incremental save may wish to disable\nthis feature as this makes theclearing dirty bitsphase of\nthe standard save take far less time.",
            "Usingset-incrementalwith no options displays the current status.",
            "Note:If the user\nwants to use the incremental save after disabling it with this command,\nit is necessary to turn the incremental feature on, perform a full\nsave, and then do an incremental save. Failure to do the full save\nbefore the first incremental produces invalid results.",
            "To\nkeep the incremental save disabled permanently, it is necessary to\nplace the lineset-incremental (fin theuser-coldstartmacro indm,md,file."
        ],
        "example":[

        ]
    },
    {
        "name":"set-iomap command",
        "Syntax":[
            "Syntax",
            "set-iomap port.number{,item-ID} ([i|o|ri|ro]\n"
        ],
        "description":[
            "The set-iomap BASIC program allows translatable input and output for each port on the system."
        ],
        "parameter":[
            "Parameter(s)",
            "port.numberSpecifies the number of the port for which the iomap is being\nset.item-IDItem-ID of the user-defined keyboard item. It must be numeric,\nand is not required when used with any of these options:ir,ri,or, orro.iInstalls input keyboard. Character translation occurs before\nreaching input handling code, such as BASICin.oInstalls output keyboard. Character translation occurs before\nreaching output handling code, such as BASICprint.irorriRemoves an installed input keyboard.ororroRemoves an installed output keyboard.",
            "There is a file in the dm account called iomap-file. This\nfile contains keyboard items that are defined by users. The item-ID\nshould be numeric and should be in the range of 0 <= item-ID <=\n2147483647. The keyboard item has 34 attributes and has this format:",
            "attr 0Item-IDattr 1User commentsattr 2 to 33ASCII code of characters from 0 to 127 in ASCII hexadecimal\nformat. For example: characterahas its ASCII code\nas x'41' and should be entered in the item as '41'. Each attribute\nfrom 2 to 33 has exactly eight entries each. Each entry must be two\ncharacters and there should be no quotes or spaces surrounding any\nnumber. In other words, each entry should look like a 16 digit hexadecimal\nnumber. User can put their comments after the eighth entry on that\nattribute.",
            "The example below shows how to translate the character\nA to B:",
            "ASCII code of A is x'41' = d'65'ASCII code of B is x'42' = d'66'65 mod 8 = 8 with remainder 1Translated character, which is B, should be entered at attribute\n8+2= 10 and at column 1*2+1=3 as 42. The reason that 2 is added to\n8 is because counting begins at 0 and attribute 1 is used for comments."
        ],
        "example":[
            "Example(s)",
            "open \"iomap-file\" then\n\u00a0\u00a0\u00a0a = \"Sample IOMap\"\n\u00a0\u00a0\u00a0for b = 0 to 127\n\u00a0\u00a0\u00a0\u00a0\u00a0\u00a0a < 0 + int( b \/ 8 ) > := dtx( b ) \"r%2\"\n\u00a0\u00a0\u00a0next b\n\u00a0\u00a0\u00a0write a on \"12345\"\n\u00a0\u00a0\u00a0close\nend"
        ]
    },
    {
        "name":"set-kbrd command",
        "Syntax":[
            "Syntax",
            "set-kbrd item-ID\n"
        ],
        "description":[
            "Description",
            "For Linux only. Use the set-kbrd BASIC program to change between standard international keyboard maps for line 0 (zero). This command is used from the dm account.",
            "The item-ID is one of the following:"
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"set-num-format command",
        "Syntax":[
            "Syntax",
            "set-num-format {{cur}\/{thou}\/{dec}} {(options}\n"
        ],
        "description":[
            "The set-num-format command changes the currency sign, thousand, and decimal point in an  m conversion, at a local or global level. All of these signs must be a single character. The defaults for these are the previous settings.",
            "The local setting overrides the global default setting. No local setting defaults to global setting. Local or global setting can be cancelled by not specifying the currency sign, the thousand mark, and the decimal mark parameters. Logging off cancels the local setting."
        ],
        "parameter":[
            "Parameter(s)",
            "curCurrency sign.thouThousand mark.decDecimal mark.(dSets a system-wide default:$\/,\/.Note:The\nnew value initially only applies to the current line issuing the command\nand the default line. All other lines will recognize the new global\nsetting when they are logged off and then on again.port.numberSpecifies the port number to be set.Note:If both the port\nnumber and a system-wide default are not specified, the current port\nis implied.",
            "Any modifications made whileset-num-formatchanges are in effect affect file updates. For example, changing\nthe decimal separator to a comma causes the system to write any fractional\nvalues into the file with the comma as the decimal separator (for\nexample, the expression 3\/2 is written as 1,5). To avoid this, file\ndata should display in the file in the form of integer values, and\ndisplayed through the use of format masks.",
            "Note:There is a limit to the size of a numeric constant in BASIC\nif the decimal separator is expected to respond to theset-num-formatcommand. At precision 4, the limit is \"14073748835.5327\". For each\nhigher precision, the limit remains the same, but the decimal point\nin the number is moved left one place for each precision increase.\nFor lower precisions, the limit remains the same, but the decimal\npoint in the number is moved right one place for each precision decrease.\nThis limit does not apply to non-literal numbers input by the user,\nread from a file, or composed by the program.D3 Windows inherits its default currency, decimal, and thousands\nseparator settings from Windows. Since D3 does not differentiate betweennumberandcurrency, the decimal and thousands separators\nare inherited from the number settings in the Windows Regional Setting\nProperties.These settings can be overwritten with theset-num-formatcommand. When changing the Windows settings, these rules apply:\n Settings must be changed on the Server side. You must log off and\nthen on again for the changes to take place. Client applications must\nbe restarted after making changes."
        ],
        "example":[

        ]
    },
    {
        "name":"set-opendb-password command",
        "Syntax":[
            "Syntax",
            "set-opendb-password hostname\n"
        ],
        "description":[
            "The set-opendb-password command sets or removes an encrypted password on an OpenDB host. Passwords are saved in attribute 3 of the hosts file."
        ],
        "parameter":[
            "Parameter(s)",
            "hostnameSpecifies the OpenDB host on which to set or remove the password.",
            "Running this command invokes prompts to type and confirm\nthe password. If the confirmed password does not match the first entry,\nyou will be prompted to try again.",
            "To remove a password from\nan OpenDB host, press RETURN at thePassword:prompt\nand then pressYat theRemove Password?\n(Y\/N)prompt."
        ],
        "example":[
            "Example(s)",
            "The example below illustrates\nsetting a password on themyhost.sqlserverOpenDB\nhost. Note that the asterisks (*) in this example\nare for illustrative purposes and do not actually display on the screen.",
            "set-opendb-password myhost.sqlserverPassword:****Confirm:****",
            "The example below illustrates removing a password from\nthemyhost.sqlserverOpenDB host. Note that when\nprompted for a password, pressing ENTER removes the current password.",
            "set-opendb-password myhost.sqlserverPassword:\nRemove Password? (Y\/N)Y"
        ]
    },
    {
        "name":"set-overflow-id command",
        "Syntax":[
            "Syntax",
            "set-overflow-id {(options}\n"
        ],
        "description":[
            "The set-overflow-id command toggles the overflow ID signature on and off."
        ],
        "parameter":[
            "Parameter(s)",
            "optionsnEnables the overflow ID signature.fDisables the overflow ID signature."
        ],
        "example":[
            "Example(s)",
            "Observe overflow ID markings.",
            "set-overflow-id (ncreate-file dum 1 1\nobserve fid\ndump <fid> li",
            "Overflow ID markings should not have changed.",
            "set-overflow-id (fdelete-file dum\ndump <fid> li"
        ]
    },
    {
        "name":"set-ovf-local command",
        "Syntax":[
            "Syntax",
            "set-ovf-local {ws.max}{,fs.max} {(options}\n"
        ],
        "description":[
            "The set-ovf-local command sets and displays the local overflow cache size."
        ],
        "parameter":[
            "Parameter(s)",
            "Besides displaying the current\ncache status,set-ovf-localcan be used to modify\nthe current cache maximums by specifying the following numeric parameters\non the command line:",
            "ws.maxSets the maximum workspace cache\nsize.fs.maxSets the maximum file space cache\nsize.optionscPuts a scrub pattern into the local overflow frames.fFlushes all caches. All frames held within the current cache\nare released back to the main table.Note:This operation is automatically\ninvoked when the maximum values are changed. The act of logging off\nthe system automatically flushes all local overflow caches.gCopies the current maximum cache settings into the global\ndefault. Whenever a new user logs on, they automatically acquire this\ndefault value.Note:The global defaults are automatically preset\nto a factory specified value upon reboot, so if a permanent global\nchange is desired, the user should place theset-ovf-localcommand in thesystem-coldstartmacro.sSuppresses the display.xDisables the local overflow scrubbing.",
            "The presence of a local overflow cache enhances both performance\nand reliability, and is automatically set up to a reasonable default\nby the system. Users who want to further tune their overflow usage\ncan use theset-ovf-localcommand to change this\ncache to tailor it to specific needs. By default, the checking of\nlocal overflow for multiple releases is on. To turn off local overflow\nchecking, remove this line from thesystem-coldstartmacro in dm, and then reboot D3:",
            "set-ovf-local (cgs",
            "When specified without any options, theset-ovf-localcommand displays the cache status for the current line. The display\nshows a 2 by 2 grid of numbers."
        ],
        "example":[
            "Example(s)",
            "Shows that there are currently\ntwo workspace frames in the overflow cache with a maximum capacity\nof 20 frames, and 10 file space frames in the overflow cache with\nmaximum capacity of 30 frames.",
            "set-ovf-localPrivate Overflow Cache Status:\n         Current      Max\nWS       2            20\nFile     10           30",
            "Sets the maximum workspace cache\nsize for the current line to 100, and the maximum file space cache\nsize to 300.",
            "set-ovf-local 100,300 (s",
            "Releases all frames in the current overflow cache to the\nglobal pool.",
            "set-ovf-local (fs",
            "Sets the maximum workspace cache size for the current\nline to 100, and the maximum file space cache size to 300. The settings\nare also copied into the global default area. All users logging into\nthe system after this command has been executed will automatically\nget caches sized to this specification.",
            "set-ovf-local 100,300 (sg"
        ]
    },
    {
        "name":"set-ovf-reserve command",
        "Syntax":[
            "Syntax",
            "set-ovf-reserve {(reserve.quantity)} {(options}\n"
        ],
        "description":[
            "The set-ovf-reserve command in the DM account, sets aside a specific number of frames as the spare tank in the event that the overflow table runs out of frames. The default is 1024 or .5% of your available disk space (maxfid), whichever is greater. When the set-ovf-reserve command is run, the system displays both the old and new reserve values."
        ],
        "parameter":[
            "Parameter(s)",
            "reserve.quantityNumber of frames to set aside\nas reserve overflow.optionsqSuppresses messages."
        ],
        "example":[
            "Example(s)",
            "If your overflow reserve is set\nto 200, running the command below produces the message shown:",
            "set-ovf-reserve (1024)Previous reserve: 200\nNew reserve: 1024"
        ]
    },
    {
        "name":"set-port command",
        "Syntax":[
            "Syntax",
            "set-port [tty|port.number]{,baud,parity,stop.bits,word.length} {(options}\n"
        ],
        "description":[
            "The term set-port BASIC program displays or changes the communication speed and protocol for a specified port or displays the current setting if none of the communication parameters are specified."
        ],
        "parameter":[
            "Parameter(s)",
            "ttyDevice name where the process\nis connected.For UNIX:Thettyparameter\nis supported by UNIX only.For Windows:Not Supported.port.numberSerial port number to change.\nThe current port can be specified by specifying port -1.baudBaud rate\u2014Legal baud rates are:\n110, 150, 300, 600, 1200, 2400, 4800, 9600, and 19200.paritynor0for no parityoor1for odd parityeor2for even paritymfor mark paritysfor space paritystop.bitNumber of stop bits\u2014Valid numbers\nare 1 or 2.word.lengthData length\u2014Valid numbers are\n7 or 8.optionsiUpdates devs,init as well as the pick_term file.qSuppresses the display of the currentset-portsettings.",
            "If no options are entered, the current port settings display.\nIf any option is entered, then all options must be entered."
        ],
        "example":[
            "Example(s)",
            "set-port\nLine number   :  1\nBaud rate     :  0\nParity        :  None\nStop bits     :  0\nWord length   :  0"
        ]
    },
    {
        "name":"set-remote-close command",
        "Syntax":[
            "Syntax",
            "set-remote-close {(options}\n"
        ],
        "description":[
            "The set-remote-close command toggles on and off the BASIC close command\u2019s ability to close remote files."
        ],
        "parameter":[
            "Parameter(s)",
            "optionsdSets the on or off action system-wide.nToggles the feature on. Associated remote files are closed\nand resources such as handles and memory are released when the program\ncompletes or issues aclosecommand.fToggles the feature off (default). Resources allocated to\nopen files, such as handles and memory, are not released until the\nprocess logs off.",
            "This command allows the entire system or a specific user\nto favor either:",
            "performance when remote closing is off and everything is cachedresource availability when remote closing is on and resources\nare freed",
            "Note:Some resources cannot be released if other processes have\nthe same file open.",
            "Each client maintains a cache of remote\nfiles. A usage counter that increments every time the file is opened\nand decrements every time the file is closed is maintained for each\nfile in the cache. Theclosecommand is issued\nto the server when the counter decrements to zero.",
            "Parent levels\nof the file level opened are automatically opened and closed when\nthe child level opens and closes. For example, if a data level is\nopened, the dict and MD levels are also opened, and their usage counters\nare adjusted accordingly.",
            "When a BASIC select list is active,\nthe file cannot be closed (even with theclosecommand)\nuntilreadnextstatements have exhausted the list.",
            "Warning:The usage counters are maintained by actualopenandclosecalls, whether performed\nby a program or the system. If a program opens a file once and copies\nthe file variable to other variables, the counter is incremented once.\nAclosecommand must be issued to close the file."
        ],
        "example":[

        ]
    },
    {
        "name":"set-remote-user command",
        "Syntax":[
            "Syntax",
            "set-remote-user\nset-remote-user ?\nset-remote-user host\n"
        ],
        "description":[
            "The set-remote-user BASIC program can be used to allow the local user to utilize a different user and\/or password when connecting to a remote OSFI server which has been started with the a option to force user\/password authorization.",
            "When the client process attempts to open a file on a remote OSFI server which has been started with the a option, the server refuses the request unless the passed user and password match a user and password present on that server. By default, the client passes its local user and password to the remote server. Provided the same user and password combination is defined on that server, then access is granted. However, it is often not realistic for user names and\/or passwords to be identical across different machines. In this situation, set-remote-user allows the client user to specify that an alternate user\/password combination be used when opening files on remote servers."
        ],
        "parameter":[
            "Parameter(s)",
            "optionskKills the specified host entry.rReverifies password. If this option is used, then the password\nis requested twice to ensure its correctness.sSaves authorization information in the users file.Note:Although\nthis information is stored in an encrypted format, it could theoretically\nbe decrypted by a determined individual. It is suggested that security-critical\ninformation be entered at every logon rather than have that information\nstored in the users file.vVerbose output. This option displays the current user mappings.",
            "The first and second forms display the current user mappings.",
            "The third form allows the user to enter (or destroy if used with\nthekoption) a mapping entry for the specified remote\nOSFI host. The program prompts for the remote user and password to\nbe used on all future connections to that host. The authorization\nof this information is performed automatically when the first file\nfrom that data source is opened. An authorization failure causes the\nopen to fail.",
            "Note:The way the authorization information is used\ndepends on the remote server configuration. If the OSFI server is\nnot booted with the a security option (for Authorization), then the\npassed local user permissions are applied directly to obtaining resources.\nIf the a security option is used, then the server first looks for\na user on that server calledClientHostName:ClientMappedUserwhereClientHostNameis the local host name defined on the\nclient andClientMappedUseris the mapped user specified by\nthe client. If this user is not found (or the password is not correct),\nthen the server tries to locate the local userClientMappedUser. When a local user match is found, the file permissions are derived\nfrom that user definition on the server. The client permissions are\nignored in this case."
        ],
        "example":[
            "Example(s)",
            "If the local user name is joe,\nthis allows user mark access to open files on themachaserver, with no password.",
            "set-remote-user machaRemote User :markRemote Password :"
        ]
    },
    {
        "name":"set-runaway-autoquit command",
        "Syntax":[
            "Syntax",
            "set-runaway-autoquit ({n|f}{l|<pib.num>}\n"
        ],
        "description":[
            "The set-runaway-autoquit command in the DM account automatically terminates the specified process in the event of an overflow runaway condition. If set-runaway-autoquit is not specified and an overflow runaway condition occurs, a prompt (Continue or Quit) displays instead. All overflow runaway conditions are logged to the errors file."
        ],
        "parameter":[
            "Parameter(s)",
            "nTurns this feature on.fTurns this feature off.lLocal. Specifies that this command applies to only the line\nfrom which the command is executed.Note:If neither thepib.numor l option is specified, the command is applied\nto the global default.pib.numSpecifies that the command applies to only the line specified\ninpib.num.Note:If neither thepib.numor l option is specified, the command is applied to the global default.",
            "If neithernnorfis\nspecified, the current setting displays."
        ],
        "example":[
            "Example(s)",
            "Turns the autoquit feature on\nfor the current line.",
            "set-runaway-autoquit (n l",
            "Turns the autoquit feature off for line 1501.",
            "set-runaway-autoquit (f 1501",
            "Turns the autoquit feature on for all lines with the global\nlimit.",
            "set-runaway-autoquit (n"
        ]
    },
    {
        "name":"set-runaway-limit command",
        "Syntax":[
            "Syntax",
            "set-runaway-limit {limit} (options\n"
        ],
        "description":[
            "The set-runaway-limit command in the DM account establishes the  maximum number of frames allowed before an overflow runaway condition occurs. If the number of frames acquired by the specified process when either writing or retrieving an item reaches the specified limit, the system detects an overflow runaway condition and reports it. This command can be applied globally to all lines or locally to the current line. See set-runaway-autoquit command for more information.",
            "All overflow runaway conditions are logged to the errors file."
        ],
        "parameter":[
            "Parameter(s)",
            "limitMaximum number of frames allowed\nbefore a overflow runaway condition occurs.If0(zero) is specified, there is no maximum.If left blank,\nthe current maximum setting is displayed.optionspibSets the specified limit on the specified port.dSpecifies the default runaway limit (7000).lSpecifies setting the runaway limit locally for the current\nline (instead of globally).rRemoves the limit on the line executing the command, allowing\nit to use the global limit.",
            "If no parameters are provided with the command, the current\nlimit displays.",
            "CAUTION:",
            "If a process creates a very\nlarge item, or select list, it may hit the specified limit. The command\nhas to be aborted, the limit changed, and the command restarted. The\ndefault is normally set to a value which should suit most configurations."
        ],
        "example":[
            "Example(s)",
            "Displays the current global limit.",
            "set-runaway-limit[110] Overflow runaway limit set to 7000 Frames",
            "Sets the runaway limit to 5000 for all lines.",
            "set-runaway-limit 5000",
            "Sets the default runaway limit for the current line.",
            "set-runaway-limit (dl",
            "Removes any local runaway limit set on the current line,\nallowing it to use the global limit.",
            "set-runaway-limit (r"
        ]
    },
    {
        "name":"set-sct command",
        "Syntax":[
            "Syntax",
            " set-sct {(options}\n"
        ],
        "description":[
            "Description",
            "The set-sct command attaches the SCT drive to the current process. This must be executed before any other tape handling commands. This command is provided for compatibility.",
            "The set-sct command specifies a 1\/4-inch streaming tape unit as the     peripheral storage device. The set-sct command automatically specifies a      t-att (tape-attach) command and a t-rew (rewind)     command.",
            "Make sure the hardware is present for a 1\/4-inch drive. Otherwise, the port might wait     indefinitely. If only one density is available, then it is used. The     default is high density."
        ],
        "parameter":[
            "Parameter(s)",
            "optionsblocksizeCan be any value between 512\nand 16384, but must be a multiple of\u00a0512. The default is 16384.hHigh density, if available.lLow density, if available.sStandard density, if available."
        ],
        "example":[

        ]
    },
    {
        "name":"set-shutdown-delay command",
        "Syntax":[
            "Syntax",
            "set-shutdown-delay {number.seconds} {(options}\n"
        ],
        "description":[
            "The set-shutdown-delay command is provided primarily for installations which have disk-caching hard-disk controllers. This provides time for the disk to flush.",
            "For Windows: Not Supported",
            "The delay must be a positive integer between 1 and 65536. Without any parameters, the current shutdown delay displays. The default is 512."
        ],
        "parameter":[
            "Parameter(s)",
            "optionssSets monitor shutdown delay using the shutdown-delay item\nin thesystem-configfile.uUpdates the shutdown-delay item in thesystem-configfile with the givendelayvalue."
        ],
        "example":[
            "Example(s)",
            "Sets the shutdown delay to five\nminutes.",
            "set-shutdown-delay 300"
        ]
    },
    {
        "name":"set-sound command",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"set-sym command",
        "Syntax":[
            "Syntax",
            "set-sym file.reference\n"
        ],
        "description":[
            "The set-sym command indicates the symbol table to use for references to system variables from within the system, or virtual debugger.",
            "The global table, gsym, is the default."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"set-tapefile command",
        "Syntax":[
            "Syntax",
            "set-tapefile <path>"
        ],
        "description":[
            "Description",
            "The set-tapefile command creates a dynamically defined pseudo tape. ",
            " The set-tapefile command allows pseudo tape devices to be dynamically     created.",
            "This assignment of a tape device is temporary and can be overwritten by performing another      set-tapefile command to the same virtual tape device. ",
            "The tape file is now ready for use as a tape unit until the system is shut down. Commands such     as t-dump, account-restore, file-save,     and so on, function in customary fashion."
        ],
        "parameter":[
            "Parameter(s)",
            "pathA valid path on the host operating system. The path may be any file name path without\n         requiring surrounding quotation marks.Represents the absolute path to an existing directory on the host operating system and\n         file name may or may not exist."
        ],
        "example":[
            "Example(s)",
            "set-tapefile C:\\ORDER ENTRY\\ LOS ANGELES\\orders.d3p"
        ]
    },
    {
        "name":"set-thousands command",
        "Syntax":[
            "Syntax",
            "set-thousands {(options}\n"
        ],
        "description":[
            "The set-thousands command designates that a numeric expression of 1 is equal to 1000 units."
        ],
        "parameter":[
            "Parameter(s)",
            "optionsuSets the system default."
        ],
        "example":[
            "Example(s)",
            "set-thousandsu bp test01 print oconv(3000,\u2019u01b6\u2019);* Unit input-conversion user exit\n02 print oconv(5,\u2019u11b6\u2019);* Unit output-conversion user exit",
            "This output displays:",
            "3\n5000"
        ]
    },
    {
        "name":"set-time command",
        "Syntax":[
            "Syntax",
            "set-time hh:mm{:ss} {(u)}\n"
        ],
        "description":[
            "Description",
            "The set-time command sets the current system time. The hours are specified from 00 (12:00 AM) to 23 (11:00 PM). The current time can be displayed by pressing CTRL+M or Enter at the TCL prompt, or by entering the TCL command time. If the time is actually changed, set-time logs an entry in the errors file.",
            "For Windows: Not Supported. Use Windows utility or the BIOS to set the time."
        ],
        "parameter":[
            "Parameter(s)",
            "uUpdates the hardware real-time clock, as well as the system\n(software clock)."
        ],
        "example":[

        ]
    },
    {
        "name":"set-units command",
        "Syntax":[
            "Syntax",
            "set-units {(options}\n"
        ],
        "description":[
            "The set-units command designates that a numeric expression of 1 is equal to 1 unit."
        ],
        "parameter":[
            "Parameter(s)",
            "optionsuSets the system default."
        ],
        "example":[
            "Example(s)",
            "This program displays 5 for both\nuser exits, as there is a one-to-one correspondence between units\nand the numeric expression.",
            "set-unitsu bp test01 print oconv(5,\u2019u01b6\u2019);* Unit input-conversion user exit\n02 print oconv(5,\u2019u11b6\u2019);* Unit output-conversion user exit"
        ]
    },
    {
        "name":"setpib0 command",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"setport command",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"setup-printer command",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"shell-variable-off macro",
        "Syntax":[
            "Syntax",
            "shell-variable-off\n"
        ],
        "description":[
            "The shell-variable-off macro disables shell variable replacement from TCL. This is the default setting."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"shell-variable-on macro",
        "Syntax":[
            "Syntax",
            "shell-variable-on\n"
        ],
        "description":[
            "The shell-variable-on macro enables shell variable replacement from TCL."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"shp-kill command",
        "Syntax":[
            "Syntax",
            "shp-kill number\n"
        ],
        "description":[
            "The shp-kill command terminates a D3 printer shared with UNIX and all the associated processes. Users who do not own the process and are not root, will not be able to kill the printer.",
            "For Windows: Not supported"
        ],
        "parameter":[
            "Parameter(s)",
            "numberD3 printer number, as specified in thestartshpcommand.",
            "This command executes the commandsp-kill dprinter.number.",
            "It relies on the existence\nof the log files created in \/var\/tmp\/lppick by thestartshpcommand. Theshp-killcommand can:",
            "Issue ansp-killof the D3 printer process.Send SIGTERM to the underlying D3 process, waiting up to 5\nseconds before sending a SIGKILL.Ensure the associatedlppickfilter process is terminated.\nIf this is not the case, a SIGTERM followed by a SIGKILL is sent to\nthis process.Verify the user-ID issuing the command as either the one that\nowns the process or root.",
            "Note:Theshp-killcommand can be used only\nwith shared printers started by thestartshpcommand."
        ],
        "example":[
            "Example(s)",
            "shp-kill 0"
        ]
    },
    {
        "name":"shpstat command",
        "Syntax":"",
        "description":[

        ],
        "parameter":[
            "Parameter(s)",
            "optionsiInitializes the entire shared program status area. This should\nbe used only in case of emergencies. It causes all programs running\nin the shared area to abort. When used with this option,shpstatclears the memory and completes. No status information\ndisplays.l{number}Loops on displaying status information. This repeatedly updates\nthe status information displayed on the screen. The default time between\nupdates is 5 seconds. Theloption may be followed\nby a number to override the default delay time between loops.pDirects the output to the system printer, via the spooler.sSuppresses detail output when used without the (loption.zZaps shared program memory. This is a more powerful version\nof theioption.",
            "CAUTION:",
            "Thezandioptions can cause other users to abort and should be used with caution."
        ],
        "example":[
            "Example(s)",
            "Causes the status program to\nredisplay the current status of shared programs every second. This\nsetting causes a very noticeable drain on system performance and should\nonly be used when tuning or if problems occur.",
            "shpstat (l1",
            "Completely reinitializes memory. This may be used if several\nprocesses running shared code have aborted abnormally, and the shared\nmemory table seems corrupted. Signs of corruption include long wait\ntimes when loading programs, and issuing ashpstatcommand with no options seems to hang indefinitely.",
            "shpstat (i",
            "shpstatBlock   Usage   Size      Name\n1       1       106k      report.bp eep.help\n2       1       15k       report.bp eep.security\n3       1       3k        report.bp btree.root\n4       1       8k        cmarc.library cbw.open\n5       1       18k       cmarc.library cbw.place\n6       1       7k        cmarc.library cbw.box\n7       1       27k       report.bp eep.format.doc\n8               2,374k    (free)\nFree: 2,374k Max Free: 2,374k Used: 185k"
        ]
    },
    {
        "name":"shp-status command",
        "Syntax":[
            "Syntax",
            "shp-status {(options}\n"
        ],
        "description":[
            "Description",
            "The shp-status command displays status information about printers shared with UNIX, started by the startshp command.",
            "For Windows: Not supported",
            "The information below displays:",
            "If the t option is used, the trace information recorded displays, starting with the newest trace entry. This information displays:",
            "Are the form queues assigned properly?",
            "Is the device associated to the form queue of the appropriate type, such as lp.unix?",
            "Is the D3 job queue full?",
            "Is the D3 printer active?",
            "Is the UNIX command used in the startshp command correct?",
            "Is the UNIX spooler daemon active?",
            "For remote printers, is the network active?"
        ],
        "parameter":[
            "Parameter(s)",
            "optionst{n}Displays trace information. If thenis\nnot specified, all traces are shown, starting with the most recent.\nIf thenis specified, only that number is shown\nfor each printer."
        ],
        "example":[
            "Example(s)",
            "shp-statusVMname   Prt   Port   PID   Spooler command        Status\n------   ---   ---    ----  --------------------   ---------------\npick0    0     126    1763  \u2019exec lp -onobanner\u2019   OK\ndev      0     32     1765  \u2019exec cat >> xx\u2019       prt OK lp DEAD\nprod     0     44     345   \u2019exec lp -s\u2019           prt ERR lp OK",
            "The first line indicates that the first shared printer is the\nprinter 0 of the virtual machine pick0, started on the port 126, sending\nits data to the normallpcommand, suppressing\nthe banner. It appears to be ok.",
            "The second line indicates that\nthe second shared printer is the printer 0 of the virtual machine\ndev, started on the port 32, sending its output to the UNIX filexx(on whatever directory the commandstartshpwas issued on). The D3 printer process is still up, but the lppick\nfilter is dead, possibly because the filexxwas\nwrite protected, or may be because the UNIX file system is full.",
            "The third line indicates that the second shared printer is the\nprinter 0 of the virtual machine prod, started on the port 44, sending\nits data to the normallpcommand, suppressinglpmessages. The D3 printer process is still up, but in\nan incorrect state, probably because asp-killcommand\nwas issued, which sent the process back to logon, without terminating\nthe UNIX process. Thelppickprocess displaysok. To terminate a shared printer properly, use the TCL\ncommandshp-kill.",
            "shp-status (tVMname   Prt   Port   PID   Spooler command        Status\n------   ---   ---    ----  --------------------   ---------------\npick0    0     126    1763  \u2019exec lp -onobanner\u2019   OK\n\n         tr#   Date..   Time....   Description\n         3     03\/03    13:14:00   nd job, size=1223\n         2     03\/03    13:13:55   start job\n         1     03\/03    13:14:00   start lppick",
            "Displays\ntrace information."
        ]
    },
    {
        "name":"shutdown command",
        "Syntax":[
            "Syntax",
            " shutdown {(options}\n"
        ],
        "description":[
            "Description",
            "The shutdown BASIC program initiates an orderly system shutdown   sequence, and should be executed before turning off or rebooting any D3 system.",
            "Critical files are checked for consistency, any user logged on is logged off, all process workspaces are released, all printers are stopped, all phantom jobs are logged off, and all updated memory frames are written to disk. The system is shut down. The critical files are:",
            "mds,,",
            "dm,users,",
            "dm,,",
            "dm,pibs,",
            "dm,tcl-stack,",
            "dm,devices",
            "dm,backgrounds",
            "The macro user-shutdown on the dm account is executed, if it exists. This macro should contain any user-defined procedure to be run at shutdown time (application cleanup, network shutdown, and so on).",
            "where"
        ],
        "parameter":[
            "Parameter(s)",
            "optionsfUNIX OnlyInvokes a:filesat the end, which initiates a full\n         restore as an alternative to reloading from the options prompt.This option displays\n         a notification that all data will be erased and prompts for a confirmation."
        ],
        "example":[
            "Example(s)",
            "shutdown",
            "For UNIX",
            "You will see this output:",
            "Shutting down \"production:pick0\" \n Do you wish to continue (Y\/N\/0)?",
            "Note:production:pick0is the name of the\nvirtual machine.",
            "For Windows",
            "You will see this output:",
            "Verifying integrity of critical files...\n Do you wish to continue (Y\/N\/0)?"
        ]
    },
    {
        "name":"sleep command",
        "Syntax":[
            "Syntax",
            "sleep expression\n"
        ],
        "description":[
            "The sleep command suspends further processing until the specified time expression is exhausted or reached.",
            "D3 supports the specification of milliseconds in expression. For example, to sleep for one and a half seconds, the user can use sleep 1.5."
        ],
        "parameter":[
            "Parameter(s)",
            "expressionSpecifies the number of seconds to suspend processing or the\ntime to resume processing in the formathh:mm{:ss}.Hours are specified from 00 (midnight) to 23 (11:00 PM).Minutes and seconds are specified from 00 to 59."
        ],
        "example":[
            "Example(s)",
            "Puts the process to sleep for\n10 minutes.",
            "sleep 600",
            "Puts the process to sleep until one second before midnight.",
            "sleep 23:59:59"
        ]
    },
    {
        "name":"sort-list command",
        "Syntax":[
            "Syntax",
            "sort-list {dict|data} {file.reference} {list.name}\n"
        ],
        "description":[
            "The sort-list BASIC program retrieves a previously saved list, sorts it, then rewrites it to the file from which it was retrieved.",
            "If the file reference is omitted, the process defaults to the pointer-file file. If the list name is omitted, the default list name, %user-ID, is used."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "Sorts the list, backorders, found\nin thepointer-filefile.",
            "get-list backorders\nsort-list backorders"
        ]
    },
    {
        "name":"sort-users command",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"sortc command",
        "Syntax":[
            "Syntax",
            "sortc file.reference {sellist} {heading \"heading text\"} {(n}\n"
        ],
        "description":[
            "The sortc BASIC program invokes the sort-label command to produce a columnar display of the item-IDs in the specified file, in the order of appearance in the file.",
            "Any valid selection criteria may be passed through to AQL for processing. The default is a four column display. If a numeric option is entered, then that number of columns, up to six, display."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "sortc messages with a0 > \"0]\" and with a0 < \"2]\" (n)16 Feb 2003  Items in File messages   Page 1\n1325     1079     166     1120\n1161     1202     1243    1530\n1080     167      1121    1162\n1203     1531     1081    168\n1122     1532     1204    1000\n1082     169      1123    1205\n1001     1083     170     1534\n1124     1002     130     10\n1084     171      1003    11\n.\n.\n178      1501     1132    1543\n1174     1215     1051    18\n1527     1323     164     1118\n1200     1241     1610    1324\n1078     165      1160    1201\n1242     1119\n[405] 310 items listed out of 969 items."
        ]
    },
    {
        "name":"sp-assign command",
        "Syntax":[
            "Syntax",
            "sp-assign {options}\n"
        ],
        "description":[
            "The sp-assign command displays, changes, or resets the current spooler   output assignment options for the current process\/user. An sp-assign command   with no options closes any currently open files assigned by the current process and resets the   assignment to the default state. The default assignment is: output to printer, normal spooler   entry (meaning, not a hold file), one copy, form queue 0, close files at end of process, queue job   for output immediately upon closing."
        ],
        "parameter":[
            "Parameter(s)",
            "optionsnumber.copies(Integer number in the range 1-125.) Indicates the number\nof copies (default = one).?Outputs resulting setting, or current setting when entered\nalone. The display shows the process port number, current assignment\nparameters, and the device assigned to the currently assigned output\nqueue.aOutput goes to the alternate port on the current terminal.\nTo function correctly, the auxiliaryport onandoffcommands must be defined for the current terminal in\nthe devices file.Note:Theaoption does not suppress\noutput to the system printer by default. To disable system printer\noutput, use thesoption as well.cChokesoutput. This stops the process from generating\noutput when it gets 20 frames ahead of the printer. Thecoption is relevant only with output going to the printer and can\nonly be used with anioption and without anhoption. If a printer is not available or assigned to another\noutput queue, thecoption causes the process to\nwait until the printer is available and causes the copy count to go\nto 1 (one).dDelays sending output to the queue. The output is delayed\nuntil the file is closed. This option must not be used with theioption. This option overrides theioption.fnumberSpecifies the output queue into which a print file will be\ninserted. The number must be between 0 and 2047, inclusive. The default\noutput queue is 0. Each output queue is assigned to a specific printer.hSpools output to a hold file.iSpools output to the printer immediately.mSuppress the display of message[1151] Entry # n.oLeaves the entry open. The print file remains open upon completion\nof the process. This allows placing multiple print jobs in one physical\nspooler entry. To close the entry, use thesp-assigncommand without options, or thesp-closecommand.pAssigns output to the printer. This is the default.rnumberOpens a print file with the specifications of the other options\nin the string.numbercan be between 0 and 125\ninclusive and is the number used inprint onnstatements in FlashBASIC.CAUTION:If theroption is used to send two or more print files to tape\nduring the same process, their outputs will be intermingled on the\ntape. If theroption and theioption\nare both specified, the printer starts to generate output immediately\nand does not wait for the print job to be completed before printing.\nThere is no harm in this, except that no other print jobs can be serviced\nby that printer until the program has completed.sp-assignwith theroption can be used to initialize print\nfiles until the capacity of the input control block is exhausted.\nThere are about 60 input control block records available, depending\non the system configuration.sSuppresses output to printer.tAssigns output to tape and specifies that the print file goes\ndirectly to tape under the control of the generating process rather\nthan under the control of the spooler process. Therefore, the tape\nshould be mounted before the job is started. Thetoption invokes thet-attcommand, if necessary.",
            "Warning:Options must not be preceded by an open parenthesis as with other commands."
        ],
        "example":[
            "Example(s)",
            "sp-assign hs ?Line#   Status   Copies   Form#   Device\n39      hs       1        0       dp.lzr",
            "Line#Port number to which this terminal is attached.StatusAssignment options set bysp-assign.CopiesNumber of copies to print.Form#Form queue numbers.DevicePrinter device name. Seeassignfq (UNIX) command.",
            "sp-assign 13 f11 ?Line#   Status   Copies   Form#   Device\n39      9        13       11      dp.lzrii"
        ]
    },
    {
        "name":"sp-close command",
        "Syntax":[
            "Syntax",
            "sp-close\n"
        ],
        "description":[
            "The sp-close command closes all current spooler entries previously opened by the current line with an sp-open command or an o option in conjunction with an sp-assign command."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "sp-close[1140] your open files were closed."
        ]
    },
    {
        "name":"sp-edit command",
        "Syntax":[
            "Syntax",
            "sp-edit {options}\n"
        ],
        "description":[
            "The sp-edit command accesses existing spooler entries for processing or deletion."
        ],
        "parameter":[
            "Parameter(s)",
            "options\u2019user.ID\u2019On D3, spooler entries are stored under the user-ID of who\ngenerated them. This accesses the spooler entries created by the specified\nuser-ID. Single quotation marks are required around the user-ID.file.number{-number}Designates print file, or a range of print files, if available,\nand must be within the range of 1 through 31,999, inclusive. When\na range of print files is specified, the second number must be higher\nthan the first.cPlaces the entire print job into one item when spooled to\na file, rather than breaking each page of the report into a separate\nitem and inserting (Runoff)chainstatements at\nthe end of each item to chain each item to the next item.dDeletes print files, when used in conjunction with a print\nfile number or a range of print file numbers.Note:Must be used with\nthemoption.fnumber{-number}Edits jobs for a specific form queue, or a range of form queues,\nand must be an integer number in the range of 0 to 1023.hSuppresses the tape label if the hold file destination is\ntape. The option is effective with either thesp-assign\u00a0tspecification or thesp-edit\u00a0tspecification.Note:Required fortoptions.kKeep raw characters. This option removes the conversion of\nnondisplayable characters to periods.lDisplays first 500 characters of print file.mSuppresses remaining prompts when used with thedorsoptions.nNo pause. Suppresses the pause at the end of each page on\nthe terminal.oLooks at the print file that is being output. This must be\nused withloption.pSends the print file to its assigned printer. This option\noverrides the currentsp-assignparameters.rUses the currentsp-assignparameters for\nthe form number and copy count when an entry is spooled. The form\nnumber and copy count are changed permanently.sSpools the print files.t{w}Directs the hold file to tape. This supersedes apoption.wwaits for the tape to be readied, if\nit is not already.Note:If used in combination with thesoption-nothing will be spooled.uEdits all hold files. This option requires sys2 privileges.vConverts a hold file to a data file. It does not remove any\ntrailing blank lines at the bottom of a page.zSends a hold file to the spooler and then removes the entry\nwhen completed.",
            "When options are omitted, all available (unspooled) entries\ngenerated from the current user-ID are retrieved for processing. Only\nfiles in theholdstatus are available. The first 500 bytes\nof the print job are available for display, but the job may not be\naccessed in any other manner.",
            "The hold files may be left in\nthe queue, output to tape, printed, deleted, or copied to data file\nitems. (Hold files are generated by using thehoption\ninsp-assignto send all subsequent printer output\nto a hold file, or by usingsp-killto change a\ncurrently spooled file to a hold file.)",
            "With no options in effect,sp-editreturns all available hold files generated by the\nuser-ID that invoked the command. Aftersp-editis invoked, the options below are available depending upon the options\npreviously selected:",
            "display? (y\/n\/s\/d\/x\/(cr))? -",
            "yDisplays the first 500 bytes. If the job is being created\nor output, and theloption is in effect, the\nprompt, another?displays. The only proper response\nto this prompt isy, to redisplay the first\n500 bytes again. If the print file is not being created or output,\nthe display is followed by the prompt,string-.nSkips to thestringprompt.sSkips to thespoolprompt.dSkips to thedeleteprompt.xTerminatessp-editand returns to TCL.",
            "Pressing ENTER at TCL skips to the next print file. Any\nother response skips to thestringprompt.",
            "string:\nstring",
            "This process scans the print file for the first occurrence\nof the given string, and begins output at the beginning of the line\ncontaining the string. If the string is not found, a message prints\nindicating this, and the operator is prompted again.",
            "Pressing\nENTER at TCL skips to thespoolprompt.",
            "spool:",
            "yEnqueues the print job for output to printer or tape as specified\nby thesp-assignoption in effect when the job\nwas created. (Seeroption below). After the file\nis enqueued,sp-editattempts to process the next\nhold file, if any. If neither thesp-assignnor\nthesp-editspecifies printer or tape as the output\ndestination, a message displays.n(Or pressing ENTER.) Skips to thedeleteprompt.tDirects output to the terminal, then returns to thespoolprompt. At the end of each page of terminal display,\npress any key to view the next page or CTRL+X to stop spooling to\nthe terminal and return to TCL.tnDirects output to the terminal without pausing at the end\nof each page, then returns to thespoolprompt.fCopies to data file items and prompts for additional information.\nWhen used with thecoption on the TCL line, this\noption suppresses the embedded (OP\/Runoff).CHAINcommands and multiple item-IDs for a print job, creating one item\nonly.The OP and Runoff commands,.bpand.nf, are inserted at the beginning of the data file item\nbefore the hold file is copied. Any trailing blank lines in the hold\nfile are not copied to the data item. To have trailing blank lines\ncopied, use thevoption when initiating thesp-editcommand. It is necessary to be logged onto the\nuser-ID that created the hold file in order to copy it to a data file.\nAfter the item is written, the delete prompt displays.ydeletes the entry.n(Or pressing ENTER, or any other response.) Skips to the next\nprint file or TCL, if no more print files exist."
        ],
        "example":[
            "Example(s)",
            "sp-edit msoObtains all print files created by the current user-ID, and\nviews (observes) them.sp-edit msp1-5Obtains all print files created on the current user-ID, and\nsends jobs 1 through 5 to the printer.sp-edit nd1-10Obtains print jobs 1 through 10, and deletes them.sp-edit 10-20Obtains available hold files with entry numbers 10 through\n20 generated by the current user-ID.sp-edit ru3Edits entry # 3 (generated by any user-ID), and uses the currentsp-assignoutput queue and number of copies settings.sp-edit t7-11Sends to tape each print file with entry #s 7-11 generated\nby the current user-ID.sp-edit 4luDisplays the first 500 bytes of print entry #4 (created by\nany user-ID, if the user has sys2 privileges), and the print file\nis not being output.sp-edit f3 msObtains all print files created on the current user-ID for\noutput queue 3, and spools them.sp-edit \u2019pr\u2019 f4 p msIf the current user-ID has sys2 privileges, this spools all\navailable print files created by the pr user-ID in output queue 4\nto the printer, and endssp-edit.sp-edit mdDeletes all available files created by this user-ID.sp-edit mudUnconditionally deletes all print files."
        ]
    },
    {
        "name":"sp-kill command",
        "Syntax":[
            "Syntax",
            "sp-kill {options}\n"
        ],
        "description":[
            "Description",
            "The sp-kill command stops spooler entry output or removes printers and shared printers.",
            "This command provides the following functions:",
            "Aborts the currently active print jobs immediately.",
            "Dequeues print files on the optionally specified printer.",
            "Removes printers from the spooler system.",
            "If the specified printer is a D3 printer shared with UNIX, calls shp-kill to terminate the shared printer and all associated processes. Note that users who do not own the process and are not root, will not be able to kill the printer.",
            "If no options are specified, sp-kill aborts the current print job on printer 0\u00a0(zero). Unless the user-ID has sys2 privileges, only print files generated by the current user-ID invoking the sp-kill can be aborted. Sys2 privileges allow termination of any print file."
        ],
        "parameter":[
            "Parameter(s)",
            "optionsprinter.number{-printer.number}Aborts jobs on a given printer number, or a range of printer\nnumbers, between 0 and the maximum printer number.aStops spooler entry or entries created by the current user-ID.bAll entries. When used with thedoption,\nthis kills all printers. When used with thefoption,\nthis kills all open jobs. When used without any other option, this\naborts all active printers.cKills all copies of the spooler entry or entries, rather than\njust the current copy.dprinter.number{-printer.number}Deletes given printers from the system. This requires a sys2\nprivilege level. When used with thewoption, it\nwaits until the current job completes, rather than aborting it immediately.f{file.number{-file.number}}Returns spooler entries to available hold file status. The\nbeginning and ending file numbers must be in the range of 1 through\n31,999.nSuppresses abort message on output when directed to a printer.\nSeesoption below.oUsed with thefoption, this unlinks print\nfiles already being output.sSuppresses system messages. Seenoption\nabove.uUsed with thedoption, this deletes printer\n0 (zero) only.wWaits until all processes have finished. Use of this option\nwithsp-killis identical to using thestopptr dn, which causes printernto die after the current job.Note:sp-killandstopptrare not exactly synonyms.sp-killcannot be removed, as it has several other features\nthatstopptrdoes not perform. These are two totally\ndifferent commands that have overlapping options."
        ],
        "example":[
            "Example(s)",
            "sp-kill 1Kills the print job on printer 1.sp-kill of7Kills print file 7, even if it is being output, and returns\nit to an available, hold file status.sp-killKills the current print file on printer 0.sp-kill aKills all print files currently being output, that were generated\nby the current user-ID.sp-kill a2Kills the print file on printer 2.sp-kill 3-5kills the print files going to printers 3, 4, and 5.sp-kill bKills all print files going to all printers.sp-kill f5-10Changes print files 5 through 10 to hold files.sp-kill bfChanges all print files going to all printers into hold files.sp-kill d1Deletes printer 1 from the system.sp-kill d3-5Deletes printers 3, 4, and 5 from the system.sp-kill bdDeletes all printers from the system."
        ]
    },
    {
        "name":"sp-open command",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "When no entry number displays,\nthis is attached to the open entry.",
            "sp-open\nblock-print \"this is \" (p\nentry # 133\nblock-print \"a test\" (p\nsp-close\n[1140] Your open files were closed."
        ]
    },
    {
        "name":"sp-status command",
        "Syntax":[
            "Syntax",
            "sp-status {options}\n"
        ],
        "description":[
            "Description",
            "The sp-status command displays the status of all spooler-controlled devices.",
            "If no options are specified, the status of the spooler and all allocated printers displays. The printer status may be one of the following:"
        ],
        "parameter":[
            "Parameter(s)",
            "optionsprinter.number{-printer.number}Designates a specific printer, or range of printers, to display,\nand must be between 0 and the maximum printer number, inclusive.bOutputs status of all printers, allocated and unallocated.nNo pause; suppresses pause at the end of the page on the terminal\ndisplay.pDirects output to the system printer, via the spooler."
        ],
        "example":[
            "Example(s)",
            "sp-statusThe spooler is inactive.\nPrinter # 0 is serial, inactive, and on line.\nThe printer is running on line 13.\nAssigned output queues: 0.\nThe number of inter-job pages to eject is 1."
        ]
    },
    {
        "name":"sp-tapeout command",
        "Syntax":[
            "Syntax",
            "sp-tapeout {options}\n"
        ],
        "description":[
            "The sp-tapeout command retrieves (inputs) reports previously spooled to magnetic media and directs output to the spooler. The spooler redirects the file according to the options currently specified in sp-assign."
        ],
        "parameter":[
            "Parameter(s)",
            "optionsaConverts EBCDIC format to ASCII format.lTreats each tape record as a line, if the tape record length\nis less than 140. This assumes the record is right-padded with spaces,\nand without carriage return\/line feed (CR\/LF) sequences embedded in\nthem. Trailing right spaces are removed and a CR\/LF sequence is inserted\nat the end of each tape record.uConverts all lowercase characters to uppercase."
        ],
        "example":[
            "Example(s)",
            "sp-tapeoutSpools the file (at the current location of the tape) to the\ndestination specified by the currentsp-assigncommand.sp-tapeout uaReads the file (at the current location of the tape), converts\nthe data from EBCDIC to ASCII, converts all characters to uppercase,\nand spools the file to the destination specified by the user\u2019ssp-assigncommand."
        ]
    },
    {
        "name":"speller command",
        "Syntax":[
            "Syntax",
            "speller {(options)}\n"
        ],
        "description":[
            "The speller command enables or disables the spelling checker for the current user\/port only, or displays the status of the speller if no options are provided.",
            "The automatic spelling checker is used with the Update processor."
        ],
        "parameter":[
            "Parameter(s)",
            "optionsfToggles spelling checker off.nToggles spelling checker on.sSuppresses output of the status message.",
            "CAUTION:",
            "Thewordsfile\nis shippedemptyfrom the factory. Until awordsfile is obtained, the spelling checker should be disabled, sinceeveryword forces a lookup."
        ],
        "example":[

        ]
    },
    {
        "name":"ssample command",
        "Syntax":[
            "Syntax",
            " ssample [DICT] filename [item-list] [selection] [sort-keys] [output] (n)\n"
        ],
        "description":[
            "The ssample command creates and sorts a temporary select-list of the   first n items in a file that match the specified criteria. This command is useful when   testing a small number of items. For example, testing 100 items in a file rather than processing   all 10,000 items. ",
            "To permanently save the select-list, use the save-list     command. When a select-list is saved, you can retrieve it at any time with the      get-list command.",
            "A select-list can reference data in any file, not just the file specified in the original      ssample statement. If two files have similar items with the same item-IDs,     you can create a select-list from one file, then use it to operate on items from the other     file."
        ],
        "parameter":[
            "Parameter(s)",
            "DICTSpecifies the file dictionary.filenameThe name of the file.item-listA list of individual item-IDs that you want to select or\n        compare against specified criteria. Enclose each item-ID in single quotes. This parameter\n        overridesn.selectionSpecifies one or more conditions that an item must meet\n        to be included in the select-list. For a complete description of selection expression\n        syntax, see thelist commandinformation.sort-keysSpecifies which attributes to sort and whether to sort\n        them in ascending or descending order. You can use the following modifiers withsort-keys:BYSpecifies which attributes to sort and whether to sort them in ascending or descending\n        order. You can use the following modifiers withsort-keys:BY-DSNDSorts items in descending order by the specified attribute.BY-EXPSorts a multivalued attribute in ascending order and produces a separate line for each\n        value.BY-EXP-DSNDSorts a multivalued attribute in descending order and produces a separate line for\n        each value.If more than one sort-key is specified in anssamplecommand line, the system sorts these attributes from left to\n        right (the leftmost sort-key is the most significant).outputThe name of an attribute whose values are to be selected.\n        Each value becomes a separate item-ID in the select-list.nThe number of items to sample."
        ],
        "example":[
            "Example(s)",
            "The following example creates a select-list containing the first four items in the ORDERS file\n    whose sale date is January 15, 2018:",
            ">SSAMPLE ORDERS WITH DATE = \"01\/15\/18\" (4)4 ITEMS SELECTED.",
            "If you list these items with thelistcommand, they appear in sorted\n    order:",
            ">LIST ORDERS0134\n0156\n0179\n0234\n\n4 ITEMS LISTED."
        ]
    },
    {
        "name":"stack command",
        "Syntax":[
            "Syntax",
            "stack {(options)}\n"
        ],
        "description":[
            "The stack command enables or disables the tcl-stacking function for the current port only, or displays the status of the stacker if no options are provided."
        ],
        "parameter":[
            "Parameter(s)",
            "optionsfTCL stacker off.nTCL stacker on.sSuppresses output of status message."
        ],
        "example":[

        ]
    },
    {
        "name":"start-reclaim-ovf command",
        "Syntax":[
            "Syntax",
            "start-reclaim-ovf\n"
        ],
        "description":[
            "The start-reclaim-ovf BASIC program\u2019s overflow reclamation process is initiated on the current line or as a phantom process if the b option was specified with the reclaim-ovf command.",
            "This process scans all files and indexes in the system and removes used frames from the new overflow table."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"start.rtc command",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"start.ss command",
        "Syntax":[
            "Syntax",
            "start.ss {(options}\n"
        ],
        "description":[
            "The start.ss command starts the spooler and the phantom scheduler."
        ],
        "parameter":[
            "Parameter(s)",
            "optionsfPhantoms onlylPhantom processes are started using the monitor located on\nthe current (local) directory.zAbs and monitor are not the same",
            "For UNIX:Thestart.sscommand\nstarts the UNIX processes, which supports the D3 phantom processes,\nif they are not connected to the virtual machine already. The monitor\nthe phantoms use is controlled by the UNIX environment$pathand the UNIX file\/usr\/lib\/pick\/pickname, created\nby the installation procedure.",
            "On a configuration where more\nthan one virtual machine is running, it is important to ensure that\nall processes on a given virtual machine run the same version of the\nmonitor. Normally, when the virtual machine is booted, thestart.sscommand creates processes running the same monitor,\nfound on \/usr\/bin, as the one currently executed by the line 0. This\nis ensured by executing awhichcommand, which\nshows the monitor version such as:",
            "7.3.0.LINUX",
            "Monitors are deemed compatible if the first two digits\nare similar. If not, then the UNIX variable$pathis scanned, and a compatible monitor is looked for on the given\ndirectories. If it fails, thenstart.sscomplains\nand does not start the spooler nor the phantom scheduler.",
            "Theloption instructsstart.ssto use the\nmonitor on the current directory. For this option to work properly,\nthesystem-coldstartmacro should be modified as\nfollows:",
            "cd \/usr\/mydir\nstart.ss (l",
            "When theloption is in effect, the$pathUNIX variable is not used to find the correct monitor.",
            "For Windows:Thestart.sscommand starts\nthe Windows processes. The monitor the phantoms use is controlled\nby the Windows environment."
        ],
        "example":[

        ]
    },
    {
        "name":"startlog command",
        "Syntax":[
            "Syntax",
            "startlog {{port.number}{,wait.time}} {(options)}\n"
        ],
        "description":[
            "The startlog command activates the transaction logging subsystem. All items in files with a dl-type are automatically logged to the attached magnetic media on each add, change, or delete to the item.",
            "For Windows: Not Supported"
        ],
        "parameter":[
            "Parameter(s)",
            "port.numberIndicates the port number on\nwhich the logger is to be started. The default is one before the last\nportwait.timeSpecifies the wait time interval\n(in milliseconds) to flush the tape buffer when the queue is empty.\nThe default is 30 seconds. A negative number indicates no flush.optionsaStarts, then activates. No prompt displays.eEnqueues all files (except tcl-stack) for logging, even if\nthey arenotdl-type files.fSets flush time when accompanied by a number.lEnqueues dl-type files only.oChanges status of logger. Used only with thelandeoption.uRestarts the transaction logger and asks for new backup media.\nBackup media can only be specified after a system restore with this\noption. If no backup media has been specified,startlogprompts for one.",
            "Before invoking this command, a tape device must already\nbe attached to the current port because the transaction logger steals\nthe tape device.",
            "If the transaction logger has not been initiated\nsince the system was booted, the system does adouble-checkprompt. If the transaction logger has been initiated previously,\nthe prompt is not displayed.",
            "Thestartlogattaches the tape, if available, then logs the appropriate transactions.",
            "If the tape is needed by another process, the transaction logger\ncan be interrupted by attaching the tape using theuoption witht-att. In this case, the transaction\nlogger must be restarted with thestartlogcommand,\nas it does not automatically restart.",
            "Any transactions that\noccur while the logger is interrupted are held on disk until the transaction\nlogger is restarted.",
            "All transaction tapes should be saved until\nthe next fullfile-saveor incrementalfile-saveis performed. When the transaction logger encounters\na tape problem it sends a message to port 0."
        ],
        "example":[
            "Example(s)",
            "Changes the status of the logger\nto enqueue writes for all files, except tcl-stack. tcl-stack items\nmay be forced into the logging queue by editing and filing the item.",
            "startlog (eo",
            "Changes the status of the logger to enqueue writes for\ndl-type files only.",
            "startlog (lo"
        ]
    },
    {
        "name":"startptr command",
        "Syntax":[
            "Syntax",
            "startptr number{,queue, eject.pages, type\/address,{a} {(options)}}\nstartptr number, (q1{,q2{,q3}}), eject.pages, type\/address, {a} {(options)}\n"
        ],
        "description":[
            "The startptr command activates and initializes up to 2048 printers. The actual number of printers supported depends on the hardware configuration. If the status of the printer is active, startptr has no effect.",
            "For Windows: The startptr command does not apply when configuring D3 printers as direct printers. You will not get an entry number when sending a print job to a printer configured in D3 as a direct printer. "
        ],
        "parameter":[
            "Parameter(s)",
            "numberPrinter number between 0 and\nthe maximum printer number, which is determined by the actual number\nof physical ports on the system, plus 4. If no other options are specified,\nthis restarts astoppedprinter.q1 - q3Output queue numbers between\n0 and 2047, inclusive.q1is given first priority\nfor spooling,q2is given second priority, and\nso on. At least one form queue must be specified, but not more than\nthree.eject.pagesNumber of pages to eject at the end of each print file, and\n        must be between 0 and 9, inclusive. See thesoption.type\/addressPrinter type and port number.\nThe printertypewill bes(serial\nprinter). All printers are treated internally as serial devices, even\nwhen (as in the case of a shared printer) thedeviceis a pseudo\ndevice. Theaddressis determined by thetype. For serial printers theaddressreferences the port number.aInitiates the alignment process.\nThe system prompts for the number of lines, and then prints a sample\nalignment. After each trial, it prompts again for either ayto try the alignment again,tto terminate the alignment process, ornto\ninput a different number of alignment lines. During the alignment\nprocess the printer is not yet considered attached to the spooler,\nso it cannot yet receive print jobs.optionsbThe serial printer is assigned the linefeed and form feed\ndelays of the initiator. If theboption is not used\nwhen starting the printer, the printer will set its linefeed and form\nfeed delays to 0.dEnables debugger on the current port. Used primarily by developers\nto test spooler code.sInhibits the initialpage-ejectcommand at the start of a print file. Seeeject.pages.x{n}Indicates that the serial printer does not recognize an ASCII form feed character as apage-ejectcommand. The printing process must count lines within the\n        page and send the correct number of blank lines when apage-ejectcommand\n        occurs.nindicates the number of lines per page. If thexoption is specified and there is no numeric specification, the page\n        length defaults to 66 lines."
        ],
        "example":[
            "Example(s)",
            "startptr 1,1,0,s12Starts printer 1 on form queue 1, skipping 0 pages between jobs, on serial port 12.startptr 9,(98,99),1,s19Starts printer 9 on form queues 98 and 99, skipping 1 page between jobs, on serial port 19.startptr 1,(3,4,5),1,s11Starts printer 1 on form queues 3, 4 and 5, skipping 1 page between jobs, on serial port 11."
        ]
    },
    {
        "name":"startshp command",
        "Syntax":[
            "Syntax",
            "startshp ptr.number,(q1{,q2{,q3}}}), eject.pages,type\/address, (pd1{,pd2{,pd3}}})\n{,(lp)} {(options}\n"
        ],
        "description":[
            "The startshp command starts a shared printer under UNIX. The output of   the D3 printer process is routed to the UNIX spooler. This command combines the    startptr command and the necessary assignfq   command.",
            "For Windows: Not Supported",
            "Keeping track of shared printers is achieved using the shp-status command.     Terminating a shared printer should be done using the shp-kill command. After     a job has been submitted to UNIX, the (UNIX) lpstat command can be used to     track the running jobs. The printer devices associated with the form queues must have a special     interjob sequence so that the UNIX spooler can distinguish the end of the job."
        ],
        "parameter":[
            "Parameter(s)",
            "ptr.numberIndicates the printer number (integer).q1, q2, q3Indicates the output queue numbers.eject.pagesIndicates the integer number that specifies the number\n        of pages to eject at the end of each job.type\/addressIndicates the printer type and port number.The\n         printer type will bes(serial printer). All printers are treated\n         internally as serial devices, even when (as in the case of a shared printer) thedeviceis a pseudo device.pd1, pd2, pd3Indicates the printer devices.To each form queue, a\n         printer device, defined in dm,devices, must be associated to define the printer\n         characteristics, as well as the interjob sequence.The interjob sequence is defined\n         in the function@(-269). If the number of printer devices is less than\n         the number of form queues defined, the last device is used for the remaining form\n         queues.Note:The maximum number of form queues that can be defined is 2048.lpIndicates a UNIX command used to spool the D3 print job.If not specified,lpis used by default.If the UNIX command has more than one word (separated by spaces), the command must be\n          enclosed in parentheses.Refer to thelppickcommand in either theD3 Linux System\n          Administration GuideorD3 AIX System Administration Guideforlpcommand options.",
            "optionsaInitiates alignment process.Note this is an option, while on thestartptrcommand it is an\n         argument. When this option is used, each alignment attempt is a UNIX job. The UNIX printer\n         should have been set up so that there is no banner, no interjob page eject.cCompiles the printer devices.This option must be used whenever the printer\n         definition item is changed.sInhibits the initialpage-ejectcommand at the start of a print\n        file.See theeject.pagesparameter in thestartptr commanddocumentation for more\n         information.t{n}Traces shared printer activity.Even when the trace is not activated, errors are\n         recorded.nis a trace level. See theTrace informationsection for a description of each trace level.vVerbose.Various information displays on the terminal. This option should be used\n         only to diagnose problems. It displays the amount of data that is transferred to the UNIX\n         spooler."
        ],
        "example":[
            "Example(s)",
            "Example 1",
            "Starts printer 3, serving form\nqueues 2 and 3, both associated to the same printer devicelp.unix, with one page eject after each job (required for\na laser printer), on port 32.",
            "startshp 3,(2,3),1,s32,lp.unix (s",
            "Example 2",
            "Starts printer 4, serving form queue 7, associated to\nthe printer devicelp.unix, with one page eject after\neach job (required for a laser printer), on port 33, using the UNIX\ncommand lpr to access a remote printer.",
            "startshp 4,7,1,s33,lp.UNIX,lpr (s",
            "Example 3",
            "Starts printer 5, serving form queues 8 and 9, respectively\nassociated to the printer deviceslp.unixandlp.lzr.unix, with one page eject after each job (required\nfor a laser printer), on port 34, using the commandlp -n\n2 -o nobannerto generate 2 copies of each job and to remove\nthe banner.",
            "startshp 5,(8,9),1,s34,(lp.unix,lp.lzr.ux),(lp -n 2 -o nobanner) (s",
            "Example 4",
            "Starts printer 6, serving form queue 10, associated to\nthe printer devicelp.unix, with no page eject after\neach job, on port 35, using the commandcat >> \/tmp\/printto send all print jobs into a regular UNIX file.",
            "startshp 6,10,0,s35,lp.unix,(cat >> \/tmp\/print) (s",
            "Example 5",
            "Starts printer 7, serving form queue 99, associated to\nthe printer devicelp.unix, initiating the alignment\nprocess. Jobs must have been queued on the specified form queue for\nalignment to be attempted.",
            "startshp 7,99,0,s16,lp.unix (a",
            "Example 6",
            "Starts printer 8, serving form queue 97, associated to\nthe printer devicelp.unixwith a level 2 trace.",
            "startshp 8,97,0,s17,lp.unix (t2"
        ]
    },
    {
        "name":"startspooler command",
        "Syntax":[
            "Syntax",
            "startspooler {port.number} {(options)}\n:startspooler\n"
        ],
        "description":[
            "The startspooler command kills all printers associated with the spooler, then initializes the spooler and returns it to normal operation. This process is usually invoked when the system is powered on.",
            "The spooler controls the printing process and is normally started during coldstart. When necessary, startspooler can be used to execute specified portions of the spooler initialization process without reinitializing the entire spooler subsystem.",
            "Using startspooler without options makes no changes in the spooler subsystem, but wakes up the printers (if any are started). The printers then poll their respective form queues for scheduled jobs to print."
        ],
        "parameter":[
            "Parameter(s)",
            "optionsport.numberStarts the spooler process on the given port number. If the\nport number is not specified, the spooler is started on the first\nport following the last physical port on the system. Used primarily\nby developers to test spooler code.cStarts the spooler, clears the form queue assignments, kills\nthe printer, clears input and output queues and converts any existing\nprint files to hold files. This should be used as thesecond to\nlastoption for resetting the spooler.dUsed in conjunction with theport.numberoption above to enable the debugger on the port.fStarts the spooler and converts any existing print files to\nhold files. This option does not kill printers and keeps a port\u2019s\nform queue assignment.iStarts the spooler and initializes control data with new overflow\nframes. The disk space used previously by the spooler is lost until\nthe next file restore (approximately 5-9 frames). This is the last\nresort in resetting the spooler."
        ],
        "example":[

        ]
    },
    {
        "name":"steal-file command",
        "Syntax":[
            "Syntax",
            "steal-file file.reference\nfrom account: account.name\n"
        ],
        "description":[
            "The steal-file BASIC program is the only valid way to move a file from another account into the current account.",
            "This physically moves a file to the current master dictionary from another master dictionary. steal-file prompts for the account name and requires sys2 privileges. It also requires that the user invoking steal-file is not protected against updating the file at any level, master dictionary, file level dictionary, or data file level.",
            "After stealing a file, the former owner has no reference to it, not even visitation rights. He or she can get visitation rights by building a Q-pointer to where the file moved, or by referencing the path name."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "steal-file goodsfrom account:victims"
        ]
    },
    {
        "name":"stoplog command",
        "Syntax":[
            "Syntax",
            "stoplog {(options}\n"
        ],
        "description":[
            "The stoplog command stops the transaction logger and detaches the transaction logger tape.",
            "For Windows: Not Supported",
            "Any subsequent (log) updates are held on the disk. When the transaction logger is restarted, these updates are written to the transaction logger tape."
        ],
        "parameter":[
            "Parameter(s)",
            "kReleases the queue back to overflow. Used for recovery purposes\nin cases where the transaction logger consumes all available overflow\nspace."
        ],
        "example":[

        ]
    },
    {
        "name":"stopptr command",
        "Syntax":[
            "Syntax",
            "stopptr {options}\n"
        ],
        "description":[
            "The stopptr command stops the specified printer at the end of the current print job. If the printer is inactive, it stops immediately. If it is active, it stops at the end of the current print file. If the current print file is specified to print multiple copies, the printer stops after the completion of the current copy. Sys2 privileges are required to use stopptr. Executing this command without specifying a printer attempts to stop printer 0."
        ],
        "parameter":[
            "Parameter(s)",
            "optionsprinter.number{-printer.number}Designates the printer number, or range of printer numbers\nto stop, and must be between 0 and the maximum printer number. The\nmaximum printer number is the actual number of ports on the system,\nplus 4.bStops all printers.sSuppresses display of error messages.wWaits until the printer has completed printing any print file\nand is inactive. This option can be used, for example, when thestopptrcommand is issued from a macro, followed by astartptrcommand. This ensures that the printer is stopped\nbeforestartptris executed."
        ],
        "example":[
            "Example(s)",
            "Sets printer # 1 to stop.",
            "stopptr 1",
            "Sets printer # 0 to stop but is still active.",
            "stopptr b",
            "Sets printer #1 to stop, then waits for printer #1 to\nbecome inactive before returning to TCL.",
            "stopptr 1w"
        ]
    },
    {
        "name":"sub command",
        "Syntax":[
            "Syntax",
            "sub number number\n"
        ],
        "description":[
            "The sub command subtracts the second integer number provided from the first integer number provided and displays the result as an integer number."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"subx command",
        "Syntax":[
            "Syntax",
            "subx hex.number hex.number\n"
        ],
        "description":[
            "The subx command subtracts the second hexadecimal number provided from the first hexadecimal number provided and displays the result as a hexadecimal number."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "subx 400 8A376"
        ]
    },
    {
        "name":"syschk command",
        "Syntax":[
            "Syntax",
            " \n  syschk keyword{=value} {...} {(options}\n\n"
        ],
        "description":[
            "Description",
            "The syschk BASIC program checks a system running under UNIX to detect abnormal situations.",
            "For Windows: Not Supported",
            "The UNIX parameters are obtained through a variety of more or less UNIX-dependent                     commands. Often, on a given UNIX version, there might be several ways of                     obtaining the information. Therefore, results shown by syschk                     might differ from results provided by other UNIX tools and be very difficult to                     compare to results given by another system. ",
            "For example, a given application might prompt the syschk                     command to complain about heavy CPU usage on a UNIX platform and not on another,                     all other factors being equal (if this is possible). When a UNIX device is                     specified in the notify parameter, the messages are written                     asynchronously on the device, even if it is not logged on to either UNIX or D3.                     It is a good idea to specify the UNIX console as a notify device."
        ],
        "parameter":[
            "Parameter(s)",
            "startStarts thesyschkcommand running as a phantom\n                                        with the same argument as the last time it was started. If\n                                        necessary, the process is stopped before it is restarted. If\n                                        the process was never started, a set of defaults is applied.editEnters the Update processor\n                                        to allow editing the arguments used by thestartcommand. Note that if any edits\n                                        are made to the arguments, the syschk process needs to be\n                                        stopped and restarted for the edits to take affect.nowInstructs thesyschkphantom process to take a\n                                        sample immediately, and sends the anomaly messages, if any,\n                                        to the terminal requesting the sample, instead of the normal\n                                        notify mechanism.stopStops thesyschkcommand running as a phantom.optionsaLogs a short summary of all error messages to theerrorsfile.The initial swap\n                                             space control is always logged, and can be specified by\n                                             using thelogallkeyword.fStartssyschkin foreground on the\n                                        current process, as opposed to a phantom process. With this\n                                        option, the only way to stop the process is to do a\n                                        break\/end, or alogoff.lLogs a short summary of the error messages to theerrorsfile.The initial swap\n                                             space control is always logged, and can be specified by\n                                             using thelogkeyword.qQuiet option suppresses the user messages (for example,started,stopped).vVerbose option can be used ifsyschkruns in the foreground, instead of a phantom.",
            "CAUTION:",
            "Thesyschkcommand uses UNIX system commands,\n                    such assar,ps, and some others. If the\n                    process that executes this command does not have root privilege, it might be\n                    necessary to change the permissions of the required utilities to make these\n                    commands work.If thesyschkcommand fails to access a system\n                         parameter, an error message, such as:Cannot get swap usage,\n                         is sent to the system administrator. See the following error messages.\n                         Usually, changing theset user-IDbit gives adequate\n                         permissions to the tools.For example, to runsaras non-root on AIX:chmod 06755 \/usr\/sbin\/sar\n chmod 06755 \/usr\/lib\/sa\/sadc",
            "AIX: \u2019lsps -a\/\u2019 \n Linux: !cat \/proc\/meminfo |grep Swap",
            "This command can use some very intrusive UNIX commands. Do not run it with a\n                    sampling period less than a few minutes."
        ],
        "example":[
            "Example(s)",
            "Example 1",
            "This example starts a phantom process to check the system every 30 minutes for a\n                    CPU system usage above 10%, a swap usage above 60% and a process runaway limit\n                    of 10%.",
            "In case of anomaly, a message is sent to the:UNIX terminal\/dev\/tty0D3 user bob if he is logged onLine 0, whether it is logged on or notA short message is also logged in theerrorsfile. The\n                    other parameters are left to their default values.",
            "syschk sampling=00:30:00 syscpu=10%\n notify=\/dev\/tty0,bob,!0\n swapusg=60% proccpu=10% log",
            "Example 2",
            "This example logssyschkmessages to the errors file and usessyschk editto set the check period to 30 seconds. After\n                    startingsyschkwith theAoption, run the\n                    following program:",
            "fin=1\n loop while fin do\n repeat",
            "You will see messages logged every 30 seconds logged about CPU usage.",
            "Example 3",
            "This example checks whethersyschkis running:",
            "syschksyschk is running on port 132\n Started on 03\/11\/94 at 08:20:21\n Current running parameters:\n      Sampling period 00:30:00\n      Notify list \/dev\/tty0 bob !0\n      Maximum system CPU % 10\n      Maximum CPU % per process 25\n      Maximum % of swap 60\n      Maximum % of overflow 90\n      UNIX file systems \/\n      Log messages (0=no;1=yes) 1\n Current System Status:\n      User CPU usage 3%\n      System CPU usage 11%\n      Waiting for IO 82%\n      Idle CPU 4%\n      Total swap space 128 Mb\n      Used swap space 76 Mb (59%)",
            "Example 4",
            "This example stops the phantom runningsyschkas a background\n                    process, suppressing the messagestopped. This command could be\n                    included in theuser-shutdownmacro.",
            "syschk stop (q",
            "Example 5",
            "This example restarts thesyschkphantom with the same\n                    parameters.",
            "syschk start",
            "Example 6",
            "This example edits thesyschkcommand line to change the\n                    arguments. Use the Update processor command to edit the command line.",
            "syschk edit"
        ]
    },
    {
        "name":"sysid command",
        "Syntax":[
            "Syntax",
            "sysid\n"
        ],
        "description":[
            "Description",
            "The sysid BASIC program displays system configuration, options, and features.",
            "The sysid command displays various information about the current platform including the host system, processor type, and implementation. Any host O\/S options available from D3 are shown under System Options.",
            "Further, the sysid command displays a list of D3 features, which may be either available or not available. The activation code received when the system is initially installed determines the availability of these features."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "sysidHost system     : Windows Server\nprocessor type  : Intel or compatible\nImplementation  : D3 Windows\nSystem ID       : 12345678\n\nSystem Options:\nI\/O Subsystem Support\n\nFeatures         Status     Features       Status\n-------------------------------------------------------------------------------\nFlashConnect     Available   OpenDB        Available\nHot-Backup       Available   WebSphere MQ  Available\nOracle Gateway   Available"
        ]
    },
    {
        "name":"system-coldstart macro",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "001 n\n002 run dm,bp, setpib0\n003 term-type (s\n004 run dm,bp, start.rtc\n005 run dm,bp, start.ss\n006 initovf\n007 coldstart.log\n008 run dm,bp, cleanpibs\n009 :reset-async\n010 set-abs dm,ABS, (s\n011 maxusers (mql\n012 verify.system\n013 run dm,bp, start.printers\n014 coldstart\n015 off"
        ]
    },
    {
        "name":"T",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"t-act command",
        "Syntax":[
            "Syntax",
            "t-act device.num\n"
        ],
        "description":[
            "The t-act command selects a previously attached tape device as the currently active device to read and write to. D3 releases not only can have many users using many tapes simultaneously, a single user can have multiple tapes. This command allows switching between tapes."
        ],
        "parameter":[
            "Parameter(s)",
            "device.numDevice to make active."
        ],
        "example":[
            "Example(s)",
            "set-device 1\nset-device 2\nt-dump md\nt-act 2\nt-dump md\nt-act 1\nt-dump bp\nt-act 2\nt-dump bp\nt-det"
        ]
    },
    {
        "name":"t-att command",
        "Syntax":[
            "Syntax",
            "t-att {blocksize} {(options}\n"
        ],
        "description":[
            "Description",
            "The t-att command attaches the tape unit or floppy disk drive to the current process unit and optionally assigns the block size to the tape I\/O buffer.",
            "The types of devices that you can attach to are:",
            "After attaching the device to the current process, all of the regular tape handling commands, like t-rew and t-fwd are available, even when using floppy disks. Floppy disks must be rewound before writing to or reading from them. Usually, this does not take long.",
            "If the tape unit is attached to another line, the process displays the port that has it attached. The u option in the t-det command detaches the tape unconditionally, regardless of what it may be doing. This may be necessary if the transaction logger is enabled.",
            "The t-att command should be used before any tape manipulation process, such as executing tape control commands, generating print file output to the tape using the t option in the sp-assign or sp-edit command, executing tape reads and writes in FlashBASIC, or generating tape output using the reformat and sreformat commands.",
            "All tape manipulation processes on the system check for attachment, attach the tape if possible, generate the required message, and terminate if the tape is not available. The implied t-att uses the current tape block size specification and remains set until one of the following events occur:",
            "Using the t-att command with a numeric argument.",
            "Using the t-att command without a numeric argument.",
            "Using any tape command which checks for tape attachment.",
            "Executing the t-rdlbl command when a labeled tape is mounted. The tape block size is stored in labels written to tape. By reading a tape label through the t-rdlbl or t-read commands, the current block size is changed to the size stored in the label read."
        ],
        "parameter":[
            "Parameter(s)",
            "blocksize(Integer number) Indicates\nthe number of bytes in each block.optionsuUnconditionally attaches the tape. It is strongly advised\nto verify that the tape is not actually being used before stealing\nit from another process.zUnconditionally attaches the tape, except if the tape is attached\nto the transaction logger."
        ],
        "example":[

        ]
    },
    {
        "name":"t-bck command",
        "Syntax":[
            "Syntax",
            "t-bck {number}\n"
        ],
        "description":[
            "The t-bck command backspaces the tape to the end of the previous file or a specified number of blocks.",
            "For Windows: Not Supported"
        ],
        "parameter":[
            "Parameter(s)",
            "numberIndicates the number of blocks to backspace. If the number\nis not specified, the tape backspaces to a position immediately preceding\nthe previous EOF mark, or to load point. Before reading the next file,\nat-fwdcommand must be issued to position the\ntape after the EOF\u00a0mark."
        ],
        "example":[

        ]
    },
    {
        "name":"t-bsf command",
        "Syntax":[
            "Syntax",
            "t-bsf {number}\n"
        ],
        "description":[
            "The t-bsf command backspaces a given number of files.",
            "For Windows: Not Supported"
        ],
        "parameter":[
            "Parameter(s)",
            "numberNumber of files specified. If omitted, this command behaves\nlike thet-bckcommand."
        ],
        "example":[

        ]
    },
    {
        "name":"t-bsr command",
        "Syntax":[
            "Syntax",
            "t-bsr {number}\n"
        ],
        "description":[
            "The t-bsr command backspaces a given number of records.",
            "For Windows: Not Supported"
        ],
        "parameter":[
            "Parameter(s)",
            "numberNumber of records specified. If omitted, this command behaves\nlike thet-bckcommand."
        ],
        "example":[

        ]
    },
    {
        "name":"t-cascade command",
        "Syntax":[
            "Syntax",
            "t-cascade device.num, device.num,...{options}\n"
        ],
        "description":[
            "The t-cascade command cascades or links one tape device to another tape device, either in a chain or a loop. Instead of prompting for the next reel, the system uses the forwardly linked device specified. Tape attachment is not checked. This command updates the links of the tape devices.",
            "When all the devices have been used in a chain, the system remains on the current device and prompts for the next reel, if necessary. If the links are set up as a loop, the system never prompts for the next reel. It is up to the operator to mount the next reel properly.",
            "All tape drives involved in the cascade must be at the same block size or be able to be changed to the starting drive\u2019s block size automatically by the system for the cascade to succeed. Remember, certain tape types like floppy disk drives are limited in their block sizes available."
        ],
        "parameter":[
            "Parameter(s)",
            "device.numNumber of devices specified.optionscClears all links for the first device number specified or\nall devices if none is specified."
        ],
        "example":[
            "Example(s)",
            "Tape device 6 cascades into tape\ndevice 8 if the end of the reel is encountered on device 6. No prompt\nfor the next reel occurs.",
            "t-cascade 6,8",
            "Tape devices 2 and 3 are linked as a loop, 2 is linked\nto 3 and 3 is linked back to 2.",
            "t-cascade 2,3,2",
            "Tape devices 2 to 5 are all linked or cascaded together.\nOnly, after device 5 is filled does the system prompt for the next\nreel.",
            "t-cascade 2,3,4,5",
            "Clears the links associated with tape device 4. This device\nprompts for the next reel when the EOT is reached.",
            "t-cascade 4 (c"
        ]
    },
    {
        "name":"t-chk command",
        "Syntax":[
            "Syntax",
            "t-chk {(options}\n"
        ],
        "description":[
            "The t-chk command checks a tape for parity errors. At the end of the process, the number of files checked displays."
        ],
        "parameter":[
            "Parameter(s)",
            "optionsaChecks to EOD. When omitted, the current tape file is checked.pDirects output to system printer, via the spooler."
        ],
        "example":[

        ]
    },
    {
        "name":"t-copy command",
        "Syntax":[
            "Syntax",
            "t-copy source.device dest.device{(file.count}\n"
        ],
        "description":[
            "The t-copy BASIC program copies data from one device to another."
        ],
        "parameter":[
            "Parameter(s)",
            "file.countSpecifies number of file segments to copy. Default is 1 file\nsegment. For example, a file int-dumpformat is\nwritten on tape as 1 file segment. Afile-saveoraccount-saveon tape is written as 2 file segments, plus\n1 file segment for each account. Therefore, to copy to the first account\nof a save, specify a file count of 3; to copy the first two accounts,\nspecify a file count of 4; and so on.",
            "Note:Both source and destination devices must be attached\nto the current process."
        ],
        "example":[
            "Example(s)",
            "who15 dm dmlist-device",
            "Tape  Status          17 Feb 2003      11:46:41\n#     Type            Density          Owner       Device Name\n----------------------------------------------------------------\n0  |  Floppy       |  3 1\/2\" 1.44M  |  15*   +  |  \/dev\/rpdsk\/2\n1  |  Floppy       |  5 1\/4\" 1.2M   |           |  \/dev\/rpdsk\/3\n2  |  Quarter Inch |  High          |  15*      |  \/dev\/rmt\/0n",
            "Copies the contents of device 0 to device 2, up to the third EOF\nmark. If device 0 contains data in save format, this copies the first\naccount on tape.",
            "t-copy 0 2 (3",
            "Copies up to the first EOF mark (default file count is\n1). In this case, if device 0 contains data int-dumpformat, this copies thet-dumpfrom device 0\nto device 2.",
            "t-copy 0 2"
        ]
    },
    {
        "name":"t-det command",
        "Syntax":[
            "Syntax",
            " t-det {device.num} {(options}\n"
        ],
        "description":[
            "Description",
            "The t-det command detaches the tape from the current process or from   another process. If no device number is specified, then all tape devices currently attached to   this process are detached.",
            "On D3 UNIX systems, this command detaches the tape from the current port so that other processes,     other UNIX users, or other D3 virtual machines can use it. ",
            "The u option sends a UNIX signal to the process that owns the tape to force     it to close the device. This is done through the trap mechanism.",
            "The t-det command is the default trap for this signal. If the system     administrator disables this trap, or uses another command (for example, displaying a message to     ask the user to detach the tape instead of taking the tape forcefully), the command fails with     the following message:",
            "The t-det (u command must be utilized with a specific tape device number or the (u option is ignored."
        ],
        "parameter":[
            "Parameter(s)",
            "device.numberNumber of tape devices. If no\ndevice number is specified, then all devices currently attached are\ndetached.optionsuDetaches the tape unit from any port except the spooler, which\ndetaches automatically at the end of each job, and the transaction\nlogger. This requires a sys2 privilege level. A device number is required.zWorks only if the owner is the transaction logger."
        ],
        "example":[

        ]
    },
    {
        "name":"t-dump command",
        "Syntax":[
            "Syntax",
            "t-dump file.reference {item.list} {selection.criteria} {modifiers} {heading \"text\"\/options} {(options)}\n"
        ],
        "description":[
            "Description",
            "The t-dump command copies items from a given file to the attached peripheral storage device. The heading modifier allows specifying the contents of the tape label written to the tape prior to the dump. The tape must already be at load point in order to write the tape label.",
            "If no selection criteria is specified, the entire file is written. In all multireel operations, if the process detects end of media before completing the dump, it prompts for the next reel with the message:",
            "When the next reel is inserted or mounted, c continues the process, or q stops it and returns control to TCL.",
            "If the dump is being done to streaming cartridge tape (SCT), an explicit end-of-data sequence must be written at the end since SCT cannot back up. The TCL t-weof command or the FlashBASIC weof statement may be used to write the second eod needed to indicate the end of the file. Otherwise, account-restore or sel-restore may fail to see the end of the tape."
        ],
        "parameter":[
            "Parameter(s)",
            "optionsaMakes backward compatible tapes.cAllows backward compatibility with older legacy systems when\ndumping binary data.Note:This option should only be used on binary\nfiles.hSuppresses the tape label.iSuppresses the display of item-IDs as they are dumped.pDirects output to the printer, via the spooler.r{frame.size}Creates dumps that are to be used on a system with a data\nframe size different from the system that created the tape. The frame\nsize designates the target system frame size."
        ],
        "example":[
            "Example(s)",
            "t-dump entity\nt-dump invoices with date <= \"1\/1\/05\" heading \"Pre-2005 archived invoices\""
        ]
    },
    {
        "name":"t-eod command",
        "Syntax":[
            "Syntax",
            "t-eod"
        ],
        "description":[
            "Description",
            "The t-eod command moves a tape forward to the end of the recorded   data."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "The following example advances the attached tape to the end of the recorded\n    data:>t-eod\nBLOCK SIZE: 16896\n[92] END OF RECORDED DATA - 3 FILE(S)\n>"
        ]
    },
    {
        "name":"t-fsf command",
        "Syntax":[
            "Syntax",
            "t-fsf {number}\n"
        ],
        "description":[
            "The t-fsf (forward space file) command forwards a tape a given number of files. If\u00a0the number is omitted, this command behaves like a t-fwd command."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"t-fsr command",
        "Syntax":[
            "Syntax",
            "t-fsr {number}\n"
        ],
        "description":[
            "The t-fsr (forward space record) command forwards a tape a given number of records. If the number is omitted, this command behaves like a t-fwd command."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"t-fwd command",
        "Syntax":[
            "Syntax",
            "t-fwd {number}\n"
        ],
        "description":[
            "The t-fwd command moves the attached media forward to the next file, or moves the tape forward a specified number of blocks. The t-fwd command stops automatically at an EOF."
        ],
        "parameter":[
            "Parameter(s)",
            "number(Integer number) Indicates the number of blocks to move. The\nmaximum value for the number is 32767. If the number is not specified,\nthe tape spaces forward to the position immediately beyond the next\nEOF mark."
        ],
        "example":[

        ]
    },
    {
        "name":"t-link command",
        "Syntax":[
            "Syntax",
            "t-link device.num, device.num,...{option}\n"
        ],
        "description":[
            "The t-link command links or cascades one tape device to another tape device, either in a chain or a loop. Instead of prompting for the next reel, the system uses the forwardly linked device specified. Tape attachment is not checked. This command updates the links of the tape devices.",
            "When all the devices have been used in a chain, the system remains on the current device and prompts for the next reel, if necessary. If the links are set up as a loop, the system never prompts for the next reel. It is up to the operator to mount the next reel properly.",
            "All tape drives involved in the cascade must be at the same block size or be able to be changed to the starting drives block size automatically by the system for the cascade to succeed. Remember, certain tape types like floppy disk drives are limited in their block sizes available."
        ],
        "parameter":[
            "Parameter(s)",
            "optioncClears all links for the first device number specified or\nall devices if none is specified."
        ],
        "example":[
            "Example(s)",
            "Tape device 6 cascades into tape\ndevice 8 if the end of the reel is encountered on device 6. No prompt\nfor the next reel occurs.",
            "t-link 6,8",
            "Tape device 2 and 3 are linked as a loop, 2 is linked\nto 3 and 3 is linked back to 2.",
            "t-link 2,3,2",
            "Tape devices 2 to 5 are all linked or cascaded together.\nOnly, after device 5 is filled does the system prompt for the next\nreel.",
            "t-link 2,3,4,5",
            "Clears the links associated with tape device 4. This device\nprompts for the next reel when the EOT is reached.",
            "t-link 4 (c"
        ]
    },
    {
        "name":"t-load command",
        "Syntax":[
            "Syntax",
            "t-load file.reference {item.list} {selection.criteria} {modifiers} {(options)}\n"
        ],
        "description":[
            "The t-load command restores files from a tape that was generated by t-dump. If\u00a0a selection criteria is not specified, the entire file is loaded. If multiple t-dump commands were performed, then multiple executions of t-load are required to restore the data.",
            "When saving to multiple reels, type Q at the insert next reel and type \"C\" to continue prompt to quit. The t-load command reads the tape label in order to get the tape block size. If the tape is unlabeled, t-load reads the first tape block, determines that the tape is unlabeled, and backspaces the tape by one block before continuing. In this case, the appropriate tape block size must have been specified using the t-att command."
        ],
        "parameter":[
            "Parameter(s)",
            "optionsaBypasses tape label handling and assumes that media is positioned\nat the beginning of the desired data area.iSuppresses display of item-IDs.mSuppresses display of error message 223 when the item is already\non file and theooption is not used.oOverwrites existing items, when duplicate item-IDs exist.pDirects output to printer, via the spooler.r{n}Loads binary items (which require contiguous frames) fromt-dumpexecutions made on a system withndata bytes per frame.Note:On D3 7.4.3 this function was automated.\nThus, it is not necessary to use this option on D3 7.4.3 and later.vReads items but does not write them into the file system.\nWhen used with theooption, it writes the data to\nthe file.",
            "Note:Thet-loadcommand doesnotverify that the disk file name matches the tape file name. It is\nup to the operator to verify that the peripheral storage device is\npositioned at the correct file before issuing thet-loadcommand. When specifying item-IDs, it is necessary to enclose those\nitem names in quotation marks unless they already exist in the file."
        ],
        "example":[
            "Example(s)",
            "t-load dict entity"
        ]
    },
    {
        "name":"t-rdlbl command",
        "Syntax":[
            "Syntax",
            "t-rdlbl {(options}\n"
        ],
        "description":[
            "The t-rdlbl command reads the label from the attached magnetic media and initializes the internal label storage area."
        ],
        "parameter":[
            "Parameter(s)",
            "optionsreel.number(Hexadecimal number) Indicates reel number.aAllows beginning fromanyreel number, rather than\nsequentially. The process attempts to read a label, and then data.\nIf the label is invalid, it backspaces over the data read."
        ],
        "example":[

        ]
    },
    {
        "name":"t-read command",
        "Syntax":[
            "Syntax",
            "t-read {options}\n"
        ],
        "description":[
            "The t-read command reads from the magnetic media unit attached to the current process and displays the contents of each block read to the terminal or printer. Any type of Pick-formatted media may be read with this command."
        ],
        "parameter":[
            "Parameter(s)",
            "optionsblock.number{-block.number}Reads a specific number of blocks or a range of block numbers\nand specifies a range of blocks.block.numberspecifies the number of blocks\nto read.block.number-block.numberspecifies a\nrange of blocks. Blocks are counted from the current position of the\ntape. If the entire option is omitted, all tape blocks up to the next\nEOF are read.aConverts EBCDIC format to ASCII.hAllows reading from non-Pick tapes without a Pick label and\nreading the first block on the tape.nNo pause\u2014suppresses the pause at the end of each page on the\nterminal.pDirects output to the system printer via the spooler.xDisplays in hexadecimal format."
        ],
        "example":[
            "Example(s)",
            "t-readL 01F4 16:12:28 16 Jan 2003 Tape Label\nRECORD = 1\n1 FORMATC^****...\n51 ****...**^* THIS PROGRAM FORMATS A P\n.\n.\n.\n[94] END OF FILE"
        ]
    },
    {
        "name":"t-rew command",
        "Syntax":[
            "Syntax",
            " t-rew\n"
        ],
        "description":[
            "Description",
            "The t-rew command rewinds the attached media to the beginning of, or   load point on, the tape.",
            "If the tape unit has not been attached, the t-rew command completes these     actions:",
            "Use the t-rew command when you want to not only attach the unit to the     process, but reset and rewind a physical tape. It can also be used to ensure that the attaching     procedure has been completed successfully."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"t-select command",
        "Syntax":[
            "Syntax",
            " t-select {device.num} {,device.num}|{keyword}{(options}\n"
        ],
        "description":[
            "Description",
            "The t-select command attaches a tape device to the current process, but we recommend using the set-device TCL command.",
            "Tape devices include floppy disks, SCT, 1\/2-inch, 2mm cartridge tape, 4mm DAT devices, and pseudo floppy disks, such as communication ports and intervirtual machine files.",
            "The t-select command is the root command from which the      set-floppy, set-sct, set-half, and      set-device commands operate. If no options or parameters are specified, the      t-select command displays all devices defined for the system and prompts for a     selection.",
            "For UNIX: If there is more than one floppy disk drive, and one of them is a 5.25-inch floppy disk, the 5.25-inch floppy disk is always designated as drive A. If no other parameters but Floppy are given, the command assumes drive A, 5.25-inch high density floppy disk. These devices are defined in the system configuration file. If a comma separates more than one device number, then they are linked together.",
            "If the pseudo floppy does not exist, the t-select will prompt the user with \"Device does not exist, create it?\""
        ],
        "parameter":[
            "Parameter(s)",
            "device.numCan be expressed as a numeric\nliteral. The device number must be a numeric integer between 0 and\n15 and correspond to a predefined tape device.33.5-inch floppy disk.55.25-inch floppy disk.99-track, 1\/2-inch tape.keywordCan be any combination of characters (except numeric integers\n        between 0 and 15) displaying in the Type, Density, or Device Name columns of thet-statcommand.These keywords are used to pinpoint the preferred\n         device from a captured list. On some systems there might be more than one of a particular\n         device (two 5.25-inch floppy disks, for example). If there is not sufficient uniqueness in\n         the parameters, the process always finds the first device.optionsa3.5-inch floppy disk.b5.25-inch floppy disk.cFor UNIX:Changes the 8mm tape block size. The current\ntape block size displays and the operator is prompted for the new\nblock size (0 or 512). The default block size is set at 0 at install\ntime. Zero means variable length.For Windows:Changes the\n8mm tape block size. The current tape block size displays and the\noperator is prompted for the new block size (0 or 512).fFloppy disk (3.5-inch or 5.25-inch as default).hHigh density (1.44 MB for 3.5-inch floppy disk, 1.2 MB for\n5.5-inch floppy disk, 6250 bpi for 9-track tapes, 150 MB for 1\/4-inch\ntapes).iSuppresses display of devices after the command is complete\n(used in macros).kHard diskpseudotapes are removable or fixed hard\ndisks or regular host files. Their size is fixed and determined by\nthe device or by the maximum file size for a user. The main usage\nfor these devices is for small, fastt-dump\/save, transaction logging, or incremental saves.lLow density (720 KB for 3.5-inch floppy disk, 1600 bpi for\n9-track tapes).mMedium density (720 KB for 5.25-inch floppy disk, 3600 bpi\nfor 9-track tapes).nNetworkpseudotape has aninfinitesize. It\nis assumed another system is reading the data at theother endof the network.q1\/4-inch tape.sStandard density (360 for 5.5-inch floppy disk, 60 MB or 120\u00a0MB\nfor SCTs.wPrevents an automatic rewind on the device. This option must\nbe used to set the device to a floppy disk with an unformatted floppy\ndisk in the drive.xDefault block size."
        ],
        "example":[
            "Example(s)",
            "Assume the following device list for all examples:",
            "Tape Status\n # Type           Density          Device Name\n ==============================================\n 0 floppy         3-1\/2\" 1.44m     \/dev\/rfd0h\n 1 floppy         3-1\/2\" 720k      \/dev\/rfd0l\n 2 floppy         5-1\/4\" 1.2m      \/dev\/rfd1.15\n 3 floppy         5-1\/4\" 360k      \/dev\/rfd1.9\n 4 quarter inch   high (350m)      \/dev\/rmt2.1\n 5 quarter inch   standard (120m)  \/dev\/rmt2.5\n 6 floppy         infinite         \/tmp\/floppy",
            "Example 1",
            "Attaches the 3.5-inch low density floppy disk.",
            "t-select 1\n t-select floppy (b\n t-select 720k",
            "Example 2",
            "Attaches the pseudo floppy disk file called \/tmp\/floppy\non a UNIX-based system.",
            "t-select 6\n t-select floppy infinite\n t-select \/tmp\/floppy"
        ]
    },
    {
        "name":"t-space command",
        "Syntax":[
            "Syntax",
            "t-space {number}\n"
        ],
        "description":[
            "The t-space command moves the attached media forward a specified number of files, displaying each tape label as it is encountered."
        ],
        "parameter":[
            "Parameter(s)",
            "numberNumber of files to move forward. If not specified, the process\nstops and indicates that acountis required."
        ],
        "example":[
            "Example(s)",
            "Moves the tape device forward\n4 file marks. Each label displays.",
            "t-spaceno. of files? 4"
        ]
    },
    {
        "name":"t-unload command",
        "Syntax":[
            "Syntax",
            "t-unload\n"
        ],
        "description":[
            "The t-unload command rewinds the attached tape. On D3 UNIX systems, this command does the usual tape unload. Depending on the UNIX operating system, this command may wait for the tape to rewind before returning."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"t-verify command",
        "Syntax":[
            "Syntax",
            " t-verify {(options}\n"
        ],
        "description":[
            "Description",
            "The t-verify command validates the integrity of file-save or account-save backups. The process can compare the contents of the backup media with the corresponding data on disk, or check the media to ensure that it has the correct backup format.",
            "This process first attempts to attach to the tape. If it is already attached to another process, this message displays:",
            "The port with the tape attached is the port number. The process with a t\u00a0under the tsat column has the media attached. Items displayed are in file hierarchy format:",
            "mds > account > dictionary > data section",
            "By default, only account names display. All errors found display. The display pauses at the bottom of each screen and disk and tape comparisons are made. The t-verify command is an option provided during the file-save process. If it is selected, errors are logged to the tv.log file."
        ],
        "parameter":[
            "Parameter(s)",
            "optionsnumber(Integer number) Indicatesstopcount. This specifies\nthe maximum number of errors allowed before aborting. The tape is\nleft at the abort point. By default, the errors neverstopand\njust continue down the screen.?Displays brief online help.aValidates anaccount-save. This verifies\nall accounts until the EOS mark on tape, by forwarding to the beginning\nof each account and verifying its contents. This option is useful\nforfile-savereels other than reel 1.eDisplays errors only.fDisplays all file names found on the tape in hierarchical\nformat. If used with theioption, item-IDs are also\ndisplayed.gSuppresses grouphashing. Skips hashing test on all\nitems. No errors are found if items are in the wrong group.iDisplays all items found on the tape in file hierarchy format.\nThe display isin placefor each file (that is, all items for\nthat file display on the same line). If used with thefoption, items are displayed in theform-feedformat, showing\neach item on a new line.lPrompts for the log file name then logs errors to a log file.\nAttribute 1 of the log file is the error message from the messages\nfile. Attribute 2 is the element that caused the error, in hierarchical\nform.nActivates thenopagefunction on output\nto the terminal.pDirects output to the printer via the spooler.qQueries the operator on each error found. Choices are to continue,\nquit, or skip the file system comparisons for the current file.tVerifies contents of the tape only.uAllows performing the verify operation on incremental file-save\ntapesxDisplays index B-trees found on tape. This is useful for determining\nif the indexes were saved with the file system."
        ],
        "example":[

        ]
    },
    {
        "name":"t-weof command",
        "Syntax":[
            "Syntax",
            "t-weof\n"
        ],
        "description":[
            "The t-weof command writes an EOF mark at the current position on the attached magnetic media. It also causes a flush of the last buffer written. This is important to ensure any partially filled buffer was written onto the tape."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"t-wtlbl command",
        "Syntax":[
            "Syntax",
            "t-wtlbl {\"label.info\"}\n"
        ],
        "description":[
            "The t-wtlbl command writes a Pick-format (80-byte) tape label at the current position on the attached magnetic media."
        ],
        "parameter":[
            "Parameter(s)",
            "label.infoString of up to 48 characters. If no label is entered, the\nsystem prompts for one."
        ],
        "example":[

        ]
    },
    {
        "name":"tabs command",
        "Syntax":[
            "Syntax",
            "tabs {i|o} {option}\ntabs {i|o} {tabstop{,tabstop...}\n"
        ],
        "description":[
            "The tabs command displays tab stops previously set via the editor (ed or edit) process, or assigns new tab stop positions for input (i) or output (o).",
            "Output tab stop positions are useful only on printing terminals that have a physical tab facility and should not be defined on normal CRTs.",
            "Tab stops may be set up automatically for each user by including the tabs command in the user\u2019s logon macro in the users file."
        ],
        "parameter":[
            "Parameter(s)",
            "iDisables input tab stops.oDisables output tab stops.optionsIndicates the previous tab stop settings that are to be used."
        ],
        "example":[

        ]
    },
    {
        "name":"tail command",
        "Syntax":[
            "Syntax",
            "tail filename{item.list} {(options}\n"
        ],
        "description":[
            "The tail command displays a specified number of trailing lines for each of the items in a specified item-list (that is, the bottom-most lines contained in an item)."
        ],
        "parameter":[
            "Parameter(s)",
            "filenameSpecifies the file that contains\nthe item-list from which to display the specified number of trailing\nlines.item.listSpecifies the item-list from\nwhich to display the specified number of trailing lines. The item-list\ncan be specified explicitly, with an asterisk, or by referencing an\nactive listoptionsThe following options are supported:iDisplays the Item-IDs in the output.sSuppresses line numbers from the output.nNumber of trailing lines (wherenis the\nnumber of lines) from each Item-ID in the item-list to display. If\nno number is specified, the default is controlled by the currently\nspecified term-type. Note that the number of lines returned will actually\nbe the specified number plus 1."
        ],
        "example":[
            "Example(s)",
            "The example below illustrates\noutputting 5 trailing lines (plus 1) for each of the 3 items contained\nin the item-list (in this case,hot-backup,network-setup, andnt_pinfo). Since\ntheioption is specified, the Item-ID is included\nin the output.",
            "tail dm,bp, hot-backup network-setup nt_pinfo (i5hot-backup\n668 *\n669 * -----------------------------------------------------------------\n670 * Include common subroutines\n671 include dm,bp,includes hot-backup.sub\n672 *\n673 * End\n\nnetwork-setup\n481 crt \" Options:\"\n482 crt \" \u00a0\u00a0Q \u00a0: Quiet\"\n483 crt \" \u00a0\u00a0V \u00a0: Verbose\"\n484 stop\n485 *\n486 end ;* end of network-setup\n\nnt_pinfo\n344 \u00a0\u00a0end case\n345 *\n346 return\n347 *\n348 * [20] End\n349 *"
        ]
    },
    {
        "name":"tandem command",
        "Syntax":[
            "Syntax",
            " tandem port.number{(options}\n"
        ],
        "description":[
            "Description",
            "The tandem command BASIC program links the current port to another   process. Any input or output to either screen affects both screens.",
            "The tandem command requires sys2 privileges. ",
            "The port initiating the tandem command is the master. The process     being attached is the target. If the target process is a phantom process, the     output from the phantom is redirected to the master. The target device (the one attached to the     target) must be available on the specified port. It cannot be already attached to another     process.",
            "If the current task has esc-level in effect, the       tandem command  automatically issues an esc-data so that      it can be terminated by Esc+x sequence. ",
            "It does not, however, reset the       esc-level upon termination. The tandem command  must be manually re-executed      to restore to its previous state. When a process pushes a shell to UNIX while being issued a       tandem command by another port, theoretically, the D3 process is suspended      by UNIX. Therefore, the input from the master is not processed by the D3 process until it is      reactivated by UNIX. ",
            "A hot key sequence disconnects the link. The default hot key sequence is Esc+x. If an      esc-data has not been issued previously, the process issues it automatically     to prevent getting locked out from being able to suspend the tandem     command.",
            "For Esc+X (capital X), you can put         x'1B580000' in attribute 1 of that item.",
            "This is true unless the accounts use the         d option on the tandem command  or have a different item        in their own account."
        ],
        "parameter":[
            "Parameter(s)",
            "optionsdDesignates the sequence of (up to four) characters to terminate tandem mode.Each character is provided in its hexadecimal equivalent of its ASCII value.Each character is separated by a comma.For example,d\/41,42,43,44,\n           indicates that an\"ABCD\"disconnects the link.The first two characters of the termination sequence must be different.For example,\n           it does not accept\"d\/2b,2b,2b\" (+++), but it accepts\"d\/2a,2b,2b\" (*++).fTurns off thetandemcommand on the current port.This keeps others\n         from being able to tandem the current port. Specifying the port number allows turning off\n         thetandemcommand on another port.nTurns on thetandemcommand on the current port. This gives others the\n        ability to tandem the current port.Note:This option cannot be used with theuoption.Specifying the port number allows turning ontandemon another port.sSuppresses the message when the process terminates.If this is used with thedoption, thesoption must precede thedoption.uUnconditionally turns off thetandemcommand when used with thefoption.xTerminates thetandemcommand on the target device number.Note:When thetandemcommand is from a d3tcl session, Ctrl+x does not terminate thetandemcommand.In such a case, you must type Ctrl+x (followed by an\n          x to terminate thetandemcommand).ySets thenotifyoption.When thetandemcommand is\n         started or terminated on the process, the command specified for thetdmonortdmofsignals thetrapTCL command."
        ],
        "example":[
            "Example(s)",
            "Example 1",
            "This example attaches the current process to port 13:",
            "tandem 13",
            "Example 2",
            "This example attaches to port 3 and sets the hot key sequence to *++:",
            "tandem 33 (d\/2a,2b,2b",
            "Example 3",
            "This example enables the ability to issue thetandemcommand on the current\n    port:",
            "tandem (n",
            "Example 4",
            "This example unconditionally disables thetandemcommand capability on port\n    42:",
            "tandem 42 (uf",
            "Example 5",
            "This example terminates thetandemcommand on port 13:",
            "tandem 13 (x",
            "Example 6",
            "This example shows that thetclcommand can be used to enable thetandemcommand on another port:",
            "tcl 42 bob tandem (n\n tandem 42"
        ]
    },
    {
        "name":"tape-socket command",
        "Syntax":"",
        "description":[

        ],
        "parameter":[
            "Parameter(s)",
            "optionscDoesnotclear the pipes before starting a server.\nThis option should be used only if data in the pipe should be preserved.\nThis situation normally arises only when the server is stopped in\nthe middle of a communication. Extreme care should be taken when using\nthis option.qQuiet option suppresses some user messages and confirmation\nprompts when stopping servers and draining pipes.rDisplays onlyrunningservers in thestatusoption.sSuppresses the synchronization of clocks at startup time.vVerbose option records all events in the log file.",
            "Thetape-socketTCL command is used\nto create the input or output server and control their activity. A\ntape-socket log filets.logis created the first\ntime the command is started to record the process activity, and a\npermanent logts.log,logkeeps all messages.",
            "This command can be executed only on the dm or SYSPROG account.\nIt requires a sys2 privilege."
        ],
        "example":[

        ]
    },
    {
        "name":"tcl command",
        "Syntax":[
            "Syntax",
            " tcl port.number user-ID tcl.commands{(options)}\n"
        ],
        "description":[
            "The tcl command suspends the process on the specified port, pushes a   level on that port, and then executes the TCL command."
        ],
        "parameter":[
            "Parameter(s)",
            "optionssSuppresses messages on the current port."
        ],
        "example":[
            "Example(s)",
            "Executes thecount mdcommand on port 33, provided that the current user-ID is\n    dm. If the current user-ID is not specified or is invalid, the command does not take place.",
            "The results of thecountcommand display on both port 33 and on the port\n    originating thetclcommand.",
            "tcl 33 dm count md"
        ]
    },
    {
        "name":"tcl-hdr command",
        "Syntax":[
            "Syntax",
            "tcl-hdr {(options}\n"
        ],
        "description":[
            "The tcl-hdr command enables or disables the display of TCL commands on all output directed to the spooler, or displays the current header status if no options are provided.",
            "When enabled, every report that is directed to the spooler automatically displays the TCL command used to generate the output on the first page of the output, unless otherwise suppressed with a tcl-supp modifier."
        ],
        "parameter":[
            "Parameter(s)",
            "optionsfToggles off and suppresses the default TCL header output.nToggles on and outputs the default TCL header on spooler listings.Note:This is the default setting.sSuppresses output of the status message."
        ],
        "example":[
            "Example(s)",
            "tcl-hdr (f[1305] TCL header output is suppressed.",
            "tcl-hdr (n[1304] TCL header output is active."
        ]
    },
    {
        "name":"tcl-prompt command",
        "Syntax":[
            "Syntax",
            "tcl-prompt {prompt} {(options}\n"
        ],
        "description":[
            "The tcl-prompt BASIC program sets the prefix to the TCL prompt.",
            "This command sets the @$prompt TCL shell variable."
        ],
        "parameter":[
            "Parameter(s)",
            "optionsfResets the prompt setting to the default."
        ],
        "example":[

        ]
    },
    {
        "name":"tcls command",
        "Syntax":[
            "Syntax",
            "tcls port.number user-ID tcl.commands\n"
        ],
        "description":[
            "The tcls command suspends the process on the specified port, pushes a level on that port, then executes the TCL command. This is different from the tcl command in that tcls suppresses the messages generated by the command that was executed on the remote port."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "Executes thecount mdcommand on port 33, provided that the current user-ID is dm. If\nthe current user-ID is not specified, or is invalid, the command does\nnot take place. The results of thecountcommand\ndisplay on port\u00a033, but not on the port originating thetclscommand.",
            "tcls 33 dm count md"
        ]
    },
    {
        "name":"term command",
        "Syntax":[
            "Syntax",
            "term tw,td,ls,ld,fd,bs,pw,pd,tt {(options)}\nterm tt {(options)}\n"
        ],
        "description":[
            "The term BASIC program changes or displays the current terminal and printer output characteristics for the current line."
        ],
        "parameter":[
            "Parameter(s)",
            "twTerminal width or the number\nof print positions per line on the terminal. It must be between 10\nand 140. Although most terminals are capable of printing 80 characters\nper line, the typical setting is 79 to avoid problems with carriage\nreturn\/line feeds when displaying at the 80th position.tdTerminal depth, in lines.lsLine skip is the number of blank\nlines at the bottom of the screen. The value intdis added to the value inlsand must equal the\nactual number of lines on the terminal.ldLinefeed delays is the number\nof null characters to output after each line feed. This is typically\nset to 0.fdForm feed delays is the number\nof null characters to output after atop-of-formis executed. Thefdparameter also determines\nwhen to eject a page (or clear the screen) between output pages. These\nsettings are valid:0Suppresses page ejects between output pages on both the terminal\nand the printer. If set to 0, pads with an LF.1Suppresses page ejects on the terminal only. If set to 1,\npads with a CRLF.2(Normal mode) Any value of two or more clears the screen (or\nejects a page on the printer), and sends the corresponding number\nof nulls.bsBackspace key value is the decimal\nvalue of the ASCII character to echo to the terminal when the BACKSPACE\nkey is pressed. This is typically set to 8 or 21.pwCurrent printer width or the\nnumber of print positions per line on printer output.pdPrinter depth or the number of\nlines per page on printer output.ttTerminal type code designates\nthe terminal driver to use and is vital to set prior to invoking any\nprocess, which attempts to perform any kind of cursor control, such\nas the Update processor, FlashBASIC, or PROC.optionscRecompiles the terminal definition from the source.hSets high-intensity.kSets the input\/output terminal translation table. The name\nof table is defined in the fourth value of the attribute 1 of thedevicesitem. The name of the translation table is the item-ID\nof an item in the keyboards file.rRedisplays resulting term parameters after changing.",
            "Any parameter can be left intact by entering a null (two\nconsecutive commas). The only exception to this rule is thett(terminal type) parameter, which defines the terminal\nname. The system recognizes terminal names, so the name may be entered\nfirst or last.",
            "The terminal type parameter can be specified\nwithout any other arguments, or in any position of the argument list,\nsince it is the only nonnumeric argument.",
            "The terminal driver\ndefinitions are located in thedm,devices,file.\nTo obtain a listing of the available types, type:",
            "sort only dm,devices,",
            "Terminal types in D3 use descriptive names, rather than\njust a single alphabetical character.",
            "Note:To flash compile thetermcommand, the C-compiler is required."
        ],
        "example":[
            "Example(s)",
            "Changes the terminal width and\ndepth only.",
            "term 79,24",
            "Changes the terminal depth only.",
            "term ,24",
            "Changes the printer width and depth only, and displays\nthe resulting changes.",
            "term ,,,,,,132,62 (rterminal name: wy-50\nproduct name: WYSE 50\nterminal width: 132 printer width: 132\ndepth: 82 depth: 62\nlineskip: 0\nlf delay: 1\nff delay: 1\nback space: 8",
            "Changes the terminal type only.",
            "term wy-50",
            "Changes the terminal type and compiles the terminal definition\nfrom the devices file.",
            "term wy-50 (c",
            "Sets the terminal type to ibm3151 and activates the keyboard\ntranslation associated to this terminal.",
            "term ibm3151 (k"
        ]
    },
    {
        "name":"term.font command",
        "Syntax":[
            "Syntax",
            "term.font {font.file.name}{font.id}{(options)}\n"
        ],
        "description":[
            "The term.font BASIC program downloads fonts to a Wyse 60 terminal. It uses a special file, which has 8x16 matrixes for every character in hexadecimal format.",
            "The default font file name is moscow,fonts.term, file."
        ],
        "parameter":[
            "Parameter(s)",
            "optionsoOverwrites UNIX font file.rRequests permission to start loading.sDisplays the characters at loading time.",
            "Warning:This command is not tied to any specific\nrelease and is not distributed with the standard product."
        ],
        "example":[

        ]
    },
    {
        "name":"term-type command",
        "Syntax":[
            "Syntax",
            "term-type {(options)}\n"
        ],
        "description":[
            "The term-type BASIC program reads the terminal and printer characteristics from attribute 2 of the PIBs file and automatically sets them, or sets them and updates the permanent settings for the current line."
        ],
        "parameter":[
            "Parameter(s)",
            "optionskSets the keyboard input translation.sSuppresses all output.",
            "The pibs file contains the parameters used byterm-type. The Update processor can be used to update the\ncharacteristics for each PIB (port).",
            "Whenterm-typeis used without arguments, it does the usual term setting for the\ncurrent port by checking the port\/control item in thedm,pibs,file.",
            "The item-ID of the port\/control item is the port number\nfor the current line. Attribute 2 of the port control item may contain\na terminal name, as well as the appropriate term characteristic parameters.\nIf the item is found, and it contains a terminal name, it is assigned\nas the D3 terminal type.",
            "VT100 is the default terminal type\nfor all ports except port 0.",
            "Note:For UNIX:If there is\nno terminal name, the terminal name is obtained from the UNIX environment\nvariable, TERM.PIBsfloat. This means that the same port is\nnot always necessarily attached to the same UNIX PID. For this reason,\nthechoose.termprogram is provided with D3. This\nshould be invoked from each user\u2019s logon macro.",
            "An item\nwith the same name must exist in thedm,pibs,file. If attribute 2 contains terminal characteristics (such as\nthe screen size and so on), but no terminal name, the terminal name\nis obtained from UNIX and the new characteristics are applied.",
            "If attribute 2 of the pibs file is empty, and either, it is not\na UNIX implementation, or the value of the TERM environment variable\nis not found in the devices file, then the terminal type of the previous\nlogon to that PIB is used. If there was no prior log on, or if someone\nhas done areset-useron that PIB, then the terminal\ntype is determined by the first device compiled into the dictionary\ndevices ccb item. The initial terminal values are equivalent toterm 79,24,0,1,1,8,80,59."
        ],
        "example":[

        ]
    },
    {
        "name":"termp command",
        "Syntax":[
            "Syntax",
            "termp {(options)}\n"
        ],
        "description":[
            "The termp BASIC program is an interactive form of the term command. It prompts for the terminal and printer characteristics for the line on which the command is invoked."
        ],
        "parameter":[
            "Parameter(s)",
            "optionsrRedisplays characteristics after changing."
        ],
        "example":[

        ]
    },
    {
        "name":"termu command",
        "Syntax":[
            "Syntax",
            " termu tw,td,ls,ld,fd,bs,pw,pd,tt {(options)}\n termu tt {(options)}\n"
        ],
        "description":[
            "Description",
            "The termu BASIC program automatically updates the term width and   depth. ",
            "Any parameter can be left intact by entering a null (two consecutive commas). The only     exception to this rule is the tt (terminal type) parameter, which defines the     terminal name. The system recognizes terminal names, so the name can be entered first or     last.",
            "The terminal type parameter can be specified without any other arguments, or in any position     of the argument list, since it is the only non-numeric argument.",
            "The terminal driver definitions are located in the dm,devices, file. To     obtain a listing of the available types, type:",
            "Terminal types in D3 use descriptive names, rather than just a single alphabetical     character."
        ],
        "parameter":[
            "Parameter(s)",
            "twThe option for terminal width: the number of print\n        positions per line on the terminal. This number must be between 10 and 140.Although most\n         terminals are capable of printing 80 characters per line, the typical setting is 79 to\n         avoid problems with carriage return\/line feeds when displaying at the 80th position.tdThe option for terminal depth, in lines.lsThe option for line skip: the number of blank lines at\n        the bottom of the screen. The value in thetdoption is added to the value\n        in thelsoption, and must equal the actual number of lines on the\n        terminal.ldThe option for linefeed delays: the number of null\n        characters to output after each line feed. This is typically set to 0.fdThe option for form feed delays: the number of null\n        characters to output after atop-of-formcommand is executed.Thefdparameter also determines when to eject a page (or clear the screen)\n         between output pages. These settings are valid:0Suppresses page ejects between output pages on both the terminal and the printer.If set to 0, pads with an LF.1Suppresses page ejects on the terminal only.If set to 1, pads with a CRLF.2(Normal mode) Any value of two or more clears the screen (or ejects a page on the\n        printer), and sends the corresponding number of nulls.bsThe Backspace key value: the decimal value of the ASCII\n        character to echo to the terminal when the Backspace key is pressed. This is typically set\n        to 8 or 21.pwThe current printer width or the number of print\n        positions per line on printer output.pdThe printer depth or the number of lines per page on\n        printer output.ttThe terminal type code: designates the terminal driver\n        to use . This is vital to set prior to invoking any process, which attempts to perform any\n        kind of cursor control, such as the Update processor, FlashBASIC, or PROC.optionscRecompiles the terminal definition from the source.hSets high-intensity.kSets the input\/output terminal translation table. The name of table is defined in the\n        fourth value of the attribute 1 of thedevicesitem. The name of the translation\n        table is the item-ID of an item in the keyboards file.rRedisplays resulting term parameters after changing."
        ],
        "example":[
            "Example(s)",
            "This example illustrates usingtermuto read and apply the term width and\n    depth from the UNIXsttycommand.",
            ":term 80,24terminal name:vt100product name:VT100terminal width: 80   printer width: 80\n          depth: 24           depth: 59\n lineskip:    0\n lf delay:    1\n ff delay:    1\n back space:  8:stty -aspeed 9600 baud; 25 rows; 119 columns;\n eucw 1:1:0:0, scrw 1:1:0:0:\n intr = ^C; quit = ^\\; erase = ^H; kill = ^U; eof = ^D; eol = ^@\n eol2 = ^@; start = ^Q; stop = ^S; susp = ^Z; dsusp = ^Y; reprint = ^R\n discard = ^O; werase = ^W; lnext = ^V\n -parenb -parodd cs8 -cstopb -hupcl cread clocal -parext\n -ignbrk brkint ignpar -parmrk -inpck -istrip -inlcr -igncr icrnl -iuclc\n -ixon -ixany -ixoff imaxbel\n isig icanon -xcase echo echoe echok -echonl -noflsh\n -tostop echoctl -echoprt echoke -flusho -pending iexten\n opost -olcuc onlcr -ocrnl -onocr -onlret -ofill -ofdel tab3:termu\n :termterminal name: vt100\n product name: VT100\n terminal width: 119    printer width: 80\n          depth: 25             depth: 59\n lineskip: \u00a0\u00a0\u00a00\n lf delay: \u00a0\u00a0\u00a01\n ff delay: \u00a0\u00a0\u00a01\n back space: \u00a08"
        ]
    },
    {
        "name":"time command",
        "Syntax":[
            "Syntax",
            "time {time.parameter} {(options)}\n"
        ],
        "description":[
            "The time BASIC program displays the system time and date. If no time parameter exists, the current time and date displays."
        ],
        "parameter":[
            "Parameter(s)",
            "optionspDirects output to the system printer, via the spooler."
        ],
        "example":[

        ]
    },
    {
        "name":"timedate command",
        "Syntax":[
            "Syntax",
            "timedate {(options)}\n"
        ],
        "description":[
            "The timedate command sets or displays the status of the time and date display."
        ],
        "parameter":[
            "Parameter(s)",
            "optionsfTurns off to suppress display of time\/date at TCL.nTurns on to display the time\/date at TCL. The default is on.sSuppresses output of the status message."
        ],
        "example":[
            "Example(s)",
            "timedate (f[1307] The time-date display is off.",
            "timedate (n[1306] The time-date display is on."
        ]
    },
    {
        "name":"timeout command",
        "Syntax":[
            "Syntax",
            " timeout {timeout.value}\n"
        ],
        "description":[
            "Description",
            "The timeout BASIC program sets the time (in seconds) to automatically   log off due to inactivity. ",
            "The following applies to the timeout command:"
        ],
        "parameter":[
            "Parameter(s)",
            "timeout.valueIndicates the number of seconds to wait.If thetimeout.valuevariable is set to zero, the timeout waiting\n                  feature is turned off."
        ],
        "example":[

        ]
    },
    {
        "name":"tlog-restore command",
        "Syntax":[
            "Syntax",
            "tlog-restore {(options}\n"
        ],
        "description":[
            "The tlog-restore command restores data from a transaction log magnetic media. This is an alternative to restoring at the end of a full restore or account restore from a \u2019save-class\u2019 media.",
            "For Windows: Not Supported"
        ],
        "parameter":[
            "Parameter(s)",
            "optionspDirects output to the printer via the spooler.h(Hot backup mode) Does not prompt for more reels, assume true.sSuppresses output. Outputs file headers only.yAccepts any reel number."
        ],
        "example":[

        ]
    },
    {
        "name":"tlqdisplay command",
        "Syntax":[
            "Syntax",
            "tlqdisplay (options)\n"
        ],
        "description":[
            "The tlqdisplay command allows you to display the transactions within the transaction queue used by both the D3 Transaction Logger and Hot Backup components. The start location in the transaction queue can be specified."
        ],
        "parameter":[
            "Parameter(s)",
            "optionscPerforms a linkage check on the transaction log queue to verify\nthe integrity of the queue.Warning:Because this option\nlocks the transaction queue during processing, special care must be\ntaken when using this option if you suspect the size of the queue\nis considerable.dWhen used with themoption, displays a portion\nof the transaction data.eCopies the first transaction into the dm,hb.log file.mnModifies the start position of the transaction queue wherenis the logical transaction number to start the queue\nat.Warning:The Hot Backup master server must be stopped\nbefore using this option.Warning:Whenever modifying\nthe transaction log queue, use great care to ensure that the master\nand slave servers remain in sync.sWhen used with themoption, suppresses the\ndisplay of transactions until the desired transaction number is reached.vDisplays thetlqdisplayprogram version.uRecalculates the queue frame count.Warning:Because\nthis option locks the transaction queue during processing, special\ncare must be taken when using this option if you suspect the size\nof the queue is considerable.",
            "If no options are specified, the transaction log queue\ndisplays, listing this information:",
            "TNoLogical transaction number.FrameFrame ID in hex where transaction starts.OsetOffset in hex within the frame where the transaction starts.TTransaction type.FOF#File-of-files number relating to the transaction.DataFirst part of the optional data (depending upon the transaction\ntype)."
        ],
        "example":[
            "Example(s)",
            "Displays the current transactions\nin the transaction log queue.",
            "tlqdisplay",
            "Modifies the start of the transaction queue to start at\nlogical transaction number 6 in the queue.",
            "tlqdisplay (dm6"
        ]
    },
    {
        "name":"touch command",
        "Syntax":[
            "Syntax",
            "touch {item.list} {(options}\n"
        ],
        "description":[
            "The touch BASIC program reads and rewrites all items, without changing them, in either specified files or in all files in specified accounts.",
            "The main usage of this command is to force the transaction logger to enqueue for logging all items in files or in accounts, to synchronize databases across a network.",
            "The name of each file displays as it is processed. At the end, the number of files and items processed display."
        ],
        "parameter":[
            "Parameter(s)",
            "item.listList of elements to process.\nBy default, this is a list of files. Complete path names are processed.\nWith theaoption, the specified elements are account\nnames, in which case all files in the specified accounts are processed.Note:If an explicit list of elements is not provided, a select list must\nbe used.optionsfChange specified file. This is the default option.aSelect all \u2019D\" files of an account.Note:Synonym accounts\nare not processed.lLog only. This option bypasses the update mechanism, but places\nall items into the transaction log queue. This makes thetouchcommand much faster and less abusive so long as a\ntrue update is not required.qQuiet option suppresses all messages.wPause once in a while",
            "Warning:The file-defining items (D-pointers)\nand binary items are not processed. Due to the amount of data being\nwritten, this command can be very intrusive."
        ],
        "example":[
            "Example(s)",
            "Touches all accounts on the systems,\nexcept dm.",
            "select mds # \u2019dm\u2019\ntouch (a",
            "Touches all items in the customers and inventory files.",
            "touch customers inventory"
        ]
    },
    {
        "name":"transaction utility",
        "Syntax":[
            "Syntax",
            "transaction {keyword} {num{-num}} {(options}\n"
        ],
        "description":[
            "The transaction utility is the system administration utility for transaction processing."
        ],
        "parameter":[
            "Parameter(s)",
            "optionsfSame as \u2019off\u2019.hSuppresses heading.gApplies operation to whole machine.nSame as \u2019on\u2019.sSuppresses messages.zExamines all processes even if there is no active transaction.",
            "Thetransactionutility provides several\ndifferent functions depending on thekeywordprovided.\nCurrentkeywordvalues include:",
            "cache on\/offChanges or queries the default\ncache condition for the process. The global default can be examined\nor set by adding thegoption.Note:The setting\ndisplayed by this command reflects the TCL default setting. If the\ndefault has been modified by a lower-level BASIC program, then these\nchanges are not reflected. However, if the cache setting is then changed\nby thetransactionTCL command, then the changesarereflected in all lower-level BASIC programs.flush on\/offChanges or queries the default\nflush condition for the process. The global default can be examined\nor set by adding thegoption.Note:The setting\ndisplayed by this command reflects the TCL default setting. If the\ndefault has been modified by a lower-level BASIC program, then these\nchanges are not reflected. However, if the cache setting is then changed\nby thetransactionTCL command, then the changesarereflected in all lower-level BASIC programs.statusDisplays the status of a transaction\nfor the current line. The following information displays.PIBProcess ID.StatusTransaction status isinactive,active, orcommit. Normally, processes in theinactivestate are not displayed unless thezoption is used.SizeNumber of operations in the current transaction.ID#Transaction ID number.NameTransaction name if thenameparameter was\nspecified in thebegin workstatement.Another process, or range of\nprocesses may be queried by specifying that process or process range.\nIf thegoption is used, then the information displays\nfor the whole machine.recoverRecovers transactions after a\nsystem halt. This operation should only be executed during thesystem-coldstartmacro while the system is in single-user\nmode. Therecoveroption attempts to roll forward\neach committed transaction. If this fails, then the transaction is\nrolled back. If the transaction cannot be completely rolled back,\nthen an error is printed and the transaction is aborted."
        ],
        "example":[

        ]
    },
    {
        "name":"trap command",
        "Syntax":[
            "Syntax",
            " trap {pib{pib.no}} {[*|signame] {[?|default|command]}}\n"
        ],
        "description":[
            "Description",
            "The trap BASIC program allows a TCL command (signal handler) to be   executed when receiving a specific signal.",
            "By default, signal handlers are set for the whole virtual machine. When it is                 preferable to differentiate the signal handlers depending on the user or account, a                 FlashBASIC program, a Proc, or an environ script must be provided                 to execute commands selectively. ",
            "The use of the pib keyword allows specifying a signal handler on a                 pib-by-pib basis. The signal handler is executed by pushing a level. Therefore, you                 might see some effect on the terminal. For example: You might see the Update                 processor screen again. ",
            "If 15 TCL levels are pushed when the signal occurs, it is not processed. Signals are                 always preemptive, even on their own signal handler. For a signal handler to be                 processed correctly, the process receiving the signal must be logged on."
        ],
        "parameter":[
            "Parameter(s)",
            "{pib {pib.no}}Allows specifying a signal handler\n                                on a pib-by-pib basis. If apib.nois specified,\n                                the setting remains in effect, even after the process is exited and\n                                reconnected. If nopib.nois specified, this\n                                defaults to the current pib.default|commandIfdefaultis\n                                specified, the globaltrapsettings are set back\n                                to their defaults. Otherwise, it can be any TCL command, including\n                                spaces and options.signameOne of the valid user signal names:alrmRepresents alarm.When a UNIX SIGALRM is generated, either\n                                    by a UNIX program called from the D3 process or by the\n                                    FlashBASIC program calling the%alarm()C\n                                    function, a signal is sent to the process.For example:\n                                    This signal can be used to log the process off after a specified\n                                    time.The TCLalarmcommand generates\n                                    this signal. The default action is to ignore the signal.\n                                    Therefore, an explicittrap alrmcommand must\n                                    be used.dcdRepresents Data Carrier Detect.If the DCD protocol is\n                                    active on one port, a HANGUP signal is generated by the terminal\n                                    UNIX driver when the DCD signal is dropped by the modem. The\n                                    default handler logs the process off.On a network, a\n                                    more complex program might be necessary to terminate the\n                                    connection properly and must finish with adisccommand.mirofRepresents mirror off.pwrRepresents power off.When an imminent power failure is\n                                    detected by UNIX, the kernel sends a SIGPWR signal to all active\n                                    processes on the system. This signal is relayed to the D3\n                                    processes.Note:Care must be taken to synchronize the\n                                    default system handler (defined in theinittab) with the D3 handler. This signal\n                                    might not be generated, depending on the hardware\n                                    configuration.tdetRepresents tape detach.When at-det (ucommand is issued, the process owner of the tape device receives\n                                    this signal so that the device can be closed properly. The\n                                    handler for this signal is a comment.Note:It must not issue\n                                    any tape command, including at-detcommand.tdmofRepresents tandem off.When the master process terminates,TANDEM TANDEM ONport.numberdisplays. The slave\n                                    terminalterminatedreceives this signal.tdmonRepresents tandem on.When a process activates thetandemcommand, you will see theTANDEM STARTED ONport.numbermessage. Both the\n                                    master and slave terminals receive this signal.tmoutRepresents input timeout.When a process is waiting for\n                                    keyboard input for more than the amount of time specified by thetimeoutcommand. The default behavior is\n                                    to log the process off.winchRepresents window change.When a terminal window resize is\n                                    detected, the signal is executed. The default handler executes\n                                    thetermuprogram."
        ],
        "example":[
            "Example(s)",
            "Example 1",
            "This example lists the current settings:",
            "trapSig    Description       Handler\n -----  ----------------  ------------------------------------------\n tdmon  Start tandem      display TANDEM STARTED\n tdmof  Stop tandem       display TANDEM TERMINATED\n dcd    Modem hangup      off\n mirof  Stop mirror       display MIRROR TERMINATED ON ONE TERM\n alrm   Alarm             un dm,bp, useralarm\n tdet   t-det (U          display Tape detached with (U)\n pwr    Power off         off",
            "Example 2",
            "This example resets all signals to their default:",
            "trap * default",
            "Example 3",
            "This example disables the signal associated withtandemcommand on pib 49:",
            "trap pib 49 tdmon",
            "Example 4",
            "This example sets thetandem ontrap to display a message in reverse\n                video:",
            "trap tdmof display @(-13)tandem entered@(-14)"
        ]
    },
    {
        "name":"truncate-ovf command",
        "Syntax":[
            "Syntax",
            "truncate-ovf\n"
        ],
        "description":[
            "The truncate-ovf command truncates the safe overflow table to 1 block from high-water to maxfid and kills the B-tree table."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"txlog command",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"txlog-off command",
        "Syntax":"",
        "description":[

        ],
        "parameter":[
            "Parameter(s)",
            "optionsaTurns off transaction log enqueueing globally. When using\ntheaoption to set the parameter globally, the local\nvalue of the line issuing the command will be set to match. All other\nlines will pick up the new global value upon logging off and back\non."
        ],
        "example":[

        ]
    },
    {
        "name":"txlog-on command",
        "Syntax":"",
        "description":[

        ],
        "parameter":[
            "Parameter(s)",
            "optionsaTurns on transaction log enqueueing globally. When using theaoption to set the parameter globally, the local value\nof the line issuing the command will be set to match. All other lines\nwill pick up the new global value upon logging off and back on."
        ],
        "example":[

        ]
    },
    {
        "name":"txlog-status command",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "txlog-status[609] Transaction logger not started."
        ]
    },
    {
        "name":"type-ahead command",
        "Syntax":[
            "Syntax",
            " type-ahead {(options}\n"
        ],
        "description":[
            "Description",
            "The type-ahead command enables or disables the type ahead feature for   the current PIB or displays the current status if no options are provided.",
            "The type-ahead command is the process of buffering characters entered at a     keyboard to allow for faster typing. When type-ahead is On, the system allows     typing in characters ahead before actually being displayed.",
            "For example: After entering a select command at TCL, a      save-list command can be entered into the type-ahead buffer. When the      select finishes, the save-list command is entered     immediately, provided an Enter was issued at the end of the command.",
            "The command does not display on the screen until the previous process returns to TCL. There is     no limit to the number of commands that can be typed ahead."
        ],
        "parameter":[
            "Parameter(s)",
            "optionsport.numberInteger number that displays or changes settings for the port number.If\n                  not specified, thetype_aheadcommand is set on the current\n                  port.fSets thetype-aheadcommand to Off.Windows only:\n                  This option is not supported for line 0.nSets thetype-aheadcommand to On. This is the default.sSuppresses output of the status message."
        ],
        "example":[
            "Example(s)",
            "Example 1",
            "type-ahead[1312] Type-ahead is on.",
            "Example 2",
            "type-ahead (f[1313] Type-ahead is off.",
            "Example 3",
            "type-ahead (n[1312] Type-ahead is on."
        ]
    },
    {
        "name":"U",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"ud command",
        "Syntax":[
            "Syntax",
            "ud file.reference {item.list}\n"
        ],
        "description":[
            "The ud BASIC program invokes the Update processor to edit ADIs or file-defining items in the dictionary of the specified file.",
            "The program determines which type of entry is being edited and presents a different set of attribute names depending on whether the item is a D-pointer or a standard attribute-defining item (an a, s or x type item)."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"udate command",
        "Syntax":[
            "Syntax",
            "UDATE"
        ],
        "description":[
            "Description",
            "The udate command sets the system date format to the United States   standard.",
            "The United States date format is MONTH\/DAY\/YEAR. For example, the date December 23, 1993,     would appear as 12\/23\/93.",
            "D3 retains this format unless you reset it to international standard.",
            "D3 is set for United States standard format. To set the date format to the international     standard, use the idate command. "
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"um command",
        "Syntax":[
            "Syntax",
            "um\n"
        ],
        "description":[
            "The um command displays the conversion units set by the set-units, set-dozens, set-decimal, or set-thousands commands."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            ":umUnits conversion set."
        ]
    },
    {
        "name":"unix command",
        "Syntax":[
            "Syntax",
            "unix {-options} {unix.cmd} {{D3.file D3.item}}\n"
        ],
        "description":[
            "The unix command invokes the sh command, to push a shell, and then automatically returns to D3 on completion.",
            "To return to D3, type exit at the UNIX prompt.",
            "The user can specify an optional command string to the unix command. This command string can include the D3 file and item pairs, which interacts with the specified unix command exactly as if those parameters were UNIX files. Any changes made to the specified parameters by the unix command is also reflected in the D3 items after the command has completed.",
            "During the substitution of D3 items for UNIX files, attribute marks are converted to new lines and groups of four spaces are converted to tabs. When items are brought back from the  unix command, these conversions are reversed.",
            "Options can be placed after a dash as the first argument on the command line or can be put into attribute 6 of the unix master dictionary item."
        ],
        "parameter":[
            "Parameter(s)",
            "{-options}Indicates the number of spaces\nthat represent a tab.cDoes not convert attribute marks\nto new lines and vice-versa.iUses item name as an export tag.\nThis is useful when a UNIX based word-processing package is used and\nit is desirable that the filename eventually passed to that package\nbe related to the original D3 item name.nDoes not convert tabs.vConverts value marks to new lines.Note:The conversion cannot be undone and value marks will be lost once\nthe process is completed."
        ],
        "example":[
            "Example(s)",
            "Creates a list of all misspelled\nwords existing in the D3 item stock.report and places that list into\nan item called sp in thepointer-file.",
            "UNIX spell {ba,doc, stock.report} >\n{dm,pointer-file, sp}",
            "Allows editing the my.prog item with the emacs editor.\nAfter exiting emacs, any modifications to data is updated in my.prog.",
            "unix -2 emacs {bp my.prog}"
        ]
    },
    {
        "name":"unlink-pibdev command",
        "Syntax":[
            "Syntax",
            "unlink-pibdev {pib,} port.number\n"
        ],
        "description":[
            "The unlink-pibdev BASIC program unlinks a process from a port.",
            "For Windows: Not Supported",
            "This is typically used to disconnect a process from its associated terminal I\/O so it can be controlled by the calling process. Controlling processes such as tandem, mirror or converse may not be unlinked.",
            "If the process is omitted, the current process or PIB is unlinked.",
            "The specified port number must be previously linked to the process or the current process if the process argument is committed."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "Unlinks the current process from\nport 3.",
            "unlink-pibdev 3",
            "Unlinks process 2 from port 3.",
            "unlink-pibdev 2,3"
        ]
    },
    {
        "name":"unlock-file command",
        "Syntax":[
            "Syntax",
            "unlock-file file.reference {(options}\n"
        ],
        "description":[
            "The unlock-file command clears file locks which have not been cleared through normal system operation.",
            "File locks are set by BASIC filelock statements and other mechanisms, and provide a means of assuring data reliability by preventing one process from updating a file while another process examines a batch of records from that same file.",
            "File locks are displayed by list-locks as special item locks with an item-ID of an asterisk and a hash of 0."
        ],
        "parameter":[
            "Parameter(s)",
            "optionsiSuppresses messageitem 'x' released."
        ],
        "example":[

        ]
    },
    {
        "name":"unlock-frame command",
        "Syntax":[
            "Syntax",
            "unlock-frame {.}fid\n"
        ],
        "description":[
            "The unlock-frame command clears the memory corelock previously core-locked with a lock-frame command."
        ],
        "parameter":[
            "Parameter(s)",
            "fid(Decimal) Frame number to unlock. A leading period indicates\nthat the frame number is in hexadecimal."
        ],
        "example":[
            "Example(s)",
            "unlock-frame 7891",
            "unlock-frame .1ed3"
        ]
    },
    {
        "name":"unlock-group command",
        "Syntax":[
            "Syntax",
            "unlock-group {.}fid{-{.}end.fid} {(options)}\n"
        ],
        "description":[
            "The unlock-group command in the DM account clears group locks.",
            "This is capable of clearing all types of group locks or specific types of locks, such as: update group locks, retrieval group locks, or locks on file control blocks.",
            "Group locks provide a means of assuring data reliability by preventing two processes from attempting to update the same group at the same time.",
            "Many processes within the system set group locks. For example, the save processor locks a group while it is being saved.",
            "The read statements (in BASIC) that have a locking form set item locks only while working with an item. This means that two processes can access items in the same group, provided they do not attempt to update the same item. This is in contrast to early releases, which only set group locks on read statements. The locked clause in the read statements allow a graceful means of dealing with the situation of attempting to access a locked item. The program can take a special path name and indicate to the operator that they should try again later."
        ],
        "parameter":[
            "Parameter(s)",
            "fid{-end.fid}Used only when the FID is specified\nin options string. The FID is implied as a decimal number unless it\nis preceded by a period, in which case it is considered to be a hexadecimal\nreference.optionsfReleases group locks placed on file control blocks only.iSuppresses theGroup\u00a0'x' releasedmessage.oReleases read-only locks only.rReleases retrieval group locks only.uReleases update group locks only.",
            "CAUTION:",
            "When a process attempts to access a\ngroup that is locked, the screen freezes and startsbeeping. Usually, there is only a brief wait until the group is unlocked,\nat which time the terminal stops beeping and is granted access to\nthe group. Before using this command, the user should uselist-locksandwhereto locate the cause\nof any deadlocked situation. Usually such problems can be fixed by\nlogging off or issuing anendto the offending\nprocess. The use ofunlock-groupon groups which\nare being actively updated can cause file inconsistency errors."
        ],
        "example":[
            "Example(s)",
            "Unlocks the group at (decimal)\nFID 15000.",
            "unlock-group 15000",
            "Unlocks the group at (hexadecimal) FID 3A98 (15000 in\ndecimal).",
            "unlock-group .3A98",
            "Unlocks FCBs only.",
            "unlock-group (f",
            "Unlocks groups between (and including decimal) FIDs 15010\nthrough 15020.",
            "unlock-group 15010-15020"
        ]
    },
    {
        "name":"unlock-item command",
        "Syntax":[
            "Syntax",
            "unlock-item file.reference {item.list*} {(options}\n"
        ],
        "description":[
            "The unlock-item BASIC program clears item locks that have not cleared through usual system operation.",
            "Item locks are set by BASIC read statements and other mechanisms, and provide a means of assuring data reliability by preventing two processes from attempting to update the same item at the same time.",
            "The read statements (in BASIC) that have a locking form set item locks only while working with an item. This means that two processes can access items in the same group, provided they do not attempt to update the same item. This is in contrast to early D3 systems, which only set group locks on read statements.",
            "A locked clause in read statements allows a graceful means of dealing with the situation of attempting to access a locked item. The program can take a special case and indicate to the operator that they should try again later.",
            "When a process attempts to access an item that is locked, the screen freezes and starts beeping. Usually, there is only a brief wait until the item is unlocked, at which time the terminal stops beeping and is granted access to the item.",
            "Other times, however, the locking system does not unlock the item for whatever reason (for example, aborts, programming errors, log offs, and so on). It is in cases such as this, and only in these cases, that this command should be used."
        ],
        "parameter":[
            "Parameter(s)",
            "optionsstart.port#{-end.port#}Used only when a FID is specified in the options string. The\nFID is implied as a decimal number unless it is proceeded by a period,\nwhere it is then considered to be a hexadecimal reference.iSuppresses messageitem 'x' released."
        ],
        "example":[
            "Example(s)",
            "Displays the current item locks.",
            "list-locks (iItem    Locks     PIB#   Lvl   Hash   item-ID   Filename\n29198   (00720E)  33     2     2D52   33109     cx\n29003   (00714B)  7      1     2C8E   32914     cx\n234034  (039232)  86     0     1923   record2   doc\n179222  (02BC16)  25     0     248A   74845480  entity\n234034  (039232)  89     0     404B   accounts  doc\n169528  (029638)  35     1     6432   110462    entity\n71998   (01193E)  12     0     7250   8462      action\n79366   (013606)  79     0     04A4   kr        tcl-stack",
            "Unlocks the item shown.",
            "unlock-item action 8462[454] Item \u20198462\u2019 unlocked."
        ]
    },
    {
        "name":"unset command",
        "Syntax":[
            "Syntax",
            "unset variable.name\n"
        ],
        "description":[
            "The unset BASIC program deletes a D3 user shell variable."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"update command",
        "Syntax":[
            "Syntax",
            "update file.reference {item.list*} {attr.list} {(options)}\n"
        ],
        "description":[
            "The update command invokes the Update processor for adding, changing, deleting, or cruising through data in a given file."
        ],
        "parameter":[
            "Parameter(s)",
            "attr.listAttribute list functions in the\nsame way as the out list in alistorsortcommand. It indicates the names of the attributes\nthat are to be affected by the command. Specific attributes can be\nupdated without using the default macro defined on the file\u2019s D-pointer.optionseDisables line number display.iIncludes item-ID in Update processor workspace. Each item\nprompts for an item-ID.sTurns off Spelling CheckerlLook only. The item cannot be filed or deleted.cClears the screen before bringing each item into Update processor\nworkspace.rRaw option. When using this option, the Update processor displays\nnondisplayable characters as periods and as left brackets. In this\nmode, the escape character can be entered directly. The raw option\nalso causes the Update processor not to trim trailing attributes."
        ],
        "example":[
            "Example(s)",
            "In this form, the default list\nof attributes is obtained from the macro attribute in the entity file-defining\nitem located in the dictionary of the entity file.",
            "update entity",
            "This explicitly requests the three fields shown, regardless\nof the default macro.",
            "update invoices customer.name invoice.date invoice.amount",
            "Like the first example, this example uses thecoption to clear the screen between each item, theioption to include the item-ID of each item, and theloption forlook only.",
            "update entity (cil",
            "This is exactly the same as the previous example, but\nuses theid-promptmodifier rather than theioption.",
            "update entity id-prompt (cl"
        ]
    },
    {
        "name":"update-abs-stamp command",
        "Syntax":[
            "Syntax",
            "update-abs-stamp file.reference\n"
        ],
        "description":[
            "The update-abs-stamp command in the DM account is invoked by the abs.fid command. This command also produces the actual output."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"update-logging command",
        "Syntax":[
            "Syntax",
            "update-logging {(options)}\n"
        ],
        "description":[
            "The update-logging command toggles or displays the status of the transaction logger subsystem.",
            "With no options, the current status displays."
        ],
        "parameter":[
            "Parameter(s)",
            "optionsfToggles off. Only updates to dl files are logged.nToggles on. All updates to files that are not dx or dy are\nlogged.sSuppresses output of the messages."
        ],
        "example":[
            "Example(s)",
            "update-logging[1325] update-logging is off.",
            "update-logging (n[1324] update-logging is on."
        ]
    },
    {
        "name":"update-md command",
        "Syntax":[
            "Syntax",
            "update-md {account.name}\n"
        ],
        "description":[
            "Description",
            "The update-md BASIC program updates command definitions in a specified account master dictionary, or in a list of master dictionaries. Any conflicts found are logged in the clashes file, with a new data section added for each account.",
            "The account is checked in this manner:",
            "If an item is in newac but not the master dictionary, then it is copied to the master dictionary.",
            "If an item is in both newac and the master dictionary, and is a file-defining item in the master       dictionary, the file-defining item is retained.",
            "If an item is in both newac and the master dictionary and is not a file-defining item, the newac       item is overwritten with the item in the master dictionary and the master dictionary item is       written into the dm,clashes,<account.name>       file.",
            "If an item is a Proc in the master dictionary and there is no corresponding item in newac, the Proc is retained.",
            "If an item is a cataloged FlashBASIC program in the master dictionary and there is no corresponding item in newac nor in the dm master dictionary, the format of the item is updated to the D3 format.",
            "All other items are retained.",
            "The update-md command checks for illegal command definitions and converts old catalog pointer items to D3 format. Additionally, the update-md command converts system privilege values of sys3 to sys2 for compatibility.",
            "An active list (consisting of account names) can be used prior to running update-md to update several accounts at once.",
            "If no account name is specified, and no list is active, the system requests the account name.",
            "The process prompts with these messages:",
            "This prompt allows the automatic creation of user-IDs corresponding to any account updated. Valid responses are y, n, or Enter, which defaults to n.",
            "This is where the new account name is entered. Pressing ENTER at this prompt terminates the process.",
            "The clashes file holds invalid items removed from the master dictionary by the update-md program. Each account updated gets its own data section in the clashes file. The command, lf dm,clashes, displays these data sections.",
            "The update-md command logs  information about its run to the      updatemd.log file (which it creates if it doesn't already exist). It     populates the dictionary with attribute-defining-items (ADIs) to assist in generating reports.     After successfully running update-md on an account, run ld      dm,updatemd.log, to see the ADIs. For example, to see which user ran      update-md on which accounts and when, run sort dm,updatemd.log,       date time who_user account_target."
        ],
        "parameter":[
            "Parameter(s)",
            "optionsiAllows choosing the implementation whose entries will be used to update the md instead\n        of defaulting to the current implementation.nSkips prompts"
        ],
        "example":[
            "Example(s)",
            "update-mdCreate user-ID from each account name (y, <n>)?nEnter md file name:production"
        ]
    },
    {
        "name":"update-prot command",
        "Syntax":[
            "Syntax",
            "update-prot {(options}\n"
        ],
        "description":[
            "The update-prot command toggles or displays the status of the file update protection scheme. When enabled, this feature globally protects all item updates so that a power-off condition does not cause a file inconsistency."
        ],
        "parameter":[
            "Parameter(s)",
            "optionsfToggles update protection off.nToggles update protection on.",
            "By default the update protection is on. If the user turns\nupdate-protection off, and later turns it back on, the user must use\naflushcommand afterwards to be sure that all\nprevious updates are written to disk.",
            "If update protection is\ndesired for selected files only, the user may disable the global update\nprotection flag (withupdate-prot-off), and enable\nthe protection on the selected files by changing attribute 1 of the\nD-pointers of those files to du. When all desired files have been\nchanged to a du-type, the usermustuse aflushcommand to write all previous updates to the disk.",
            "If update\nprotection is desired for most of the system, but the user wishes\nto disable it on certain files, the user can change attribute 1 of\nthe desired D-pointers to dn. These files are not protected irrespective\nof the global update-protection status.",
            "Warning:To\nimplement the update protection scheme, the system must ensure that\nall updates are done in a so-calledatomicfashion. This means\nthat the whole update either makes it to the disk or not. Because\nof this, it is necessary to force-flush pointer-items and overflow\ngroup items to disk at the time the item is written. Therefore, users\nmay notice some performance decrease if this feature is active, and\nthe system updates large pointer items (items with lengths greater\nthan about 300,000 bytes) or normal items in badly sized files with\ngroups exceeding about 20 frames. In this case, the files should be\nresized, or the user may turn off update protection by setting the\nfirst attribute of the selected D-pointer files to dn."
        ],
        "example":[

        ]
    },
    {
        "name":"user.coldstart command",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"user-coldstart macro",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "n\nstartspooler (cstartptr 0,(10,12,17),1,p0 (s)\nassignfq 10,hp.lzr2p.80\nassignfq 12,hp.lzr2p.96\nassignfq 17,hp.lzr2p.132"
        ]
    },
    {
        "name":"user-shutdown macro",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"useralarm command",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"V",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"verify-index command",
        "Syntax":[
            "Syntax",
            " verify-index dict file.reference a.code{(options)}\n verify-index dict file.reference attribute.defining.item{(options)}\n verify-index dict file.reference* {(options)}\n verify-index ?\n"
        ],
        "description":[
            "Description",
            "The verify-index BASIC program verifies the integrity of one or all B-tree indexes in a specified file name.",
            "With no options specified, the process examines each item in the file and verifies each of the     indexes specified. A counter displays on the screen for monitoring the progress of the      verify-index command.",
            "To verify a single index, the TCL casing set by the case command must match     the casing of the index."
        ],
        "parameter":[
            "Parameter(s)",
            "a.codeSpecifies theaprocessing code to be used\n                in forming the keys to the index.The processing code must include an attribute\n                  number.*Designates all indexes.?Displays online help for this\ncommand.optionsaVerifies all indexes in the account or system.cCompares the file to the index only.eCreates an error log.When this option is specified, the command prompts for the error\n                  log file and item (VME only).fDisplays link and node-IDs during verification (VME only).iDisplays item-IDs (VME only).kVerifies links and nodes (VME only).lLocks each data item as it is verified (VME only).mSuppresses all messages (VME only).nThenvariable is an integer specifying a limit for the number of\n                consecutive errors that can occur during index verification before moving on to the\n                next index or file (FSI only).nAffects output to the terminal only. Prevents output from pausing at the end\n                of each (terminal) page of output.oReports missing item-IDs and locates items indexed in the wrong place.While using this\n                  option makes the process run slower, it increases the reliability and\n                  effectiveness of the process (VME only).pDirects the report to the system printer via the spooler.rInhibits index recreation when there is a link error (VME only).sSuppresses display of item counter (VME only).vVerifies that the data exists for the given indexes.This is used in the cases where the\n                  index contains pointers to item-IDs that have been deleted; this is not typical\n                  (VME only).xSuppresses automatic fix of bad indexes. This option produces a report only (VME only).zStops processing after link and node verification (VME only)."
        ],
        "example":[
            "Example(s)",
            "Example 1",
            "The following example verifies the index on attribute1of the entity\n    file.",
            "verify-index entity a1",
            "Example 2",
            "The following example verifies all indexes in the entity file.",
            "verify-index entity * (o"
        ]
    },
    {
        "name":"verify-system command",
        "Syntax":[
            "Syntax",
            "verify-system {file.reference} {(options}\n"
        ],
        "description":[
            "The verify-system BASIC program verifies the integrity of the D3 system software by comparing computed checksums for the executable ABS frames with corresponding checksums stored in the data section of the file reference file.",
            "If the file reference is not specified, the boot ABS dm,abs, is verified.",
            "The verify-system command works with an active list and can be ended early by typing x while it is running."
        ],
        "parameter":[
            "Parameter(s)",
            "optionsoGenerates a new checksum item in the specifiedabsfile."
        ],
        "example":[
            "Example(s)",
            "verify-systemVerifying ABS from file 'DM,ABS,'\nABS file 'DM,ABS,' verifies!"
        ]
    },
    {
        "name":"video.demo command",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"view command",
        "Syntax":[
            "Syntax",
            "view file.name item-ID\n"
        ],
        "description":[
            "The view BASIC program displays a single item in a full screen window. This is useful when a user wants to display an item without editing it."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "Displays the view program. Press\nH for keyboard help.",
            "view dm,bp, :scroll"
        ]
    },
    {
        "name":"W",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"watch command",
        "Syntax":[
            "Syntax",
            "watch {n} tcl.command (options\n"
        ],
        "description":[
            "The watch command executes and re-executes a TCL command continuously until the user cancels the execution by pressing a key. The output of the first page of the specified TCL command is displayed on the screen continuously."
        ],
        "parameter":[
            "Parameter(s)",
            "nThe number of seconds to sleep\nbetween command execution iterations.tcl,commandThe TCL command to execute.optionsThe following options are supported:rResume watch history from last session.",
            "When running thewatchcommand a data\nlevel is created to theWATCHLOGfile in the\nDM account (where the PIB number running the command is the data level\nname). The results of thewatchiterations (up\nto a maximum of 100) are logged to this data level."
        ],
        "example":[

        ]
    },
    {
        "name":"what command",
        "Syntax":[
            "Syntax",
            "what {port.number{-port.number}} {\u2019user-ID\u2019} {(options)}\n"
        ],
        "description":[
            "The what command displays the system configuration and the status of system locks, specified lines, spooler, and printers."
        ],
        "parameter":[
            "Parameter(s)",
            "\u2019user-ID\u2019Outputswherestatus only for users of the specified user-ID.{port.number{-port.number}}Outputs the status for the given\nport, or a range of ports.optionslSuppresses display of lock status.nNo pause. Suppresses the pause at the end of the page on the\nterminal.pDirects output to the system printer, via the spooler.sSuppresses the display ofsp-status.wSuppresses the display ofwhereoutput.zDisplays thewherestatus for all lines,\nincludinginactivelines (those which are not currently logged\non).",
            "The system configuration information displays:",
            "memoryAmount of memory allocated to the D3 virtual machine, in kilobytes.pibsNumber of process identification blocks. This includes communication\nlines for terminals and serial printers, spooler, phantom processes,\nand scheduler.pcb0FID for the PCB for line 0.sysbase\/modBase FID and modulo of the master dictionary\u2019s (system) file.maxfidLast addressable FID on the system.availableNumber of frames available in overflow.dfsizeNumber of bytes available per data frame. The actual frame\nsize is a bit larger. A dfsize of 1000 indicates an actual frame size\nof 1024. A dfsize of 2000 indicates an actual frame size of\u00a02048.\nA dfsize of 4000 indicates an actual frame size of 4096.",
            "In addition,whatuses thewherecommand to display the current status of each line,\nthelist-lockscommand to display the system lock\ntable, and thesp-statuscommand to display the\nspooler and printer status."
        ],
        "example":[
            "Example(s)",
            "whatmemory   pibs   pcb0   sysbase\/   mod   maxfid   available   fsize\n18000k   138    1536   2199       7     358398   53442       2000\n\nSystem Locks\n0   1   2   3   4   5   6   7   8   9   A   B   C   D   E   F\n0   ##  ##  ##  ##  ##  ##  ##  ##  ##  ##  ##  ##  ##  ##  ##\n1   ##  ##  ##  ##  ##  ##  ##  ## \nBasic Locks\n0   1   2   3   4   5   6   7   8   9   A   B   C   D   E   F\n0   ##  ##  ##  ##  ##  ##  ##  ##  ##  ##  ##  ##  ##  ##  ##\n1   ##  ##  ##  ##  ##  ##  ##  ##  ##  ##  ##  ##  ##  ##  ##\n2   ##  ##  ##  ##  ##  ##  ##  ##  ##  ##  ##  ##  ##  ##  ##\n3   ##  ##  ##  ##  ##  ##  ##  ##  ##  ##  ##  ##  ##  ##  ##\n\nSpooler Locks\nmq       iq         fq       peq\n0        ##         ##       ##         ##\nOwner    Locks      Locks\n151996   (0251BC)   38       0          0\n155300   (025EA4)   -        1          0\n166106   (0288DA)   -        1          0\n131836   (0202FC)   82       0          0\n131879   (020327)   -        1          0\n282213   (044E65)   5        0          0\n\nItem Locks   PIB#       Lvl     Hash     Item-ID  Filename\n109547       (01ABEB)   56      0        2379     tcl.what           d3.doc\n151996       (0251BC)   38      0        289E     127910             journal\n131836       (0202FC)   82      0        6C2C     monitor            status\n011          00060B     BF10    000018            sp.serialsleep:08\n012          00060C     FF10    000018            au.start:36C       tcl1:0E8\n013          00060D     BF10    000018            sp.serialsleep:08\n014          00060E     BF10    000018            sp.serialsleep:08\n015          00060F     BF10    000018            sp.serialsleep:08\n019          000613     BF10    000018            sp.serialsleep:08\n028          000680     BF10    000018   P        sp.sleep:040       sp.spoolout:0F\n030          04AA25     FF10    000018   P        br.unix.bix:000\n031          044E0F     DF10    000018   P        bt.searchx:17C     bt.read:028\n037          039A0B     BF10    000018   P        pp.sched:038\nThe spooler is inactive.\nPrinter # 0 is serial, inactive, and on line.\nThe printer is running on line 13.\nAssigned output queues: 0.\nThe number of interjob pages to eject is 1.\nPrinter # 1 is serial, inactive, and on line.\nThe printer is running on line 11.\nAssigned output queues: 3, 4, 5.\nThe number of interjob pages to eject is 1.",
            "This outputs\nall items indicated, but limitswhereoutput only to those\non the dm account.",
            "what \u2019dm\u2019",
            "This outputs all items indicated, but limits where output\nonly to lines 13 through 22.",
            "what 13-22",
            "This outputs system configuration only.",
            "what (lsw\n\n08:40:52 29    08:40:52    29 Feb 2003\nmemory   pibs    pcb0   sysbase\/   mod   maxfid   available\n18000k   138     1536   2199       7     358398   53418"
        ]
    },
    {
        "name":"where command",
        "Syntax":[
            "Syntax",
            " where {port.number{-port.number}} {user-ID} {(options)}\n"
        ],
        "description":[
            "Description",
            "The where command displays the current execution status of all   processes currently logged on to system or for selected port numbers.",
            "The where command displays this information:",
            " If the display shows corrupted workspace, the most likely cause is          that the workspace is not properly set up or the process is in the middle of push           level or pop level. "
        ],
        "parameter":[
            "Parameter(s)",
            "user-IDOutputs status for a specific user-ID only. Quotation marks are optional in D3.accountOutputs status for processes using the specified account name.port.number{-port.number}Outputs the status for the specified port or a range of ports.",
            "optionsaDisplays a character next to the PIBs information to indicate the license consumption type.\n        Review theDescriptionsection\n        for possible types.When used with theooption, you will see only those\n         PIBs that are using a license.Note:In this mode, an asterisk is not displayed next to\n         the port that issued the command.hSuppresses the heading.lShows the status for eachpushedlevel.nNo pause option suppresses the pause at the end of the page\non the terminal.oShows information only for those PIBs that have the specified settings when used with theaoption.pDirects output to the system printer, via the spooler.uReturns the user tally (under the Stat column heading).zDisplayswherestatus for all ports, includinginactiveports (those which are not currently logged on)."
        ],
        "example":[
            "Example(s)",
            "Example 1",
            "The following example provides the status of those ports that are currently logged into the dm\n    user-ID:",
            "where \u2019dm\u2019",
            "Example 2",
            "The following example provides the status of port numbers 13 through 22:",
            "where 13-22",
            "Example 3",
            "The following example provides the status of all port numbers:",
            "where (z",
            "Example 4",
            "The following example shows thewhere (areport of direct connected lines\n    using Connection Pool licenses (lines 2\u20135):",
            ":where (a\n\n   Ln   PCB     PIB   ABS  Stat  R1 & Return stack contents         04 Jan 2019\n        FID     Stat  Base                                             10:08:34\n\n +0000 00000080 F310 000018      AU_INPUT:000     AU_START_TCL:000 AU_TCL:000\n                                 TCL1:000\n +0001 00000081 FF90 000018      WS_WHERE1:000    WS_WHATWHERE:000\n -0002 00000082 E390 000018      PX_LOCK:000\n -0003 00000083 E390 000018      PX_LOCK:000\n -0004 00000084 E390 000018      PX_LOCK:000\n -0005 00000085 E390 000018      PX_LOCK:000\n  0256 00000180 BF10 000018      SP_SLEEP:000     SP_SPOOLOUT:000\n =0257 0000450C FF00 000018   P  RPS_GETCMD:000\n =0258 00004509 FF10 000018   P  RPS_GETCMD:000\n =0259 00004515 FF10 000018   P  RPS_GETCMD:000\n =0260 00004500 FF10 000018   P  RPS_GETCMD:000\n =0261 00004508 FF10 000018   P  RPS_GETCMD:000\n  0273 00004484 BF10 000018   P  PP_SCHED:000",
            "Example 5",
            "The following example shows thewhere (areport of direct connected lines\n    using Enterprise licenses (lines 2\u20135):",
            ":where (a\n\n   Ln   PCB     PIB   ABS  Stat  R1 & Return stack contents         04 Jan 2019\n        FID     Stat  Base                                             10:55:20\n\n +0000 00000080 F310 000018      AU_INPUT:000     AU_START_TCL:000 AU_TCL:000\n                                 TCL1:000\n +0001 00000081 FF90 000018      WS_WHERE1:000    WS_WHATWHERE:000\n <0002 00000082 E390 000018      PX_LOCK:000\n <0003 00000083 E390 000018      PX_LOCK:000\n <0004 00000084 E390 000018      PX_LOCK:000\n <0005 00000085 E390 000018      PX_LOCK:000\n  0256 00000180 BF10 000018      SP_SLEEP:000     SP_SPOOLOUT:000\n =0257 0000450C FF00 000018   P  RPS_GETCMD:000\n =0258 00004509 FF10 000018   P  RPS_GETCMD:000\n =0259 00004515 FF10 000018   P  RPS_GETCMD:000\n =0260 00004500 FF10 000018   P  RPS_GETCMD:000\n =0261 00004508 FF10 000018   P  RPS_GETCMD:000\n  0273 00004484 BF10 000018   P  PP_SCHED:000",
            "Example 6",
            "whereLn    PCB     PIB   ABS      Stat   R1 & Return stack     Contents\n 011   00060B  BF10  000018          sp.serialsleep:080\n 012   00060C  FF10  000018          au.tcl.upd:084        au.start:36C\n 013   00060D  BF10  000018          sp.serialsleep:080\n 014   00060E  BF10  000018          sp.serialsleep:080\n 015   00060F  BF10  000018          sp.serialsleep:080\n 019   000613  BF10  000018          sp.serialsleep:080\n 045   0469F9  F310  000018   3      au.input:000          au.get.cmnd:0D8\n *056  046AA6  F310  000018   2      ws.where1:000         ws.whatwhere:354\n 069   0457DD  F310  000018   1      me.pause:018          me.display:598\n 070   04514D  F310  000018   1      me.pause:018          me.display:598\n 074   00064A  BF10  000018          sp.serialsleep:080\n 082   000652  BF10  000018          sleepsub:0F4          br.rqm:18C\n 128   000680  BF10  000018   P      sp.sleep:040          sp.spoolout:0F0\n 130   04AA25  FF10  000018   P      br.unix.bix:000\n 137   039A0B  BF10  000018   P      pp.sched:038"
        ]
    },
    {
        "name":"wherebt macro",
        "Syntax":[
            "Syntax",
            "wherebt {options}\n"
        ],
        "description":[
            "The wherebt macro invokes the wheres command with the bt parameter."
        ],
        "parameter":[
            "Parameter(s)",
            "btIndicates that only the lines currently in BASIC run time\ndisplay."
        ],
        "example":[

        ]
    },
    {
        "name":"whered macro",
        "Syntax":[
            "Syntax",
            "whered {options}\n"
        ],
        "description":[
            "The whered macro invokes the wheres command with the db parameter."
        ],
        "parameter":[
            "Parameter(s)",
            "dbIndicates that only the lines currently in the system debugger\ndisplay."
        ],
        "example":[

        ]
    },
    {
        "name":"whereindx macro",
        "Syntax":[
            "Syntax",
            "whereindx {options}\n"
        ],
        "description":[
            "The whereindx macro invokes the wheres command with the indx parameter."
        ],
        "parameter":[
            "Parameter(s)",
            "indxIndicates that only the lines accessing B-tree indexes display."
        ],
        "example":[

        ]
    },
    {
        "name":"wherelk macro",
        "Syntax":[
            "Syntax",
            "wherelk {options}\n"
        ],
        "description":[
            "The wherelk macro invokes the wheres command with the lk parameter."
        ],
        "parameter":[
            "Parameter(s)",
            "lkIndicates that only the lines with locks set display."
        ],
        "example":[

        ]
    },
    {
        "name":"whereovf macro",
        "Syntax":[
            "Syntax",
            "whereovf {options}\n"
        ],
        "description":[
            "The whereovf macro invokes the wheres command with ovf parameter."
        ],
        "parameter":[
            "Parameter(s)",
            "ovfIndicates that only the lines accessing the overflow handler\ndisplay."
        ],
        "example":[

        ]
    },
    {
        "name":"wherepu macro",
        "Syntax":[
            "Syntax",
            "wherepu {options}\n"
        ],
        "description":[
            "The wherepu macro invokes the wheres command with the pu parameter."
        ],
        "parameter":[
            "Parameter(s)",
            "puIndicates that only lines, which are pushed one or more levels\ndisplay."
        ],
        "example":[

        ]
    },
    {
        "name":"wheres command",
        "Syntax":[
            "Syntax",
            "wheres {options}\n"
        ],
        "description":[
            "The wheres BASIC program performs a variety of functions depending on the options or parameters provided, and displays a more readable form of the where command, including the user-ID, the account name, and the last command entered."
        ],
        "parameter":[
            "Parameter(s)",
            "?Displays help on the command.\"account.name\"Displays status only for users\nof the specified account name. The quotation marks around the account\nname are required.[user-IDDisplays status of requested\nuser-ID only.Note:The[is required, but]is not allowed.{port.number{-port.number}}Outputs status for the given\nport, or a range of ports.optionscDisplays port communications parameters (baud rate, parity,\nand so on).lDisplays the status for pushed levels, if any.nNo pause option suppresses the pause at the end of the page\non the terminal.pDirects output to the system printer via the spooler.zDisplayswherestatus for all ports, includinginactiveports (those which are not currently logged on).",
            "This command combines the effect of these TCL commands:who,sort pibs,listabs,term,listptr,where,sp-status,set-portandxonoff. A number of variants of this command are available\nand all begin withwhoorwhere.",
            "Special parameters provided are:",
            "brDisplays ports which are in running a BASIC program.btDisplays ports which are accessing B-tree indexes.dbDisplays ports which are in the system debugger.inDisplays ports which are accessing indexes.lkDisplays ports which have locks in place.opDisplays ports which are in the Output processor.ovDisplays ports which are accessing the overflow handler.puDisplays ports which are pushed one or more levels.spDisplays ports which are accessing the spooler.tpDisplays the port with the tape attached."
        ],
        "example":[

        ]
    },
    {
        "name":"wheresp macro",
        "Syntax":[
            "Syntax",
            "wheresp {options}\n"
        ],
        "description":[
            "The wheresp macro invokes the wheres command with the sp parameter."
        ],
        "parameter":[
            "Parameter(s)",
            "spIndicates that only the lines currently accessing the spooler\ndisplay."
        ],
        "example":[

        ]
    },
    {
        "name":"wheret macro",
        "Syntax":[
            "Syntax",
            "wheret {options}\n"
        ],
        "description":[
            "The wheret macro invokes the wheres command with the tp parameter."
        ],
        "parameter":[
            "Parameter(s)",
            "tpIndicates that only the line with the tape attached displays."
        ],
        "example":[

        ]
    },
    {
        "name":"which command",
        "Syntax":[
            "Syntax",
            "which {(option}\n"
        ],
        "description":[
            "The which BASIC program displays the implementation being used, the software serial number, the system ID number, the release level, and UNIX specific system information."
        ],
        "parameter":[
            "Parameter(s)",
            "optionaDisplays highest ABS patch level loaded on the system.cDisplays levels for each component of the system.dWhen used with thecoption, displays release\ndates for each component.pOutputs to printer.xOutputs the data in a program-friendly format.zDisplays release implementation and date only.",
            "This command displays the version of the elements used\nto create the D3 operating system. The display includes:",
            "ImplementationGeneral platform implementation.Software Serial NumberSerial number.System ID NumberSystem ID number.ReleaseSpecific platform information.UNIX InformationDisplays the system name, configuration file name, and UNIX\ninformation. For example:Linux;prod:LINUX;2.4.2-2smp;#1 SMP Sun\nApr 8 20:2"
        ],
        "example":[
            "Example(s)",
            "which cadSystem Release Information\n\u00a0\u00a0==========================\nD3 Release Version 7.2.1.LINUX\nMost recent mload into boot abs performed at 17:50:09 on 20 Feb 2003.\nImplementation. . . . . . 6386\nSoftware Serial Number. . 11030966\nSystem ID Number . . . .  30162545\nRelease . . . . . . . . . D3\/UNIX: LINUX\nUnix Information. . . . . Linux;prod:LINUX;2.4.2-2smp;#1 SMP Sun Apr 8 20:2\n1:34 EDT 2001;07EE7316\nBoot Monitor. . . . . . . 7.2.1.M6; 10 Jan 2002\nBoot ABS. . . . . . . . . 7.2.1.A8; 09 Jan 2002\nBoot ABS Data File. . . . 7.2.1.A8; 09 Jan 2002\nSystem Data Files . . . . 7.2.1.D8; 09 Jan 2002\nFlashBASIC Revision . . . 7.2.1.F5; 27 Jul 2001\nSQL Revision. . . . . . . 7.2.1.S4; 26 Jul 2001\nABS Patch Level . . . . . 7.2.1.A78; 29 Mar 2002"
        ]
    },
    {
        "name":"which-line command",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "who.substitute\n001 pq\n002 oYou are using port #\n003 hwhich-line\n004 p\n005 d"
        ]
    },
    {
        "name":"wincopy command",
        "Syntax":[
            "Syntax",
            "WINCOPY {filename} {item.list} {(options}\n\nTO:{(filename} {item.list}\n\n"
        ],
        "description":[
            "Description",
            "The wincopy command is a modified version of the    copy command that copies items between D3 and the Windows file   system.",
            "The wincopy command allows items in a D3 file to be copied to a Windows     directory or to copy files from a Windows directory to a D3 file.",
            "Attribute marks in the D3 data are converted to Windows end-of-line markers (crlf) when     copying to Windows and Windows end-of-line markers (crlf) are converted to attribute marks when     copying from Windows to D3."
        ],
        "parameter":[
            "Parameter(s)",
            "filenameSpecifies the name of the D3 file or a Windows directory\n        path.item.listSpecifies a list of items to copy.*Specifies that all items in the file or directory path\n        should be copied.optionsLSpecifies lowercase item names on destination.USpecifies uppercase item names on destination.OSpecifies overwrite existing items on destination."
        ],
        "example":[
            "Example(s)",
            "Example 1",
            "The following example copies the items a, b, and c from the D3 filemyfileto the Windows directoryc:\\tempas files a,\n    b, and c as long as files a, b, and c do not already exist.",
            "wincopy myfile a b c\nto:(c:\\temp",
            "Example 2",
            "The following example copies items a, b, and c from the D3 filemyfileto\n    the Windowsc:\\tempdirectory as files A, B, and C, overwriting any\n    existing file.wincopy myfile a b c (uo\nto:(c:\\temp"
        ]
    },
    {
        "name":"who command",
        "Syntax":[
            "Syntax",
            "who {port.number} {(options}\nwho {*} {(options}\nwho {user-ID} {(options}\n"
        ],
        "description":[
            "The who command displays the port number, user-ID, and account name for the current port, a specified port, or all ports."
        ],
        "parameter":[
            "Parameter(s)",
            "port.numberPort number whose current account\nis to be displayed. If not specified, the account for the current\nport displays.*Displays the account names for\nall ports that are logged on.optionsaConverts output format to D3 format, showing the user-ID followed\nby the account name. This is the default setting.cConverts output format to R83 format.nNo pause option suppresses the pause at the end of the page\non the terminal.zDisplays status of all ports, including those not logged on.\nThe account name displays asunknownfor ports not\nlogged on."
        ],
        "example":[
            "Example(s)",
            "who56 ref bob",
            "who (a[1321] D3 output for WHO display specified.",
            "who56 bob ref"
        ]
    },
    {
        "name":"who-info command",
        "Syntax":[
            "Syntax",
            "who-info {(options}\n"
        ],
        "description":[
            "The who-info command enables or disables who output at TCL.",
            "When the TCL who information is on, the PIB, user, and account display, along with the time and date information when the user enters a blank line at TCL."
        ],
        "parameter":[
            "Parameter(s)",
            "optionsfTurns off the TCLwhoinformation.nTurns on the TCLwhoinformation.",
            "Warning:If time-date is set to off, TCL output\nis inhibited completely."
        ],
        "example":[

        ]
    },
    {
        "name":"whobt macro",
        "Syntax":[
            "Syntax",
            "whobt {options}\n"
        ],
        "description":[
            "The whobt macro invokes the wheres command with the bt parameter."
        ],
        "parameter":[
            "Parameter(s)",
            "btIndicates that only the lines currently in BASIC run time\ndisplay."
        ],
        "example":[

        ]
    },
    {
        "name":"whod macro",
        "Syntax":[
            "Syntax",
            "whod {options}\n"
        ],
        "description":[
            "The whod command invokes the wheres command with the db parameter."
        ],
        "parameter":[
            "Parameter(s)",
            "dbIndicates that only the lines currently in the system debugger\ndisplay."
        ],
        "example":[

        ]
    },
    {
        "name":"whoindx macro",
        "Syntax":[
            "Syntax",
            "whoindx {options}\n"
        ],
        "description":[
            "The whoindx macro invokes the wheres command with the indx parameter."
        ],
        "parameter":[
            "Parameter(s)",
            "indxIndicates that only the lines accessing B-tree indexes display."
        ],
        "example":[

        ]
    },
    {
        "name":"wholk macro",
        "Syntax":[
            "Syntax",
            "wholk {options}\n"
        ],
        "description":[
            "The wholk macro invokes the wheres command with the lk parameter."
        ],
        "parameter":[
            "Parameter(s)",
            "lkIndicates that only the lines with locks set display."
        ],
        "example":[

        ]
    },
    {
        "name":"whopu macro",
        "Syntax":[
            "Syntax",
            "whopu {options}\n"
        ],
        "description":[
            "The whopu macro invokes the wheres command with the pu parameter."
        ],
        "parameter":[
            "Parameter(s)",
            "puIndicates that only the lines which are pushed one or more\nlevels display."
        ],
        "example":[

        ]
    },
    {
        "name":"whosp macro",
        "Syntax":[
            "Syntax",
            "whosp {options}\n"
        ],
        "description":[
            "The whosp macro invokes the wheres command with the sp parameter."
        ],
        "parameter":[
            "Parameter(s)",
            "spIndicates that only the lines currently accessing the spooler\ndisplay."
        ],
        "example":[

        ]
    },
    {
        "name":"whot macro",
        "Syntax":[
            "Syntax",
            "whot {options}\n"
        ],
        "description":[
            "The whot command displays the wheres information with the tp parameter."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"whovf macro",
        "Syntax":[
            "Syntax",
            "whovf {options}\n"
        ],
        "description":[
            "The whovf macro invokes the wheres command with the ov parameter."
        ],
        "parameter":[
            "Parameter(s)",
            "ovIndicates that only the lines accessing the overflow handler\ndisplay."
        ],
        "example":[

        ]
    },
    {
        "name":"wincopy command",
        "Syntax":[
            "Syntax",
            "WINCOPY {filename} {item.list} {(options}\n\nTO:{(filename} {item.list}\n\n"
        ],
        "description":[
            "Description",
            "The wincopy command is a modified version of the    copy command that copies items between D3 and the Windows file   system.",
            "The wincopy command allows items in a D3 file to be copied to a Windows     directory or to copy files from a Windows directory to a D3 file.",
            "Attribute marks in the D3 data are converted to Windows end-of-line markers (crlf) when     copying to Windows and Windows end-of-line markers (crlf) are converted to attribute marks when     copying from Windows to D3."
        ],
        "parameter":[
            "Parameter(s)",
            "filenameSpecifies the name of the D3 file or a Windows directory\n        path.item.listSpecifies a list of items to copy.*Specifies that all items in the file or directory path\n        should be copied.optionsLSpecifies lowercase item names on destination.USpecifies uppercase item names on destination.OSpecifies overwrite existing items on destination."
        ],
        "example":[
            "Example(s)",
            "Example 1",
            "The following example copies the items a, b, and c from the D3 filemyfileto the Windows directoryc:\\tempas files a,\n    b, and c as long as files a, b, and c do not already exist.",
            "wincopy myfile a b c\nto:(c:\\temp",
            "Example 2",
            "The following example copies items a, b, and c from the D3 filemyfileto\n    the Windowsc:\\tempdirectory as files A, B, and C, overwriting any\n    existing file.wincopy myfile a b c (uo\nto:(c:\\temp"
        ]
    },
    {
        "name":"wlist command",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"wselect command",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"wsort command",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "wsort entity by zip by name with name \"a]\""
        ]
    },
    {
        "name":"wsselect command",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"X",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"xcs command",
        "Syntax":[
            "Syntax",
            "xcs {port.number} {(options)}\n"
        ],
        "description":[
            "The xcs BASIC program enables or disables the extended character set for the current port or a specific port, or displays the status when no options are provided."
        ],
        "parameter":[
            "Parameter(s)",
            "optionsfTogglesxcsoff.nTogglesxcson.sSuppresses the output of status messages.tTogglesxcs. If on, this turns it off,\nand vice-versa.",
            "Whenxcsis on, the high order bit is\nnot stripped from input that is transmitted to the system. This allows\ncharacters in the range 128 through 255 to be used as unique characters.",
            "Whenxcsis off, the high order bit is stripped\nfrom input. Characters from 128 through 255 are not available.",
            "Two macros,xcs-onandxcs-off, have been provided to toggle this function."
        ],
        "example":[

        ]
    },
    {
        "name":"xcs-off macro",
        "Syntax":[
            "Syntax",
            "xcs-off {port.number}\n"
        ],
        "description":[
            "The xcs-off macro disables the extended character set function on a specified port, or the current port if omitted."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"xcs-on macro",
        "Syntax":[
            "Syntax",
            "xcs-on {port.number}\n"
        ],
        "description":[
            "The xcs-on macro enables the extended character set function on a specified port, or the current port if omitted."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"xonoff command",
        "Syntax":[
            "Syntax",
            " xonoff {(options}\n"
        ],
        "description":[
            "The xonoff BASIC program disables or enables x-on\/x-off on a specified port, or the current port."
        ],
        "parameter":[
            "Parameter(s)",
            "optionsport.numberInteger number that indicates the port number.fSets thexon\/xoffcommand to Off.nSets thexon\/xoffcommand to On. This is the default setting.sSuppresses the output of the status message.",
            "When thexon\/xoffcapability is On:CTRL+S stops output from displaying on the terminal.CTRL+Q resumes the display.If no options are specified, you will see the status.",
            "Thexonandxoffcommands are used for flow control to\n    printers and other devices."
        ],
        "example":[
            "Example(s)",
            "Example 1",
            "xonoff[1314] xon\/off is enabled.",
            "Example 2",
            "xonoff (f[1315] xon\/off is disabled.",
            "Example 3",
            "xonoff (n[1314] xon\/off is enabled."
        ]
    },
    {
        "name":"xtd command",
        "Syntax":[
            "Syntax",
            "xtd hexnum\n"
        ],
        "description":[
            "The xtd command converts a given hexadecimal number into its equivalent decimal (integer) format."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "xtd 3af215090"
        ]
    },
    {
        "name":"Z",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"z command",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"UNIX",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Boot error codes",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Halt error codes",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "Some errors are trapped in the\nmonitor debugger with this message:",
            "<HLT> YY\nRegister dump\nH!",
            "whereYYis the hexadecimal value ofXX."
        ]
    },
    {
        "name":"Monitor Debugger",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Entering the Debugger (Monitor Debugger)",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Referencing data",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "Offset x'300' in frame 1.",
            "1.300",
            "Offset 16 in frame x'12'.",
            ".12,16",
            "Offset x'100' off the location pointer at by register\n3.",
            "r3.100"
        ]
    },
    {
        "name":"Changing data",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"D3 UNIX debugger commands",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"!shell command",
        "Syntax":[
            "Syntax",
            "!shell\n"
        ],
        "description":[
            "The !shell command submits a shell command."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"? command",
        "Syntax":[
            "Syntax",
            "?\n"
        ],
        "description":[
            "The ? command displays help information. The UNIX file \/usr\/lib\/pick\/sdb.help displays using the pg command."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"ba command",
        "Syntax":[
            "Syntax",
            "ba{.}fid[.|,]disp\nbao{.}offset\nba+{.}offset\nb{n}\n"
        ],
        "description":[
            "The ba command adds a breakpoint."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"bd command",
        "Syntax":[
            "Syntax",
            "bd[*|n]\n"
        ],
        "description":[
            "The bd command deletes the breakpoint."
        ],
        "parameter":[
            "Parameter(s)",
            "*Removes all breakpoints.nSpecifiesnfrom 0 to 2 and the specified\nbreakpoint to be deleted."
        ],
        "example":[

        ]
    },
    {
        "name":"bl command",
        "Syntax":[
            "Syntax",
            "bl\n"
        ],
        "description":[
            "The bl command lists the monitor breakpoints."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"bo command",
        "Syntax":[
            "Syntax",
            "bo{.}fid[.|,]disp\n"
        ],
        "description":[
            "The bo command is the breakpoint offset. This command defines both the FID and the displacement, which are used in computing the effective address of a breakpoint in the ba command."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"d? command",
        "Syntax":[
            "Syntax",
            " d?\n"
        ],
        "description":[
            "Description",
            "The d? command displays or changes the default dump string.",
            "In case of system abort (for example, bus errors, segmentation violations, and so on), the     system automatically dumps any critical elements in the file \/usr\/tmp\/ap.core. ",
            "The file can be examined with the apcrash command. After the display, the     string can be changed by typing the new dump string after the equal sign. The dump string can     have up to 15 characters, one-character codes and arguments. For the description of each code,     see d command below. The dump string can be different for each process."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"d command",
        "Syntax":[
            "Syntax",
            "dcommand.string\n"
        ],
        "description":[
            "The d command dumps the D3 core memory to the UNIX file \/usr\/tmp\/ap.core. The result of the dump can be examined with the apcrash command. The d\u00a0command can be used after an incident to dump selected elements of the current D3 memory to investigate the problem."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"e command",
        "Syntax":[
            "Syntax",
            "e\n"
        ],
        "description":[
            "The e command toggles the debugger on or off. When off, prevents entry to the debugger by pressing BREAK. On line 0, the debugger is entered in some special cases even when the debugger is disabled."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"f command",
        "Syntax":[
            "Syntax",
            "f{!}\n"
        ],
        "description":[
            "The f command flushes memory. All frames modified in memory are written back to disk. If a disk error occurs, a minus sign displays."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"g command",
        "Syntax":[
            "Syntax",
            "g {fid.disp}\n"
        ],
        "description":[
            "The g command process resumes execution without any argument."
        ],
        "parameter":[
            "Parameter(s)",
            "fid.dispSpecifies the FID displacement to which control is transferred\nto. FID is expressed as a relative offset in the current ABS."
        ],
        "example":[

        ]
    },
    {
        "name":"gl command",
        "Syntax":[
            "Syntax",
            "gl{-}\n"
        ],
        "description":[
            "The gl command displays or removes group locks."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"h command",
        "Syntax":[
            "Syntax",
            "hfid\n"
        ],
        "description":[
            "The h command displays internal information about the specified FID if it is in memory, message <NIM> displays, or FID is not in memory."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"k command",
        "Syntax":[
            "Syntax",
            "k{w}[f|pib]\n"
        ],
        "description":[
            "The k command terminates the process associated with the PIB pib or the flusher, if used with the F key, by sending a SIGTERM to it. If used with the W key, the k command waits up to 10 seconds for the process to terminate. If it does not terminate, a SIGKILL is sent to it."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"l command",
        "Syntax":[
            "Syntax",
            "l fid\n"
        ],
        "description":[
            "The l command displays, in hexadecimal, the link fields of the frame FID."
        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "frmn:frmp:npcf:clnk=\nnncf: number of next contiguous frame(s)\nfrmn: forward link\nfrmp: backward link\nnpcf: number of prior contiguous frame(s)\nclnk: core link",
            "New values for the fields can then be entered, separated\nby commas, with an empty field to leave a field unchanged."
        ]
    },
    {
        "name":"m command",
        "Syntax":[
            "Syntax",
            "m{*}monitor.address{;window}\n"
        ],
        "description":[
            "The m command displays or changes the real memory and the specified window at the real address."
        ],
        "parameter":[
            "Parameter(s)",
            "*Uses the address as a pointer and its content as the monitor\naddress.monitor.addressSpecifies the window and real address.windowSpecifies the area pointed to by the pointer.",
            "Note:Access to an illegal address causes a segmentation\nviolation or a bus error sending control back to the monitor debugger\nwith an abort condition, from which it is impossible to recover. It\nis strongly advised to avoid absolute addresses, since they vary from\nimplementation to implementation."
        ],
        "example":[

        ]
    },
    {
        "name":"p command",
        "Syntax":[
            "Syntax",
            "p{pib}{[.|,]offset}{;window}\n"
        ],
        "description":[
            "The p command displays and changes the PIB. This command also displays the window bytes in the PIB specified by the PIB (that is, the current PIB if the PIB is omitted), at the optional offset."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"q command",
        "Syntax":[
            "Syntax",
            "q{!}\n"
        ],
        "description":[
            "The q command quits the monitor debugger."
        ],
        "parameter":[
            "Parameter(s)",
            "!Optional parameter that bypasses the normal D3 termination\nand terminates the process abruptly.CAUTION:This form\nshould be used only in extreme situations where even quitting from\nthe monitor debugger aborts."
        ],
        "example":[
            "Example(s)",
            "The user is prompted:",
            "Leaving the Monitor debugger terminates the D3 process.",
            "To confirm, typey(without pressing\nENTER)."
        ]
    },
    {
        "name":"r command",
        "Syntax":[
            "Syntax",
            "rreg{.disp}{;window}\n"
        ],
        "description":[
            "The r command displays data through the register."
        ],
        "parameter":[
            "Parameter(s)",
            "regPoints to data from 0 through 15..dispSpecifies the displacement that is added to the register displacement."
        ],
        "example":[

        ]
    },
    {
        "name":"S command",
        "Syntax":[
            "Syntax",
            "S[f|h|i|m|s|w]{-}\n"
        ],
        "description":[
            "Description",
            "The S command scans the buffer table bits and displays and\/or clears them depending on the certain criteria.",
            "The user specifies which bits to search for using the above options. When a buffer is found, it displays in a manner similar to that of the h command. The user may go backward or forward in the selection list using CTRL+P and CTRL+N. At completion, the total count of items is indicated."
        ],
        "parameter":[
            "Parameter(s)",
            "-Clears instead of displays.fReferenced bit.hHold bit.iIobusy bit (disk read).mTemporary mlock bit.sSuppresses detail output and shows only the total.wWrite-required bit."
        ],
        "example":[

        ]
    },
    {
        "name":"s command",
        "Syntax":[
            "Syntax",
            "s [*|sem]{[?|+|-]}\n"
        ],
        "description":[
            "The s command displays or changes the semaphore status."
        ],
        "parameter":[
            "Parameter(s)",
            "semSpecifies the semaphore expressed from 0 to 4.*Specifies all semaphores.+Sets or locks the specified semaphore.-Unlocks the specified semaphore.?Displays:00: O pid=0985\n01: O pib=0023\n02:\n03: O pib=001Awheresemaphore 0 is owned by the process with the PID number of\nx'0985'. Only semaphore 0 displays with the UNIX PID number instead\nof the D3 PIB numbersemaphore 1 is busy, owned by the PIB x'23' and has at least\none process waiting on it (W).semaphore 2 is free.semaphore 3 is busy, owned by process x'1A' but has no process\nwaiting on it.",
            "If the owner PIB is not setup when the command is executed,\nthe messagepib=?displays. Re-enter the command again\nto set the owner PIB."
        ],
        "example":[

        ]
    },
    {
        "name":"t command",
        "Syntax":[
            "Syntax",
            "t{[mmonitor.address|fid.disp]{;window}}\n"
        ],
        "description":[
            "Description",
            "The t command sets and removes the monitor trace. A minus sign displays, acknowledging the removal.",
            "This command can also set a trace on the specified area of memory starting at the monitor address or the area of memory associated to the FID displacement with a length equal to that window. If not specified, the default window or the size of the monitor element is used. The maximum window size on a monitor address is 32767. The maximum window on a virtual address is the frame size.",
            "A plus sign displays acknowledging the setting. The memory is checked for any change at every virtual branch or call, and every frame fault. If the memory is changed, the monitor debugger is entered. When setting a trace on a virtual address, the frame is locked in memory. Removing the trace unlocks the frame if it was not locked when the trace was set."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"v command",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"x command",
        "Syntax":[
            "Syntax",
            "x\n"
        ],
        "description":[
            "Description",
            "The x command displays hardware registers on the first line of the program counter, followed by a variable number of 32 bit registers.",
            "The information is implementation dependent:",
            "For AIX: Registers r3 through r31.",
            "For Linux: Registers edi esi ebp esp ebx edx ecx eax."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Usage hints",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Precautions",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"UNIX commands",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":".profile command",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"apcrash command",
        "Syntax":[
            "Syntax",
            "apcrash {core.file}\n"
        ],
        "description":[
            "Description",
            "The apcrash command runs under UNIX to examine D3 core dumps.",
            "A D3 core dump is created either automatically, when a machine abort occurs (such as bus errors, segmentation violations, and so on) or by requesting a monitor debugger d command.",
            "The core file contains a series of segments, each representing part of the D3 memory at the time the dump was done. Segments can contain both monitor and virtual data. The data in the core file cannot be changed.",
            "The data displays in a format similar to the virtual Debugger. The apcrash command has a format similar to a window (number of bytes displayed). After each window, an equal sign displays, prompting the user for the next action. One character code, followed by pressing ENTER, is required:",
            "The apcrash command displays the prompt (crash) and waits for commands on its standard input:",
            "Prefix l specifies a local address (mpcb).",
            "g specifies a global address (mcb).",
            "Without the prefix, the address specified is an absolute address."
        ],
        "parameter":[
            "Parameter(s)",
            "core.fileName of the core file to examine. If not specified, the default\/usr\/tmp\/ap.coreis used.Note:This file can be very\nlarge."
        ],
        "example":[

        ]
    },
    {
        "name":"d3 command",
        "Syntax":[
            "Syntax",
            " \n d3 {{[-0|-a boot.arg|-port.number|-f|-q|-k|-qf|-ql|-qn] } {-n config.file} \n {-t tty} {-y stty.arg} {-d data.arg} {-b} {-l} {-i nice} {-icrlf} {-key n}\n {[-printer|-pprinter]}} {-D} {-s} {-step} {-w} {-u \/ttelnet.port,\n server.hostname} {-L lang.file}{-r} {haforcecheck}\n\n"
        ],
        "description":[
            "The d3 command starts the D3 virtual machine or a D3 user process."
        ],
        "parameter":[
            "Parameter(s)",
            "-0Starts the virtual machine.This process initializes the\n         virtual machine. All other processes wait for the coldstart to complete its initialization\n         before actually starting. Once the virtual machine starts, line 0 can be disconnected by\n         typingexitordiscon any other line.\n         Issuing ad3 -0again reconnects to port 0 of the virtual machine if it\n         is booted.-aboot.argStarts a virtual machine automatically.This process\n         initializes the virtual machine. All other processes wait for the coldstart to complete its\n         initialization before actually starting.This option is similar to the0option, with the difference that the system does not prompt for a boot\n         option. Instead, it takes one-character commands from the boot argument among the boot\n         options:x,f, ora.When\n         encountering thexcommand, the system polls the keyboard for a period\n         ofbootsleepseconds (the default is 3 seconds) for a user intervention.\n         If any key is pressed during this short period, the system defaults to a manual boot.Bootsleepcan be redefined in the D3 configuration file by adding the\n         statementbootsleep\u00a0n.The boot argument specified is a\n         string of commands if typed by the operator for a manual boot. When the command involves a\n         tape, the tape is assumed to be ready. Therefore, thec(for continue)\n         should not be included in the string.-bDisables the ABS protection mechanism for a particular process.This option is required when loading third party applications into boot ABS, or loading\n         patches.-DEnables the monitor debugger.On entry, the process enters\n         the monitor debugger. This option is ignored if the process started is a phantom or a\n         printer. Typeg, and then press Enter to start the process.-dcdonEnables DCD protocol handling.This is similar to thedcd oncommand at TCL, with the exception that this option does not\n         change any terminal characteristics. This option, along with theyoption,\n         allows lines at the logon prompts to log off and\/or restart after an interruption, such as\n         a power failure.-ddata.argStacks data for the process once it is activated. The data\n        argument specified is any string that contains displayable characters and commands prefixed\n        by a backslash.Note:The string is subjected to the normal shell parsing. Thus, the\n         backslash must be escaped, or the entire string must be enclosed in single quotation marks.\n         The data argument specified can be contained in a UNIX file by using the shell command\n         substitution mechanism. For example, using back quotation\n         marks:-d ~\u2018 cat \/usr\/lib\/pick\/logon~\u2018All line feeds in the\n         input string are converted to carriage returns. These commands include:\\fTurns echo off. The stacked data is not displayed.\\mWaits until the D3 virtual machine enters the multi-user mode.ThemaxusersTCL command should be included in theuser-coldstartmacro after all system and application initializations\n         are completed.\\nTurns echo on. The stacked data is displayed.\\rInserts a carriage return.When activating a process for the first time, the system\n         reads one character, then empties the type ahead buffer. Therefore, stacked data should\n         always start by the sequence\\r, followed by the real log on sequence.\\\\Inserts a backslash.-fRestarts the flusher process. If the flusher process is\n        incorrectly killed, this option can be used to restart the flusher.This option should\n         never be used if the flusher is already running.-icrlfIgnores the linefeed character\nwhen sent after a carriage return.-iniceSets the relative priority of the D3 process, compared to other\n        processes (D3 or not) running on the system.The legal nice values range from -20 to\n         +19. The value -20 returns the highest priority and +19, the lowest.-kKills all processes attached to the specified virtual machine.The user is prompted withAre you sure you want to kill d3? (y\/n=cr).If ayis not entered, then the kill attempt is aborted.\n         Otherwise the kill proceeds. A logoff should be attempted first, followed by a terminate\n         signal, which should send the process back to UNIX. If the terminate signal has no effect,\n         a kill is attempted, which removes the process.Warning:The-kcommand should be used only in extreme\n         situations. This is not the normal process to stop a virtual machine.-key nSpecifies the key value for the\nvirtual machine you are attempting to connect to. Use this form instead\nof specifying the configuration file.-lRetains the log on UNIX user-ID.This option logs the\n         process as the same UNIX user as the one used to log on to UNIX. This option overrides the\n         user definition contained in the configuration file. The user is isolated from the other D3\n         users. This option should be used only for users who want their own UNIX environment\n         underneath the D3 process or to perform a system configuration, which requires root access.-Llang.fileSpecifies an alternate language\nfile for boot-time messages and errors to be displayed in a different\nlanguage.-mRestarts the signal handler process.\nIf the signal handler process is incorrectly killed, this option can\nbe used to restart it.CAUTION:This option should never\nbe used if the signal handler is already running.-nconfig.fileSpecifies the name of the configuration\nfile. If not specified, the default file name is pick0 in the current\ndirectory or alternately in the \/usr\/lib\/pick directory.-phantom-scheduler-spoolerSpecifies that the port is to\nbe used as a phantom, or as a process not attached to a physical port.Note:These three options are reserved for use by D3 utilities.-port.numberStarts a user process.Expressed in decimal from 1 to the\n         maximum allowed number of users, this starts a D3 process on a specified port, when\n         necessary, to control the port on which process it is running. If the port is not\n         specified, the system allocates the first available port.-printerSpecifies that the port is to be used as a printer.This\n         option suppresses the messagesConnected to virtual machineandDisconnected from virtual machine, but does not suppress the normal D3\n         message processes, such as the D3 logon message.-qQuery command. Queries information about the specified virtual\n        machine, which can be executed by any process.If the virtual machine is started, then\n         the command returns exit code 0 to the shell. Otherwise a value of 1 is returned. This\n         tests the existence of the virtual machine from the shell.-qfDisplays information about the\nflushers.-qlQuery license command. Queries information about the licenses\n        for the specified virtual machine, which can be executed by any process.-qnLists all active nailed telnet\nand ODBC connections to D3. Results include the PIB, type, UNIX Process\nID and IP Address.-rResets the PIB.-sEnables silent mode.If used with the-0command, the D3 machine boots, and returns directly to UNIX.If used on a normal\n         line, output oflog onandlog offmessages and user\n         macros are suppressed, and any attempt to log off returns directly to UNIX.Because\n         output is suppressed, the-sflag must be used with the-dflag, followed by a string containing:User nameUser passwordMaster dictionaryMaster dictionary password (when applicable)This is so that the user is logged on to D3 automatically. The-sflag is used by the d3tcl UNIX shell script.-stepChanges thesystem-coldstartmacro from an n-type to an m-type so you can single-step the coldstart\nprocess.-t ttySpecifies which port is to become the terminal for the process.\n        The device is assumed to be on the \/dev special files directory.For AIX:If the port is not specified, the terminal is stdout or stdin, unless it\n         has been redirected.For Linux:Option is normally intended to be used only in the \/etc\/inittab file.\n        When this field is present, the system assumes the user process is started automatically,\n        and, behaves a bit differently when starting. It waits for line 0 to start if it is not\n        already started.-u \/ttelnet.port,server.host.nameStarts D3telnet on the specified telnet port, where the server\n        host name is specified.This option starts the D3 Telnet Server on the Telnet port\n         number specified and waits for the connection from a Client. The Client makes the\n         connection by using Telnet on the Server host and the same Telnet port.-wWaits for the device specified by the-toption to be created.This option instructs the D3 monitor that the device does not\n         exist yet, thus avoiding the \"no such file\" error. This is used in configurations where the\/dev\/entry is created dynamically by a UNIX daemon. The process\n         polls the specified device and waits until it is created as a pipe, block, or character\n         device. This option is ignored if the-toption is not specified as well.-ystty.argChanges the default port setting for the process.Thesttyargument specified is anysttycommand. If more\n         than one element is changed, they must be separated by spaces and the whole argument is\n         enclosed in quotation marks. (Refer to the examples.) When the process terminates, the port\n         characteristics are not reset to their original values.haforcecheckHost Authentication, Force Authentication Check option. Allows\n        controlling whether D3 prompts for logon credentials or whether D3 uses the client's\n        Operating System credentials for logging on.If this option is used, clients will be\n         prompted for their user-id and password when attempting to log on to D3. These credentials\n         are then passed down to the operating system for authentication. Any users item passwords\n         will now be ignored. Note that UNIX user-ids are case-sensitive.If this option is\n         not used, clients will not be prompted for such credentials and will be taken directly to\n         the md prompt. Note that doing an off behaves the same as an exit since the logon prompt\n         was bypassed during the initial log on.See theHost Authenticationtopic in\n         theSystem Administration Guidefor more information."
        ],
        "example":[
            "Example(s)",
            "Example 1",
            "This code starts the virtual machine pick0 (default).d3 -0",
            "Example 2",
            "This code starts the virtual machinemymachine.d3 -n mymachine -0",
            "Example 3",
            "This code starts a user process on the virtual machine pick0 (default), on the first available\n    port (default PIB ' ').d3",
            "Example 4",
            "This code starts a user process on the virtual machine pick0 (default), on port 5.d3 -5",
            "Example 5",
            "This code starts a user process on the virtual machinemymachine, on port 7.d3 -n mymachine -7",
            "Example 6",
            "This code displays information about the virtual machine pick0 (default name).d3 -q",
            "Example 7",
            "This code starts the virtual machine 0 on\/dev\/tty2. This statement is\n    typically included in the\/etc\/inittabfile.d3 -0 -t tty2",
            "Example 8",
            "This code starts a user process on\/dev\/tty6as a printer. It changes the\n    baud rate to9600and sets the parity toodd. This statement is normally included\n    in the\/etc\/inittabfile.d3 -3 -t tty6 -y \"9600 parenb -parodd\" -printer",
            "Example 9",
            "This code automatically boots the virtual machine, performs an ABS restore from device 3, and\n    then issues anxoption.d3 -a a3x",
            "Example 10",
            "This code starts a user process on the first available port, and then logs on asdmon the accountacct. The commandstermibm3151andmenuare then executed.Note:The\\rensures the process logged on properly the first time after a boot.d3 -d \u2019\\r\\mdm\\racct\\rterm ibm3151\\rmenu\\r\u2019",
            "Example 11",
            "The shell scriptboot.apuses the-qoption to test\n    whether the virtual machine is booted or not.If thed3\u00a0-qcommand returns a null exit code (ok),\n      then the virtual machine is already booted so that D3 TCL returns immediately.Ifokis not returned, the virtual machine is booted automatically.001 # Test if VM is active. else boot it\n 002 d3 -q > \/dev\/null\n 003 if [ $? ! -eq 0 ]\n 004 then\n 005 -a x\n 006 fi",
            "Example 12",
            "This code enters the D3 virtual machine, retaining the current UNIX user-ID (root, because ofsu).$su\n password:(enter \u2019root\u2019 password)\n $d3 -l",
            "Example 13",
            "This code starts a background D3 Telnet Server process, which connects to the default D3\n    virtual machine pick0 on PIB 7 and waits for connection from the Client. If the Server host name\n    is serverhost, a UNIX Client makes the connection by using the Telnet serverhost 2007 command in\n    a UNIX shell.$d3 -7 -u \/t2007,serverhost &",
            "Example 14",
            "This code returns the PIB, type, UNIX Process ID, and IP Address for all current nailed Telnet\n    and ODBC connections to D3.d3 -qn\/dev\/pts\/1: Connected to Virtual Machine 'pick0:AIX'.\n PIB       Type       On PID        IP_Address\n 16        1 1        3874852       172.16.250.68"
        ]
    },
    {
        "name":"d3tcl command (UNIX)",
        "Syntax":[
            "Syntax",
            " d3tcl\n d3tcl {d3tcl.command}\n d3tcl -boot {haforcecheck}\n"
        ],
        "description":[
            "Description",
            "The d3tcl command allows execution of the D3 TCL commands directly   from a UNIX shell.",
            "The d3tcl command is installed as a UNIX shell script during D3 installation. To function properly, the d3tcl command requires that the user set several shell environment variables appropriately:",
            "Several variants of the d3tcl command are available. The d3tcl command by itself pushes a D3 TCL shell above the current UNIX one. This is equivalent to the UNIX sh command. Logging off of D3 automatically returns to UNIX."
        ],
        "parameter":[
            "Parameter(s)",
            "{d3tcl.command}Executes a single D3 TCL command and returns to UNIX.Note:Thed3tclcommand logs on and off of D3 on every execution. Remember that\n         the UNIX shell must parse thed3tclcommand before sending it to D3, and\n         therefore, all special characters, including the parenthesis, must be escaped to avoid\n         errors.-bootBoots the D3 machine.When the boot is completed, D3 returns control to UNIX\n         rather than going to a D3 log on. This can be useful for shell scripts that are\n         automatically run when the UNIX machine is booted.haforcecheckHost Authentication, Force Authentication Check option.Allows controlling\n         whether D3 prompts for logon credentials or whether D3 uses the client's Operating System\n         credentials for logging on.If this option is used, clients will be prompted for\n         their user-id and password when attempting to log on to D3. These credentials are then\n         passed down to the operating system for authentication. Any users item passwords will now\n         be ignored. Note that UNIX user-ids are case-sensitive.If this option is not used,\n         clients will not be prompted for such credentials and will be taken directly to the md\n         prompt. Note that doing an off behaves the same as an exit since the logon prompt was\n         bypassed during the initial log on.See theHost Authenticationtopic in theSystem Administration Guidefor more information.",
            "Note:The monitor debugger is not available during boot if\nthe D3 machine is booted with thed3tclcommand."
        ],
        "example":[
            "Example(s)",
            "The sequence of the following commands set up the necessary environment variables, push a D3 TCL\n    shell, execute a fewd3tclcommands, and exit back to the UNIX shell.",
            "Example 1",
            "This example shows the input and output (bshorkshis\n    assumed to be the active UNIX shell).",
            "$ PICKUSER=\"dm\"; export PICKUSER\n $ PICKMD=\"dm\"; export PICKMD\n $ d3tcl\n :who\n 6 dm dm\n :time\n 08:14:12 25 Feb 2003 Tuesday\n :off\n $",
            "Example 2",
            "Thed3tclcommand can be easily incorporated into UNIX shell scripts. The\n    following example is a shell script called up, which invokes the D3 Update processor from a UNIX\n    shell:",
            "#shell script to run update processor\n exec d3tcl u $*",
            "This shell script should be typed into an editor, such as vi, and saved into the UNIX file\n    system. Then, it must have its permissions changed so that it is executable with achmod a+x upcommand. Finally, it must be placed in a directory that is\n    contained in all users\u2019$PATHvariables. The users might have to log off and\n    log on again to recognize the new command.",
            "To run the shell script, type:",
            "up bp date",
            "This invokes the Update processor on the date program in thebpfile. It can\n    be filed or run by pressing CTRL+XR. When finished, the Update processor returns back to the\n    UNIX shell.",
            "Example 3",
            "Thed3tclcommand also has the capability of transferring data from D3 to UNIX\n    via the pipe. This example places a partial listing of the D3bpfile into\n    the UNIX filebp.list:",
            "d3tcl list bp sampling 5 \\(hcnb | tr -d \"\\015\" > bp.list",
            "Notice that the(command must be preceded\nby a\\character, because the UNIX shell would otherwise\ninterpret the(as a special character. Also, notice\nthat the output must first be piped into thetrcommand, which strips off carriage returns. This is necessary because\nD3 outputs in raw mode.",
            "Example 4",
            "In this example, various UNIX shell capabilities are demonstrated.",
            "The first line puts the name of the first program in the bp file into the UNIX shell variablePROGRAM. Next, the variable is then executed usingexportso that the sub-shells can access it. Finally, the first program in the bp file is copied into\n    an item called backup and the results of the operation are stored in the UNIX log file.",
            "PROGRAM=\u2018d3tcl list bp sampling 1 \\(hcnb | tr -d \"\\015\"\u2018\n export PROGRAM\n echo \"backup\\r\" | d3tcl copy bp $PROGRAM \\(o | tr -d \"\\015\" > log",
            "If the\\ris left off of the input pipe,\nthe command terminates and returns to UNIX without doing anything.",
            "A different mode is used if the actual commands are piped into thed3tclprogram, shown as follows:",
            "$ echo \"select bp with a0 \\\"date]\\\"\\rcompile bp\\r\" | d3tcl\n :select bp with a0 \"date]\"\n [404] 2 items selected out of 279 items.\n :compile bp\n date\n ***************...\n [241] successful compile! 3 frames used.\n date.iconv\n ******\n [241] Successful compile! 1 frame(s) used.\n :",
            "This shows the input and output (bshorkshis assumed to\n    be the active UNIX shell).",
            "When commands are piped in as the only input to thed3tclstatement, D3\n    behaves exactly as if those commands were typed directly at the keyboard. All simulated input\n    and all output, including prompts, are sent to standard-out.",
            "Also, note that multiple commands can be passed to thed3tclprogram using\n    this mode and that select lists are preserved between each of those commands, provided they are\n    executed within a single execution of thed3tclprogram."
        ]
    },
    {
        "name":"d3WSListener command",
        "Syntax":[
            "Syntax",
            " d3WSListener -p <port> {-n <vm>}"
        ],
        "description":[
            "Description",
            "Support for connections from the D3 Workstation is enabled by using the    d3WSListener command ",
            "The D3 Workstation provides and manages terminal devices, serial printers, Windows printers,     and Telnet Clients.",
            "The d3WSListener command connects to the D3 Workstation settings via the D3     Device Manager to add, update, and remove the D3 Workstation ports, printers, Telnet Servers,     and mvServer endpoints.",
            "If you do not need to connect any of the listed Client types to the D3 Server using the     capabilities of the D3 Workstation, then you do not need to configure or start the D3     Workstation. The D3 Workstation is an additional method of connecting Clients to D3, and is     provided to support upgrades for mvBase customers.",
            "For complete information about the D3 Workstation, see the D3 Windows System      Administration Guide."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"env command",
        "Syntax":[
            "Syntax",
            "env\n"
        ],
        "description":[
            "The env command displays the UNIX environment variables."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"lppick command",
        "Syntax":[
            "Syntax",
            "lppick {-d} {-t level} {-s string} {-c command} {-l file.name} {-h string|file.name}\nlppick -v\nlppick -V\n"
        ],
        "description":[
            "Description",
            "The lppick command filters between the output of a D3 printer and the UNIX spooler to implement shared printers. This command is called automatically by the TCL startshp command.",
            "The continuous data stream coming out of the D3 printer process is cut into separate UNIX jobs. To cut the process, the data stream is scanned to find an \"End of Job\" string. Once a job has been identified, a UNIX utility (typically lp) is invoked to process the data."
        ],
        "parameter":[
            "Parameter(s)",
            "-dDebugs\u2014Information displays while data is processed. This\noption should be used only to diagnose problems. Thevoption of thestartshpcommand sets this flag.-sstringSpecifies the end-of-job sequence. The default is a one character\nstring x'04'. It is strongly advised to specify an alternate end-of-job\nsequence. Characters that cannot be printed are specified in octal,\nprefixed by a backslash.-ccommandSpecifies the UNIX command to use to spool data. This command\nmust be able to accept data on its standard input. The default islp.-lfile.nameCreates a UNIX file name when the filter is activated. The\nfile contains the PID of the filter, the strings\"command\"and\"string\", separated by an attribute mark. Thestartshpcommand uses this option so that the TCL commandshp-statuscan keep track of the shared printers.-hstring|file.nameSpecifies the text to print at the top of a print job. The\nspecified text can be explicitly typed (string)\nor can be the text in a UNIX file (referenced by thefile.name). File names must be preceded by a period (.) for\nrelative paths or by a forward slash (\/) for absolute\npaths.-tlevelActivates tracing on the printer activity. The level is an\ninteger from 1 to 3 specifying the level of tracing.Note:The-toption requires the-loption.-vDisplays the version of thelppickcommand\nas:lppick: Version X.Y-VDisplays the version of thelppickcommand\nin short form, for exampleX.Y, for use in shells\nor FlashBASIC utilities."
        ],
        "example":[
            "Example(s)",
            "lppick -s \"End of Job\\377\" -c \"lp -s -onobanner\"",
            "Starts the filter with an end-of-job sequence equal to:",
            "End of Job_",
            "where the underscore denotes a segment mark. The data\nis passed to the UNIX spooler suppressing all messages (-s) and the banner (-onobanner)."
        ]
    },
    {
        "name":"perrpt command",
        "Syntax":[
            "Syntax",
            "perrpt {-e {code}} {-h} {-f file.name} {-p pib} [-a|-k key|-x key|-c|-s]\n"
        ],
        "description":[
            "The perrpt command displays, clears, restarts or suppresses the D3 error log maintained on UNIX. The system automatically logs every boot, shut down, and incident or abnormal procedure related to a D3 virtual machine."
        ],
        "parameter":[
            "Parameter(s)",
            "Options are specified by these\nflags:",
            "-e {code}Displays errors only. Boots and shut downs are not displayed.\nIf the code is specified, only the log entries with this error code\nare displayed.-hDisplays only the header of the log entries in short form.\nThe information below displays:Virtual machine keyMonitor versionError codeError descriptionPort number (PIB)-ffile.nameUses the file name as the log file instead of the default.-ppibDisplays all entries logged by the D3 port PIB, expressed\nin decimal.-aDisplays logs for all virtual machines.-kkeyDisplays error log for the virtual machine specified by the\nkey. The virtual machine key is specified using the standard C syntax:\n0xNNNN for a hexadecimal number, NNNN for a decimal number, and 0NNNN\nfor an octal number.-xkeyDisplays error log for all virtual machines except the one\nspecified by the key. The virtual machine key is specified using the\nstandard C syntax: 0xNNNN for a hexadecimal number, NNNN for a decimal\nnumber, and 0NNNN for an octal number.-cClears the error log and restarts the error logging. Requires\ntherootprivilege.-sClears the error log and stops the logging process. Requires\ntherootprivilege. After this command is issued, no error\nlogging takes place. Error logging is restarted by using the-cflag. The trace is reactivated automatically every\ntime D3 is installed or reinstalled on the system.",
            "The log is kept in the file\/usr\/tmp\/ap.log. Each log entry has the UNIX time and date of the incident, the\nkey in hexadecimal of the D3 virtual machine, an error code, the process\nport (PIB) number of the process that logged the error (not necessarily\nthe process that had a problem), and the optional information in the\nform of a hexadecimal dump. The table below describes each error and\nthe syntax of the additional data:",
            "1Boot.2Shut down.3Line 0 or the flusher received\naSIGTERM. When the flusher receives this signal,\nit shuts the virtual machine down. There should be two shut entries\nwhen the system is shut down properly (that is, there is a log entry\nfor a shut down). If not, the system was shut down abnormally.4Process killed. When a D3 process\ndoes not respond, logoff escalates and sends a signal SIGKILL to the\nD3 process. The additional information is (in hexadecimal):<pib+1 of killed process> <pib+1 of killer>5Process abort. When a process\nreceives a serious abort signal (for example, SIGSEGV, SIGBUS, SIGTRAP,\nand so on), the machine registers are dumped in the additional data\n(in a format implementation dependent).6Security failure. Wrong activation\ncode.7<reserved>8Tape error. The additional information\ncontains:<cmd> <devnum> <errno>where<cmd>0 Read1 Write<devnum>Tape device number in hexadecimal.<errno>UNIX error code in hexadecimal.9Tape buffer allocation failed.\nThe internal tape buffer is allocated dynamically. If this fails because\nUNIX is temporary out of memory, theset-devicecommand may appear to hang.10Keyboard read error. A process\nattempted to read from stdin (normally a keyboard) and received an\nerror. The process is disconnected. The additional information is\n(in hexadecimal):<pib> <errno>11Terminal write error. A process\nattempted to write to stdout (normally to a terminal) and received\nan error. The additional information is (in hexadecimal):<pib> <errno>"
        ],
        "example":[
            "Example(s)",
            "Displays an all errors log, stopping\nat each page.",
            "perrpt -a | pg",
            "Displays only errors relative to the virtual machine with\nthe key0x29733(hexadecimal), and pipes the result\nto the UNIX spooler.",
            "perrpt -e -k 0x29733 | lp",
            "Clears the error log, but leaves it active (or restarts\nit if it was stopped).",
            "perrpt -c",
            "Stops error logging.",
            "perrpt -s",
            "Displays all entries with an error code=4 in short form:",
            "perrpt -e 4 -h",
            "Saves the current error log in the file usr\/tmp\/ap.log.monday\nand lists it.",
            "mv\/usr\/tmp\/ap.log\/usr\/tmp\/ap.log.monday\nperrpt -a -f \/usr\/tmp\/ap.log.monday"
        ]
    },
    {
        "name":"pick command",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"UNIX files",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"ap.core file",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"ap.log file",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"pick0 file",
        "Syntax":"",
        "description":[

        ],
        "parameter":[
            "Parameter(s)",
            "heading section (# commented)Displays the copyright and the\nlast date and time of creation\/modification of the configuration file.nameOSvm.nameName of the D3 virtual machine.\nIf the virtual machine exists, its configuration file is read and\ndisplayed. The default name is pick0.OSis your\noperating system.niceprioritySigned value adjusts the relative\nscheduling priority of the D3 process compared with other regular\nUNIX processes. A negative value returns a higher priority. A positive\nvalue returns a lower priority. Legal values are -19 (highest priority)\nto +20 (lowest priority). The default value is 0.corememory keyVirtual machine memory usage\nand key.Thememoryparameter is the amount of shared\nmemory (in Kilobytes) the D3 process allocates for itself while the\nvirtual machine is running. Low values may result in poor performance\nof the D3 process due to swapping. High values can result in poor\nperformance of other UNIX processes due to inadequate remaining memory.\nThe core parameter should be reduced when running FlashBASIC applications\non a system. To determine an appropriate size, boot the system, bring\nup all users in FlashBASIC, and run thebufferscommand with the(sloptions. The default\nvalues are 37.5% of the total memory for AIX and 12% of total memory\nfor Linux.Note:To get an estimate of the core size required for reasonable\nperformance, take the reference number (not the percentage, but the\nlarger number before it), multiply it by the frame size, and then\ndivide by 8192. Shut down the D3 virtual machine, reset the parameter,\nand then reboot.Thekeyparameter is the virtual machine\nkey. This number, in hexadecimal, is a unique identifier for this\nparticular D3 virtual machine. Each virtual machine must have its\nown unique identifier. Therefore, if several D3 virtual machines are\nrunning on the system, this identifier must be changed for each one.\nDepending on the platform and the amount of memory defined to the\nvirtual machine, multiple memory segments will be created for the\nvirtual machine, each segment having a unique sequential key. Due\nto this fact, care should be taken when setting the key for multiple\nvirtual machines with enough separation between the different virtual\nmachine keys to ensure the memory segments do not overlap. The default\nvalue is 10.Warning:Changing the virtual machine key value on\na live system may cause a loss of access to the D3 Virtual Machine.npibsnNumber of PIBS or ports. This\nnumber should be at least equal to the number of users the system\nis licensed for, plus the expected number of printers. It is a safe\npractice to allocate more ports than necessary because it simplifies\nupgrade procedures when the number of licensed users has to be increased.\nThe only negative side effect for declaring more ports than are actually\nused is that it takes one frame per port on disk. For example, on\na 64-licensed-user system, reserving 128 portswastes64 frames\non disk, which is negligible. The default is 512.nphtsnNumber of phantom ports expected\nto be used. There should be at least two phantoms. To determine the\nnumber of phantoms required, add one-eighth of the number of licensed\nusers. A minimum of eight phantoms is sufficient for most needs. The\ndefault is 64.hostauthentication onHost Authentication. Adding this keyword\/value pair to the\n        pick0 configuration file enables Host Authentication. If enabled, clients will be logged\n        into D3 using their operating system user-id and password. You can override this option and\n        force D3 to prompt for logon credentials by using thehaforcecheckcommand\n        line option from D3 (seed3 commandfor more information).See the Host Authentication topic in theSystem Administration Guidefor more information on host authentication.basicshared.memOptional parameter that sets\naside additional shared memory to contain the shared BASIC code produced\nby FlashBASIC. The size of this segment should be equal to or greater\nthan the size of all FlashBASIC objects that are expected to be active\nat one time. That is, it should be large enough to contain all of\nthe FlashBASIC code most commonly used by the application. This amount\nis some fraction of the total disk space required for FlashBASIC object.\nFailure to set this parameter sufficiently high can result in extremely\npoor performance and a large increase in required UNIX swap space.\nThe usage of this segment can be monitored using the TCL commandshpstat. If this field is empty, the code produced by the\nFlashBASIC compiler is not shared. The minimum recommended size for\nthis parameter is 1024 (1\u00a0MB), but some FlashBASIC applications\nmay require somewhere between 10240 to\u00a015360 (10-15\u00a0MB).\nIf you are upgrading your system from a release without FlashBASIC\nto a release with FlashBASIC, this parameter may have a value of 0.\nBe sure to manually update this value before using FlashBASIC on the\nnew release. The default values are:For AIX:12.5% of the total memory.For Linux:75% of the available memory minus BASIC memory.brkchrhex.characterBreak character redefines a character\nto simulate a BREAK key for use with devices that do not have a BREAK\nkey, like some graphics terminals. The value is the hexadecimal value\nof the character. To disable the BREAK key completely, typeff.For AIX:Default value is 00, which is the CTRL+@ or BREAK key.For Linux:Default value is 0x00, which is the BREAK key.escchrhex.characterHexadecimal value of the character\ndefined to push a level. To disable the escape (push level) function,\nbut not the ESC key as a normal character, typeff. The default value is 0x1b, which is the ESC key.absbasefidBase FID of the boot ABS. The\ndefault is 24. (x18)Warning:Changing this value on alivesystem causes data corruption.abssizehex.sizeHexadecimal value of the size\n(in frames) of the boot ABS. The value varies with the release.Warning:Changing this value on alivesystem\ncauses data corruption.abslock on|offLock the ABS into memory. Turning\nthis option off saves about 2 MB in memory, but performance loss is\nsignificant, so this option should always be on. This option creates\na shared memory segment for the ABS and all processes are attach to\nit with read-only permissions. This keeps the ABS area from becoming\ncorrupted. To disable this feature, use theabsprotectcommand in this configuration file or use the-boption to the executable on the command line.For AIX:Option should always beonsince it has (at\nleast) 8 MB of physical memory.For Linux:Option should always beon.ShareTheABSvm.id(Optional)Virtual machine\nidentifier of the ABS to share.This configuration option allows\nmultiple virtual machines to share the same copy of the ABS. Since\neach copy of the ABS can be several megabytes, significant memory\nsavings can be achieved on systems with several virtual machines.Warning:It is critical that each virtual machine pointing\nto a specific ABS be running the exact same version of D3 and be on\nthe same patch level. This option should be commented out, and the\nvirtual machinemustbe rebooted when you upgrade the ABS in\nany way. Once all virtual machines are back to the same patch level,\nthis option can be reinstated.CAUTION:If you are\nunsure about how and when to use this option, do not use it. If you\nonly have one D3 virtual machine on your system, ignore this option.blkfidnBlocking factor for the frames\n(frame size) in the UNIX read\/write queue.Warning:Changing\nthis value on alivesystem causes data corruption.bootsleepnSpecifies the number of seconds\nto wait on autoboot.flushnFlush wait period is the number\nof seconds it takes before the system begins to flush memory back\nto disk. The smaller the number, the more frequent the flushes take\nplace and the higher the number of disk writes that occur. A value\nof -1 indicates that the wait period is infinite (flushing is not\ncomplete). A value of 10 to 20 seconds should be adequate for most\nsystems. A value of 30 seconds should be considered the maximum. The\ndefault value is 10.flushersnSpecifies the number of flusher\nprocesses to start for writing memory to disk wherenis between 1 and 63.dbresumetimenSpecifies the number of seconds\nto wait to resume disk writes (when indatabase-pause commandmode) should a memory full condition occur wherenis the number of seconds.dwqnumqueue.sizeDefines the size (in bytes) of\nthe internal write queue. Increasing this queue reduces the probability\nof awakening the flusher on critical demand, thus reducing the number\nof flushes. The drawback to increasing the write queue size is that\nthe flusher works in bursts, which can overload the disk I\/O channel\nwhen this phenomenon occurs. The default is 256.crangebeg.port end.portUse thecrangeoption to specify a range of ports (wherebeg.portis the beginning port number andend.portis\nthe ending port number) for use by any connections made to D3 via\nthe C interface (the _CP_library). This range includes connections\nmade using the ODBC Server (SQL and ODBC class library connections).Note:It is the system administrator\u2019s responsibility to ensure that no\nother D3 processes are started in the specified range. D3 does not\nprevent processes with specified port numbers from starting in a set\nrange. For example, either:d3 56oral:2:respawn:d3 -n pick0 56 - tty2would start a D3 process on port 56, if available, even\nif port 56 is included in a set range.Ranges do not restrict\nthe number of processes of a specified type to the number of ports\nincluded in a range. For example, if you use the command:crange 51 100ODBC processes would start at 51 and continue using ports\nup to 100, a total of 50 ports. If the 51st ODBC process was started,\nit would start at the first available D3 port, starting at port 1.clocal on|offTurns on or off the clocal UNIX\nstty setting. If set toon, hardware handshaking\nis enabled. If set tooff, hardware handshaking is\ndisabled.serialrangebeg.port end.portUseserialrangeto specify a range of ports (wherebeg.portis\nthe beginning port number andend.portis the ending\nport number) to be used by floating serial or Telnet connections.\nThese connections are any made to D3 via a UNIX logon, that do not\ninclude a D3 port number.Note:It is the system administrator\u2019s responsibility\nto ensure that no other D3 processes are started in the specified\nrange. D3 does not prevent processes with specified port numbers from\nstarting in a set range. For example, either:d3 56oral:2:respawn:d3 -n pick0 56 - tty2would start a D3 process on port 56, if available, even\nif port 56 is included in a set range.Ranges do not restrict\nthe number of processes of a specified type to the number of ports\nincluded in a range.rawdisk on|offSpecifies whether update protection\nis turned on (default)or off.CAUTION:This feature should\nonly be turned off if the user is fully aware of the consequences\nof such an action.onhaltUNIX.command.nameExecutes the specified UNIX command\nor script upon shutdown of the virtual machine.telnetrangebeg.port end.portUsetelnetrangeto specify a range of ports (wherebeg.portis\nthe beginning port number andend.portis the ending\nport number) to be used by a Telnet turnkey connection that does not\nspecify a D3 port number.Note:It is the system administrator\u2019s responsibility\nto ensure that no other D3 processes are started in the specified\nrange. D3 does not prevent processes with specified port numbers from\nstarting in a set range. For example, either:d3 56oral:2:respawn:d3 -n pick0 56 - tty2would start a D3 process on port 56, if available, even\nif port 56 is included in a set range.Ranges do not restrict\nthe number of processes of a specified type to the number of ports\nincluded in a range.userusernameChanges the effective user for\nthe D3 Virtual Machine. This is used for changing permissions.groupsgroupname...groupnameSpecifies the groups that are\nallowed access to the D3 Virtual Machine. A user must be a member\nof one or more groups to have access to the D3 Virtual Machine. This\nis used for granting or denying access to the D3 Virtual Machine.diskpath offset sizeDisk statements define the D3 file system for the virtual\n        machine.The path parameter specifies the UNIX file path of the virtual disk.The offset parameter specifies the offset in virtual disk (usually 0).The size parameter specifies the size of the virtual disk up to 2 terabytes. The\n          specified size must be a multiple of 4. The installation procedure automatically rounds\n          down to a multiple of 4.For maximum performance, place these divisions on different disk drives and on a\n        different disk than the UNIX swap area (diskstriping).Warning:Changing the order of the disk statements on alivefile\n         system causes data corruption. If you want to increase the file system size by adding disk\n         statements, append the additional disk statements to the end of the list.The\n        following example illustrates disk statements for disc 0 and disc 1:disk \/dev\/rdsk\/prod1 0 1222752 # disk 0\ndisk \/dev\/rdsk\/prod2 0 1600000 # disk 1tapepath block.size type densityTape statements define the tape devices available for use by\n        the D3 virtual machine. See theTape devicessection for more information."
        ],
        "example":[

        ]
    },
    {
        "name":"UNIX signals",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Signal usage",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Signal description",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"D3 signal system call",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "These examples use the signals\nin a D3 application and cooperate with UNIX applications. All examples\nrequire writing a c signal handler, which must be linked with the\nD3 monitor, as described in this document."
        ]
    },
    {
        "name":"Synchronizing two D3 processes",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"vi Quick Reference",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Insert mode",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"command mode",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Update processor",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Update processor overview",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Using the Update processor as a text editor",
        "Syntax":[
            "Syntax",
            "update {only} file.reference {item.list} {modifiers} {(options)}\n"
        ],
        "description":[
            "If no attribute list is specified, the Update processor functions as a text editor. The text edit form requires specifying only the file name and item list (no attribute list). If no macro is present on the file-defining item, the raw item is presented."
        ],
        "parameter":[
            "Parameter(s)",
            "onlyThe only modifier permits editing\ntherawitems, without using any of the inherent attribute-defining\nitems.When a file does not contain default attribute-defining\nitems, the only mode is automatically implied.modifiersThe modifiers below are available:id-promptTheid-promptcauses the Update processor\nto include the item-ID attribute on the data entry screen.The\nitem-ID option prompt displays as the first attribute on the screen,\nfollowed by all other defined attributes. If the item-ID is not explicitly\nrequested, it does not display in the update screen. The item-ID prompt\ncan be used on the macro attribute of the file-defining item (seemacro attribute).Theioption is a synonym forid-prompt.optionsThe options below are available:cClears the screen after filing of an item and before displaying\nthe next item.iDisplays the item-ID of the file being updated in the Update\nprocessor data entry screen. The item-ID displays as the first attribute\non the screen, followed by all other defined attributes. If the item-ID\nis not explicitly requested, it does not display on the update screen.Theioption can be used on the macro attribute\nof the file-defining item (seemacro attribute). If theioption is used on the output-macro\nattribute of the file-defining item, the item is suppressed on output\nlistings.Theid-promptmodifier is a synonym\nfor theioption.lAllows data to be viewed only. Items can not be filed, updated,\nor deleted.rEdits raw text. This causes control characters to display\nas periods, escape characters to display as [ (left brackets), and\nsubvalue marks to display as \\ (backslashes).sTurns the spelling checker off for the duration of the Update\nprocessor session."
        ],
        "example":[

        ]
    },
    {
        "name":"Using the Update processor as a data processor",
        "Syntax":[
            "Syntax",
            "update file.reference item-ID attribute.list{modifiers} (options\n"
        ],
        "description":[
            "Description",
            "The Update processor can be used as a data processor.",
            "When the Update processor is called with an attribute list it functions as a data processor. Each attribute name in the Update processor statement becomes a data entry location on the screen identified by the named attribute. Attribute names are listed on the left side of the screen and displayed in half-intensity. Dependent attribute names are displayed horizontally across the screen with the controlling attribute. Each attribute-defining item creates a cell on the screen through which data may be accessed and modified under the control of dictionary processing codes. Since a FlashBASIC program may be called using a processing code, complete application flexibility is provided.",
            "The cursor can be moved from attribute name to attribute name. Data entered or changed next to an attribute name is filed in that attribute when the edited item is saved.",
            "Stored data is subject to output conversions defined in attribute-defining items in the file dictionary prior to display. Data entered using the Update processor is subject to input conversions defined prior to storage on disk. By invoking a single Update processor command, an entire data access and update screen can be defined. When that command is saved as a macro, it can be recalled any time for file access. The Update processor can be used to scan data using file indexes. When attributes are indexed using the create-index command, the Update processor can be used to cruise on the index."
        ],
        "parameter":[
            "Parameter(s)",
            "modifiersThe modifiers below are available:data-entryThedata-entrymodifier allows repetitive\nentry of new items.Using this connective precludes the need to\nfile an item using CTRL+XF. After the last value on the screen has\nbeen entered, pressing ENTER files the item and opens a new item.id-promptTheid-promptcauses the Update processor\nto include the item-ID attribute on the data entry screen.The\nitem-ID option prompt displays as the first attribute on the screen,\nfollowed by all other defined attributes. If the item-ID is not explicitly\nrequested, it does not display in the update screen. The item-ID prompt\ncan be used on the macro attribute of the file-defining item (seemacro attribute).Theioption is a synonym forid-prompt.optionsThe options below are available:cClears the screen after filing of an item and before displaying\nthe next item.iDisplays the item-ID of the file being updated in the Update\nprocessor data entry screen. The item-ID displays as the first attribute\non the screen, followed by all other defined attributes. If the item-ID\nis not explicitly requested, it does not display on the update screen.Theioption can be used on the macro attribute\nof the file-defining item (seemacro attribute). If theioption is used on the output-macro attribute\nof the file-defining item, the item is suppressed on output listings.Theid-promptmodifier is a synonym for theioption.lAllows data to be viewed only. Items can not be filed, updated,\nor deleted.rEdits raw text. This causes control characters to display\nas periods, escape characters to display as [ (left brackets), and\nsubvalue marks to display as \\ (backslashes).sTurns the spelling checker off for the duration of the Update\nprocessor session."
        ],
        "example":[

        ]
    },
    {
        "name":"macro attribute",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "The following example of an attribute-defining\nitem shows the default attributes to be used by the Update processor\nwhen zooming to another file.",
            "ud filename vendordictionary-code a\nmodulo 1\nstructure\nretrieval-lock\nupdate-lock\noutput-conversion\ncorrelative\nattribute-type l\ninput-conversion ivendor;a1\nmacro vendor.name vendor.address vendor.zip (i\noutput-macro\noutput-conversion\ndescription",
            "If CTRL+G is pressed when in data entry mode on the vendor\nattribute of the specified file name, the Update processor zooms to\nthe vendor file and displays the attributes vendor.name, vendor.address,\nand vendor.zip.",
            "Theioption displays the item-ID\nof the file along with the specified attributes.",
            "If no attribute-defining\nitems are defined, when CTRL+G is pressed, the Update processor uses\nthe attributes defined on the macro attribute in the file-defining\nitem of the vendor file.",
            "From TCL the item-ID displays in the\nupdate screen:",
            "u entity name address zip (i",
            "From the output-macro on file-defining item the item-ID\ndoes not display on output reports.",
            "output-macro definition = name address zip (i\nlist entity",
            "This produces a listing ofnameaddresszipwithnoitem-IDs."
        ]
    },
    {
        "name":"Processing codes (Update processor)",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Overtype and insert commands",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Cursor movement commands",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Screen display commands",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Cruising and zooming commands",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Text editing and searching commands",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "Search for joe's bar, then repeat\nsearch.",
            "CTRL+Asearch for:joe's bar<Enter>CTRL+A",
            "Search and replace all occurrences of joe's bar with sam's\npub.",
            "CTRL+Asearch for:joe's bar CTRL+Rreplace with:sam's pubCTRL+N",
            "Search for and delete all occurrences of joe's bar from\ncurrent position of the cursor to the end of the item.",
            "CTRL+Asearch for:joe's bar CTRL+Rreplace with:CTRL+N"
        ]
    },
    {
        "name":"Spell checking commands",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Prestore commands",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Hot key commands",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "In this example, when the operator\nenters CTRL+X1 from the attribute test, the subroutines list.states\nand list.country are executed. After list.country completes, control\nreturns to the Update processor and remains in the item test.",
            ":ud filename testdictionary-code a\nattribute-count 5\nsubstitute-header\nstructure\noutput-conversion\ncorrelative\nattribute-type l\ncolumn-width 20\ninput-conversion\nmacro\noutput-macro\ndescription\nhotkey.all\nhotkey1 call list.states\ncall list.country\nhotkey2\nhotkey3\nhotkey4\nhotkey5\nhotkey6\nhotkey7\nhotkey8\nhotkey9\nhotkey0"
        ]
    },
    {
        "name":"Filing and exiting commands",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Accumath",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Rules and definitions",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"BASIC subroutines",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Assembler subroutines",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"String arithmetic functions",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Examples",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Glossary",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"ABS",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"ACCESS (AQL)",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Account",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"ACID",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Active list",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"ADI",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Alias",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"AMC",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"ASCII",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Assembler",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Assembly language, Pick",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Assembly languages",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Atomic operation",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Attribute",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Attribute mark",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"B-tree",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Backward link zero",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "Pressing CTRL+P at the=(equal sign) displays the link fields for the previous\nframe 740219 and typing CTRL+N displays the link fields for the next\nframe 740221.",
            "debug\nI ut.go.debug:07E\n! l740221\n!l740220 740220 0 : 740221 740219 : 0 ="
        ]
    },
    {
        "name":"BASIC (glossary)",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Binary files (glossary)",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Blocked I\/O",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"BLZ",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Branching",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"CCB",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"CDS",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Clipboard",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Command",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Conversion",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Correlative",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"CRT",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Cruising",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"CTRL key",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Cursor control block",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"D-pointer",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Delimiter",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Dialer",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Dictionaries",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Dirty bits",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"dm",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Domain",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Double-space",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"EBCDIC",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Element, data",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Entity",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Expression",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"External format",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"FCB",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"FDI",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"FID",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"File",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"File control block",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"File inconsistency",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"File inconsistency handler",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"File lock codes",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "In this example, a company has\nfour departments; finance, admin, mis, and ops. Each department is\nmaintained in a separate master dictionary. Users remain attached\nto a specific master dictionary, but must be prevented from using\nQ-pointers or path names to access files on any other master dictionary.",
            "The locks as they display in the system-level D-pointers and the\nuser definitions in the mds file:",
            "ID:finance.mstradmin.mstrmis.mstrops.mstr001dddd00267889786554450002300700311271311004005financeadminmisops006financeadminmisops007008009111101010101010",
            "A few of the users and their lock keys.",
            "user:tomsglendajsamacarlakgandalf006(keys)adminfinancemisopsadmin]mis]ops",
            "Every user is restricted to those files found on the local\nmaster dictionary except for gandalf. He can access files on 3 of\nthe four master dictionaries.",
            "The next example illustrates setting\nupdate and retrieval locks for two files on the admin account. The\nfiles are called, payroll and reviews. A new category of supervisor\nis added. The supervisor files are only accessible by users with this\nkey, regardless of the host master dictionary.",
            "On the admin\naccount, these pointers define the dictionaries of the files:",
            "ID:payrollreviews001dd002566783445670032313004005supervisorsupervisor006supervisorsupervisor007008009110101010",
            "gandalf is now a supervisor:",
            "user:gandalf006(keys)admin]mis]ops]supervisor",
            "Now, gandalf can retrieve payroll and reviews but toms\nis still restricted."
        ]
    },
    {
        "name":"File name",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"File reference",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"File System interface",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"File-defining items",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"FlashBASIC",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Flusher",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Font",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Frame",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Full duplex",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Full restore",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Group",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Half duplex",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Hangup",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "Hangup Signal Usage",
            "A global\nflag in a named common is used to indicate a hangup occurred, so that\nthe main application can exit a menu in case of hangup, to abort a\ncommand for example. A second global flag display menu is used to\ntell the signal handler that the user was sitting at a menu when the\nmodem hung up, and that the signal handler should redisplay the menu\nbefore terminating.",
            "* Global flag\ncommon \/SYSTEM\/hangup,display.menu\n* Tell we did not hang up\nhangup=0\nloop\n   * Tell we want to redisplay the menu\n   display.menu=1\n   * Display menu\n   call set.menu\n   * Get command\n   input command\n   * Tell we are done with the menu\n   display.menu=0\n   * Do the desired command\n   begin case\n   ...\n   end case\n   * See if hung up during processing\n   if hangup then\n      * Process some more the hangup\n      ...\n      * Tell we are done with it\n      hangup=0\n   end\nrepeat",
            "Signal Handler",
            "The signal handler sets the global\nflag hangup in the named common, waits for the carrier to come back.\nIf the user was in the menu, the handler redisplays it after the reconnection.",
            "* Global flag\ncommon \/SYSTEM\/hangup,display.menu\n* Tell we are hungup\nhangup=1\n* Ignore further hangups\nexecute \"dcd-off\"\n* Do some application specific cleanup\n* (abort current commands, and so on)\n...\n* IF on a network, the handler MUST exit\n* chain \"exit\" ;* Network only\n* Wait for the connection to come back\n* An INPUT with a time out of zero ensures\n* that the input returns as soon as the\n* connection is re-established, without\n* requiring that the user actually types in\n* something.\ninput dummy for 0 then null\n* Connection is back. See if we need\n* to redisplay a menu\nif display.menu then\n   * We can show the menu again\n   call set.menu\n   display.menu=0\nend\n* End of hangup.\n* Note we must capture the result to avoid\n* disturbing the screen\nexecute \"dcd-on\" capturing dummy\n* The hangup handler terminates\n* The application continues\nstop"
        ]
    },
    {
        "name":"Hashing",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Header files",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Hot Backup",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Hung port",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Incremental restore",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Incremental save",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Installation",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Internal format",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Item",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Item-ID",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Language definition",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Levels",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Linked overflow",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Locking scheme",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "The following program shows how\nthe FlashBASIClockedclause can be used. It shows\nhow to display the file name, port number, and user that has the file\nlocked:",
            "prompt \"\";item=\"\"\nopen \u2019\u2019,\u2019filename\u2019 to f.filename else stop\nopen \u2019\u2019,\u2019users\u2019 to f.users else stop\nreadu item from f.filename,ID locked\n   execute \"who \":port capturing var\n   user.id = field(var,\" \",2)\n   readv name from f.users,user.id,1 else stop\n   print \"Filename file is locked by port \":port:\" \":name\n   loop until port = 0 do\n      sleep 5\n      readu item from f.filename,ID locked else null\n      port=system(0)\n   repeat\nend else stop 202,ID\nrelease\nend"
        ]
    },
    {
        "name":"Locks",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Logon",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "An example of an alternate mdprompt\nis as follows:",
            "Enter Master Dictionary Please >>+"
        ]
    },
    {
        "name":"Macros",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Master dictionary",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Maxfid",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Menus",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Metacharacters",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Modulo",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Name service",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Network save\/restore",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Open Systems File interface",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"OSFI",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Overflow table",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Passwords",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Performance monitoring",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "This takes one sample of the\nnonsystem statistics.",
            "buffers",
            "Loops and displays all counters, recording history and\nsampling every 300 seconds (5mn). The log file data level corresponding\nto today is cleared, thus starting a new session.",
            "buffers (SH300C",
            "When looping, buffers polls the keyboard to detect the\nkey X to stop or R to redraw the screen if it has been disturbed by\na message, for instance. Any other key forcesbuffersto take another sample."
        ]
    },
    {
        "name":"Phantom process",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"PIB",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"PIB status",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Pick remote files",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"PID",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Pointer item",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Port",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Port number",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Primary file space",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Primary list",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Prompt",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Prompt characters",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[
            "Example(s)",
            ":::At TCL level 3>>At TCL level 2 with an active list"
        ]
    },
    {
        "name":"Pseudo tape",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Q-pointer",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"QS-pointer",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "The following QS-pointer causes\nthefile-saveto save all accessible files (not\nincluding subdirectories) in the UNIX \/u\/john directory. Note that\nthe UNIX permissions of the D3 user must be sufficient to access the\ndata on that UNIX directory.",
            "001 QS\n002\n003 unix:\/u\/john",
            "The following QS-pointer causes the remote D3 file pa,bp,\non the host prod to be saved on the local file save.",
            "001 QS\n002\n003 prod:pa,bp,"
        ]
    },
    {
        "name":"Restore",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Restricted system access",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Retrieval and update locks",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "At TCL, message [210] above displays\nif payroll is access protected.",
            "list payroll\n[210] File \u2019payroll\u2019 is access protected.",
            "If a file called payroll has an access retrieval lock\nthat does not match the lock codes (keys) for the current user, the\nstatement aborts the program with message [210].",
            "file payroll\n[210] in program \u2019enter-payroll\u2019, File \u2019payroll\u2019 is access protected.",
            "If the file is access protected, the else clause is taken\nand message [201] displays.",
            "open \u2019payroll\u2019 to payroll.file else stop 201,\u2019payroll\u2019\n[201] \u2019payroll\u2019 is not a file name."
        ]
    },
    {
        "name":"Scrubber",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Secondary list",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "The following commands compare\ntwo files containing FlashBASIC program source with the ids for the\nBP file coming from the primary list and the ids used for the second\nfile from the secondary list.",
            "sselect bp by mod.date\n[404] 75 items selected out of 75 items.\nsselect old.bp with mod.date (s\n[404] 75 items selected out of 75 items.\ncompare bp\nwith: (oldbp",
            "This program copies items in the entity file to a work\nfile using the item-IDs kept in the list, targets.",
            "sselect entity by zip\n[404] 1600 items selected out of 1600 items.\ngl targets (s\n[404] 1600 items selected.\ncopy entity\nto: (work"
        ]
    },
    {
        "name":"Security",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Segment mark",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Selection processor",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"seq",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Software change request",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Start buffer mark",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Subvalue",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Subvalue mark",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Super Q-pointer",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Synonym-defining items",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "This points to the cust file\nin the production account.",
            "cust\n     001 q\n     002 production\n     003 cust",
            "This points to the history data section of the cust file\nin the production account.",
            "ch\n     001 q\n     002 production\n     003 cust,history",
            "This points to the prod file in the production account,\nif it exists, otherwise it points to the master dictionary level file\nin the production account.",
            "prod\n     001 q\n     002 production",
            "This points to the customer-file in the current account.\nNote that attribute 2 is null, which indicates the current master\ndictionary.",
            "cust\n     001 q\n     002\n     003 customer-file"
        ]
    },
    {
        "name":"Synonyms",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Sysbase",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"System delimiters",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"System privileges",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Tape handling commands",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Tape socket",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Transaction logger",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[
            "Example(s)",
            "This sequence allows all updates to the invoices file to be\nenqueued for writing to the SCT drive.",
            "set-dptr +l invoices (f\ninvoices : D -> DL\ninvoices : D -> DL\nset-sct\nBlock size: 16384\n[1709] Tape device is assigned to med density (150M) quarter inch tape (SCT).\nstartlog\nActivate transaction logger (y\/n)? y\n[607] Transaction logger started.",
            "This command writes a file mark on the tape and releases it from\nthe transaction logger,t-det.\nUpdates are enqueued automatically. This is reel one.",
            "stoplog\n[602] The transaction logger is disabled.",
            "This restarts the logger to the SCT drive on behalf of reel\ntwo.",
            "startlog\n[607] Transaction logger started."
        ]
    },
    {
        "name":"UNIX files",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"User exits",
        "Syntax":[
            "Syntax",
            "u number\nu$ mode.name\nu? mode.name\n"
        ],
        "description":[
            "User exits allow direct references to assembler routines known as modes. These are generally not needed for new applications and are provided primarily for backwards compatibility and specialty utilities that must access internal structures.",
            "The unumber syntax is the standard way to call pre-defined user exits. The number is a 4-digit hexadecimal number. Leading zeros can be omitted.",
            "Users with assembly accounts can also enter their code via user exits. The standard way to do this is with the u$mode.name syntax that jumps directly into the mode called  mode.name. Every user exit call of this type requires an ABS lookup.",
            "The user can initially use the u?mode.name syntax and store the result in a FlashBASIC variable. This does not execute the user exit, but returns a direct pointer to its location. After this, the mode can be repeatedly called by using that variables value as the conversion. This is much faster than the u?mode.name syntax because no further ABS lookups are needed. If the u?mode.name call returns a null, then the mode cannot be located.",
            "A numeric user exit that is not found in the user exit table is converted to a FlashBASIC call to a subroutine named u followed by the number (for example, u123). If the system(0) function is executed at the beginning of this subroutine, it returns a 1 for an iconv() call or a 0 for an oconv() call."
        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"User-ID",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Value",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Value mark",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"var",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Virtual machine",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Workgroup",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Notices",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    },
    {
        "name":"Corporate information",
        "Syntax":"",
        "description":[

        ],
        "parameter":"",
        "example":[

        ]
    }
]